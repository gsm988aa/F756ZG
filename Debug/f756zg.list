
f756zg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007284  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  08007458  08007458  00017458  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800785c  0800785c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800785c  0800785c  0001785c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007864  08007864  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007864  08007864  00017864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007868  08007868  00017868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800786c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  200001dc  08007a48  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000524  08007a48  00020524  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e5cc  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027ba  00000000  00000000  0002e7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  00030f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  00031a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027a7b  00000000  00000000  00032380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000db12  00000000  00000000  00059dfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eff81  00000000  00000000  0006790d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015788e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003798  00000000  00000000  001578e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800743c 	.word	0x0800743c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	0800743c 	.word	0x0800743c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ef2:	4b21      	ldr	r3, [pc, #132]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000ef4:	4a21      	ldr	r2, [pc, #132]	; (8000f7c <MX_ADC1_Init+0x9c>)
 8000ef6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ef8:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000efa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000efe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f00:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f06:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f0c:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f12:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f1a:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f20:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f22:	4a17      	ldr	r2, [pc, #92]	; (8000f80 <MX_ADC1_Init+0xa0>)
 8000f24:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f40:	480d      	ldr	r0, [pc, #52]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f42:	f000 fda1 	bl	8001a88 <HAL_ADC_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f4c:	f000 faa8 	bl	80014a0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f54:	2301      	movs	r3, #1
 8000f56:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4805      	ldr	r0, [pc, #20]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f62:	f000 feed 	bl	8001d40 <HAL_ADC_ConfigChannel>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f6c:	f000 fa98 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f70:	bf00      	nop
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000210 	.word	0x20000210
 8000f7c:	40012000 	.word	0x40012000
 8000f80:	0f000001 	.word	0x0f000001

08000f84 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a2d      	ldr	r2, [pc, #180]	; (8001058 <HAL_ADC_MspInit+0xd4>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d153      	bne.n	800104e <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fa6:	4b2d      	ldr	r3, [pc, #180]	; (800105c <HAL_ADC_MspInit+0xd8>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	4a2c      	ldr	r2, [pc, #176]	; (800105c <HAL_ADC_MspInit+0xd8>)
 8000fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb2:	4b2a      	ldr	r3, [pc, #168]	; (800105c <HAL_ADC_MspInit+0xd8>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	4b27      	ldr	r3, [pc, #156]	; (800105c <HAL_ADC_MspInit+0xd8>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a26      	ldr	r2, [pc, #152]	; (800105c <HAL_ADC_MspInit+0xd8>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b24      	ldr	r3, [pc, #144]	; (800105c <HAL_ADC_MspInit+0xd8>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	481d      	ldr	r0, [pc, #116]	; (8001060 <HAL_ADC_MspInit+0xdc>)
 8000fea:	f001 fdf9 	bl	8002be0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000fee:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8000ff0:	4a1d      	ldr	r2, [pc, #116]	; (8001068 <HAL_ADC_MspInit+0xe4>)
 8000ff2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ffa:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001000:	4b18      	ldr	r3, [pc, #96]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001006:	4b17      	ldr	r3, [pc, #92]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8001008:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800100c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8001010:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001014:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001016:	4b13      	ldr	r3, [pc, #76]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8001018:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800101c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8001020:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001024:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8001028:	2200      	movs	r2, #0
 800102a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800102c:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 800102e:	2200      	movs	r2, #0
 8001030:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001032:	480c      	ldr	r0, [pc, #48]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8001034:	f001 fa5c 	bl	80024f0 <HAL_DMA_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 800103e:	f000 fa2f 	bl	80014a0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a07      	ldr	r2, [pc, #28]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8001046:	639a      	str	r2, [r3, #56]	; 0x38
 8001048:	4a06      	ldr	r2, [pc, #24]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800104e:	bf00      	nop
 8001050:	3728      	adds	r7, #40	; 0x28
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40012000 	.word	0x40012000
 800105c:	40023800 	.word	0x40023800
 8001060:	40020000 	.word	0x40020000
 8001064:	20000258 	.word	0x20000258
 8001068:	40026410 	.word	0x40026410

0800106c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001072:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <MX_DMA_Init+0x38>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a0b      	ldr	r2, [pc, #44]	; (80010a4 <MX_DMA_Init+0x38>)
 8001078:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MX_DMA_Init+0x38>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2100      	movs	r1, #0
 800108e:	2038      	movs	r0, #56	; 0x38
 8001090:	f001 f9f7 	bl	8002482 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001094:	2038      	movs	r0, #56	; 0x38
 8001096:	f001 fa10 	bl	80024ba <HAL_NVIC_EnableIRQ>

}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800

080010a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010be:	4b3c      	ldr	r3, [pc, #240]	; (80011b0 <MX_GPIO_Init+0x108>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a3b      	ldr	r2, [pc, #236]	; (80011b0 <MX_GPIO_Init+0x108>)
 80010c4:	f043 0304 	orr.w	r3, r3, #4
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b39      	ldr	r3, [pc, #228]	; (80011b0 <MX_GPIO_Init+0x108>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0304 	and.w	r3, r3, #4
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010d6:	4b36      	ldr	r3, [pc, #216]	; (80011b0 <MX_GPIO_Init+0x108>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a35      	ldr	r2, [pc, #212]	; (80011b0 <MX_GPIO_Init+0x108>)
 80010dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b33      	ldr	r3, [pc, #204]	; (80011b0 <MX_GPIO_Init+0x108>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	4b30      	ldr	r3, [pc, #192]	; (80011b0 <MX_GPIO_Init+0x108>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a2f      	ldr	r2, [pc, #188]	; (80011b0 <MX_GPIO_Init+0x108>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b2d      	ldr	r3, [pc, #180]	; (80011b0 <MX_GPIO_Init+0x108>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001106:	4b2a      	ldr	r3, [pc, #168]	; (80011b0 <MX_GPIO_Init+0x108>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a29      	ldr	r2, [pc, #164]	; (80011b0 <MX_GPIO_Init+0x108>)
 800110c:	f043 0302 	orr.w	r3, r3, #2
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b27      	ldr	r3, [pc, #156]	; (80011b0 <MX_GPIO_Init+0x108>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800111e:	4b24      	ldr	r3, [pc, #144]	; (80011b0 <MX_GPIO_Init+0x108>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a23      	ldr	r2, [pc, #140]	; (80011b0 <MX_GPIO_Init+0x108>)
 8001124:	f043 0308 	orr.w	r3, r3, #8
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b21      	ldr	r3, [pc, #132]	; (80011b0 <MX_GPIO_Init+0x108>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0308 	and.w	r3, r3, #8
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001136:	2200      	movs	r2, #0
 8001138:	21ff      	movs	r1, #255	; 0xff
 800113a:	481e      	ldr	r0, [pc, #120]	; (80011b4 <MX_GPIO_Init+0x10c>)
 800113c:	f001 ff14 	bl	8002f68 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC4 PC5 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001140:	f64f 73b1 	movw	r3, #65457	; 0xffb1
 8001144:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001146:	2300      	movs	r3, #0
 8001148:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800114a:	2302      	movs	r3, #2
 800114c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	4619      	mov	r1, r3
 8001154:	4818      	ldr	r0, [pc, #96]	; (80011b8 <MX_GPIO_Init+0x110>)
 8001156:	f001 fd43 	bl	8002be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800115a:	23ff      	movs	r3, #255	; 0xff
 800115c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115e:	2301      	movs	r3, #1
 8001160:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	4810      	ldr	r0, [pc, #64]	; (80011b4 <MX_GPIO_Init+0x10c>)
 8001172:	f001 fd35 	bl	8002be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001176:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800117a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117c:	2300      	movs	r3, #0
 800117e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001180:	2302      	movs	r3, #2
 8001182:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4619      	mov	r1, r3
 800118a:	480c      	ldr	r0, [pc, #48]	; (80011bc <MX_GPIO_Init+0x114>)
 800118c:	f001 fd28 	bl	8002be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001190:	2340      	movs	r3, #64	; 0x40
 8001192:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001194:	2300      	movs	r3, #0
 8001196:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4619      	mov	r1, r3
 80011a2:	4805      	ldr	r0, [pc, #20]	; (80011b8 <MX_GPIO_Init+0x110>)
 80011a4:	f001 fd1c 	bl	8002be0 <HAL_GPIO_Init>

}
 80011a8:	bf00      	nop
 80011aa:	3728      	adds	r7, #40	; 0x28
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40020400 	.word	0x40020400
 80011b8:	40020800 	.word	0x40020800
 80011bc:	40020c00 	.word	0x40020c00

080011c0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80011c8:	1d39      	adds	r1, r7, #4
 80011ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011ce:	2201      	movs	r2, #1
 80011d0:	4803      	ldr	r0, [pc, #12]	; (80011e0 <__io_putchar+0x20>)
 80011d2:	f002 ffeb 	bl	80041ac <HAL_UART_Transmit>
  return ch;
 80011d6:	687b      	ldr	r3, [r7, #4]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000498 	.word	0x20000498

080011e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e8:	f000 fbf1 	bl	80019ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ec:	f000 f8c8 	bl	8001380 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f0:	f7ff ff5a 	bl	80010a8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80011f4:	f000 fa8a 	bl	800170c <MX_USART1_UART_Init>
  MX_DMA_Init();
 80011f8:	f7ff ff38 	bl	800106c <MX_DMA_Init>
  MX_ADC1_Init();
 80011fc:	f7ff fe70 	bl	8000ee0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_Value, 100);
 8001200:	2264      	movs	r2, #100	; 0x64
 8001202:	495a      	ldr	r1, [pc, #360]	; (800136c <main+0x188>)
 8001204:	485a      	ldr	r0, [pc, #360]	; (8001370 <main+0x18c>)
 8001206:	f000 fc83 	bl	8001b10 <HAL_ADC_Start_DMA>
//  HAL_ADC_Start(&hadc1);//启动ADC装换
//  HAL_ADC_PollForConversion(&hadc1, 10);//等待转换完成，第二个参数表示超时时间�?????????

    HAL_GPIO_WritePin(GPIOB,  GPIO_PIN_0, GPIO_PIN_SET);
 800120a:	2201      	movs	r2, #1
 800120c:	2101      	movs	r1, #1
 800120e:	4859      	ldr	r0, [pc, #356]	; (8001374 <main+0x190>)
 8001210:	f001 feaa 	bl	8002f68 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOB,  GPIO_PIN_1, GPIO_PIN_SET);
 8001214:	2201      	movs	r2, #1
 8001216:	2102      	movs	r1, #2
 8001218:	4856      	ldr	r0, [pc, #344]	; (8001374 <main+0x190>)
 800121a:	f001 fea5 	bl	8002f68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB,  GPIO_PIN_2, GPIO_PIN_SET);
 800121e:	2201      	movs	r2, #1
 8001220:	2104      	movs	r1, #4
 8001222:	4854      	ldr	r0, [pc, #336]	; (8001374 <main+0x190>)
 8001224:	f001 fea0 	bl	8002f68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB,  GPIO_PIN_3, GPIO_PIN_SET);
 8001228:	2201      	movs	r2, #1
 800122a:	2108      	movs	r1, #8
 800122c:	4851      	ldr	r0, [pc, #324]	; (8001374 <main+0x190>)
 800122e:	f001 fe9b 	bl	8002f68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB,  GPIO_PIN_4, GPIO_PIN_SET);
 8001232:	2201      	movs	r2, #1
 8001234:	2110      	movs	r1, #16
 8001236:	484f      	ldr	r0, [pc, #316]	; (8001374 <main+0x190>)
 8001238:	f001 fe96 	bl	8002f68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB,  GPIO_PIN_5, GPIO_PIN_SET);
 800123c:	2201      	movs	r2, #1
 800123e:	2120      	movs	r1, #32
 8001240:	484c      	ldr	r0, [pc, #304]	; (8001374 <main+0x190>)
 8001242:	f001 fe91 	bl	8002f68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB,  GPIO_PIN_6, GPIO_PIN_SET);
 8001246:	2201      	movs	r2, #1
 8001248:	2140      	movs	r1, #64	; 0x40
 800124a:	484a      	ldr	r0, [pc, #296]	; (8001374 <main+0x190>)
 800124c:	f001 fe8c 	bl	8002f68 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB,  GPIO_PIN_7, GPIO_PIN_SET);
 8001250:	2201      	movs	r2, #1
 8001252:	2180      	movs	r1, #128	; 0x80
 8001254:	4847      	ldr	r0, [pc, #284]	; (8001374 <main+0x190>)
 8001256:	f001 fe87 	bl	8002f68 <HAL_GPIO_WritePin>
//	  ad1 += ADC_Value[i++];
//	  }
//	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_Value, 100);
	//  printf(" %4.4f \n", ad1 );

	  pcx[0] = HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0);
 800125a:	2101      	movs	r1, #1
 800125c:	4846      	ldr	r0, [pc, #280]	; (8001378 <main+0x194>)
 800125e:	f001 fe6b 	bl	8002f38 <HAL_GPIO_ReadPin>
 8001262:	4603      	mov	r3, r0
 8001264:	461a      	mov	r2, r3
 8001266:	4b45      	ldr	r3, [pc, #276]	; (800137c <main+0x198>)
 8001268:	601a      	str	r2, [r3, #0]
	  pcx[1] = HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1);
 800126a:	2102      	movs	r1, #2
 800126c:	4842      	ldr	r0, [pc, #264]	; (8001378 <main+0x194>)
 800126e:	f001 fe63 	bl	8002f38 <HAL_GPIO_ReadPin>
 8001272:	4603      	mov	r3, r0
 8001274:	461a      	mov	r2, r3
 8001276:	4b41      	ldr	r3, [pc, #260]	; (800137c <main+0x198>)
 8001278:	605a      	str	r2, [r3, #4]
	  pcx[2] = HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_2);
 800127a:	2104      	movs	r1, #4
 800127c:	483e      	ldr	r0, [pc, #248]	; (8001378 <main+0x194>)
 800127e:	f001 fe5b 	bl	8002f38 <HAL_GPIO_ReadPin>
 8001282:	4603      	mov	r3, r0
 8001284:	461a      	mov	r2, r3
 8001286:	4b3d      	ldr	r3, [pc, #244]	; (800137c <main+0x198>)
 8001288:	609a      	str	r2, [r3, #8]
	  pcx[3] = HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3);
 800128a:	2108      	movs	r1, #8
 800128c:	483a      	ldr	r0, [pc, #232]	; (8001378 <main+0x194>)
 800128e:	f001 fe53 	bl	8002f38 <HAL_GPIO_ReadPin>
 8001292:	4603      	mov	r3, r0
 8001294:	461a      	mov	r2, r3
 8001296:	4b39      	ldr	r3, [pc, #228]	; (800137c <main+0x198>)
 8001298:	60da      	str	r2, [r3, #12]
	  pcx[4] = HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4);
 800129a:	2110      	movs	r1, #16
 800129c:	4836      	ldr	r0, [pc, #216]	; (8001378 <main+0x194>)
 800129e:	f001 fe4b 	bl	8002f38 <HAL_GPIO_ReadPin>
 80012a2:	4603      	mov	r3, r0
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b35      	ldr	r3, [pc, #212]	; (800137c <main+0x198>)
 80012a8:	611a      	str	r2, [r3, #16]
	  pcx[5] = HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_5);
 80012aa:	2120      	movs	r1, #32
 80012ac:	4832      	ldr	r0, [pc, #200]	; (8001378 <main+0x194>)
 80012ae:	f001 fe43 	bl	8002f38 <HAL_GPIO_ReadPin>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b31      	ldr	r3, [pc, #196]	; (800137c <main+0x198>)
 80012b8:	615a      	str	r2, [r3, #20]
	  pcx[6] = HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_6);
 80012ba:	2140      	movs	r1, #64	; 0x40
 80012bc:	482e      	ldr	r0, [pc, #184]	; (8001378 <main+0x194>)
 80012be:	f001 fe3b 	bl	8002f38 <HAL_GPIO_ReadPin>
 80012c2:	4603      	mov	r3, r0
 80012c4:	461a      	mov	r2, r3
 80012c6:	4b2d      	ldr	r3, [pc, #180]	; (800137c <main+0x198>)
 80012c8:	619a      	str	r2, [r3, #24]
	  pcx[7] = HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7);
 80012ca:	2180      	movs	r1, #128	; 0x80
 80012cc:	482a      	ldr	r0, [pc, #168]	; (8001378 <main+0x194>)
 80012ce:	f001 fe33 	bl	8002f38 <HAL_GPIO_ReadPin>
 80012d2:	4603      	mov	r3, r0
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b29      	ldr	r3, [pc, #164]	; (800137c <main+0x198>)
 80012d8:	61da      	str	r2, [r3, #28]
	  pcx[8] = HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8);
 80012da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012de:	4826      	ldr	r0, [pc, #152]	; (8001378 <main+0x194>)
 80012e0:	f001 fe2a 	bl	8002f38 <HAL_GPIO_ReadPin>
 80012e4:	4603      	mov	r3, r0
 80012e6:	461a      	mov	r2, r3
 80012e8:	4b24      	ldr	r3, [pc, #144]	; (800137c <main+0x198>)
 80012ea:	621a      	str	r2, [r3, #32]
	  pcx[9] = HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_9);
 80012ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012f0:	4821      	ldr	r0, [pc, #132]	; (8001378 <main+0x194>)
 80012f2:	f001 fe21 	bl	8002f38 <HAL_GPIO_ReadPin>
 80012f6:	4603      	mov	r3, r0
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b20      	ldr	r3, [pc, #128]	; (800137c <main+0x198>)
 80012fc:	625a      	str	r2, [r3, #36]	; 0x24
	  pcx[10] = HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_10);
 80012fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001302:	481d      	ldr	r0, [pc, #116]	; (8001378 <main+0x194>)
 8001304:	f001 fe18 	bl	8002f38 <HAL_GPIO_ReadPin>
 8001308:	4603      	mov	r3, r0
 800130a:	461a      	mov	r2, r3
 800130c:	4b1b      	ldr	r3, [pc, #108]	; (800137c <main+0x198>)
 800130e:	629a      	str	r2, [r3, #40]	; 0x28
	  pcx[11] = HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_11);
 8001310:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001314:	4818      	ldr	r0, [pc, #96]	; (8001378 <main+0x194>)
 8001316:	f001 fe0f 	bl	8002f38 <HAL_GPIO_ReadPin>
 800131a:	4603      	mov	r3, r0
 800131c:	461a      	mov	r2, r3
 800131e:	4b17      	ldr	r3, [pc, #92]	; (800137c <main+0x198>)
 8001320:	62da      	str	r2, [r3, #44]	; 0x2c
	  pcx[12] = HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_12);
 8001322:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001326:	4814      	ldr	r0, [pc, #80]	; (8001378 <main+0x194>)
 8001328:	f001 fe06 	bl	8002f38 <HAL_GPIO_ReadPin>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <main+0x198>)
 8001332:	631a      	str	r2, [r3, #48]	; 0x30
	  pcx[13] = HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_13);
 8001334:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001338:	480f      	ldr	r0, [pc, #60]	; (8001378 <main+0x194>)
 800133a:	f001 fdfd 	bl	8002f38 <HAL_GPIO_ReadPin>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <main+0x198>)
 8001344:	635a      	str	r2, [r3, #52]	; 0x34
	  pcx[14] = HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_14);
 8001346:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800134a:	480b      	ldr	r0, [pc, #44]	; (8001378 <main+0x194>)
 800134c:	f001 fdf4 	bl	8002f38 <HAL_GPIO_ReadPin>
 8001350:	4603      	mov	r3, r0
 8001352:	461a      	mov	r2, r3
 8001354:	4b09      	ldr	r3, [pc, #36]	; (800137c <main+0x198>)
 8001356:	639a      	str	r2, [r3, #56]	; 0x38
	  pcx[15] = HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_15);
 8001358:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800135c:	4806      	ldr	r0, [pc, #24]	; (8001378 <main+0x194>)
 800135e:	f001 fdeb 	bl	8002f38 <HAL_GPIO_ReadPin>
 8001362:	4603      	mov	r3, r0
 8001364:	461a      	mov	r2, r3
 8001366:	4b05      	ldr	r3, [pc, #20]	; (800137c <main+0x198>)
 8001368:	63da      	str	r2, [r3, #60]	; 0x3c
	  pcx[0] = HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0);
 800136a:	e776      	b.n	800125a <main+0x76>
 800136c:	200002bc 	.word	0x200002bc
 8001370:	20000210 	.word	0x20000210
 8001374:	40020400 	.word	0x40020400
 8001378:	40020c00 	.word	0x40020c00
 800137c:	20000454 	.word	0x20000454

08001380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b0b4      	sub	sp, #208	; 0xd0
 8001384:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001386:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800138a:	2230      	movs	r2, #48	; 0x30
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f003 fb86 	bl	8004aa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001394:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013a4:	f107 0308 	add.w	r3, r7, #8
 80013a8:	2284      	movs	r2, #132	; 0x84
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f003 fb77 	bl	8004aa0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b2:	4b39      	ldr	r3, [pc, #228]	; (8001498 <SystemClock_Config+0x118>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	4a38      	ldr	r2, [pc, #224]	; (8001498 <SystemClock_Config+0x118>)
 80013b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013bc:	6413      	str	r3, [r2, #64]	; 0x40
 80013be:	4b36      	ldr	r3, [pc, #216]	; (8001498 <SystemClock_Config+0x118>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ca:	4b34      	ldr	r3, [pc, #208]	; (800149c <SystemClock_Config+0x11c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a33      	ldr	r2, [pc, #204]	; (800149c <SystemClock_Config+0x11c>)
 80013d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	4b31      	ldr	r3, [pc, #196]	; (800149c <SystemClock_Config+0x11c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013e2:	2302      	movs	r3, #2
 80013e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013e8:	2301      	movs	r3, #1
 80013ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ee:	2310      	movs	r3, #16
 80013f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f4:	2302      	movs	r3, #2
 80013f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001400:	2308      	movs	r3, #8
 8001402:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001406:	23d8      	movs	r3, #216	; 0xd8
 8001408:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800140c:	2302      	movs	r3, #2
 800140e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001412:	2302      	movs	r3, #2
 8001414:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001418:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800141c:	4618      	mov	r0, r3
 800141e:	f001 fe0d 	bl	800303c <HAL_RCC_OscConfig>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001428:	f000 f83a 	bl	80014a0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800142c:	f001 fdb6 	bl	8002f9c <HAL_PWREx_EnableOverDrive>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001436:	f000 f833 	bl	80014a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800143a:	230f      	movs	r3, #15
 800143c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001440:	2302      	movs	r3, #2
 8001442:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001446:	2300      	movs	r3, #0
 8001448:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800144c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001450:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001458:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800145c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001460:	2107      	movs	r1, #7
 8001462:	4618      	mov	r0, r3
 8001464:	f002 f88e 	bl	8003584 <HAL_RCC_ClockConfig>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800146e:	f000 f817 	bl	80014a0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001472:	2340      	movs	r3, #64	; 0x40
 8001474:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001476:	2300      	movs	r3, #0
 8001478:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800147a:	f107 0308 	add.w	r3, r7, #8
 800147e:	4618      	mov	r0, r3
 8001480:	f002 fa56 	bl	8003930 <HAL_RCCEx_PeriphCLKConfig>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <SystemClock_Config+0x10e>
  {
    Error_Handler();
 800148a:	f000 f809 	bl	80014a0 <Error_Handler>
  }
}
 800148e:	bf00      	nop
 8001490:	37d0      	adds	r7, #208	; 0xd0
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023800 	.word	0x40023800
 800149c:	40007000 	.word	0x40007000

080014a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a4:	b672      	cpsid	i
}
 80014a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <Error_Handler+0x8>
	...

080014ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014b2:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <HAL_MspInit+0x44>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	4a0e      	ldr	r2, [pc, #56]	; (80014f0 <HAL_MspInit+0x44>)
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014bc:	6413      	str	r3, [r2, #64]	; 0x40
 80014be:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <HAL_MspInit+0x44>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ca:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <HAL_MspInit+0x44>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ce:	4a08      	ldr	r2, [pc, #32]	; (80014f0 <HAL_MspInit+0x44>)
 80014d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014d4:	6453      	str	r3, [r2, #68]	; 0x44
 80014d6:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <HAL_MspInit+0x44>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40023800 	.word	0x40023800

080014f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <NMI_Handler+0x4>

080014fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fe:	e7fe      	b.n	80014fe <HardFault_Handler+0x4>

08001500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001504:	e7fe      	b.n	8001504 <MemManage_Handler+0x4>

08001506 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800150a:	e7fe      	b.n	800150a <BusFault_Handler+0x4>

0800150c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <UsageFault_Handler+0x4>

08001512 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001540:	f000 fa82 	bl	8001a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}

08001548 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800154c:	4802      	ldr	r0, [pc, #8]	; (8001558 <DMA2_Stream0_IRQHandler+0x10>)
 800154e:	f001 f8dd 	bl	800270c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000258 	.word	0x20000258

0800155c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
	return 1;
 8001560:	2301      	movs	r3, #1
}
 8001562:	4618      	mov	r0, r3
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <_kill>:

int _kill(int pid, int sig)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001576:	f003 fa61 	bl	8004a3c <__errno>
 800157a:	4603      	mov	r3, r0
 800157c:	2216      	movs	r2, #22
 800157e:	601a      	str	r2, [r3, #0]
	return -1;
 8001580:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <_exit>:

void _exit (int status)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001594:	f04f 31ff 	mov.w	r1, #4294967295
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff ffe7 	bl	800156c <_kill>
	while (1) {}		/* Make sure we hang here */
 800159e:	e7fe      	b.n	800159e <_exit+0x12>

080015a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	e00a      	b.n	80015c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015b2:	f3af 8000 	nop.w
 80015b6:	4601      	mov	r1, r0
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	60ba      	str	r2, [r7, #8]
 80015be:	b2ca      	uxtb	r2, r1
 80015c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	3301      	adds	r3, #1
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	697a      	ldr	r2, [r7, #20]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	dbf0      	blt.n	80015b2 <_read+0x12>
	}

return len;
 80015d0:	687b      	ldr	r3, [r7, #4]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b086      	sub	sp, #24
 80015de:	af00      	add	r7, sp, #0
 80015e0:	60f8      	str	r0, [r7, #12]
 80015e2:	60b9      	str	r1, [r7, #8]
 80015e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	e009      	b.n	8001600 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	1c5a      	adds	r2, r3, #1
 80015f0:	60ba      	str	r2, [r7, #8]
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fde3 	bl	80011c0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	3301      	adds	r3, #1
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	697a      	ldr	r2, [r7, #20]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	429a      	cmp	r2, r3
 8001606:	dbf1      	blt.n	80015ec <_write+0x12>
	}
	return len;
 8001608:	687b      	ldr	r3, [r7, #4]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <_close>:

int _close(int file)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
	return -1;
 800161a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800163a:	605a      	str	r2, [r3, #4]
	return 0;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <_isatty>:

int _isatty(int file)
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
	return 1;
 8001652:	2301      	movs	r3, #1
}
 8001654:	4618      	mov	r0, r3
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
	return 0;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001684:	4a14      	ldr	r2, [pc, #80]	; (80016d8 <_sbrk+0x5c>)
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <_sbrk+0x60>)
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001690:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <_sbrk+0x64>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d102      	bne.n	800169e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001698:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <_sbrk+0x64>)
 800169a:	4a12      	ldr	r2, [pc, #72]	; (80016e4 <_sbrk+0x68>)
 800169c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800169e:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <_sbrk+0x64>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d207      	bcs.n	80016bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016ac:	f003 f9c6 	bl	8004a3c <__errno>
 80016b0:	4603      	mov	r3, r0
 80016b2:	220c      	movs	r2, #12
 80016b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016b6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ba:	e009      	b.n	80016d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016bc:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <_sbrk+0x64>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016c2:	4b07      	ldr	r3, [pc, #28]	; (80016e0 <_sbrk+0x64>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	4a05      	ldr	r2, [pc, #20]	; (80016e0 <_sbrk+0x64>)
 80016cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ce:	68fb      	ldr	r3, [r7, #12]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3718      	adds	r7, #24
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20050000 	.word	0x20050000
 80016dc:	00000400 	.word	0x00000400
 80016e0:	200001f8 	.word	0x200001f8
 80016e4:	20000528 	.word	0x20000528

080016e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <SystemInit+0x20>)
 80016ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016f2:	4a05      	ldr	r2, [pc, #20]	; (8001708 <SystemInit+0x20>)
 80016f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001710:	4b14      	ldr	r3, [pc, #80]	; (8001764 <MX_USART1_UART_Init+0x58>)
 8001712:	4a15      	ldr	r2, [pc, #84]	; (8001768 <MX_USART1_UART_Init+0x5c>)
 8001714:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001716:	4b13      	ldr	r3, [pc, #76]	; (8001764 <MX_USART1_UART_Init+0x58>)
 8001718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800171c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800171e:	4b11      	ldr	r3, [pc, #68]	; (8001764 <MX_USART1_UART_Init+0x58>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001724:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <MX_USART1_UART_Init+0x58>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <MX_USART1_UART_Init+0x58>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001730:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <MX_USART1_UART_Init+0x58>)
 8001732:	220c      	movs	r2, #12
 8001734:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001736:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <MX_USART1_UART_Init+0x58>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800173c:	4b09      	ldr	r3, [pc, #36]	; (8001764 <MX_USART1_UART_Init+0x58>)
 800173e:	2200      	movs	r2, #0
 8001740:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001742:	4b08      	ldr	r3, [pc, #32]	; (8001764 <MX_USART1_UART_Init+0x58>)
 8001744:	2200      	movs	r2, #0
 8001746:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <MX_USART1_UART_Init+0x58>)
 800174a:	2200      	movs	r2, #0
 800174c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800174e:	4805      	ldr	r0, [pc, #20]	; (8001764 <MX_USART1_UART_Init+0x58>)
 8001750:	f002 fcde 	bl	8004110 <HAL_UART_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800175a:	f7ff fea1 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000498 	.word	0x20000498
 8001768:	40011000 	.word	0x40011000

0800176c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08a      	sub	sp, #40	; 0x28
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a17      	ldr	r2, [pc, #92]	; (80017e8 <HAL_UART_MspInit+0x7c>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d128      	bne.n	80017e0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800178e:	4b17      	ldr	r3, [pc, #92]	; (80017ec <HAL_UART_MspInit+0x80>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	4a16      	ldr	r2, [pc, #88]	; (80017ec <HAL_UART_MspInit+0x80>)
 8001794:	f043 0310 	orr.w	r3, r3, #16
 8001798:	6453      	str	r3, [r2, #68]	; 0x44
 800179a:	4b14      	ldr	r3, [pc, #80]	; (80017ec <HAL_UART_MspInit+0x80>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	f003 0310 	and.w	r3, r3, #16
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a6:	4b11      	ldr	r3, [pc, #68]	; (80017ec <HAL_UART_MspInit+0x80>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a10      	ldr	r2, [pc, #64]	; (80017ec <HAL_UART_MspInit+0x80>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <HAL_UART_MspInit+0x80>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017be:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017cc:	2303      	movs	r3, #3
 80017ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017d0:	2307      	movs	r3, #7
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	4619      	mov	r1, r3
 80017da:	4805      	ldr	r0, [pc, #20]	; (80017f0 <HAL_UART_MspInit+0x84>)
 80017dc:	f001 fa00 	bl	8002be0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80017e0:	bf00      	nop
 80017e2:	3728      	adds	r7, #40	; 0x28
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40011000 	.word	0x40011000
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40020000 	.word	0x40020000

080017f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800182c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017f8:	480d      	ldr	r0, [pc, #52]	; (8001830 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017fa:	490e      	ldr	r1, [pc, #56]	; (8001834 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017fc:	4a0e      	ldr	r2, [pc, #56]	; (8001838 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001800:	e002      	b.n	8001808 <LoopCopyDataInit>

08001802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001806:	3304      	adds	r3, #4

08001808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800180c:	d3f9      	bcc.n	8001802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180e:	4a0b      	ldr	r2, [pc, #44]	; (800183c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001810:	4c0b      	ldr	r4, [pc, #44]	; (8001840 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001814:	e001      	b.n	800181a <LoopFillZerobss>

08001816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001818:	3204      	adds	r2, #4

0800181a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800181c:	d3fb      	bcc.n	8001816 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800181e:	f7ff ff63 	bl	80016e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001822:	f003 f911 	bl	8004a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001826:	f7ff fcdd 	bl	80011e4 <main>
  bx  lr    
 800182a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800182c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001834:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001838:	0800786c 	.word	0x0800786c
  ldr r2, =_sbss
 800183c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001840:	20000524 	.word	0x20000524

08001844 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001844:	e7fe      	b.n	8001844 <ADC_IRQHandler>

08001846 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d104      	bne.n	800185e <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001854:	b672      	cpsid	i
}
 8001856:	bf00      	nop
 8001858:	f7ff fe22 	bl	80014a0 <Error_Handler>
 800185c:	e7fe      	b.n	800185c <stm32_lock_init+0x16>
  lock->flag = 0;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	701a      	strb	r2, [r3, #0]
  lock->counter = 0;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	705a      	strb	r2, [r3, #1]
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b084      	sub	sp, #16
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800187a:	f3ef 8310 	mrs	r3, PRIMASK
 800187e:	60bb      	str	r3, [r7, #8]
  return(result);
 8001880:	68bb      	ldr	r3, [r7, #8]
  uint8_t flag = (uint8_t)(__get_PRIMASK() & 0x1); /* PRIMASK.PM */
 8001882:	b2db      	uxtb	r3, r3
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 800188a:	b672      	cpsid	i
}
 800188c:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800188e:	f3bf 8f4f 	dsb	sy
}
 8001892:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001894:	f3bf 8f6f 	isb	sy
}
 8001898:	bf00      	nop
  __disable_irq();
  __DSB();
  __ISB();
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d104      	bne.n	80018aa <stm32_lock_acquire+0x38>
  __ASM volatile ("cpsid i" : : : "memory");
 80018a0:	b672      	cpsid	i
}
 80018a2:	bf00      	nop
 80018a4:	f7ff fdfc 	bl	80014a0 <Error_Handler>
 80018a8:	e7fe      	b.n	80018a8 <stm32_lock_acquire+0x36>
  if (lock->counter == 0)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	785b      	ldrb	r3, [r3, #1]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d103      	bne.n	80018ba <stm32_lock_acquire+0x48>
  {
    lock->flag = flag;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	7bfa      	ldrb	r2, [r7, #15]
 80018b6:	701a      	strb	r2, [r3, #0]
 80018b8:	e008      	b.n	80018cc <stm32_lock_acquire+0x5a>
  }
  else if (lock->counter == UINT8_MAX)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	785b      	ldrb	r3, [r3, #1]
 80018be:	2bff      	cmp	r3, #255	; 0xff
 80018c0:	d104      	bne.n	80018cc <stm32_lock_acquire+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 80018c2:	b672      	cpsid	i
}
 80018c4:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 80018c6:	f7ff fdeb 	bl	80014a0 <Error_Handler>
 80018ca:	e7fe      	b.n	80018ca <stm32_lock_acquire+0x58>
  }
  lock->counter++;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	785b      	ldrb	r3, [r3, #1]
 80018d0:	3301      	adds	r3, #1
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	705a      	strb	r2, [r3, #1]
}
 80018d8:	bf00      	nop
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d104      	bne.n	80018f8 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80018ee:	b672      	cpsid	i
}
 80018f0:	bf00      	nop
 80018f2:	f7ff fdd5 	bl	80014a0 <Error_Handler>
 80018f6:	e7fe      	b.n	80018f6 <stm32_lock_release+0x16>
  if (lock->counter == 0)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	785b      	ldrb	r3, [r3, #1]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d104      	bne.n	800190a <stm32_lock_release+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001900:	b672      	cpsid	i
}
 8001902:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8001904:	f7ff fdcc 	bl	80014a0 <Error_Handler>
 8001908:	e7fe      	b.n	8001908 <stm32_lock_release+0x28>
  }
  lock->counter--;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	785b      	ldrb	r3, [r3, #1]
 800190e:	3b01      	subs	r3, #1
 8001910:	b2da      	uxtb	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	705a      	strb	r2, [r3, #1]
  if (lock->counter == 0 && lock->flag == 0)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	785b      	ldrb	r3, [r3, #1]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d105      	bne.n	800192a <stm32_lock_release+0x4a>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <stm32_lock_release+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
 8001926:	b662      	cpsie	i
}
 8001928:	bf00      	nop
  {
    __enable_irq();
  }
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d105      	bne.n	800194c <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8001940:	f003 f87c 	bl	8004a3c <__errno>
 8001944:	4603      	mov	r3, r0
 8001946:	2216      	movs	r2, #22
 8001948:	601a      	str	r2, [r3, #0]
    return;
 800194a:	e015      	b.n	8001978 <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 800194c:	2002      	movs	r0, #2
 800194e:	f003 f89f 	bl	8004a90 <malloc>
 8001952:	4603      	mov	r3, r0
 8001954:	461a      	mov	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d005      	beq.n	800196e <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff ff6d 	bl	8001846 <stm32_lock_init>
    return;
 800196c:	e004      	b.n	8001978 <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 800196e:	b672      	cpsid	i
}
 8001970:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8001972:	f7ff fd95 	bl	80014a0 <Error_Handler>
 8001976:	e7fe      	b.n	8001976 <__retarget_lock_init_recursive+0x44>
}
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d104      	bne.n	8001996 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800198c:	b672      	cpsid	i
}
 800198e:	bf00      	nop
 8001990:	f7ff fd86 	bl	80014a0 <Error_Handler>
 8001994:	e7fe      	b.n	8001994 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff6a 	bl	8001872 <stm32_lock_acquire>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d104      	bne.n	80019be <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80019b4:	b672      	cpsid	i
}
 80019b6:	bf00      	nop
 80019b8:	f7ff fd72 	bl	80014a0 <Error_Handler>
 80019bc:	e7fe      	b.n	80019bc <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff ff8d 	bl	80018e0 <stm32_lock_release>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019d2:	2003      	movs	r0, #3
 80019d4:	f000 fd4a 	bl	800246c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019d8:	200f      	movs	r0, #15
 80019da:	f000 f805 	bl	80019e8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80019de:	f7ff fd65 	bl	80014ac <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019f0:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <HAL_InitTick+0x54>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <HAL_InitTick+0x58>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	4619      	mov	r1, r3
 80019fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 fd65 	bl	80024d6 <HAL_SYSTICK_Config>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e00e      	b.n	8001a34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b0f      	cmp	r3, #15
 8001a1a:	d80a      	bhi.n	8001a32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	f04f 30ff 	mov.w	r0, #4294967295
 8001a24:	f000 fd2d 	bl	8002482 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a28:	4a06      	ldr	r2, [pc, #24]	; (8001a44 <HAL_InitTick+0x5c>)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	e000      	b.n	8001a34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3708      	adds	r7, #8
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000000 	.word	0x20000000
 8001a40:	20000008 	.word	0x20000008
 8001a44:	20000004 	.word	0x20000004

08001a48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <HAL_IncTick+0x20>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	461a      	mov	r2, r3
 8001a52:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <HAL_IncTick+0x24>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4413      	add	r3, r2
 8001a58:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <HAL_IncTick+0x24>)
 8001a5a:	6013      	str	r3, [r2, #0]
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	20000008 	.word	0x20000008
 8001a6c:	2000051c 	.word	0x2000051c

08001a70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return uwTick;
 8001a74:	4b03      	ldr	r3, [pc, #12]	; (8001a84 <HAL_GetTick+0x14>)
 8001a76:	681b      	ldr	r3, [r3, #0]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	2000051c 	.word	0x2000051c

08001a88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a90:	2300      	movs	r3, #0
 8001a92:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e031      	b.n	8001b02 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d109      	bne.n	8001aba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff fa6c 	bl	8000f84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	f003 0310 	and.w	r3, r3, #16
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d116      	bne.n	8001af4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aca:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <HAL_ADC_Init+0x84>)
 8001acc:	4013      	ands	r3, r2
 8001ace:	f043 0202 	orr.w	r2, r3, #2
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 fa7c 	bl	8001fd4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f023 0303 	bic.w	r3, r3, #3
 8001aea:	f043 0201 	orr.w	r2, r3, #1
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	641a      	str	r2, [r3, #64]	; 0x40
 8001af2:	e001      	b.n	8001af8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	ffffeefd 	.word	0xffffeefd

08001b10 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d101      	bne.n	8001b2e <HAL_ADC_Start_DMA+0x1e>
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	e0d4      	b.n	8001cd8 <HAL_ADC_Start_DMA+0x1c8>
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d018      	beq.n	8001b76 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f042 0201 	orr.w	r2, r2, #1
 8001b52:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001b54:	4b62      	ldr	r3, [pc, #392]	; (8001ce0 <HAL_ADC_Start_DMA+0x1d0>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a62      	ldr	r2, [pc, #392]	; (8001ce4 <HAL_ADC_Start_DMA+0x1d4>)
 8001b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5e:	0c9a      	lsrs	r2, r3, #18
 8001b60:	4613      	mov	r3, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4413      	add	r3, r2
 8001b66:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001b68:	e002      	b.n	8001b70 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f9      	bne.n	8001b6a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	f040 809c 	bne.w	8001cbe <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b8a:	4b57      	ldr	r3, [pc, #348]	; (8001ce8 <HAL_ADC_Start_DMA+0x1d8>)
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d007      	beq.n	8001bb4 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bc0:	d106      	bne.n	8001bd0 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	f023 0206 	bic.w	r2, r3, #6
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	645a      	str	r2, [r3, #68]	; 0x44
 8001bce:	e002      	b.n	8001bd6 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be2:	4a42      	ldr	r2, [pc, #264]	; (8001cec <HAL_ADC_Start_DMA+0x1dc>)
 8001be4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bea:	4a41      	ldr	r2, [pc, #260]	; (8001cf0 <HAL_ADC_Start_DMA+0x1e0>)
 8001bec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf2:	4a40      	ldr	r2, [pc, #256]	; (8001cf4 <HAL_ADC_Start_DMA+0x1e4>)
 8001bf4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001bfe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	685a      	ldr	r2, [r3, #4]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001c0e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689a      	ldr	r2, [r3, #8]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c1e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	334c      	adds	r3, #76	; 0x4c
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	68ba      	ldr	r2, [r7, #8]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f000 fd0c 	bl	800264c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001c34:	4b30      	ldr	r3, [pc, #192]	; (8001cf8 <HAL_ADC_Start_DMA+0x1e8>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 031f 	and.w	r3, r3, #31
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d10f      	bne.n	8001c60 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d143      	bne.n	8001cd6 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	e03a      	b.n	8001cd6 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a25      	ldr	r2, [pc, #148]	; (8001cfc <HAL_ADC_Start_DMA+0x1ec>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d10e      	bne.n	8001c88 <HAL_ADC_Start_DMA+0x178>
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d107      	bne.n	8001c88 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c86:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001c88:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <HAL_ADC_Start_DMA+0x1e8>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 0310 	and.w	r3, r3, #16
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d120      	bne.n	8001cd6 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a19      	ldr	r2, [pc, #100]	; (8001d00 <HAL_ADC_Start_DMA+0x1f0>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d11b      	bne.n	8001cd6 <HAL_ADC_Start_DMA+0x1c6>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d114      	bne.n	8001cd6 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	e00b      	b.n	8001cd6 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f043 0210 	orr.w	r2, r3, #16
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	f043 0201 	orr.w	r2, r3, #1
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20000000 	.word	0x20000000
 8001ce4:	431bde83 	.word	0x431bde83
 8001ce8:	fffff8fe 	.word	0xfffff8fe
 8001cec:	080021c9 	.word	0x080021c9
 8001cf0:	08002283 	.word	0x08002283
 8001cf4:	0800229f 	.word	0x0800229f
 8001cf8:	40012300 	.word	0x40012300
 8001cfc:	40012000 	.word	0x40012000
 8001d00:	40012200 	.word	0x40012200

08001d04 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d101      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x1c>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	e12a      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0x272>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2b09      	cmp	r3, #9
 8001d6a:	d93a      	bls.n	8001de2 <HAL_ADC_ConfigChannel+0xa2>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d74:	d035      	beq.n	8001de2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68d9      	ldr	r1, [r3, #12]
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	461a      	mov	r2, r3
 8001d84:	4613      	mov	r3, r2
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4413      	add	r3, r2
 8001d8a:	3b1e      	subs	r3, #30
 8001d8c:	2207      	movs	r2, #7
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43da      	mvns	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	400a      	ands	r2, r1
 8001d9a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a87      	ldr	r2, [pc, #540]	; (8001fc0 <HAL_ADC_ConfigChannel+0x280>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d10a      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68d9      	ldr	r1, [r3, #12]
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	061a      	lsls	r2, r3, #24
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dba:	e035      	b.n	8001e28 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68d9      	ldr	r1, [r3, #12]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	4618      	mov	r0, r3
 8001dce:	4603      	mov	r3, r0
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	4403      	add	r3, r0
 8001dd4:	3b1e      	subs	r3, #30
 8001dd6:	409a      	lsls	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001de0:	e022      	b.n	8001e28 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6919      	ldr	r1, [r3, #16]
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	461a      	mov	r2, r3
 8001df0:	4613      	mov	r3, r2
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	4413      	add	r3, r2
 8001df6:	2207      	movs	r2, #7
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43da      	mvns	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	400a      	ands	r2, r1
 8001e04:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6919      	ldr	r1, [r3, #16]
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	4618      	mov	r0, r3
 8001e18:	4603      	mov	r3, r0
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	4403      	add	r3, r0
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b06      	cmp	r3, #6
 8001e2e:	d824      	bhi.n	8001e7a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	3b05      	subs	r3, #5
 8001e42:	221f      	movs	r2, #31
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43da      	mvns	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	400a      	ands	r2, r1
 8001e50:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	4618      	mov	r0, r3
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685a      	ldr	r2, [r3, #4]
 8001e64:	4613      	mov	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	3b05      	subs	r3, #5
 8001e6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	635a      	str	r2, [r3, #52]	; 0x34
 8001e78:	e04c      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b0c      	cmp	r3, #12
 8001e80:	d824      	bhi.n	8001ecc <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	3b23      	subs	r3, #35	; 0x23
 8001e94:	221f      	movs	r2, #31
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43da      	mvns	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	400a      	ands	r2, r1
 8001ea2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	3b23      	subs	r3, #35	; 0x23
 8001ebe:	fa00 f203 	lsl.w	r2, r0, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	631a      	str	r2, [r3, #48]	; 0x30
 8001eca:	e023      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685a      	ldr	r2, [r3, #4]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4413      	add	r3, r2
 8001edc:	3b41      	subs	r3, #65	; 0x41
 8001ede:	221f      	movs	r2, #31
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43da      	mvns	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	400a      	ands	r2, r1
 8001eec:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	4618      	mov	r0, r3
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	4613      	mov	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	3b41      	subs	r3, #65	; 0x41
 8001f08:	fa00 f203 	lsl.w	r2, r0, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a2a      	ldr	r2, [pc, #168]	; (8001fc4 <HAL_ADC_ConfigChannel+0x284>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d10a      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x1f4>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001f26:	d105      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001f28:	4b27      	ldr	r3, [pc, #156]	; (8001fc8 <HAL_ADC_ConfigChannel+0x288>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	4a26      	ldr	r2, [pc, #152]	; (8001fc8 <HAL_ADC_ConfigChannel+0x288>)
 8001f2e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001f32:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a22      	ldr	r2, [pc, #136]	; (8001fc4 <HAL_ADC_ConfigChannel+0x284>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d109      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x212>
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2b12      	cmp	r3, #18
 8001f44:	d105      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001f46:	4b20      	ldr	r3, [pc, #128]	; (8001fc8 <HAL_ADC_ConfigChannel+0x288>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	4a1f      	ldr	r2, [pc, #124]	; (8001fc8 <HAL_ADC_ConfigChannel+0x288>)
 8001f4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f50:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a1b      	ldr	r2, [pc, #108]	; (8001fc4 <HAL_ADC_ConfigChannel+0x284>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d125      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x268>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a17      	ldr	r2, [pc, #92]	; (8001fc0 <HAL_ADC_ConfigChannel+0x280>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d003      	beq.n	8001f6e <HAL_ADC_ConfigChannel+0x22e>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2b11      	cmp	r3, #17
 8001f6c:	d11c      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001f6e:	4b16      	ldr	r3, [pc, #88]	; (8001fc8 <HAL_ADC_ConfigChannel+0x288>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	4a15      	ldr	r2, [pc, #84]	; (8001fc8 <HAL_ADC_ConfigChannel+0x288>)
 8001f74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f78:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a10      	ldr	r2, [pc, #64]	; (8001fc0 <HAL_ADC_ConfigChannel+0x280>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d111      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001f84:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <HAL_ADC_ConfigChannel+0x28c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a11      	ldr	r2, [pc, #68]	; (8001fd0 <HAL_ADC_ConfigChannel+0x290>)
 8001f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8e:	0c9a      	lsrs	r2, r3, #18
 8001f90:	4613      	mov	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001f9a:	e002      	b.n	8001fa2 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1f9      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3714      	adds	r7, #20
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	10000012 	.word	0x10000012
 8001fc4:	40012000 	.word	0x40012000
 8001fc8:	40012300 	.word	0x40012300
 8001fcc:	20000000 	.word	0x20000000
 8001fd0:	431bde83 	.word	0x431bde83

08001fd4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001fdc:	4b78      	ldr	r3, [pc, #480]	; (80021c0 <ADC_Init+0x1ec>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	4a77      	ldr	r2, [pc, #476]	; (80021c0 <ADC_Init+0x1ec>)
 8001fe2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001fe6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001fe8:	4b75      	ldr	r3, [pc, #468]	; (80021c0 <ADC_Init+0x1ec>)
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	4973      	ldr	r1, [pc, #460]	; (80021c0 <ADC_Init+0x1ec>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002004:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6859      	ldr	r1, [r3, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	021a      	lsls	r2, r3, #8
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002028:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6859      	ldr	r1, [r3, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800204a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6899      	ldr	r1, [r3, #8]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	430a      	orrs	r2, r1
 800205c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002062:	4a58      	ldr	r2, [pc, #352]	; (80021c4 <ADC_Init+0x1f0>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d022      	beq.n	80020ae <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002076:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6899      	ldr	r1, [r3, #8]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002098:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6899      	ldr	r1, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	e00f      	b.n	80020ce <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0202 	bic.w	r2, r2, #2
 80020dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6899      	ldr	r1, [r3, #8]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	005a      	lsls	r2, r3, #1
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d01b      	beq.n	8002134 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800210a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800211a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6859      	ldr	r1, [r3, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002126:	3b01      	subs	r3, #1
 8002128:	035a      	lsls	r2, r3, #13
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	e007      	b.n	8002144 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002142:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002152:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	3b01      	subs	r3, #1
 8002160:	051a      	lsls	r2, r3, #20
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002178:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6899      	ldr	r1, [r3, #8]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002186:	025a      	lsls	r2, r3, #9
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	430a      	orrs	r2, r1
 800218e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689a      	ldr	r2, [r3, #8]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800219e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6899      	ldr	r1, [r3, #8]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	029a      	lsls	r2, r3, #10
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	609a      	str	r2, [r3, #8]
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	40012300 	.word	0x40012300
 80021c4:	0f000001 	.word	0x0f000001

080021c8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d13c      	bne.n	800225c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d12b      	bne.n	8002254 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002200:	2b00      	cmp	r3, #0
 8002202:	d127      	bne.n	8002254 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800220e:	2b00      	cmp	r3, #0
 8002210:	d006      	beq.n	8002220 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800221c:	2b00      	cmp	r3, #0
 800221e:	d119      	bne.n	8002254 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f022 0220 	bic.w	r2, r2, #32
 800222e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d105      	bne.n	8002254 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	f043 0201 	orr.w	r2, r3, #1
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f7ff fd55 	bl	8001d04 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800225a:	e00e      	b.n	800227a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	f003 0310 	and.w	r3, r3, #16
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f7ff fd5f 	bl	8001d2c <HAL_ADC_ErrorCallback>
}
 800226e:	e004      	b.n	800227a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	4798      	blx	r3
}
 800227a:	bf00      	nop
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b084      	sub	sp, #16
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800228e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f7ff fd41 	bl	8001d18 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002296:	bf00      	nop
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b084      	sub	sp, #16
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022aa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2240      	movs	r2, #64	; 0x40
 80022b0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b6:	f043 0204 	orr.w	r2, r3, #4
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f7ff fd34 	bl	8001d2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022c4:	bf00      	nop
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f003 0307 	and.w	r3, r3, #7
 80022da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022dc:	4b0b      	ldr	r3, [pc, #44]	; (800230c <__NVIC_SetPriorityGrouping+0x40>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022e8:	4013      	ands	r3, r2
 80022ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022f4:	4b06      	ldr	r3, [pc, #24]	; (8002310 <__NVIC_SetPriorityGrouping+0x44>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022fa:	4a04      	ldr	r2, [pc, #16]	; (800230c <__NVIC_SetPriorityGrouping+0x40>)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	60d3      	str	r3, [r2, #12]
}
 8002300:	bf00      	nop
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	e000ed00 	.word	0xe000ed00
 8002310:	05fa0000 	.word	0x05fa0000

08002314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002318:	4b04      	ldr	r3, [pc, #16]	; (800232c <__NVIC_GetPriorityGrouping+0x18>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	0a1b      	lsrs	r3, r3, #8
 800231e:	f003 0307 	and.w	r3, r3, #7
}
 8002322:	4618      	mov	r0, r3
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800233a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233e:	2b00      	cmp	r3, #0
 8002340:	db0b      	blt.n	800235a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	f003 021f 	and.w	r2, r3, #31
 8002348:	4907      	ldr	r1, [pc, #28]	; (8002368 <__NVIC_EnableIRQ+0x38>)
 800234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234e:	095b      	lsrs	r3, r3, #5
 8002350:	2001      	movs	r0, #1
 8002352:	fa00 f202 	lsl.w	r2, r0, r2
 8002356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	e000e100 	.word	0xe000e100

0800236c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	6039      	str	r1, [r7, #0]
 8002376:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237c:	2b00      	cmp	r3, #0
 800237e:	db0a      	blt.n	8002396 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	b2da      	uxtb	r2, r3
 8002384:	490c      	ldr	r1, [pc, #48]	; (80023b8 <__NVIC_SetPriority+0x4c>)
 8002386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238a:	0112      	lsls	r2, r2, #4
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	440b      	add	r3, r1
 8002390:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002394:	e00a      	b.n	80023ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	b2da      	uxtb	r2, r3
 800239a:	4908      	ldr	r1, [pc, #32]	; (80023bc <__NVIC_SetPriority+0x50>)
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	3b04      	subs	r3, #4
 80023a4:	0112      	lsls	r2, r2, #4
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	440b      	add	r3, r1
 80023aa:	761a      	strb	r2, [r3, #24]
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000e100 	.word	0xe000e100
 80023bc:	e000ed00 	.word	0xe000ed00

080023c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b089      	sub	sp, #36	; 0x24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f1c3 0307 	rsb	r3, r3, #7
 80023da:	2b04      	cmp	r3, #4
 80023dc:	bf28      	it	cs
 80023de:	2304      	movcs	r3, #4
 80023e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3304      	adds	r3, #4
 80023e6:	2b06      	cmp	r3, #6
 80023e8:	d902      	bls.n	80023f0 <NVIC_EncodePriority+0x30>
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3b03      	subs	r3, #3
 80023ee:	e000      	b.n	80023f2 <NVIC_EncodePriority+0x32>
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f4:	f04f 32ff 	mov.w	r2, #4294967295
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43da      	mvns	r2, r3
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	401a      	ands	r2, r3
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002408:	f04f 31ff 	mov.w	r1, #4294967295
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	fa01 f303 	lsl.w	r3, r1, r3
 8002412:	43d9      	mvns	r1, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002418:	4313      	orrs	r3, r2
         );
}
 800241a:	4618      	mov	r0, r3
 800241c:	3724      	adds	r7, #36	; 0x24
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
	...

08002428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3b01      	subs	r3, #1
 8002434:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002438:	d301      	bcc.n	800243e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800243a:	2301      	movs	r3, #1
 800243c:	e00f      	b.n	800245e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800243e:	4a0a      	ldr	r2, [pc, #40]	; (8002468 <SysTick_Config+0x40>)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3b01      	subs	r3, #1
 8002444:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002446:	210f      	movs	r1, #15
 8002448:	f04f 30ff 	mov.w	r0, #4294967295
 800244c:	f7ff ff8e 	bl	800236c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <SysTick_Config+0x40>)
 8002452:	2200      	movs	r2, #0
 8002454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002456:	4b04      	ldr	r3, [pc, #16]	; (8002468 <SysTick_Config+0x40>)
 8002458:	2207      	movs	r2, #7
 800245a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	e000e010 	.word	0xe000e010

0800246c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff ff29 	bl	80022cc <__NVIC_SetPriorityGrouping>
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002482:	b580      	push	{r7, lr}
 8002484:	b086      	sub	sp, #24
 8002486:	af00      	add	r7, sp, #0
 8002488:	4603      	mov	r3, r0
 800248a:	60b9      	str	r1, [r7, #8]
 800248c:	607a      	str	r2, [r7, #4]
 800248e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002494:	f7ff ff3e 	bl	8002314 <__NVIC_GetPriorityGrouping>
 8002498:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	6978      	ldr	r0, [r7, #20]
 80024a0:	f7ff ff8e 	bl	80023c0 <NVIC_EncodePriority>
 80024a4:	4602      	mov	r2, r0
 80024a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024aa:	4611      	mov	r1, r2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff ff5d 	bl	800236c <__NVIC_SetPriority>
}
 80024b2:	bf00      	nop
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	4603      	mov	r3, r0
 80024c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff ff31 	bl	8002330 <__NVIC_EnableIRQ>
}
 80024ce:	bf00      	nop
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b082      	sub	sp, #8
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff ffa2 	bl	8002428 <SysTick_Config>
 80024e4:	4603      	mov	r3, r0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024fc:	f7ff fab8 	bl	8001a70 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e099      	b.n	8002640 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2202      	movs	r2, #2
 8002518:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0201 	bic.w	r2, r2, #1
 800252a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800252c:	e00f      	b.n	800254e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800252e:	f7ff fa9f 	bl	8001a70 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b05      	cmp	r3, #5
 800253a:	d908      	bls.n	800254e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2220      	movs	r2, #32
 8002540:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2203      	movs	r2, #3
 8002546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e078      	b.n	8002640 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1e8      	bne.n	800252e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	4b38      	ldr	r3, [pc, #224]	; (8002648 <HAL_DMA_Init+0x158>)
 8002568:	4013      	ands	r3, r2
 800256a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800257a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002586:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002592:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	4313      	orrs	r3, r2
 800259e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a4:	2b04      	cmp	r3, #4
 80025a6:	d107      	bne.n	80025b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b0:	4313      	orrs	r3, r2
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	f023 0307 	bic.w	r3, r3, #7
 80025ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d117      	bne.n	8002612 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00e      	beq.n	8002612 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 fa77 	bl	8002ae8 <DMA_CheckFifoParam>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2240      	movs	r2, #64	; 0x40
 8002604:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800260e:	2301      	movs	r3, #1
 8002610:	e016      	b.n	8002640 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 fa2e 	bl	8002a7c <DMA_CalcBaseAndBitshift>
 8002620:	4603      	mov	r3, r0
 8002622:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002628:	223f      	movs	r2, #63	; 0x3f
 800262a:	409a      	lsls	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3718      	adds	r7, #24
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	f010803f 	.word	0xf010803f

0800264c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
 8002658:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_DMA_Start_IT+0x26>
 800266e:	2302      	movs	r3, #2
 8002670:	e048      	b.n	8002704 <HAL_DMA_Start_IT+0xb8>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b01      	cmp	r3, #1
 8002684:	d137      	bne.n	80026f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2202      	movs	r2, #2
 800268a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	68b9      	ldr	r1, [r7, #8]
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f9c0 	bl	8002a20 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a4:	223f      	movs	r2, #63	; 0x3f
 80026a6:	409a      	lsls	r2, r3
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0216 	orr.w	r2, r2, #22
 80026ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	695a      	ldr	r2, [r3, #20]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026ca:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d007      	beq.n	80026e4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 0208 	orr.w	r2, r2, #8
 80026e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0201 	orr.w	r2, r2, #1
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	e005      	b.n	8002702 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80026fe:	2302      	movs	r3, #2
 8002700:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002702:	7dfb      	ldrb	r3, [r7, #23]
}
 8002704:	4618      	mov	r0, r3
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002714:	2300      	movs	r3, #0
 8002716:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002718:	4b92      	ldr	r3, [pc, #584]	; (8002964 <HAL_DMA_IRQHandler+0x258>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a92      	ldr	r2, [pc, #584]	; (8002968 <HAL_DMA_IRQHandler+0x25c>)
 800271e:	fba2 2303 	umull	r2, r3, r2, r3
 8002722:	0a9b      	lsrs	r3, r3, #10
 8002724:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002736:	2208      	movs	r2, #8
 8002738:	409a      	lsls	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	4013      	ands	r3, r2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d01a      	beq.n	8002778 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0304 	and.w	r3, r3, #4
 800274c:	2b00      	cmp	r3, #0
 800274e:	d013      	beq.n	8002778 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0204 	bic.w	r2, r2, #4
 800275e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002764:	2208      	movs	r2, #8
 8002766:	409a      	lsls	r2, r3
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002770:	f043 0201 	orr.w	r2, r3, #1
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277c:	2201      	movs	r2, #1
 800277e:	409a      	lsls	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4013      	ands	r3, r2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d012      	beq.n	80027ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00b      	beq.n	80027ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279a:	2201      	movs	r2, #1
 800279c:	409a      	lsls	r2, r3
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a6:	f043 0202 	orr.w	r2, r3, #2
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b2:	2204      	movs	r2, #4
 80027b4:	409a      	lsls	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d012      	beq.n	80027e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00b      	beq.n	80027e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d0:	2204      	movs	r2, #4
 80027d2:	409a      	lsls	r2, r3
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027dc:	f043 0204 	orr.w	r2, r3, #4
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e8:	2210      	movs	r2, #16
 80027ea:	409a      	lsls	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4013      	ands	r3, r2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d043      	beq.n	800287c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d03c      	beq.n	800287c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002806:	2210      	movs	r2, #16
 8002808:	409a      	lsls	r2, r3
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d018      	beq.n	800284e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d108      	bne.n	800283c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	2b00      	cmp	r3, #0
 8002830:	d024      	beq.n	800287c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	4798      	blx	r3
 800283a:	e01f      	b.n	800287c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002840:	2b00      	cmp	r3, #0
 8002842:	d01b      	beq.n	800287c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	4798      	blx	r3
 800284c:	e016      	b.n	800287c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002858:	2b00      	cmp	r3, #0
 800285a:	d107      	bne.n	800286c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0208 	bic.w	r2, r2, #8
 800286a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002880:	2220      	movs	r2, #32
 8002882:	409a      	lsls	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4013      	ands	r3, r2
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 808e 	beq.w	80029aa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0310 	and.w	r3, r3, #16
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 8086 	beq.w	80029aa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a2:	2220      	movs	r2, #32
 80028a4:	409a      	lsls	r2, r3
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b05      	cmp	r3, #5
 80028b4:	d136      	bne.n	8002924 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0216 	bic.w	r2, r2, #22
 80028c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	695a      	ldr	r2, [r3, #20]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d103      	bne.n	80028e6 <HAL_DMA_IRQHandler+0x1da>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d007      	beq.n	80028f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0208 	bic.w	r2, r2, #8
 80028f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fa:	223f      	movs	r2, #63	; 0x3f
 80028fc:	409a      	lsls	r2, r3
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002916:	2b00      	cmp	r3, #0
 8002918:	d07d      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	4798      	blx	r3
        }
        return;
 8002922:	e078      	b.n	8002a16 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d01c      	beq.n	800296c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d108      	bne.n	8002952 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002944:	2b00      	cmp	r3, #0
 8002946:	d030      	beq.n	80029aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	4798      	blx	r3
 8002950:	e02b      	b.n	80029aa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002956:	2b00      	cmp	r3, #0
 8002958:	d027      	beq.n	80029aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	4798      	blx	r3
 8002962:	e022      	b.n	80029aa <HAL_DMA_IRQHandler+0x29e>
 8002964:	20000000 	.word	0x20000000
 8002968:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10f      	bne.n	800299a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0210 	bic.w	r2, r2, #16
 8002988:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d032      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d022      	beq.n	8002a04 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2205      	movs	r2, #5
 80029c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0201 	bic.w	r2, r2, #1
 80029d4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	3301      	adds	r3, #1
 80029da:	60bb      	str	r3, [r7, #8]
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d307      	bcc.n	80029f2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1f2      	bne.n	80029d6 <HAL_DMA_IRQHandler+0x2ca>
 80029f0:	e000      	b.n	80029f4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80029f2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d005      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	4798      	blx	r3
 8002a14:	e000      	b.n	8002a18 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002a16:	bf00      	nop
    }
  }
}
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop

08002a20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
 8002a2c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a3c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	2b40      	cmp	r3, #64	; 0x40
 8002a4c:	d108      	bne.n	8002a60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a5e:	e007      	b.n	8002a70 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	60da      	str	r2, [r3, #12]
}
 8002a70:	bf00      	nop
 8002a72:	3714      	adds	r7, #20
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr

08002a7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	3b10      	subs	r3, #16
 8002a8c:	4a13      	ldr	r2, [pc, #76]	; (8002adc <DMA_CalcBaseAndBitshift+0x60>)
 8002a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a92:	091b      	lsrs	r3, r3, #4
 8002a94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a96:	4a12      	ldr	r2, [pc, #72]	; (8002ae0 <DMA_CalcBaseAndBitshift+0x64>)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	d908      	bls.n	8002abc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	4b0c      	ldr	r3, [pc, #48]	; (8002ae4 <DMA_CalcBaseAndBitshift+0x68>)
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	1d1a      	adds	r2, r3, #4
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	659a      	str	r2, [r3, #88]	; 0x58
 8002aba:	e006      	b.n	8002aca <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4b08      	ldr	r3, [pc, #32]	; (8002ae4 <DMA_CalcBaseAndBitshift+0x68>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	aaaaaaab 	.word	0xaaaaaaab
 8002ae0:	08007470 	.word	0x08007470
 8002ae4:	fffffc00 	.word	0xfffffc00

08002ae8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002af0:	2300      	movs	r3, #0
 8002af2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d11f      	bne.n	8002b42 <DMA_CheckFifoParam+0x5a>
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	2b03      	cmp	r3, #3
 8002b06:	d856      	bhi.n	8002bb6 <DMA_CheckFifoParam+0xce>
 8002b08:	a201      	add	r2, pc, #4	; (adr r2, 8002b10 <DMA_CheckFifoParam+0x28>)
 8002b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b0e:	bf00      	nop
 8002b10:	08002b21 	.word	0x08002b21
 8002b14:	08002b33 	.word	0x08002b33
 8002b18:	08002b21 	.word	0x08002b21
 8002b1c:	08002bb7 	.word	0x08002bb7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d046      	beq.n	8002bba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b30:	e043      	b.n	8002bba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b3a:	d140      	bne.n	8002bbe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b40:	e03d      	b.n	8002bbe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b4a:	d121      	bne.n	8002b90 <DMA_CheckFifoParam+0xa8>
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2b03      	cmp	r3, #3
 8002b50:	d837      	bhi.n	8002bc2 <DMA_CheckFifoParam+0xda>
 8002b52:	a201      	add	r2, pc, #4	; (adr r2, 8002b58 <DMA_CheckFifoParam+0x70>)
 8002b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b58:	08002b69 	.word	0x08002b69
 8002b5c:	08002b6f 	.word	0x08002b6f
 8002b60:	08002b69 	.word	0x08002b69
 8002b64:	08002b81 	.word	0x08002b81
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b6c:	e030      	b.n	8002bd0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d025      	beq.n	8002bc6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b7e:	e022      	b.n	8002bc6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b88:	d11f      	bne.n	8002bca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b8e:	e01c      	b.n	8002bca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d903      	bls.n	8002b9e <DMA_CheckFifoParam+0xb6>
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d003      	beq.n	8002ba4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b9c:	e018      	b.n	8002bd0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ba2:	e015      	b.n	8002bd0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00e      	beq.n	8002bce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bb4:	e00b      	b.n	8002bce <DMA_CheckFifoParam+0xe6>
      break;
 8002bb6:	bf00      	nop
 8002bb8:	e00a      	b.n	8002bd0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bba:	bf00      	nop
 8002bbc:	e008      	b.n	8002bd0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bbe:	bf00      	nop
 8002bc0:	e006      	b.n	8002bd0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bc2:	bf00      	nop
 8002bc4:	e004      	b.n	8002bd0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bc6:	bf00      	nop
 8002bc8:	e002      	b.n	8002bd0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002bca:	bf00      	nop
 8002bcc:	e000      	b.n	8002bd0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bce:	bf00      	nop
    }
  } 
  
  return status; 
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop

08002be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b089      	sub	sp, #36	; 0x24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002bea:	2300      	movs	r3, #0
 8002bec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61fb      	str	r3, [r7, #28]
 8002bfe:	e175      	b.n	8002eec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c00:	2201      	movs	r2, #1
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	4013      	ands	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	f040 8164 	bne.w	8002ee6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d00b      	beq.n	8002c3e <HAL_GPIO_Init+0x5e>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d007      	beq.n	8002c3e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c32:	2b11      	cmp	r3, #17
 8002c34:	d003      	beq.n	8002c3e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b12      	cmp	r3, #18
 8002c3c:	d130      	bne.n	8002ca0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	2203      	movs	r2, #3
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4013      	ands	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68da      	ldr	r2, [r3, #12]
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c74:	2201      	movs	r2, #1
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	091b      	lsrs	r3, r3, #4
 8002c8a:	f003 0201 	and.w	r2, r3, #1
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	2203      	movs	r2, #3
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0x100>
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b12      	cmp	r3, #18
 8002cde:	d123      	bne.n	8002d28 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	08da      	lsrs	r2, r3, #3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3208      	adds	r2, #8
 8002ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	220f      	movs	r2, #15
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4013      	ands	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	691a      	ldr	r2, [r3, #16]
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	08da      	lsrs	r2, r3, #3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	3208      	adds	r2, #8
 8002d22:	69b9      	ldr	r1, [r7, #24]
 8002d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	2203      	movs	r2, #3
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f003 0203 	and.w	r2, r3, #3
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 80be 	beq.w	8002ee6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d6a:	4b66      	ldr	r3, [pc, #408]	; (8002f04 <HAL_GPIO_Init+0x324>)
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6e:	4a65      	ldr	r2, [pc, #404]	; (8002f04 <HAL_GPIO_Init+0x324>)
 8002d70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d74:	6453      	str	r3, [r2, #68]	; 0x44
 8002d76:	4b63      	ldr	r3, [pc, #396]	; (8002f04 <HAL_GPIO_Init+0x324>)
 8002d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d82:	4a61      	ldr	r2, [pc, #388]	; (8002f08 <HAL_GPIO_Init+0x328>)
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	089b      	lsrs	r3, r3, #2
 8002d88:	3302      	adds	r3, #2
 8002d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	220f      	movs	r2, #15
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4013      	ands	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a58      	ldr	r2, [pc, #352]	; (8002f0c <HAL_GPIO_Init+0x32c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d037      	beq.n	8002e1e <HAL_GPIO_Init+0x23e>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a57      	ldr	r2, [pc, #348]	; (8002f10 <HAL_GPIO_Init+0x330>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d031      	beq.n	8002e1a <HAL_GPIO_Init+0x23a>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a56      	ldr	r2, [pc, #344]	; (8002f14 <HAL_GPIO_Init+0x334>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d02b      	beq.n	8002e16 <HAL_GPIO_Init+0x236>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a55      	ldr	r2, [pc, #340]	; (8002f18 <HAL_GPIO_Init+0x338>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d025      	beq.n	8002e12 <HAL_GPIO_Init+0x232>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a54      	ldr	r2, [pc, #336]	; (8002f1c <HAL_GPIO_Init+0x33c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d01f      	beq.n	8002e0e <HAL_GPIO_Init+0x22e>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a53      	ldr	r2, [pc, #332]	; (8002f20 <HAL_GPIO_Init+0x340>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d019      	beq.n	8002e0a <HAL_GPIO_Init+0x22a>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a52      	ldr	r2, [pc, #328]	; (8002f24 <HAL_GPIO_Init+0x344>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d013      	beq.n	8002e06 <HAL_GPIO_Init+0x226>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a51      	ldr	r2, [pc, #324]	; (8002f28 <HAL_GPIO_Init+0x348>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d00d      	beq.n	8002e02 <HAL_GPIO_Init+0x222>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a50      	ldr	r2, [pc, #320]	; (8002f2c <HAL_GPIO_Init+0x34c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d007      	beq.n	8002dfe <HAL_GPIO_Init+0x21e>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a4f      	ldr	r2, [pc, #316]	; (8002f30 <HAL_GPIO_Init+0x350>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d101      	bne.n	8002dfa <HAL_GPIO_Init+0x21a>
 8002df6:	2309      	movs	r3, #9
 8002df8:	e012      	b.n	8002e20 <HAL_GPIO_Init+0x240>
 8002dfa:	230a      	movs	r3, #10
 8002dfc:	e010      	b.n	8002e20 <HAL_GPIO_Init+0x240>
 8002dfe:	2308      	movs	r3, #8
 8002e00:	e00e      	b.n	8002e20 <HAL_GPIO_Init+0x240>
 8002e02:	2307      	movs	r3, #7
 8002e04:	e00c      	b.n	8002e20 <HAL_GPIO_Init+0x240>
 8002e06:	2306      	movs	r3, #6
 8002e08:	e00a      	b.n	8002e20 <HAL_GPIO_Init+0x240>
 8002e0a:	2305      	movs	r3, #5
 8002e0c:	e008      	b.n	8002e20 <HAL_GPIO_Init+0x240>
 8002e0e:	2304      	movs	r3, #4
 8002e10:	e006      	b.n	8002e20 <HAL_GPIO_Init+0x240>
 8002e12:	2303      	movs	r3, #3
 8002e14:	e004      	b.n	8002e20 <HAL_GPIO_Init+0x240>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e002      	b.n	8002e20 <HAL_GPIO_Init+0x240>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <HAL_GPIO_Init+0x240>
 8002e1e:	2300      	movs	r3, #0
 8002e20:	69fa      	ldr	r2, [r7, #28]
 8002e22:	f002 0203 	and.w	r2, r2, #3
 8002e26:	0092      	lsls	r2, r2, #2
 8002e28:	4093      	lsls	r3, r2
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e30:	4935      	ldr	r1, [pc, #212]	; (8002f08 <HAL_GPIO_Init+0x328>)
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	089b      	lsrs	r3, r3, #2
 8002e36:	3302      	adds	r3, #2
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e3e:	4b3d      	ldr	r3, [pc, #244]	; (8002f34 <HAL_GPIO_Init+0x354>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	43db      	mvns	r3, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d003      	beq.n	8002e62 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e62:	4a34      	ldr	r2, [pc, #208]	; (8002f34 <HAL_GPIO_Init+0x354>)
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e68:	4b32      	ldr	r3, [pc, #200]	; (8002f34 <HAL_GPIO_Init+0x354>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	43db      	mvns	r3, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4013      	ands	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e8c:	4a29      	ldr	r2, [pc, #164]	; (8002f34 <HAL_GPIO_Init+0x354>)
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e92:	4b28      	ldr	r3, [pc, #160]	; (8002f34 <HAL_GPIO_Init+0x354>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	43db      	mvns	r3, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002eb6:	4a1f      	ldr	r2, [pc, #124]	; (8002f34 <HAL_GPIO_Init+0x354>)
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ebc:	4b1d      	ldr	r3, [pc, #116]	; (8002f34 <HAL_GPIO_Init+0x354>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ee0:	4a14      	ldr	r2, [pc, #80]	; (8002f34 <HAL_GPIO_Init+0x354>)
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	61fb      	str	r3, [r7, #28]
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	2b0f      	cmp	r3, #15
 8002ef0:	f67f ae86 	bls.w	8002c00 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ef4:	bf00      	nop
 8002ef6:	bf00      	nop
 8002ef8:	3724      	adds	r7, #36	; 0x24
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	40023800 	.word	0x40023800
 8002f08:	40013800 	.word	0x40013800
 8002f0c:	40020000 	.word	0x40020000
 8002f10:	40020400 	.word	0x40020400
 8002f14:	40020800 	.word	0x40020800
 8002f18:	40020c00 	.word	0x40020c00
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	40021400 	.word	0x40021400
 8002f24:	40021800 	.word	0x40021800
 8002f28:	40021c00 	.word	0x40021c00
 8002f2c:	40022000 	.word	0x40022000
 8002f30:	40022400 	.word	0x40022400
 8002f34:	40013c00 	.word	0x40013c00

08002f38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	460b      	mov	r3, r1
 8002f42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691a      	ldr	r2, [r3, #16]
 8002f48:	887b      	ldrh	r3, [r7, #2]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d002      	beq.n	8002f56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f50:	2301      	movs	r3, #1
 8002f52:	73fb      	strb	r3, [r7, #15]
 8002f54:	e001      	b.n	8002f5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f56:	2300      	movs	r3, #0
 8002f58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	460b      	mov	r3, r1
 8002f72:	807b      	strh	r3, [r7, #2]
 8002f74:	4613      	mov	r3, r2
 8002f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f78:	787b      	ldrb	r3, [r7, #1]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f7e:	887a      	ldrh	r2, [r7, #2]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f84:	e003      	b.n	8002f8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f86:	887b      	ldrh	r3, [r7, #2]
 8002f88:	041a      	lsls	r2, r3, #16
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	619a      	str	r2, [r3, #24]
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
	...

08002f9c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002fa6:	4b23      	ldr	r3, [pc, #140]	; (8003034 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	4a22      	ldr	r2, [pc, #136]	; (8003034 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb2:	4b20      	ldr	r3, [pc, #128]	; (8003034 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fba:	603b      	str	r3, [r7, #0]
 8002fbc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002fbe:	4b1e      	ldr	r3, [pc, #120]	; (8003038 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a1d      	ldr	r2, [pc, #116]	; (8003038 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fca:	f7fe fd51 	bl	8001a70 <HAL_GetTick>
 8002fce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002fd0:	e009      	b.n	8002fe6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002fd2:	f7fe fd4d 	bl	8001a70 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fe0:	d901      	bls.n	8002fe6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e022      	b.n	800302c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002fe6:	4b14      	ldr	r3, [pc, #80]	; (8003038 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff2:	d1ee      	bne.n	8002fd2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002ff4:	4b10      	ldr	r3, [pc, #64]	; (8003038 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a0f      	ldr	r2, [pc, #60]	; (8003038 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ffa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ffe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003000:	f7fe fd36 	bl	8001a70 <HAL_GetTick>
 8003004:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003006:	e009      	b.n	800301c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003008:	f7fe fd32 	bl	8001a70 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003016:	d901      	bls.n	800301c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e007      	b.n	800302c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800301c:	4b06      	ldr	r3, [pc, #24]	; (8003038 <HAL_PWREx_EnableOverDrive+0x9c>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003024:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003028:	d1ee      	bne.n	8003008 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40023800 	.word	0x40023800
 8003038:	40007000 	.word	0x40007000

0800303c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003044:	2300      	movs	r3, #0
 8003046:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e291      	b.n	8003576 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 8087 	beq.w	800316e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003060:	4b96      	ldr	r3, [pc, #600]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 030c 	and.w	r3, r3, #12
 8003068:	2b04      	cmp	r3, #4
 800306a:	d00c      	beq.n	8003086 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800306c:	4b93      	ldr	r3, [pc, #588]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 030c 	and.w	r3, r3, #12
 8003074:	2b08      	cmp	r3, #8
 8003076:	d112      	bne.n	800309e <HAL_RCC_OscConfig+0x62>
 8003078:	4b90      	ldr	r3, [pc, #576]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003080:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003084:	d10b      	bne.n	800309e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003086:	4b8d      	ldr	r3, [pc, #564]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d06c      	beq.n	800316c <HAL_RCC_OscConfig+0x130>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d168      	bne.n	800316c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e26b      	b.n	8003576 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030a6:	d106      	bne.n	80030b6 <HAL_RCC_OscConfig+0x7a>
 80030a8:	4b84      	ldr	r3, [pc, #528]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a83      	ldr	r2, [pc, #524]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 80030ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	e02e      	b.n	8003114 <HAL_RCC_OscConfig+0xd8>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10c      	bne.n	80030d8 <HAL_RCC_OscConfig+0x9c>
 80030be:	4b7f      	ldr	r3, [pc, #508]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a7e      	ldr	r2, [pc, #504]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 80030c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	4b7c      	ldr	r3, [pc, #496]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a7b      	ldr	r2, [pc, #492]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 80030d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030d4:	6013      	str	r3, [r2, #0]
 80030d6:	e01d      	b.n	8003114 <HAL_RCC_OscConfig+0xd8>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030e0:	d10c      	bne.n	80030fc <HAL_RCC_OscConfig+0xc0>
 80030e2:	4b76      	ldr	r3, [pc, #472]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a75      	ldr	r2, [pc, #468]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 80030e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	4b73      	ldr	r3, [pc, #460]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a72      	ldr	r2, [pc, #456]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 80030f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	e00b      	b.n	8003114 <HAL_RCC_OscConfig+0xd8>
 80030fc:	4b6f      	ldr	r3, [pc, #444]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a6e      	ldr	r2, [pc, #440]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 8003102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003106:	6013      	str	r3, [r2, #0]
 8003108:	4b6c      	ldr	r3, [pc, #432]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a6b      	ldr	r2, [pc, #428]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 800310e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003112:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d013      	beq.n	8003144 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311c:	f7fe fca8 	bl	8001a70 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003124:	f7fe fca4 	bl	8001a70 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b64      	cmp	r3, #100	; 0x64
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e21f      	b.n	8003576 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003136:	4b61      	ldr	r3, [pc, #388]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0f0      	beq.n	8003124 <HAL_RCC_OscConfig+0xe8>
 8003142:	e014      	b.n	800316e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003144:	f7fe fc94 	bl	8001a70 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800314c:	f7fe fc90 	bl	8001a70 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b64      	cmp	r3, #100	; 0x64
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e20b      	b.n	8003576 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800315e:	4b57      	ldr	r3, [pc, #348]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0x110>
 800316a:	e000      	b.n	800316e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800316c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d069      	beq.n	800324e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800317a:	4b50      	ldr	r3, [pc, #320]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 030c 	and.w	r3, r3, #12
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00b      	beq.n	800319e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003186:	4b4d      	ldr	r3, [pc, #308]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 030c 	and.w	r3, r3, #12
 800318e:	2b08      	cmp	r3, #8
 8003190:	d11c      	bne.n	80031cc <HAL_RCC_OscConfig+0x190>
 8003192:	4b4a      	ldr	r3, [pc, #296]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d116      	bne.n	80031cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800319e:	4b47      	ldr	r3, [pc, #284]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d005      	beq.n	80031b6 <HAL_RCC_OscConfig+0x17a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d001      	beq.n	80031b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e1df      	b.n	8003576 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b6:	4b41      	ldr	r3, [pc, #260]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	493d      	ldr	r1, [pc, #244]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ca:	e040      	b.n	800324e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d023      	beq.n	800321c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031d4:	4b39      	ldr	r3, [pc, #228]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a38      	ldr	r2, [pc, #224]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e0:	f7fe fc46 	bl	8001a70 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031e8:	f7fe fc42 	bl	8001a70 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e1bd      	b.n	8003576 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031fa:	4b30      	ldr	r3, [pc, #192]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f0      	beq.n	80031e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003206:	4b2d      	ldr	r3, [pc, #180]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	4929      	ldr	r1, [pc, #164]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 8003216:	4313      	orrs	r3, r2
 8003218:	600b      	str	r3, [r1, #0]
 800321a:	e018      	b.n	800324e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800321c:	4b27      	ldr	r3, [pc, #156]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a26      	ldr	r2, [pc, #152]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 8003222:	f023 0301 	bic.w	r3, r3, #1
 8003226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003228:	f7fe fc22 	bl	8001a70 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003230:	f7fe fc1e 	bl	8001a70 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e199      	b.n	8003576 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003242:	4b1e      	ldr	r3, [pc, #120]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f0      	bne.n	8003230 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0308 	and.w	r3, r3, #8
 8003256:	2b00      	cmp	r3, #0
 8003258:	d038      	beq.n	80032cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d019      	beq.n	8003296 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003262:	4b16      	ldr	r3, [pc, #88]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 8003264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003266:	4a15      	ldr	r2, [pc, #84]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 8003268:	f043 0301 	orr.w	r3, r3, #1
 800326c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326e:	f7fe fbff 	bl	8001a70 <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003276:	f7fe fbfb 	bl	8001a70 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e176      	b.n	8003576 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003288:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 800328a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0f0      	beq.n	8003276 <HAL_RCC_OscConfig+0x23a>
 8003294:	e01a      	b.n	80032cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003296:	4b09      	ldr	r3, [pc, #36]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 8003298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800329a:	4a08      	ldr	r2, [pc, #32]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 800329c:	f023 0301 	bic.w	r3, r3, #1
 80032a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a2:	f7fe fbe5 	bl	8001a70 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032a8:	e00a      	b.n	80032c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032aa:	f7fe fbe1 	bl	8001a70 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d903      	bls.n	80032c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e15c      	b.n	8003576 <HAL_RCC_OscConfig+0x53a>
 80032bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c0:	4b91      	ldr	r3, [pc, #580]	; (8003508 <HAL_RCC_OscConfig+0x4cc>)
 80032c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1ee      	bne.n	80032aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 80a4 	beq.w	8003422 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032da:	4b8b      	ldr	r3, [pc, #556]	; (8003508 <HAL_RCC_OscConfig+0x4cc>)
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10d      	bne.n	8003302 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80032e6:	4b88      	ldr	r3, [pc, #544]	; (8003508 <HAL_RCC_OscConfig+0x4cc>)
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	4a87      	ldr	r2, [pc, #540]	; (8003508 <HAL_RCC_OscConfig+0x4cc>)
 80032ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f0:	6413      	str	r3, [r2, #64]	; 0x40
 80032f2:	4b85      	ldr	r3, [pc, #532]	; (8003508 <HAL_RCC_OscConfig+0x4cc>)
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fa:	60bb      	str	r3, [r7, #8]
 80032fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032fe:	2301      	movs	r3, #1
 8003300:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003302:	4b82      	ldr	r3, [pc, #520]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330a:	2b00      	cmp	r3, #0
 800330c:	d118      	bne.n	8003340 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800330e:	4b7f      	ldr	r3, [pc, #508]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a7e      	ldr	r2, [pc, #504]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 8003314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003318:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800331a:	f7fe fba9 	bl	8001a70 <HAL_GetTick>
 800331e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003320:	e008      	b.n	8003334 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003322:	f7fe fba5 	bl	8001a70 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b64      	cmp	r3, #100	; 0x64
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e120      	b.n	8003576 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003334:	4b75      	ldr	r3, [pc, #468]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0f0      	beq.n	8003322 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d106      	bne.n	8003356 <HAL_RCC_OscConfig+0x31a>
 8003348:	4b6f      	ldr	r3, [pc, #444]	; (8003508 <HAL_RCC_OscConfig+0x4cc>)
 800334a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334c:	4a6e      	ldr	r2, [pc, #440]	; (8003508 <HAL_RCC_OscConfig+0x4cc>)
 800334e:	f043 0301 	orr.w	r3, r3, #1
 8003352:	6713      	str	r3, [r2, #112]	; 0x70
 8003354:	e02d      	b.n	80033b2 <HAL_RCC_OscConfig+0x376>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10c      	bne.n	8003378 <HAL_RCC_OscConfig+0x33c>
 800335e:	4b6a      	ldr	r3, [pc, #424]	; (8003508 <HAL_RCC_OscConfig+0x4cc>)
 8003360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003362:	4a69      	ldr	r2, [pc, #420]	; (8003508 <HAL_RCC_OscConfig+0x4cc>)
 8003364:	f023 0301 	bic.w	r3, r3, #1
 8003368:	6713      	str	r3, [r2, #112]	; 0x70
 800336a:	4b67      	ldr	r3, [pc, #412]	; (8003508 <HAL_RCC_OscConfig+0x4cc>)
 800336c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336e:	4a66      	ldr	r2, [pc, #408]	; (8003508 <HAL_RCC_OscConfig+0x4cc>)
 8003370:	f023 0304 	bic.w	r3, r3, #4
 8003374:	6713      	str	r3, [r2, #112]	; 0x70
 8003376:	e01c      	b.n	80033b2 <HAL_RCC_OscConfig+0x376>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	2b05      	cmp	r3, #5
 800337e:	d10c      	bne.n	800339a <HAL_RCC_OscConfig+0x35e>
 8003380:	4b61      	ldr	r3, [pc, #388]	; (8003508 <HAL_RCC_OscConfig+0x4cc>)
 8003382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003384:	4a60      	ldr	r2, [pc, #384]	; (8003508 <HAL_RCC_OscConfig+0x4cc>)
 8003386:	f043 0304 	orr.w	r3, r3, #4
 800338a:	6713      	str	r3, [r2, #112]	; 0x70
 800338c:	4b5e      	ldr	r3, [pc, #376]	; (8003508 <HAL_RCC_OscConfig+0x4cc>)
 800338e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003390:	4a5d      	ldr	r2, [pc, #372]	; (8003508 <HAL_RCC_OscConfig+0x4cc>)
 8003392:	f043 0301 	orr.w	r3, r3, #1
 8003396:	6713      	str	r3, [r2, #112]	; 0x70
 8003398:	e00b      	b.n	80033b2 <HAL_RCC_OscConfig+0x376>
 800339a:	4b5b      	ldr	r3, [pc, #364]	; (8003508 <HAL_RCC_OscConfig+0x4cc>)
 800339c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339e:	4a5a      	ldr	r2, [pc, #360]	; (8003508 <HAL_RCC_OscConfig+0x4cc>)
 80033a0:	f023 0301 	bic.w	r3, r3, #1
 80033a4:	6713      	str	r3, [r2, #112]	; 0x70
 80033a6:	4b58      	ldr	r3, [pc, #352]	; (8003508 <HAL_RCC_OscConfig+0x4cc>)
 80033a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033aa:	4a57      	ldr	r2, [pc, #348]	; (8003508 <HAL_RCC_OscConfig+0x4cc>)
 80033ac:	f023 0304 	bic.w	r3, r3, #4
 80033b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d015      	beq.n	80033e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ba:	f7fe fb59 	bl	8001a70 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c0:	e00a      	b.n	80033d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c2:	f7fe fb55 	bl	8001a70 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e0ce      	b.n	8003576 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d8:	4b4b      	ldr	r3, [pc, #300]	; (8003508 <HAL_RCC_OscConfig+0x4cc>)
 80033da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0ee      	beq.n	80033c2 <HAL_RCC_OscConfig+0x386>
 80033e4:	e014      	b.n	8003410 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e6:	f7fe fb43 	bl	8001a70 <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ec:	e00a      	b.n	8003404 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ee:	f7fe fb3f 	bl	8001a70 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e0b8      	b.n	8003576 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003404:	4b40      	ldr	r3, [pc, #256]	; (8003508 <HAL_RCC_OscConfig+0x4cc>)
 8003406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1ee      	bne.n	80033ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003410:	7dfb      	ldrb	r3, [r7, #23]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d105      	bne.n	8003422 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003416:	4b3c      	ldr	r3, [pc, #240]	; (8003508 <HAL_RCC_OscConfig+0x4cc>)
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	4a3b      	ldr	r2, [pc, #236]	; (8003508 <HAL_RCC_OscConfig+0x4cc>)
 800341c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003420:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 80a4 	beq.w	8003574 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800342c:	4b36      	ldr	r3, [pc, #216]	; (8003508 <HAL_RCC_OscConfig+0x4cc>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 030c 	and.w	r3, r3, #12
 8003434:	2b08      	cmp	r3, #8
 8003436:	d06b      	beq.n	8003510 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	2b02      	cmp	r3, #2
 800343e:	d149      	bne.n	80034d4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003440:	4b31      	ldr	r3, [pc, #196]	; (8003508 <HAL_RCC_OscConfig+0x4cc>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a30      	ldr	r2, [pc, #192]	; (8003508 <HAL_RCC_OscConfig+0x4cc>)
 8003446:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800344a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344c:	f7fe fb10 	bl	8001a70 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003454:	f7fe fb0c 	bl	8001a70 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e087      	b.n	8003576 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003466:	4b28      	ldr	r3, [pc, #160]	; (8003508 <HAL_RCC_OscConfig+0x4cc>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f0      	bne.n	8003454 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69da      	ldr	r2, [r3, #28]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	019b      	lsls	r3, r3, #6
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003488:	085b      	lsrs	r3, r3, #1
 800348a:	3b01      	subs	r3, #1
 800348c:	041b      	lsls	r3, r3, #16
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003494:	061b      	lsls	r3, r3, #24
 8003496:	4313      	orrs	r3, r2
 8003498:	4a1b      	ldr	r2, [pc, #108]	; (8003508 <HAL_RCC_OscConfig+0x4cc>)
 800349a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800349e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a0:	4b19      	ldr	r3, [pc, #100]	; (8003508 <HAL_RCC_OscConfig+0x4cc>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a18      	ldr	r2, [pc, #96]	; (8003508 <HAL_RCC_OscConfig+0x4cc>)
 80034a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ac:	f7fe fae0 	bl	8001a70 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b4:	f7fe fadc 	bl	8001a70 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e057      	b.n	8003576 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c6:	4b10      	ldr	r3, [pc, #64]	; (8003508 <HAL_RCC_OscConfig+0x4cc>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCC_OscConfig+0x478>
 80034d2:	e04f      	b.n	8003574 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d4:	4b0c      	ldr	r3, [pc, #48]	; (8003508 <HAL_RCC_OscConfig+0x4cc>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a0b      	ldr	r2, [pc, #44]	; (8003508 <HAL_RCC_OscConfig+0x4cc>)
 80034da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e0:	f7fe fac6 	bl	8001a70 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e8:	f7fe fac2 	bl	8001a70 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e03d      	b.n	8003576 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fa:	4b03      	ldr	r3, [pc, #12]	; (8003508 <HAL_RCC_OscConfig+0x4cc>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1f0      	bne.n	80034e8 <HAL_RCC_OscConfig+0x4ac>
 8003506:	e035      	b.n	8003574 <HAL_RCC_OscConfig+0x538>
 8003508:	40023800 	.word	0x40023800
 800350c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003510:	4b1b      	ldr	r3, [pc, #108]	; (8003580 <HAL_RCC_OscConfig+0x544>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d028      	beq.n	8003570 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003528:	429a      	cmp	r2, r3
 800352a:	d121      	bne.n	8003570 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003536:	429a      	cmp	r2, r3
 8003538:	d11a      	bne.n	8003570 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003540:	4013      	ands	r3, r2
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003546:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003548:	4293      	cmp	r3, r2
 800354a:	d111      	bne.n	8003570 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003556:	085b      	lsrs	r3, r3, #1
 8003558:	3b01      	subs	r3, #1
 800355a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800355c:	429a      	cmp	r2, r3
 800355e:	d107      	bne.n	8003570 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800356c:	429a      	cmp	r2, r3
 800356e:	d001      	beq.n	8003574 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e000      	b.n	8003576 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	40023800 	.word	0x40023800

08003584 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e0d0      	b.n	800373e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800359c:	4b6a      	ldr	r3, [pc, #424]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 030f 	and.w	r3, r3, #15
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d910      	bls.n	80035cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035aa:	4b67      	ldr	r3, [pc, #412]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f023 020f 	bic.w	r2, r3, #15
 80035b2:	4965      	ldr	r1, [pc, #404]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ba:	4b63      	ldr	r3, [pc, #396]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d001      	beq.n	80035cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e0b8      	b.n	800373e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d020      	beq.n	800361a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d005      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035e4:	4b59      	ldr	r3, [pc, #356]	; (800374c <HAL_RCC_ClockConfig+0x1c8>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	4a58      	ldr	r2, [pc, #352]	; (800374c <HAL_RCC_ClockConfig+0x1c8>)
 80035ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0308 	and.w	r3, r3, #8
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d005      	beq.n	8003608 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035fc:	4b53      	ldr	r3, [pc, #332]	; (800374c <HAL_RCC_ClockConfig+0x1c8>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	4a52      	ldr	r2, [pc, #328]	; (800374c <HAL_RCC_ClockConfig+0x1c8>)
 8003602:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003606:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003608:	4b50      	ldr	r3, [pc, #320]	; (800374c <HAL_RCC_ClockConfig+0x1c8>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	494d      	ldr	r1, [pc, #308]	; (800374c <HAL_RCC_ClockConfig+0x1c8>)
 8003616:	4313      	orrs	r3, r2
 8003618:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d040      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d107      	bne.n	800363e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362e:	4b47      	ldr	r3, [pc, #284]	; (800374c <HAL_RCC_ClockConfig+0x1c8>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d115      	bne.n	8003666 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e07f      	b.n	800373e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b02      	cmp	r3, #2
 8003644:	d107      	bne.n	8003656 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003646:	4b41      	ldr	r3, [pc, #260]	; (800374c <HAL_RCC_ClockConfig+0x1c8>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d109      	bne.n	8003666 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e073      	b.n	800373e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003656:	4b3d      	ldr	r3, [pc, #244]	; (800374c <HAL_RCC_ClockConfig+0x1c8>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e06b      	b.n	800373e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003666:	4b39      	ldr	r3, [pc, #228]	; (800374c <HAL_RCC_ClockConfig+0x1c8>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f023 0203 	bic.w	r2, r3, #3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	4936      	ldr	r1, [pc, #216]	; (800374c <HAL_RCC_ClockConfig+0x1c8>)
 8003674:	4313      	orrs	r3, r2
 8003676:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003678:	f7fe f9fa 	bl	8001a70 <HAL_GetTick>
 800367c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367e:	e00a      	b.n	8003696 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003680:	f7fe f9f6 	bl	8001a70 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	f241 3288 	movw	r2, #5000	; 0x1388
 800368e:	4293      	cmp	r3, r2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e053      	b.n	800373e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003696:	4b2d      	ldr	r3, [pc, #180]	; (800374c <HAL_RCC_ClockConfig+0x1c8>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 020c 	and.w	r2, r3, #12
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d1eb      	bne.n	8003680 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036a8:	4b27      	ldr	r3, [pc, #156]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 030f 	and.w	r3, r3, #15
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d210      	bcs.n	80036d8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b6:	4b24      	ldr	r3, [pc, #144]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f023 020f 	bic.w	r2, r3, #15
 80036be:	4922      	ldr	r1, [pc, #136]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c6:	4b20      	ldr	r3, [pc, #128]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d001      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e032      	b.n	800373e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d008      	beq.n	80036f6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036e4:	4b19      	ldr	r3, [pc, #100]	; (800374c <HAL_RCC_ClockConfig+0x1c8>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	4916      	ldr	r1, [pc, #88]	; (800374c <HAL_RCC_ClockConfig+0x1c8>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d009      	beq.n	8003716 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003702:	4b12      	ldr	r3, [pc, #72]	; (800374c <HAL_RCC_ClockConfig+0x1c8>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	00db      	lsls	r3, r3, #3
 8003710:	490e      	ldr	r1, [pc, #56]	; (800374c <HAL_RCC_ClockConfig+0x1c8>)
 8003712:	4313      	orrs	r3, r2
 8003714:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003716:	f000 f821 	bl	800375c <HAL_RCC_GetSysClockFreq>
 800371a:	4602      	mov	r2, r0
 800371c:	4b0b      	ldr	r3, [pc, #44]	; (800374c <HAL_RCC_ClockConfig+0x1c8>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	091b      	lsrs	r3, r3, #4
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	490a      	ldr	r1, [pc, #40]	; (8003750 <HAL_RCC_ClockConfig+0x1cc>)
 8003728:	5ccb      	ldrb	r3, [r1, r3]
 800372a:	fa22 f303 	lsr.w	r3, r2, r3
 800372e:	4a09      	ldr	r2, [pc, #36]	; (8003754 <HAL_RCC_ClockConfig+0x1d0>)
 8003730:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003732:	4b09      	ldr	r3, [pc, #36]	; (8003758 <HAL_RCC_ClockConfig+0x1d4>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f7fe f956 	bl	80019e8 <HAL_InitTick>

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3710      	adds	r7, #16
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40023c00 	.word	0x40023c00
 800374c:	40023800 	.word	0x40023800
 8003750:	08007458 	.word	0x08007458
 8003754:	20000000 	.word	0x20000000
 8003758:	20000004 	.word	0x20000004

0800375c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800375c:	b5b0      	push	{r4, r5, r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003762:	2100      	movs	r1, #0
 8003764:	6079      	str	r1, [r7, #4]
 8003766:	2100      	movs	r1, #0
 8003768:	60f9      	str	r1, [r7, #12]
 800376a:	2100      	movs	r1, #0
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800376e:	2100      	movs	r1, #0
 8003770:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003772:	4952      	ldr	r1, [pc, #328]	; (80038bc <HAL_RCC_GetSysClockFreq+0x160>)
 8003774:	6889      	ldr	r1, [r1, #8]
 8003776:	f001 010c 	and.w	r1, r1, #12
 800377a:	2908      	cmp	r1, #8
 800377c:	d00d      	beq.n	800379a <HAL_RCC_GetSysClockFreq+0x3e>
 800377e:	2908      	cmp	r1, #8
 8003780:	f200 8094 	bhi.w	80038ac <HAL_RCC_GetSysClockFreq+0x150>
 8003784:	2900      	cmp	r1, #0
 8003786:	d002      	beq.n	800378e <HAL_RCC_GetSysClockFreq+0x32>
 8003788:	2904      	cmp	r1, #4
 800378a:	d003      	beq.n	8003794 <HAL_RCC_GetSysClockFreq+0x38>
 800378c:	e08e      	b.n	80038ac <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800378e:	4b4c      	ldr	r3, [pc, #304]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x164>)
 8003790:	60bb      	str	r3, [r7, #8]
      break;
 8003792:	e08e      	b.n	80038b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003794:	4b4b      	ldr	r3, [pc, #300]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x168>)
 8003796:	60bb      	str	r3, [r7, #8]
      break;
 8003798:	e08b      	b.n	80038b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800379a:	4948      	ldr	r1, [pc, #288]	; (80038bc <HAL_RCC_GetSysClockFreq+0x160>)
 800379c:	6849      	ldr	r1, [r1, #4]
 800379e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80037a2:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80037a4:	4945      	ldr	r1, [pc, #276]	; (80038bc <HAL_RCC_GetSysClockFreq+0x160>)
 80037a6:	6849      	ldr	r1, [r1, #4]
 80037a8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80037ac:	2900      	cmp	r1, #0
 80037ae:	d024      	beq.n	80037fa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037b0:	4942      	ldr	r1, [pc, #264]	; (80038bc <HAL_RCC_GetSysClockFreq+0x160>)
 80037b2:	6849      	ldr	r1, [r1, #4]
 80037b4:	0989      	lsrs	r1, r1, #6
 80037b6:	4608      	mov	r0, r1
 80037b8:	f04f 0100 	mov.w	r1, #0
 80037bc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80037c0:	f04f 0500 	mov.w	r5, #0
 80037c4:	ea00 0204 	and.w	r2, r0, r4
 80037c8:	ea01 0305 	and.w	r3, r1, r5
 80037cc:	493d      	ldr	r1, [pc, #244]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x168>)
 80037ce:	fb01 f003 	mul.w	r0, r1, r3
 80037d2:	2100      	movs	r1, #0
 80037d4:	fb01 f102 	mul.w	r1, r1, r2
 80037d8:	1844      	adds	r4, r0, r1
 80037da:	493a      	ldr	r1, [pc, #232]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x168>)
 80037dc:	fba2 0101 	umull	r0, r1, r2, r1
 80037e0:	1863      	adds	r3, r4, r1
 80037e2:	4619      	mov	r1, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	461a      	mov	r2, r3
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	f7fd f9fc 	bl	8000be8 <__aeabi_uldivmod>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4613      	mov	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	e04a      	b.n	8003890 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037fa:	4b30      	ldr	r3, [pc, #192]	; (80038bc <HAL_RCC_GetSysClockFreq+0x160>)
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	099b      	lsrs	r3, r3, #6
 8003800:	461a      	mov	r2, r3
 8003802:	f04f 0300 	mov.w	r3, #0
 8003806:	f240 10ff 	movw	r0, #511	; 0x1ff
 800380a:	f04f 0100 	mov.w	r1, #0
 800380e:	ea02 0400 	and.w	r4, r2, r0
 8003812:	ea03 0501 	and.w	r5, r3, r1
 8003816:	4620      	mov	r0, r4
 8003818:	4629      	mov	r1, r5
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	f04f 0300 	mov.w	r3, #0
 8003822:	014b      	lsls	r3, r1, #5
 8003824:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003828:	0142      	lsls	r2, r0, #5
 800382a:	4610      	mov	r0, r2
 800382c:	4619      	mov	r1, r3
 800382e:	1b00      	subs	r0, r0, r4
 8003830:	eb61 0105 	sbc.w	r1, r1, r5
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	f04f 0300 	mov.w	r3, #0
 800383c:	018b      	lsls	r3, r1, #6
 800383e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003842:	0182      	lsls	r2, r0, #6
 8003844:	1a12      	subs	r2, r2, r0
 8003846:	eb63 0301 	sbc.w	r3, r3, r1
 800384a:	f04f 0000 	mov.w	r0, #0
 800384e:	f04f 0100 	mov.w	r1, #0
 8003852:	00d9      	lsls	r1, r3, #3
 8003854:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003858:	00d0      	lsls	r0, r2, #3
 800385a:	4602      	mov	r2, r0
 800385c:	460b      	mov	r3, r1
 800385e:	1912      	adds	r2, r2, r4
 8003860:	eb45 0303 	adc.w	r3, r5, r3
 8003864:	f04f 0000 	mov.w	r0, #0
 8003868:	f04f 0100 	mov.w	r1, #0
 800386c:	0299      	lsls	r1, r3, #10
 800386e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003872:	0290      	lsls	r0, r2, #10
 8003874:	4602      	mov	r2, r0
 8003876:	460b      	mov	r3, r1
 8003878:	4610      	mov	r0, r2
 800387a:	4619      	mov	r1, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	461a      	mov	r2, r3
 8003880:	f04f 0300 	mov.w	r3, #0
 8003884:	f7fd f9b0 	bl	8000be8 <__aeabi_uldivmod>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	4613      	mov	r3, r2
 800388e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003890:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <HAL_RCC_GetSysClockFreq+0x160>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	0c1b      	lsrs	r3, r3, #16
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	3301      	adds	r3, #1
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a8:	60bb      	str	r3, [r7, #8]
      break;
 80038aa:	e002      	b.n	80038b2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038ac:	4b04      	ldr	r3, [pc, #16]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x164>)
 80038ae:	60bb      	str	r3, [r7, #8]
      break;
 80038b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038b2:	68bb      	ldr	r3, [r7, #8]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bdb0      	pop	{r4, r5, r7, pc}
 80038bc:	40023800 	.word	0x40023800
 80038c0:	00f42400 	.word	0x00f42400
 80038c4:	017d7840 	.word	0x017d7840

080038c8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038cc:	4b03      	ldr	r3, [pc, #12]	; (80038dc <HAL_RCC_GetHCLKFreq+0x14>)
 80038ce:	681b      	ldr	r3, [r3, #0]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	20000000 	.word	0x20000000

080038e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038e4:	f7ff fff0 	bl	80038c8 <HAL_RCC_GetHCLKFreq>
 80038e8:	4602      	mov	r2, r0
 80038ea:	4b05      	ldr	r3, [pc, #20]	; (8003900 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	0a9b      	lsrs	r3, r3, #10
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	4903      	ldr	r1, [pc, #12]	; (8003904 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038f6:	5ccb      	ldrb	r3, [r1, r3]
 80038f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40023800 	.word	0x40023800
 8003904:	08007468 	.word	0x08007468

08003908 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800390c:	f7ff ffdc 	bl	80038c8 <HAL_RCC_GetHCLKFreq>
 8003910:	4602      	mov	r2, r0
 8003912:	4b05      	ldr	r3, [pc, #20]	; (8003928 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	0b5b      	lsrs	r3, r3, #13
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	4903      	ldr	r1, [pc, #12]	; (800392c <HAL_RCC_GetPCLK2Freq+0x24>)
 800391e:	5ccb      	ldrb	r3, [r1, r3]
 8003920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003924:	4618      	mov	r0, r3
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40023800 	.word	0x40023800
 800392c:	08007468 	.word	0x08007468

08003930 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b088      	sub	sp, #32
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003938:	2300      	movs	r3, #0
 800393a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800393c:	2300      	movs	r3, #0
 800393e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003940:	2300      	movs	r3, #0
 8003942:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003944:	2300      	movs	r3, #0
 8003946:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003948:	2300      	movs	r3, #0
 800394a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b00      	cmp	r3, #0
 8003956:	d012      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003958:	4b69      	ldr	r3, [pc, #420]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	4a68      	ldr	r2, [pc, #416]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800395e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003962:	6093      	str	r3, [r2, #8]
 8003964:	4b66      	ldr	r3, [pc, #408]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800396c:	4964      	ldr	r1, [pc, #400]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800396e:	4313      	orrs	r3, r2
 8003970:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800397a:	2301      	movs	r3, #1
 800397c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d017      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800398a:	4b5d      	ldr	r3, [pc, #372]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800398c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003990:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003998:	4959      	ldr	r1, [pc, #356]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800399a:	4313      	orrs	r3, r2
 800399c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039a8:	d101      	bne.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80039aa:	2301      	movs	r3, #1
 80039ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80039b6:	2301      	movs	r3, #1
 80039b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d017      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039c6:	4b4e      	ldr	r3, [pc, #312]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	494a      	ldr	r1, [pc, #296]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039e4:	d101      	bne.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80039e6:	2301      	movs	r3, #1
 80039e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80039f2:	2301      	movs	r3, #1
 80039f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003a02:	2301      	movs	r3, #1
 8003a04:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 808b 	beq.w	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a14:	4b3a      	ldr	r3, [pc, #232]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	4a39      	ldr	r2, [pc, #228]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a1e:	6413      	str	r3, [r2, #64]	; 0x40
 8003a20:	4b37      	ldr	r3, [pc, #220]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a28:	60bb      	str	r3, [r7, #8]
 8003a2a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a2c:	4b35      	ldr	r3, [pc, #212]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a34      	ldr	r2, [pc, #208]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a38:	f7fe f81a 	bl	8001a70 <HAL_GetTick>
 8003a3c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a40:	f7fe f816 	bl	8001a70 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b64      	cmp	r3, #100	; 0x64
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e357      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a52:	4b2c      	ldr	r3, [pc, #176]	; (8003b04 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d0f0      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a5e:	4b28      	ldr	r3, [pc, #160]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a66:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d035      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d02e      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a7c:	4b20      	ldr	r3, [pc, #128]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a84:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a86:	4b1e      	ldr	r3, [pc, #120]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8a:	4a1d      	ldr	r2, [pc, #116]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a90:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a92:	4b1b      	ldr	r3, [pc, #108]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a96:	4a1a      	ldr	r2, [pc, #104]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a9c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003a9e:	4a18      	ldr	r2, [pc, #96]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003aa4:	4b16      	ldr	r3, [pc, #88]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d114      	bne.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab0:	f7fd ffde 	bl	8001a70 <HAL_GetTick>
 8003ab4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab6:	e00a      	b.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ab8:	f7fd ffda 	bl	8001a70 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e319      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ace:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d0ee      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ae2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ae6:	d111      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003ae8:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003af4:	4b04      	ldr	r3, [pc, #16]	; (8003b08 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003af6:	400b      	ands	r3, r1
 8003af8:	4901      	ldr	r1, [pc, #4]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	608b      	str	r3, [r1, #8]
 8003afe:	e00b      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003b00:	40023800 	.word	0x40023800
 8003b04:	40007000 	.word	0x40007000
 8003b08:	0ffffcff 	.word	0x0ffffcff
 8003b0c:	4bb1      	ldr	r3, [pc, #708]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	4ab0      	ldr	r2, [pc, #704]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b12:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003b16:	6093      	str	r3, [r2, #8]
 8003b18:	4bae      	ldr	r3, [pc, #696]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b24:	49ab      	ldr	r1, [pc, #684]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0310 	and.w	r3, r3, #16
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d010      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b36:	4ba7      	ldr	r3, [pc, #668]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b3c:	4aa5      	ldr	r2, [pc, #660]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b42:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003b46:	4ba3      	ldr	r3, [pc, #652]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b48:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b50:	49a0      	ldr	r1, [pc, #640]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00a      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b64:	4b9b      	ldr	r3, [pc, #620]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b72:	4998      	ldr	r1, [pc, #608]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00a      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b86:	4b93      	ldr	r3, [pc, #588]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b94:	498f      	ldr	r1, [pc, #572]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00a      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ba8:	4b8a      	ldr	r3, [pc, #552]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bb6:	4987      	ldr	r1, [pc, #540]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00a      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003bca:	4b82      	ldr	r3, [pc, #520]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd8:	497e      	ldr	r1, [pc, #504]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00a      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bec:	4b79      	ldr	r3, [pc, #484]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf2:	f023 0203 	bic.w	r2, r3, #3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfa:	4976      	ldr	r1, [pc, #472]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00a      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c0e:	4b71      	ldr	r3, [pc, #452]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c14:	f023 020c 	bic.w	r2, r3, #12
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c1c:	496d      	ldr	r1, [pc, #436]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00a      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c30:	4b68      	ldr	r3, [pc, #416]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c36:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c3e:	4965      	ldr	r1, [pc, #404]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00a      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c52:	4b60      	ldr	r3, [pc, #384]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c58:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c60:	495c      	ldr	r1, [pc, #368]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00a      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c74:	4b57      	ldr	r3, [pc, #348]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c82:	4954      	ldr	r1, [pc, #336]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00a      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003c96:	4b4f      	ldr	r3, [pc, #316]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca4:	494b      	ldr	r1, [pc, #300]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00a      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003cb8:	4b46      	ldr	r3, [pc, #280]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cbe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc6:	4943      	ldr	r1, [pc, #268]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00a      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003cda:	4b3e      	ldr	r3, [pc, #248]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ce8:	493a      	ldr	r1, [pc, #232]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00a      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003cfc:	4b35      	ldr	r3, [pc, #212]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d02:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d0a:	4932      	ldr	r1, [pc, #200]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d011      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d1e:	4b2d      	ldr	r3, [pc, #180]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d24:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d2c:	4929      	ldr	r1, [pc, #164]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d3c:	d101      	bne.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0308 	and.w	r3, r3, #8
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d5e:	4b1d      	ldr	r3, [pc, #116]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d64:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d6c:	4919      	ldr	r1, [pc, #100]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00b      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d80:	4b14      	ldr	r3, [pc, #80]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d86:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d90:	4910      	ldr	r1, [pc, #64]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d006      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	f000 80d9 	beq.w	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003dac:	4b09      	ldr	r3, [pc, #36]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a08      	ldr	r2, [pc, #32]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003db2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003db6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003db8:	f7fd fe5a 	bl	8001a70 <HAL_GetTick>
 8003dbc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003dbe:	e00b      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003dc0:	f7fd fe56 	bl	8001a70 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	2b64      	cmp	r3, #100	; 0x64
 8003dcc:	d904      	bls.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e197      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003dd2:	bf00      	nop
 8003dd4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003dd8:	4b6c      	ldr	r3, [pc, #432]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1ed      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d021      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d11d      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003df8:	4b64      	ldr	r3, [pc, #400]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dfe:	0c1b      	lsrs	r3, r3, #16
 8003e00:	f003 0303 	and.w	r3, r3, #3
 8003e04:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e06:	4b61      	ldr	r3, [pc, #388]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e0c:	0e1b      	lsrs	r3, r3, #24
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	019a      	lsls	r2, r3, #6
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	041b      	lsls	r3, r3, #16
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	061b      	lsls	r3, r3, #24
 8003e24:	431a      	orrs	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	071b      	lsls	r3, r3, #28
 8003e2c:	4957      	ldr	r1, [pc, #348]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d004      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e48:	d00a      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d02e      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e5e:	d129      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e60:	4b4a      	ldr	r3, [pc, #296]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e66:	0c1b      	lsrs	r3, r3, #16
 8003e68:	f003 0303 	and.w	r3, r3, #3
 8003e6c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e6e:	4b47      	ldr	r3, [pc, #284]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e74:	0f1b      	lsrs	r3, r3, #28
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	019a      	lsls	r2, r3, #6
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	041b      	lsls	r3, r3, #16
 8003e86:	431a      	orrs	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	061b      	lsls	r3, r3, #24
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	071b      	lsls	r3, r3, #28
 8003e94:	493d      	ldr	r1, [pc, #244]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e9c:	4b3b      	ldr	r3, [pc, #236]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ea2:	f023 021f 	bic.w	r2, r3, #31
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	4937      	ldr	r1, [pc, #220]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d01d      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ec0:	4b32      	ldr	r3, [pc, #200]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ec6:	0e1b      	lsrs	r3, r3, #24
 8003ec8:	f003 030f 	and.w	r3, r3, #15
 8003ecc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ece:	4b2f      	ldr	r3, [pc, #188]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ed4:	0f1b      	lsrs	r3, r3, #28
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	019a      	lsls	r2, r3, #6
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	041b      	lsls	r3, r3, #16
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	061b      	lsls	r3, r3, #24
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	071b      	lsls	r3, r3, #28
 8003ef4:	4925      	ldr	r1, [pc, #148]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d011      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	019a      	lsls	r2, r3, #6
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	041b      	lsls	r3, r3, #16
 8003f14:	431a      	orrs	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	061b      	lsls	r3, r3, #24
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	071b      	lsls	r3, r3, #28
 8003f24:	4919      	ldr	r1, [pc, #100]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f2c:	4b17      	ldr	r3, [pc, #92]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a16      	ldr	r2, [pc, #88]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f38:	f7fd fd9a 	bl	8001a70 <HAL_GetTick>
 8003f3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f40:	f7fd fd96 	bl	8001a70 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b64      	cmp	r3, #100	; 0x64
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e0d7      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f52:	4b0e      	ldr	r3, [pc, #56]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0f0      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	f040 80cd 	bne.w	8004100 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f66:	4b09      	ldr	r3, [pc, #36]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a08      	ldr	r2, [pc, #32]	; (8003f8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f72:	f7fd fd7d 	bl	8001a70 <HAL_GetTick>
 8003f76:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f78:	e00a      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f7a:	f7fd fd79 	bl	8001a70 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b64      	cmp	r3, #100	; 0x64
 8003f86:	d903      	bls.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e0ba      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003f8c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f90:	4b5e      	ldr	r3, [pc, #376]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f9c:	d0ed      	beq.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d009      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d02e      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d12a      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003fc6:	4b51      	ldr	r3, [pc, #324]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fcc:	0c1b      	lsrs	r3, r3, #16
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fd4:	4b4d      	ldr	r3, [pc, #308]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fda:	0f1b      	lsrs	r3, r3, #28
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	019a      	lsls	r2, r3, #6
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	041b      	lsls	r3, r3, #16
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	061b      	lsls	r3, r3, #24
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	071b      	lsls	r3, r3, #28
 8003ffa:	4944      	ldr	r1, [pc, #272]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004002:	4b42      	ldr	r3, [pc, #264]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004004:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004008:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004010:	3b01      	subs	r3, #1
 8004012:	021b      	lsls	r3, r3, #8
 8004014:	493d      	ldr	r1, [pc, #244]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d022      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800402c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004030:	d11d      	bne.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004032:	4b36      	ldr	r3, [pc, #216]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004038:	0e1b      	lsrs	r3, r3, #24
 800403a:	f003 030f 	and.w	r3, r3, #15
 800403e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004040:	4b32      	ldr	r3, [pc, #200]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004046:	0f1b      	lsrs	r3, r3, #28
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	019a      	lsls	r2, r3, #6
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	041b      	lsls	r3, r3, #16
 800405a:	431a      	orrs	r2, r3
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	061b      	lsls	r3, r3, #24
 8004060:	431a      	orrs	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	071b      	lsls	r3, r3, #28
 8004066:	4929      	ldr	r1, [pc, #164]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004068:	4313      	orrs	r3, r2
 800406a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0308 	and.w	r3, r3, #8
 8004076:	2b00      	cmp	r3, #0
 8004078:	d028      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800407a:	4b24      	ldr	r3, [pc, #144]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800407c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004080:	0e1b      	lsrs	r3, r3, #24
 8004082:	f003 030f 	and.w	r3, r3, #15
 8004086:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004088:	4b20      	ldr	r3, [pc, #128]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800408a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800408e:	0c1b      	lsrs	r3, r3, #16
 8004090:	f003 0303 	and.w	r3, r3, #3
 8004094:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	019a      	lsls	r2, r3, #6
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	041b      	lsls	r3, r3, #16
 80040a0:	431a      	orrs	r2, r3
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	061b      	lsls	r3, r3, #24
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	071b      	lsls	r3, r3, #28
 80040ae:	4917      	ldr	r1, [pc, #92]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80040b6:	4b15      	ldr	r3, [pc, #84]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c4:	4911      	ldr	r1, [pc, #68]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80040cc:	4b0f      	ldr	r3, [pc, #60]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a0e      	ldr	r2, [pc, #56]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040d8:	f7fd fcca 	bl	8001a70 <HAL_GetTick>
 80040dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040de:	e008      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040e0:	f7fd fcc6 	bl	8001a70 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b64      	cmp	r3, #100	; 0x64
 80040ec:	d901      	bls.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e007      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040f2:	4b06      	ldr	r3, [pc, #24]	; (800410c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040fe:	d1ef      	bne.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3720      	adds	r7, #32
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	40023800 	.word	0x40023800

08004110 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e040      	b.n	80041a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004126:	2b00      	cmp	r3, #0
 8004128:	d106      	bne.n	8004138 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7fd fb1a 	bl	800176c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2224      	movs	r2, #36	; 0x24
 800413c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0201 	bic.w	r2, r2, #1
 800414c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f8c0 	bl	80042d4 <UART_SetConfig>
 8004154:	4603      	mov	r3, r0
 8004156:	2b01      	cmp	r3, #1
 8004158:	d101      	bne.n	800415e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e022      	b.n	80041a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	2b00      	cmp	r3, #0
 8004164:	d002      	beq.n	800416c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 fb16 	bl	8004798 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800417a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689a      	ldr	r2, [r3, #8]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800418a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0201 	orr.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 fb9d 	bl	80048dc <UART_CheckIdleState>
 80041a2:	4603      	mov	r3, r0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b08a      	sub	sp, #40	; 0x28
 80041b0:	af02      	add	r7, sp, #8
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	60b9      	str	r1, [r7, #8]
 80041b6:	603b      	str	r3, [r7, #0]
 80041b8:	4613      	mov	r3, r2
 80041ba:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041c0:	2b20      	cmp	r3, #32
 80041c2:	f040 8081 	bne.w	80042c8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d002      	beq.n	80041d2 <HAL_UART_Transmit+0x26>
 80041cc:	88fb      	ldrh	r3, [r7, #6]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e079      	b.n	80042ca <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d101      	bne.n	80041e4 <HAL_UART_Transmit+0x38>
 80041e0:	2302      	movs	r3, #2
 80041e2:	e072      	b.n	80042ca <HAL_UART_Transmit+0x11e>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2221      	movs	r2, #33	; 0x21
 80041f8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041fa:	f7fd fc39 	bl	8001a70 <HAL_GetTick>
 80041fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	88fa      	ldrh	r2, [r7, #6]
 8004204:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	88fa      	ldrh	r2, [r7, #6]
 800420c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004218:	d108      	bne.n	800422c <HAL_UART_Transmit+0x80>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d104      	bne.n	800422c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004222:	2300      	movs	r3, #0
 8004224:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	61bb      	str	r3, [r7, #24]
 800422a:	e003      	b.n	8004234 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004230:	2300      	movs	r3, #0
 8004232:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800423c:	e02c      	b.n	8004298 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2200      	movs	r2, #0
 8004246:	2180      	movs	r1, #128	; 0x80
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 fb7a 	bl	8004942 <UART_WaitOnFlagUntilTimeout>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e038      	b.n	80042ca <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10b      	bne.n	8004276 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	461a      	mov	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800426c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	3302      	adds	r3, #2
 8004272:	61bb      	str	r3, [r7, #24]
 8004274:	e007      	b.n	8004286 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	781a      	ldrb	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	3301      	adds	r3, #1
 8004284:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800428c:	b29b      	uxth	r3, r3
 800428e:	3b01      	subs	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1cc      	bne.n	800423e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	2200      	movs	r2, #0
 80042ac:	2140      	movs	r1, #64	; 0x40
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 fb47 	bl	8004942 <UART_WaitOnFlagUntilTimeout>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e005      	b.n	80042ca <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2220      	movs	r2, #32
 80042c2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80042c4:	2300      	movs	r3, #0
 80042c6:	e000      	b.n	80042ca <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80042c8:	2302      	movs	r3, #2
  }
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3720      	adds	r7, #32
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
	...

080042d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042dc:	2300      	movs	r3, #0
 80042de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	431a      	orrs	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	431a      	orrs	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	69db      	ldr	r3, [r3, #28]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	4ba7      	ldr	r3, [pc, #668]	; (800459c <UART_SetConfig+0x2c8>)
 8004300:	4013      	ands	r3, r2
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6812      	ldr	r2, [r2, #0]
 8004306:	6979      	ldr	r1, [r7, #20]
 8004308:	430b      	orrs	r3, r1
 800430a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	430a      	orrs	r2, r1
 8004320:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	4313      	orrs	r3, r2
 8004330:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	430a      	orrs	r2, r1
 8004344:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a95      	ldr	r2, [pc, #596]	; (80045a0 <UART_SetConfig+0x2cc>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d120      	bne.n	8004392 <UART_SetConfig+0xbe>
 8004350:	4b94      	ldr	r3, [pc, #592]	; (80045a4 <UART_SetConfig+0x2d0>)
 8004352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004356:	f003 0303 	and.w	r3, r3, #3
 800435a:	2b03      	cmp	r3, #3
 800435c:	d816      	bhi.n	800438c <UART_SetConfig+0xb8>
 800435e:	a201      	add	r2, pc, #4	; (adr r2, 8004364 <UART_SetConfig+0x90>)
 8004360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004364:	08004375 	.word	0x08004375
 8004368:	08004381 	.word	0x08004381
 800436c:	0800437b 	.word	0x0800437b
 8004370:	08004387 	.word	0x08004387
 8004374:	2301      	movs	r3, #1
 8004376:	77fb      	strb	r3, [r7, #31]
 8004378:	e14f      	b.n	800461a <UART_SetConfig+0x346>
 800437a:	2302      	movs	r3, #2
 800437c:	77fb      	strb	r3, [r7, #31]
 800437e:	e14c      	b.n	800461a <UART_SetConfig+0x346>
 8004380:	2304      	movs	r3, #4
 8004382:	77fb      	strb	r3, [r7, #31]
 8004384:	e149      	b.n	800461a <UART_SetConfig+0x346>
 8004386:	2308      	movs	r3, #8
 8004388:	77fb      	strb	r3, [r7, #31]
 800438a:	e146      	b.n	800461a <UART_SetConfig+0x346>
 800438c:	2310      	movs	r3, #16
 800438e:	77fb      	strb	r3, [r7, #31]
 8004390:	e143      	b.n	800461a <UART_SetConfig+0x346>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a84      	ldr	r2, [pc, #528]	; (80045a8 <UART_SetConfig+0x2d4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d132      	bne.n	8004402 <UART_SetConfig+0x12e>
 800439c:	4b81      	ldr	r3, [pc, #516]	; (80045a4 <UART_SetConfig+0x2d0>)
 800439e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a2:	f003 030c 	and.w	r3, r3, #12
 80043a6:	2b0c      	cmp	r3, #12
 80043a8:	d828      	bhi.n	80043fc <UART_SetConfig+0x128>
 80043aa:	a201      	add	r2, pc, #4	; (adr r2, 80043b0 <UART_SetConfig+0xdc>)
 80043ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b0:	080043e5 	.word	0x080043e5
 80043b4:	080043fd 	.word	0x080043fd
 80043b8:	080043fd 	.word	0x080043fd
 80043bc:	080043fd 	.word	0x080043fd
 80043c0:	080043f1 	.word	0x080043f1
 80043c4:	080043fd 	.word	0x080043fd
 80043c8:	080043fd 	.word	0x080043fd
 80043cc:	080043fd 	.word	0x080043fd
 80043d0:	080043eb 	.word	0x080043eb
 80043d4:	080043fd 	.word	0x080043fd
 80043d8:	080043fd 	.word	0x080043fd
 80043dc:	080043fd 	.word	0x080043fd
 80043e0:	080043f7 	.word	0x080043f7
 80043e4:	2300      	movs	r3, #0
 80043e6:	77fb      	strb	r3, [r7, #31]
 80043e8:	e117      	b.n	800461a <UART_SetConfig+0x346>
 80043ea:	2302      	movs	r3, #2
 80043ec:	77fb      	strb	r3, [r7, #31]
 80043ee:	e114      	b.n	800461a <UART_SetConfig+0x346>
 80043f0:	2304      	movs	r3, #4
 80043f2:	77fb      	strb	r3, [r7, #31]
 80043f4:	e111      	b.n	800461a <UART_SetConfig+0x346>
 80043f6:	2308      	movs	r3, #8
 80043f8:	77fb      	strb	r3, [r7, #31]
 80043fa:	e10e      	b.n	800461a <UART_SetConfig+0x346>
 80043fc:	2310      	movs	r3, #16
 80043fe:	77fb      	strb	r3, [r7, #31]
 8004400:	e10b      	b.n	800461a <UART_SetConfig+0x346>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a69      	ldr	r2, [pc, #420]	; (80045ac <UART_SetConfig+0x2d8>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d120      	bne.n	800444e <UART_SetConfig+0x17a>
 800440c:	4b65      	ldr	r3, [pc, #404]	; (80045a4 <UART_SetConfig+0x2d0>)
 800440e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004412:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004416:	2b30      	cmp	r3, #48	; 0x30
 8004418:	d013      	beq.n	8004442 <UART_SetConfig+0x16e>
 800441a:	2b30      	cmp	r3, #48	; 0x30
 800441c:	d814      	bhi.n	8004448 <UART_SetConfig+0x174>
 800441e:	2b20      	cmp	r3, #32
 8004420:	d009      	beq.n	8004436 <UART_SetConfig+0x162>
 8004422:	2b20      	cmp	r3, #32
 8004424:	d810      	bhi.n	8004448 <UART_SetConfig+0x174>
 8004426:	2b00      	cmp	r3, #0
 8004428:	d002      	beq.n	8004430 <UART_SetConfig+0x15c>
 800442a:	2b10      	cmp	r3, #16
 800442c:	d006      	beq.n	800443c <UART_SetConfig+0x168>
 800442e:	e00b      	b.n	8004448 <UART_SetConfig+0x174>
 8004430:	2300      	movs	r3, #0
 8004432:	77fb      	strb	r3, [r7, #31]
 8004434:	e0f1      	b.n	800461a <UART_SetConfig+0x346>
 8004436:	2302      	movs	r3, #2
 8004438:	77fb      	strb	r3, [r7, #31]
 800443a:	e0ee      	b.n	800461a <UART_SetConfig+0x346>
 800443c:	2304      	movs	r3, #4
 800443e:	77fb      	strb	r3, [r7, #31]
 8004440:	e0eb      	b.n	800461a <UART_SetConfig+0x346>
 8004442:	2308      	movs	r3, #8
 8004444:	77fb      	strb	r3, [r7, #31]
 8004446:	e0e8      	b.n	800461a <UART_SetConfig+0x346>
 8004448:	2310      	movs	r3, #16
 800444a:	77fb      	strb	r3, [r7, #31]
 800444c:	e0e5      	b.n	800461a <UART_SetConfig+0x346>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a57      	ldr	r2, [pc, #348]	; (80045b0 <UART_SetConfig+0x2dc>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d120      	bne.n	800449a <UART_SetConfig+0x1c6>
 8004458:	4b52      	ldr	r3, [pc, #328]	; (80045a4 <UART_SetConfig+0x2d0>)
 800445a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004462:	2bc0      	cmp	r3, #192	; 0xc0
 8004464:	d013      	beq.n	800448e <UART_SetConfig+0x1ba>
 8004466:	2bc0      	cmp	r3, #192	; 0xc0
 8004468:	d814      	bhi.n	8004494 <UART_SetConfig+0x1c0>
 800446a:	2b80      	cmp	r3, #128	; 0x80
 800446c:	d009      	beq.n	8004482 <UART_SetConfig+0x1ae>
 800446e:	2b80      	cmp	r3, #128	; 0x80
 8004470:	d810      	bhi.n	8004494 <UART_SetConfig+0x1c0>
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <UART_SetConfig+0x1a8>
 8004476:	2b40      	cmp	r3, #64	; 0x40
 8004478:	d006      	beq.n	8004488 <UART_SetConfig+0x1b4>
 800447a:	e00b      	b.n	8004494 <UART_SetConfig+0x1c0>
 800447c:	2300      	movs	r3, #0
 800447e:	77fb      	strb	r3, [r7, #31]
 8004480:	e0cb      	b.n	800461a <UART_SetConfig+0x346>
 8004482:	2302      	movs	r3, #2
 8004484:	77fb      	strb	r3, [r7, #31]
 8004486:	e0c8      	b.n	800461a <UART_SetConfig+0x346>
 8004488:	2304      	movs	r3, #4
 800448a:	77fb      	strb	r3, [r7, #31]
 800448c:	e0c5      	b.n	800461a <UART_SetConfig+0x346>
 800448e:	2308      	movs	r3, #8
 8004490:	77fb      	strb	r3, [r7, #31]
 8004492:	e0c2      	b.n	800461a <UART_SetConfig+0x346>
 8004494:	2310      	movs	r3, #16
 8004496:	77fb      	strb	r3, [r7, #31]
 8004498:	e0bf      	b.n	800461a <UART_SetConfig+0x346>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a45      	ldr	r2, [pc, #276]	; (80045b4 <UART_SetConfig+0x2e0>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d125      	bne.n	80044f0 <UART_SetConfig+0x21c>
 80044a4:	4b3f      	ldr	r3, [pc, #252]	; (80045a4 <UART_SetConfig+0x2d0>)
 80044a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044b2:	d017      	beq.n	80044e4 <UART_SetConfig+0x210>
 80044b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044b8:	d817      	bhi.n	80044ea <UART_SetConfig+0x216>
 80044ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044be:	d00b      	beq.n	80044d8 <UART_SetConfig+0x204>
 80044c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044c4:	d811      	bhi.n	80044ea <UART_SetConfig+0x216>
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <UART_SetConfig+0x1fe>
 80044ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044ce:	d006      	beq.n	80044de <UART_SetConfig+0x20a>
 80044d0:	e00b      	b.n	80044ea <UART_SetConfig+0x216>
 80044d2:	2300      	movs	r3, #0
 80044d4:	77fb      	strb	r3, [r7, #31]
 80044d6:	e0a0      	b.n	800461a <UART_SetConfig+0x346>
 80044d8:	2302      	movs	r3, #2
 80044da:	77fb      	strb	r3, [r7, #31]
 80044dc:	e09d      	b.n	800461a <UART_SetConfig+0x346>
 80044de:	2304      	movs	r3, #4
 80044e0:	77fb      	strb	r3, [r7, #31]
 80044e2:	e09a      	b.n	800461a <UART_SetConfig+0x346>
 80044e4:	2308      	movs	r3, #8
 80044e6:	77fb      	strb	r3, [r7, #31]
 80044e8:	e097      	b.n	800461a <UART_SetConfig+0x346>
 80044ea:	2310      	movs	r3, #16
 80044ec:	77fb      	strb	r3, [r7, #31]
 80044ee:	e094      	b.n	800461a <UART_SetConfig+0x346>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a30      	ldr	r2, [pc, #192]	; (80045b8 <UART_SetConfig+0x2e4>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d125      	bne.n	8004546 <UART_SetConfig+0x272>
 80044fa:	4b2a      	ldr	r3, [pc, #168]	; (80045a4 <UART_SetConfig+0x2d0>)
 80044fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004500:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004504:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004508:	d017      	beq.n	800453a <UART_SetConfig+0x266>
 800450a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800450e:	d817      	bhi.n	8004540 <UART_SetConfig+0x26c>
 8004510:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004514:	d00b      	beq.n	800452e <UART_SetConfig+0x25a>
 8004516:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800451a:	d811      	bhi.n	8004540 <UART_SetConfig+0x26c>
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <UART_SetConfig+0x254>
 8004520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004524:	d006      	beq.n	8004534 <UART_SetConfig+0x260>
 8004526:	e00b      	b.n	8004540 <UART_SetConfig+0x26c>
 8004528:	2301      	movs	r3, #1
 800452a:	77fb      	strb	r3, [r7, #31]
 800452c:	e075      	b.n	800461a <UART_SetConfig+0x346>
 800452e:	2302      	movs	r3, #2
 8004530:	77fb      	strb	r3, [r7, #31]
 8004532:	e072      	b.n	800461a <UART_SetConfig+0x346>
 8004534:	2304      	movs	r3, #4
 8004536:	77fb      	strb	r3, [r7, #31]
 8004538:	e06f      	b.n	800461a <UART_SetConfig+0x346>
 800453a:	2308      	movs	r3, #8
 800453c:	77fb      	strb	r3, [r7, #31]
 800453e:	e06c      	b.n	800461a <UART_SetConfig+0x346>
 8004540:	2310      	movs	r3, #16
 8004542:	77fb      	strb	r3, [r7, #31]
 8004544:	e069      	b.n	800461a <UART_SetConfig+0x346>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a1c      	ldr	r2, [pc, #112]	; (80045bc <UART_SetConfig+0x2e8>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d137      	bne.n	80045c0 <UART_SetConfig+0x2ec>
 8004550:	4b14      	ldr	r3, [pc, #80]	; (80045a4 <UART_SetConfig+0x2d0>)
 8004552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004556:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800455a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800455e:	d017      	beq.n	8004590 <UART_SetConfig+0x2bc>
 8004560:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004564:	d817      	bhi.n	8004596 <UART_SetConfig+0x2c2>
 8004566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800456a:	d00b      	beq.n	8004584 <UART_SetConfig+0x2b0>
 800456c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004570:	d811      	bhi.n	8004596 <UART_SetConfig+0x2c2>
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <UART_SetConfig+0x2aa>
 8004576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800457a:	d006      	beq.n	800458a <UART_SetConfig+0x2b6>
 800457c:	e00b      	b.n	8004596 <UART_SetConfig+0x2c2>
 800457e:	2300      	movs	r3, #0
 8004580:	77fb      	strb	r3, [r7, #31]
 8004582:	e04a      	b.n	800461a <UART_SetConfig+0x346>
 8004584:	2302      	movs	r3, #2
 8004586:	77fb      	strb	r3, [r7, #31]
 8004588:	e047      	b.n	800461a <UART_SetConfig+0x346>
 800458a:	2304      	movs	r3, #4
 800458c:	77fb      	strb	r3, [r7, #31]
 800458e:	e044      	b.n	800461a <UART_SetConfig+0x346>
 8004590:	2308      	movs	r3, #8
 8004592:	77fb      	strb	r3, [r7, #31]
 8004594:	e041      	b.n	800461a <UART_SetConfig+0x346>
 8004596:	2310      	movs	r3, #16
 8004598:	77fb      	strb	r3, [r7, #31]
 800459a:	e03e      	b.n	800461a <UART_SetConfig+0x346>
 800459c:	efff69f3 	.word	0xefff69f3
 80045a0:	40011000 	.word	0x40011000
 80045a4:	40023800 	.word	0x40023800
 80045a8:	40004400 	.word	0x40004400
 80045ac:	40004800 	.word	0x40004800
 80045b0:	40004c00 	.word	0x40004c00
 80045b4:	40005000 	.word	0x40005000
 80045b8:	40011400 	.word	0x40011400
 80045bc:	40007800 	.word	0x40007800
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a71      	ldr	r2, [pc, #452]	; (800478c <UART_SetConfig+0x4b8>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d125      	bne.n	8004616 <UART_SetConfig+0x342>
 80045ca:	4b71      	ldr	r3, [pc, #452]	; (8004790 <UART_SetConfig+0x4bc>)
 80045cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80045d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80045d8:	d017      	beq.n	800460a <UART_SetConfig+0x336>
 80045da:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80045de:	d817      	bhi.n	8004610 <UART_SetConfig+0x33c>
 80045e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045e4:	d00b      	beq.n	80045fe <UART_SetConfig+0x32a>
 80045e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045ea:	d811      	bhi.n	8004610 <UART_SetConfig+0x33c>
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <UART_SetConfig+0x324>
 80045f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045f4:	d006      	beq.n	8004604 <UART_SetConfig+0x330>
 80045f6:	e00b      	b.n	8004610 <UART_SetConfig+0x33c>
 80045f8:	2300      	movs	r3, #0
 80045fa:	77fb      	strb	r3, [r7, #31]
 80045fc:	e00d      	b.n	800461a <UART_SetConfig+0x346>
 80045fe:	2302      	movs	r3, #2
 8004600:	77fb      	strb	r3, [r7, #31]
 8004602:	e00a      	b.n	800461a <UART_SetConfig+0x346>
 8004604:	2304      	movs	r3, #4
 8004606:	77fb      	strb	r3, [r7, #31]
 8004608:	e007      	b.n	800461a <UART_SetConfig+0x346>
 800460a:	2308      	movs	r3, #8
 800460c:	77fb      	strb	r3, [r7, #31]
 800460e:	e004      	b.n	800461a <UART_SetConfig+0x346>
 8004610:	2310      	movs	r3, #16
 8004612:	77fb      	strb	r3, [r7, #31]
 8004614:	e001      	b.n	800461a <UART_SetConfig+0x346>
 8004616:	2310      	movs	r3, #16
 8004618:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004622:	d15b      	bne.n	80046dc <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004624:	7ffb      	ldrb	r3, [r7, #31]
 8004626:	2b08      	cmp	r3, #8
 8004628:	d827      	bhi.n	800467a <UART_SetConfig+0x3a6>
 800462a:	a201      	add	r2, pc, #4	; (adr r2, 8004630 <UART_SetConfig+0x35c>)
 800462c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004630:	08004655 	.word	0x08004655
 8004634:	0800465d 	.word	0x0800465d
 8004638:	08004665 	.word	0x08004665
 800463c:	0800467b 	.word	0x0800467b
 8004640:	0800466b 	.word	0x0800466b
 8004644:	0800467b 	.word	0x0800467b
 8004648:	0800467b 	.word	0x0800467b
 800464c:	0800467b 	.word	0x0800467b
 8004650:	08004673 	.word	0x08004673
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004654:	f7ff f944 	bl	80038e0 <HAL_RCC_GetPCLK1Freq>
 8004658:	61b8      	str	r0, [r7, #24]
        break;
 800465a:	e013      	b.n	8004684 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800465c:	f7ff f954 	bl	8003908 <HAL_RCC_GetPCLK2Freq>
 8004660:	61b8      	str	r0, [r7, #24]
        break;
 8004662:	e00f      	b.n	8004684 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004664:	4b4b      	ldr	r3, [pc, #300]	; (8004794 <UART_SetConfig+0x4c0>)
 8004666:	61bb      	str	r3, [r7, #24]
        break;
 8004668:	e00c      	b.n	8004684 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800466a:	f7ff f877 	bl	800375c <HAL_RCC_GetSysClockFreq>
 800466e:	61b8      	str	r0, [r7, #24]
        break;
 8004670:	e008      	b.n	8004684 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004676:	61bb      	str	r3, [r7, #24]
        break;
 8004678:	e004      	b.n	8004684 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800467a:	2300      	movs	r3, #0
 800467c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	77bb      	strb	r3, [r7, #30]
        break;
 8004682:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d074      	beq.n	8004774 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	005a      	lsls	r2, r3, #1
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	085b      	lsrs	r3, r3, #1
 8004694:	441a      	add	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	fbb2 f3f3 	udiv	r3, r2, r3
 800469e:	b29b      	uxth	r3, r3
 80046a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	2b0f      	cmp	r3, #15
 80046a6:	d916      	bls.n	80046d6 <UART_SetConfig+0x402>
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ae:	d212      	bcs.n	80046d6 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	f023 030f 	bic.w	r3, r3, #15
 80046b8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	085b      	lsrs	r3, r3, #1
 80046be:	b29b      	uxth	r3, r3
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	89fb      	ldrh	r3, [r7, #14]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	89fa      	ldrh	r2, [r7, #14]
 80046d2:	60da      	str	r2, [r3, #12]
 80046d4:	e04e      	b.n	8004774 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	77bb      	strb	r3, [r7, #30]
 80046da:	e04b      	b.n	8004774 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046dc:	7ffb      	ldrb	r3, [r7, #31]
 80046de:	2b08      	cmp	r3, #8
 80046e0:	d827      	bhi.n	8004732 <UART_SetConfig+0x45e>
 80046e2:	a201      	add	r2, pc, #4	; (adr r2, 80046e8 <UART_SetConfig+0x414>)
 80046e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e8:	0800470d 	.word	0x0800470d
 80046ec:	08004715 	.word	0x08004715
 80046f0:	0800471d 	.word	0x0800471d
 80046f4:	08004733 	.word	0x08004733
 80046f8:	08004723 	.word	0x08004723
 80046fc:	08004733 	.word	0x08004733
 8004700:	08004733 	.word	0x08004733
 8004704:	08004733 	.word	0x08004733
 8004708:	0800472b 	.word	0x0800472b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800470c:	f7ff f8e8 	bl	80038e0 <HAL_RCC_GetPCLK1Freq>
 8004710:	61b8      	str	r0, [r7, #24]
        break;
 8004712:	e013      	b.n	800473c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004714:	f7ff f8f8 	bl	8003908 <HAL_RCC_GetPCLK2Freq>
 8004718:	61b8      	str	r0, [r7, #24]
        break;
 800471a:	e00f      	b.n	800473c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800471c:	4b1d      	ldr	r3, [pc, #116]	; (8004794 <UART_SetConfig+0x4c0>)
 800471e:	61bb      	str	r3, [r7, #24]
        break;
 8004720:	e00c      	b.n	800473c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004722:	f7ff f81b 	bl	800375c <HAL_RCC_GetSysClockFreq>
 8004726:	61b8      	str	r0, [r7, #24]
        break;
 8004728:	e008      	b.n	800473c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800472a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800472e:	61bb      	str	r3, [r7, #24]
        break;
 8004730:	e004      	b.n	800473c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8004732:	2300      	movs	r3, #0
 8004734:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	77bb      	strb	r3, [r7, #30]
        break;
 800473a:	bf00      	nop
    }

    if (pclk != 0U)
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d018      	beq.n	8004774 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	085a      	lsrs	r2, r3, #1
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	441a      	add	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	fbb2 f3f3 	udiv	r3, r2, r3
 8004754:	b29b      	uxth	r3, r3
 8004756:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	2b0f      	cmp	r3, #15
 800475c:	d908      	bls.n	8004770 <UART_SetConfig+0x49c>
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004764:	d204      	bcs.n	8004770 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	60da      	str	r2, [r3, #12]
 800476e:	e001      	b.n	8004774 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004780:	7fbb      	ldrb	r3, [r7, #30]
}
 8004782:	4618      	mov	r0, r3
 8004784:	3720      	adds	r7, #32
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	40007c00 	.word	0x40007c00
 8004790:	40023800 	.word	0x40023800
 8004794:	00f42400 	.word	0x00f42400

08004798 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00a      	beq.n	80047c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00a      	beq.n	80047e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00a      	beq.n	8004806 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	f003 0308 	and.w	r3, r3, #8
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00a      	beq.n	8004828 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	f003 0310 	and.w	r3, r3, #16
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00a      	beq.n	800484a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	f003 0320 	and.w	r3, r3, #32
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00a      	beq.n	800486c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	430a      	orrs	r2, r1
 800486a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004874:	2b00      	cmp	r3, #0
 8004876:	d01a      	beq.n	80048ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004896:	d10a      	bne.n	80048ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	430a      	orrs	r2, r1
 80048ce:	605a      	str	r2, [r3, #4]
  }
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af02      	add	r7, sp, #8
 80048e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048ec:	f7fd f8c0 	bl	8001a70 <HAL_GetTick>
 80048f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0308 	and.w	r3, r3, #8
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d10e      	bne.n	800491e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004900:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f817 	bl	8004942 <UART_WaitOnFlagUntilTimeout>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e00d      	b.n	800493a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2220      	movs	r2, #32
 8004922:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2220      	movs	r2, #32
 8004928:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b084      	sub	sp, #16
 8004946:	af00      	add	r7, sp, #0
 8004948:	60f8      	str	r0, [r7, #12]
 800494a:	60b9      	str	r1, [r7, #8]
 800494c:	603b      	str	r3, [r7, #0]
 800494e:	4613      	mov	r3, r2
 8004950:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004952:	e05e      	b.n	8004a12 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495a:	d05a      	beq.n	8004a12 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800495c:	f7fd f888 	bl	8001a70 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	429a      	cmp	r2, r3
 800496a:	d302      	bcc.n	8004972 <UART_WaitOnFlagUntilTimeout+0x30>
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d11b      	bne.n	80049aa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004980:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 0201 	bic.w	r2, r2, #1
 8004990:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2220      	movs	r2, #32
 8004996:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2220      	movs	r2, #32
 800499c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e043      	b.n	8004a32 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d02c      	beq.n	8004a12 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049c6:	d124      	bne.n	8004a12 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049d0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80049e0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689a      	ldr	r2, [r3, #8]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 0201 	bic.w	r2, r2, #1
 80049f0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2220      	movs	r2, #32
 80049f6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2220      	movs	r2, #32
 80049fc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2220      	movs	r2, #32
 8004a02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e00f      	b.n	8004a32 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	69da      	ldr	r2, [r3, #28]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	bf0c      	ite	eq
 8004a22:	2301      	moveq	r3, #1
 8004a24:	2300      	movne	r3, #0
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	461a      	mov	r2, r3
 8004a2a:	79fb      	ldrb	r3, [r7, #7]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d091      	beq.n	8004954 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
	...

08004a3c <__errno>:
 8004a3c:	4b01      	ldr	r3, [pc, #4]	; (8004a44 <__errno+0x8>)
 8004a3e:	6818      	ldr	r0, [r3, #0]
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	2000000c 	.word	0x2000000c

08004a48 <__libc_init_array>:
 8004a48:	b570      	push	{r4, r5, r6, lr}
 8004a4a:	4d0d      	ldr	r5, [pc, #52]	; (8004a80 <__libc_init_array+0x38>)
 8004a4c:	4c0d      	ldr	r4, [pc, #52]	; (8004a84 <__libc_init_array+0x3c>)
 8004a4e:	1b64      	subs	r4, r4, r5
 8004a50:	10a4      	asrs	r4, r4, #2
 8004a52:	2600      	movs	r6, #0
 8004a54:	42a6      	cmp	r6, r4
 8004a56:	d109      	bne.n	8004a6c <__libc_init_array+0x24>
 8004a58:	4d0b      	ldr	r5, [pc, #44]	; (8004a88 <__libc_init_array+0x40>)
 8004a5a:	4c0c      	ldr	r4, [pc, #48]	; (8004a8c <__libc_init_array+0x44>)
 8004a5c:	f002 fcee 	bl	800743c <_init>
 8004a60:	1b64      	subs	r4, r4, r5
 8004a62:	10a4      	asrs	r4, r4, #2
 8004a64:	2600      	movs	r6, #0
 8004a66:	42a6      	cmp	r6, r4
 8004a68:	d105      	bne.n	8004a76 <__libc_init_array+0x2e>
 8004a6a:	bd70      	pop	{r4, r5, r6, pc}
 8004a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a70:	4798      	blx	r3
 8004a72:	3601      	adds	r6, #1
 8004a74:	e7ee      	b.n	8004a54 <__libc_init_array+0xc>
 8004a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a7a:	4798      	blx	r3
 8004a7c:	3601      	adds	r6, #1
 8004a7e:	e7f2      	b.n	8004a66 <__libc_init_array+0x1e>
 8004a80:	08007864 	.word	0x08007864
 8004a84:	08007864 	.word	0x08007864
 8004a88:	08007864 	.word	0x08007864
 8004a8c:	08007868 	.word	0x08007868

08004a90 <malloc>:
 8004a90:	4b02      	ldr	r3, [pc, #8]	; (8004a9c <malloc+0xc>)
 8004a92:	4601      	mov	r1, r0
 8004a94:	6818      	ldr	r0, [r3, #0]
 8004a96:	f000 b85b 	b.w	8004b50 <_malloc_r>
 8004a9a:	bf00      	nop
 8004a9c:	2000000c 	.word	0x2000000c

08004aa0 <memset>:
 8004aa0:	4402      	add	r2, r0
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d100      	bne.n	8004aaa <memset+0xa>
 8004aa8:	4770      	bx	lr
 8004aaa:	f803 1b01 	strb.w	r1, [r3], #1
 8004aae:	e7f9      	b.n	8004aa4 <memset+0x4>

08004ab0 <_free_r>:
 8004ab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ab2:	2900      	cmp	r1, #0
 8004ab4:	d048      	beq.n	8004b48 <_free_r+0x98>
 8004ab6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004aba:	9001      	str	r0, [sp, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f1a1 0404 	sub.w	r4, r1, #4
 8004ac2:	bfb8      	it	lt
 8004ac4:	18e4      	addlt	r4, r4, r3
 8004ac6:	f001 fba1 	bl	800620c <__malloc_lock>
 8004aca:	4a20      	ldr	r2, [pc, #128]	; (8004b4c <_free_r+0x9c>)
 8004acc:	9801      	ldr	r0, [sp, #4]
 8004ace:	6813      	ldr	r3, [r2, #0]
 8004ad0:	4615      	mov	r5, r2
 8004ad2:	b933      	cbnz	r3, 8004ae2 <_free_r+0x32>
 8004ad4:	6063      	str	r3, [r4, #4]
 8004ad6:	6014      	str	r4, [r2, #0]
 8004ad8:	b003      	add	sp, #12
 8004ada:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ade:	f001 bb9b 	b.w	8006218 <__malloc_unlock>
 8004ae2:	42a3      	cmp	r3, r4
 8004ae4:	d90b      	bls.n	8004afe <_free_r+0x4e>
 8004ae6:	6821      	ldr	r1, [r4, #0]
 8004ae8:	1862      	adds	r2, r4, r1
 8004aea:	4293      	cmp	r3, r2
 8004aec:	bf04      	itt	eq
 8004aee:	681a      	ldreq	r2, [r3, #0]
 8004af0:	685b      	ldreq	r3, [r3, #4]
 8004af2:	6063      	str	r3, [r4, #4]
 8004af4:	bf04      	itt	eq
 8004af6:	1852      	addeq	r2, r2, r1
 8004af8:	6022      	streq	r2, [r4, #0]
 8004afa:	602c      	str	r4, [r5, #0]
 8004afc:	e7ec      	b.n	8004ad8 <_free_r+0x28>
 8004afe:	461a      	mov	r2, r3
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	b10b      	cbz	r3, 8004b08 <_free_r+0x58>
 8004b04:	42a3      	cmp	r3, r4
 8004b06:	d9fa      	bls.n	8004afe <_free_r+0x4e>
 8004b08:	6811      	ldr	r1, [r2, #0]
 8004b0a:	1855      	adds	r5, r2, r1
 8004b0c:	42a5      	cmp	r5, r4
 8004b0e:	d10b      	bne.n	8004b28 <_free_r+0x78>
 8004b10:	6824      	ldr	r4, [r4, #0]
 8004b12:	4421      	add	r1, r4
 8004b14:	1854      	adds	r4, r2, r1
 8004b16:	42a3      	cmp	r3, r4
 8004b18:	6011      	str	r1, [r2, #0]
 8004b1a:	d1dd      	bne.n	8004ad8 <_free_r+0x28>
 8004b1c:	681c      	ldr	r4, [r3, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	6053      	str	r3, [r2, #4]
 8004b22:	4421      	add	r1, r4
 8004b24:	6011      	str	r1, [r2, #0]
 8004b26:	e7d7      	b.n	8004ad8 <_free_r+0x28>
 8004b28:	d902      	bls.n	8004b30 <_free_r+0x80>
 8004b2a:	230c      	movs	r3, #12
 8004b2c:	6003      	str	r3, [r0, #0]
 8004b2e:	e7d3      	b.n	8004ad8 <_free_r+0x28>
 8004b30:	6825      	ldr	r5, [r4, #0]
 8004b32:	1961      	adds	r1, r4, r5
 8004b34:	428b      	cmp	r3, r1
 8004b36:	bf04      	itt	eq
 8004b38:	6819      	ldreq	r1, [r3, #0]
 8004b3a:	685b      	ldreq	r3, [r3, #4]
 8004b3c:	6063      	str	r3, [r4, #4]
 8004b3e:	bf04      	itt	eq
 8004b40:	1949      	addeq	r1, r1, r5
 8004b42:	6021      	streq	r1, [r4, #0]
 8004b44:	6054      	str	r4, [r2, #4]
 8004b46:	e7c7      	b.n	8004ad8 <_free_r+0x28>
 8004b48:	b003      	add	sp, #12
 8004b4a:	bd30      	pop	{r4, r5, pc}
 8004b4c:	20000208 	.word	0x20000208

08004b50 <_malloc_r>:
 8004b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b52:	1ccd      	adds	r5, r1, #3
 8004b54:	f025 0503 	bic.w	r5, r5, #3
 8004b58:	3508      	adds	r5, #8
 8004b5a:	2d0c      	cmp	r5, #12
 8004b5c:	bf38      	it	cc
 8004b5e:	250c      	movcc	r5, #12
 8004b60:	2d00      	cmp	r5, #0
 8004b62:	4606      	mov	r6, r0
 8004b64:	db01      	blt.n	8004b6a <_malloc_r+0x1a>
 8004b66:	42a9      	cmp	r1, r5
 8004b68:	d903      	bls.n	8004b72 <_malloc_r+0x22>
 8004b6a:	230c      	movs	r3, #12
 8004b6c:	6033      	str	r3, [r6, #0]
 8004b6e:	2000      	movs	r0, #0
 8004b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b72:	f001 fb4b 	bl	800620c <__malloc_lock>
 8004b76:	4921      	ldr	r1, [pc, #132]	; (8004bfc <_malloc_r+0xac>)
 8004b78:	680a      	ldr	r2, [r1, #0]
 8004b7a:	4614      	mov	r4, r2
 8004b7c:	b99c      	cbnz	r4, 8004ba6 <_malloc_r+0x56>
 8004b7e:	4f20      	ldr	r7, [pc, #128]	; (8004c00 <_malloc_r+0xb0>)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	b923      	cbnz	r3, 8004b8e <_malloc_r+0x3e>
 8004b84:	4621      	mov	r1, r4
 8004b86:	4630      	mov	r0, r6
 8004b88:	f000 fca6 	bl	80054d8 <_sbrk_r>
 8004b8c:	6038      	str	r0, [r7, #0]
 8004b8e:	4629      	mov	r1, r5
 8004b90:	4630      	mov	r0, r6
 8004b92:	f000 fca1 	bl	80054d8 <_sbrk_r>
 8004b96:	1c43      	adds	r3, r0, #1
 8004b98:	d123      	bne.n	8004be2 <_malloc_r+0x92>
 8004b9a:	230c      	movs	r3, #12
 8004b9c:	6033      	str	r3, [r6, #0]
 8004b9e:	4630      	mov	r0, r6
 8004ba0:	f001 fb3a 	bl	8006218 <__malloc_unlock>
 8004ba4:	e7e3      	b.n	8004b6e <_malloc_r+0x1e>
 8004ba6:	6823      	ldr	r3, [r4, #0]
 8004ba8:	1b5b      	subs	r3, r3, r5
 8004baa:	d417      	bmi.n	8004bdc <_malloc_r+0x8c>
 8004bac:	2b0b      	cmp	r3, #11
 8004bae:	d903      	bls.n	8004bb8 <_malloc_r+0x68>
 8004bb0:	6023      	str	r3, [r4, #0]
 8004bb2:	441c      	add	r4, r3
 8004bb4:	6025      	str	r5, [r4, #0]
 8004bb6:	e004      	b.n	8004bc2 <_malloc_r+0x72>
 8004bb8:	6863      	ldr	r3, [r4, #4]
 8004bba:	42a2      	cmp	r2, r4
 8004bbc:	bf0c      	ite	eq
 8004bbe:	600b      	streq	r3, [r1, #0]
 8004bc0:	6053      	strne	r3, [r2, #4]
 8004bc2:	4630      	mov	r0, r6
 8004bc4:	f001 fb28 	bl	8006218 <__malloc_unlock>
 8004bc8:	f104 000b 	add.w	r0, r4, #11
 8004bcc:	1d23      	adds	r3, r4, #4
 8004bce:	f020 0007 	bic.w	r0, r0, #7
 8004bd2:	1ac2      	subs	r2, r0, r3
 8004bd4:	d0cc      	beq.n	8004b70 <_malloc_r+0x20>
 8004bd6:	1a1b      	subs	r3, r3, r0
 8004bd8:	50a3      	str	r3, [r4, r2]
 8004bda:	e7c9      	b.n	8004b70 <_malloc_r+0x20>
 8004bdc:	4622      	mov	r2, r4
 8004bde:	6864      	ldr	r4, [r4, #4]
 8004be0:	e7cc      	b.n	8004b7c <_malloc_r+0x2c>
 8004be2:	1cc4      	adds	r4, r0, #3
 8004be4:	f024 0403 	bic.w	r4, r4, #3
 8004be8:	42a0      	cmp	r0, r4
 8004bea:	d0e3      	beq.n	8004bb4 <_malloc_r+0x64>
 8004bec:	1a21      	subs	r1, r4, r0
 8004bee:	4630      	mov	r0, r6
 8004bf0:	f000 fc72 	bl	80054d8 <_sbrk_r>
 8004bf4:	3001      	adds	r0, #1
 8004bf6:	d1dd      	bne.n	8004bb4 <_malloc_r+0x64>
 8004bf8:	e7cf      	b.n	8004b9a <_malloc_r+0x4a>
 8004bfa:	bf00      	nop
 8004bfc:	20000208 	.word	0x20000208
 8004c00:	2000020c 	.word	0x2000020c

08004c04 <__cvt>:
 8004c04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c08:	ec55 4b10 	vmov	r4, r5, d0
 8004c0c:	2d00      	cmp	r5, #0
 8004c0e:	460e      	mov	r6, r1
 8004c10:	4619      	mov	r1, r3
 8004c12:	462b      	mov	r3, r5
 8004c14:	bfbb      	ittet	lt
 8004c16:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004c1a:	461d      	movlt	r5, r3
 8004c1c:	2300      	movge	r3, #0
 8004c1e:	232d      	movlt	r3, #45	; 0x2d
 8004c20:	700b      	strb	r3, [r1, #0]
 8004c22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c24:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004c28:	4691      	mov	r9, r2
 8004c2a:	f023 0820 	bic.w	r8, r3, #32
 8004c2e:	bfbc      	itt	lt
 8004c30:	4622      	movlt	r2, r4
 8004c32:	4614      	movlt	r4, r2
 8004c34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c38:	d005      	beq.n	8004c46 <__cvt+0x42>
 8004c3a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004c3e:	d100      	bne.n	8004c42 <__cvt+0x3e>
 8004c40:	3601      	adds	r6, #1
 8004c42:	2102      	movs	r1, #2
 8004c44:	e000      	b.n	8004c48 <__cvt+0x44>
 8004c46:	2103      	movs	r1, #3
 8004c48:	ab03      	add	r3, sp, #12
 8004c4a:	9301      	str	r3, [sp, #4]
 8004c4c:	ab02      	add	r3, sp, #8
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	ec45 4b10 	vmov	d0, r4, r5
 8004c54:	4653      	mov	r3, sl
 8004c56:	4632      	mov	r2, r6
 8004c58:	f000 fcda 	bl	8005610 <_dtoa_r>
 8004c5c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004c60:	4607      	mov	r7, r0
 8004c62:	d102      	bne.n	8004c6a <__cvt+0x66>
 8004c64:	f019 0f01 	tst.w	r9, #1
 8004c68:	d022      	beq.n	8004cb0 <__cvt+0xac>
 8004c6a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c6e:	eb07 0906 	add.w	r9, r7, r6
 8004c72:	d110      	bne.n	8004c96 <__cvt+0x92>
 8004c74:	783b      	ldrb	r3, [r7, #0]
 8004c76:	2b30      	cmp	r3, #48	; 0x30
 8004c78:	d10a      	bne.n	8004c90 <__cvt+0x8c>
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	4620      	mov	r0, r4
 8004c80:	4629      	mov	r1, r5
 8004c82:	f7fb ff41 	bl	8000b08 <__aeabi_dcmpeq>
 8004c86:	b918      	cbnz	r0, 8004c90 <__cvt+0x8c>
 8004c88:	f1c6 0601 	rsb	r6, r6, #1
 8004c8c:	f8ca 6000 	str.w	r6, [sl]
 8004c90:	f8da 3000 	ldr.w	r3, [sl]
 8004c94:	4499      	add	r9, r3
 8004c96:	2200      	movs	r2, #0
 8004c98:	2300      	movs	r3, #0
 8004c9a:	4620      	mov	r0, r4
 8004c9c:	4629      	mov	r1, r5
 8004c9e:	f7fb ff33 	bl	8000b08 <__aeabi_dcmpeq>
 8004ca2:	b108      	cbz	r0, 8004ca8 <__cvt+0xa4>
 8004ca4:	f8cd 900c 	str.w	r9, [sp, #12]
 8004ca8:	2230      	movs	r2, #48	; 0x30
 8004caa:	9b03      	ldr	r3, [sp, #12]
 8004cac:	454b      	cmp	r3, r9
 8004cae:	d307      	bcc.n	8004cc0 <__cvt+0xbc>
 8004cb0:	9b03      	ldr	r3, [sp, #12]
 8004cb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cb4:	1bdb      	subs	r3, r3, r7
 8004cb6:	4638      	mov	r0, r7
 8004cb8:	6013      	str	r3, [r2, #0]
 8004cba:	b004      	add	sp, #16
 8004cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cc0:	1c59      	adds	r1, r3, #1
 8004cc2:	9103      	str	r1, [sp, #12]
 8004cc4:	701a      	strb	r2, [r3, #0]
 8004cc6:	e7f0      	b.n	8004caa <__cvt+0xa6>

08004cc8 <__exponent>:
 8004cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2900      	cmp	r1, #0
 8004cce:	bfb8      	it	lt
 8004cd0:	4249      	neglt	r1, r1
 8004cd2:	f803 2b02 	strb.w	r2, [r3], #2
 8004cd6:	bfb4      	ite	lt
 8004cd8:	222d      	movlt	r2, #45	; 0x2d
 8004cda:	222b      	movge	r2, #43	; 0x2b
 8004cdc:	2909      	cmp	r1, #9
 8004cde:	7042      	strb	r2, [r0, #1]
 8004ce0:	dd2a      	ble.n	8004d38 <__exponent+0x70>
 8004ce2:	f10d 0407 	add.w	r4, sp, #7
 8004ce6:	46a4      	mov	ip, r4
 8004ce8:	270a      	movs	r7, #10
 8004cea:	46a6      	mov	lr, r4
 8004cec:	460a      	mov	r2, r1
 8004cee:	fb91 f6f7 	sdiv	r6, r1, r7
 8004cf2:	fb07 1516 	mls	r5, r7, r6, r1
 8004cf6:	3530      	adds	r5, #48	; 0x30
 8004cf8:	2a63      	cmp	r2, #99	; 0x63
 8004cfa:	f104 34ff 	add.w	r4, r4, #4294967295
 8004cfe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004d02:	4631      	mov	r1, r6
 8004d04:	dcf1      	bgt.n	8004cea <__exponent+0x22>
 8004d06:	3130      	adds	r1, #48	; 0x30
 8004d08:	f1ae 0502 	sub.w	r5, lr, #2
 8004d0c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004d10:	1c44      	adds	r4, r0, #1
 8004d12:	4629      	mov	r1, r5
 8004d14:	4561      	cmp	r1, ip
 8004d16:	d30a      	bcc.n	8004d2e <__exponent+0x66>
 8004d18:	f10d 0209 	add.w	r2, sp, #9
 8004d1c:	eba2 020e 	sub.w	r2, r2, lr
 8004d20:	4565      	cmp	r5, ip
 8004d22:	bf88      	it	hi
 8004d24:	2200      	movhi	r2, #0
 8004d26:	4413      	add	r3, r2
 8004d28:	1a18      	subs	r0, r3, r0
 8004d2a:	b003      	add	sp, #12
 8004d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d32:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004d36:	e7ed      	b.n	8004d14 <__exponent+0x4c>
 8004d38:	2330      	movs	r3, #48	; 0x30
 8004d3a:	3130      	adds	r1, #48	; 0x30
 8004d3c:	7083      	strb	r3, [r0, #2]
 8004d3e:	70c1      	strb	r1, [r0, #3]
 8004d40:	1d03      	adds	r3, r0, #4
 8004d42:	e7f1      	b.n	8004d28 <__exponent+0x60>

08004d44 <_printf_float>:
 8004d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d48:	ed2d 8b02 	vpush	{d8}
 8004d4c:	b08d      	sub	sp, #52	; 0x34
 8004d4e:	460c      	mov	r4, r1
 8004d50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004d54:	4616      	mov	r6, r2
 8004d56:	461f      	mov	r7, r3
 8004d58:	4605      	mov	r5, r0
 8004d5a:	f001 fa45 	bl	80061e8 <_localeconv_r>
 8004d5e:	f8d0 a000 	ldr.w	sl, [r0]
 8004d62:	4650      	mov	r0, sl
 8004d64:	f7fb fa54 	bl	8000210 <strlen>
 8004d68:	2300      	movs	r3, #0
 8004d6a:	930a      	str	r3, [sp, #40]	; 0x28
 8004d6c:	6823      	ldr	r3, [r4, #0]
 8004d6e:	9305      	str	r3, [sp, #20]
 8004d70:	f8d8 3000 	ldr.w	r3, [r8]
 8004d74:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004d78:	3307      	adds	r3, #7
 8004d7a:	f023 0307 	bic.w	r3, r3, #7
 8004d7e:	f103 0208 	add.w	r2, r3, #8
 8004d82:	f8c8 2000 	str.w	r2, [r8]
 8004d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004d8e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004d92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004d96:	9307      	str	r3, [sp, #28]
 8004d98:	f8cd 8018 	str.w	r8, [sp, #24]
 8004d9c:	ee08 0a10 	vmov	s16, r0
 8004da0:	4b9f      	ldr	r3, [pc, #636]	; (8005020 <_printf_float+0x2dc>)
 8004da2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004da6:	f04f 32ff 	mov.w	r2, #4294967295
 8004daa:	f7fb fedf 	bl	8000b6c <__aeabi_dcmpun>
 8004dae:	bb88      	cbnz	r0, 8004e14 <_printf_float+0xd0>
 8004db0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004db4:	4b9a      	ldr	r3, [pc, #616]	; (8005020 <_printf_float+0x2dc>)
 8004db6:	f04f 32ff 	mov.w	r2, #4294967295
 8004dba:	f7fb feb9 	bl	8000b30 <__aeabi_dcmple>
 8004dbe:	bb48      	cbnz	r0, 8004e14 <_printf_float+0xd0>
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	4640      	mov	r0, r8
 8004dc6:	4649      	mov	r1, r9
 8004dc8:	f7fb fea8 	bl	8000b1c <__aeabi_dcmplt>
 8004dcc:	b110      	cbz	r0, 8004dd4 <_printf_float+0x90>
 8004dce:	232d      	movs	r3, #45	; 0x2d
 8004dd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dd4:	4b93      	ldr	r3, [pc, #588]	; (8005024 <_printf_float+0x2e0>)
 8004dd6:	4894      	ldr	r0, [pc, #592]	; (8005028 <_printf_float+0x2e4>)
 8004dd8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004ddc:	bf94      	ite	ls
 8004dde:	4698      	movls	r8, r3
 8004de0:	4680      	movhi	r8, r0
 8004de2:	2303      	movs	r3, #3
 8004de4:	6123      	str	r3, [r4, #16]
 8004de6:	9b05      	ldr	r3, [sp, #20]
 8004de8:	f023 0204 	bic.w	r2, r3, #4
 8004dec:	6022      	str	r2, [r4, #0]
 8004dee:	f04f 0900 	mov.w	r9, #0
 8004df2:	9700      	str	r7, [sp, #0]
 8004df4:	4633      	mov	r3, r6
 8004df6:	aa0b      	add	r2, sp, #44	; 0x2c
 8004df8:	4621      	mov	r1, r4
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	f000 f9d8 	bl	80051b0 <_printf_common>
 8004e00:	3001      	adds	r0, #1
 8004e02:	f040 8090 	bne.w	8004f26 <_printf_float+0x1e2>
 8004e06:	f04f 30ff 	mov.w	r0, #4294967295
 8004e0a:	b00d      	add	sp, #52	; 0x34
 8004e0c:	ecbd 8b02 	vpop	{d8}
 8004e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e14:	4642      	mov	r2, r8
 8004e16:	464b      	mov	r3, r9
 8004e18:	4640      	mov	r0, r8
 8004e1a:	4649      	mov	r1, r9
 8004e1c:	f7fb fea6 	bl	8000b6c <__aeabi_dcmpun>
 8004e20:	b140      	cbz	r0, 8004e34 <_printf_float+0xf0>
 8004e22:	464b      	mov	r3, r9
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	bfbc      	itt	lt
 8004e28:	232d      	movlt	r3, #45	; 0x2d
 8004e2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004e2e:	487f      	ldr	r0, [pc, #508]	; (800502c <_printf_float+0x2e8>)
 8004e30:	4b7f      	ldr	r3, [pc, #508]	; (8005030 <_printf_float+0x2ec>)
 8004e32:	e7d1      	b.n	8004dd8 <_printf_float+0x94>
 8004e34:	6863      	ldr	r3, [r4, #4]
 8004e36:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004e3a:	9206      	str	r2, [sp, #24]
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	d13f      	bne.n	8004ec0 <_printf_float+0x17c>
 8004e40:	2306      	movs	r3, #6
 8004e42:	6063      	str	r3, [r4, #4]
 8004e44:	9b05      	ldr	r3, [sp, #20]
 8004e46:	6861      	ldr	r1, [r4, #4]
 8004e48:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	9303      	str	r3, [sp, #12]
 8004e50:	ab0a      	add	r3, sp, #40	; 0x28
 8004e52:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004e56:	ab09      	add	r3, sp, #36	; 0x24
 8004e58:	ec49 8b10 	vmov	d0, r8, r9
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	6022      	str	r2, [r4, #0]
 8004e60:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004e64:	4628      	mov	r0, r5
 8004e66:	f7ff fecd 	bl	8004c04 <__cvt>
 8004e6a:	9b06      	ldr	r3, [sp, #24]
 8004e6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e6e:	2b47      	cmp	r3, #71	; 0x47
 8004e70:	4680      	mov	r8, r0
 8004e72:	d108      	bne.n	8004e86 <_printf_float+0x142>
 8004e74:	1cc8      	adds	r0, r1, #3
 8004e76:	db02      	blt.n	8004e7e <_printf_float+0x13a>
 8004e78:	6863      	ldr	r3, [r4, #4]
 8004e7a:	4299      	cmp	r1, r3
 8004e7c:	dd41      	ble.n	8004f02 <_printf_float+0x1be>
 8004e7e:	f1ab 0b02 	sub.w	fp, fp, #2
 8004e82:	fa5f fb8b 	uxtb.w	fp, fp
 8004e86:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004e8a:	d820      	bhi.n	8004ece <_printf_float+0x18a>
 8004e8c:	3901      	subs	r1, #1
 8004e8e:	465a      	mov	r2, fp
 8004e90:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004e94:	9109      	str	r1, [sp, #36]	; 0x24
 8004e96:	f7ff ff17 	bl	8004cc8 <__exponent>
 8004e9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e9c:	1813      	adds	r3, r2, r0
 8004e9e:	2a01      	cmp	r2, #1
 8004ea0:	4681      	mov	r9, r0
 8004ea2:	6123      	str	r3, [r4, #16]
 8004ea4:	dc02      	bgt.n	8004eac <_printf_float+0x168>
 8004ea6:	6822      	ldr	r2, [r4, #0]
 8004ea8:	07d2      	lsls	r2, r2, #31
 8004eaa:	d501      	bpl.n	8004eb0 <_printf_float+0x16c>
 8004eac:	3301      	adds	r3, #1
 8004eae:	6123      	str	r3, [r4, #16]
 8004eb0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d09c      	beq.n	8004df2 <_printf_float+0xae>
 8004eb8:	232d      	movs	r3, #45	; 0x2d
 8004eba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ebe:	e798      	b.n	8004df2 <_printf_float+0xae>
 8004ec0:	9a06      	ldr	r2, [sp, #24]
 8004ec2:	2a47      	cmp	r2, #71	; 0x47
 8004ec4:	d1be      	bne.n	8004e44 <_printf_float+0x100>
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1bc      	bne.n	8004e44 <_printf_float+0x100>
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e7b9      	b.n	8004e42 <_printf_float+0xfe>
 8004ece:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004ed2:	d118      	bne.n	8004f06 <_printf_float+0x1c2>
 8004ed4:	2900      	cmp	r1, #0
 8004ed6:	6863      	ldr	r3, [r4, #4]
 8004ed8:	dd0b      	ble.n	8004ef2 <_printf_float+0x1ae>
 8004eda:	6121      	str	r1, [r4, #16]
 8004edc:	b913      	cbnz	r3, 8004ee4 <_printf_float+0x1a0>
 8004ede:	6822      	ldr	r2, [r4, #0]
 8004ee0:	07d0      	lsls	r0, r2, #31
 8004ee2:	d502      	bpl.n	8004eea <_printf_float+0x1a6>
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	440b      	add	r3, r1
 8004ee8:	6123      	str	r3, [r4, #16]
 8004eea:	65a1      	str	r1, [r4, #88]	; 0x58
 8004eec:	f04f 0900 	mov.w	r9, #0
 8004ef0:	e7de      	b.n	8004eb0 <_printf_float+0x16c>
 8004ef2:	b913      	cbnz	r3, 8004efa <_printf_float+0x1b6>
 8004ef4:	6822      	ldr	r2, [r4, #0]
 8004ef6:	07d2      	lsls	r2, r2, #31
 8004ef8:	d501      	bpl.n	8004efe <_printf_float+0x1ba>
 8004efa:	3302      	adds	r3, #2
 8004efc:	e7f4      	b.n	8004ee8 <_printf_float+0x1a4>
 8004efe:	2301      	movs	r3, #1
 8004f00:	e7f2      	b.n	8004ee8 <_printf_float+0x1a4>
 8004f02:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f08:	4299      	cmp	r1, r3
 8004f0a:	db05      	blt.n	8004f18 <_printf_float+0x1d4>
 8004f0c:	6823      	ldr	r3, [r4, #0]
 8004f0e:	6121      	str	r1, [r4, #16]
 8004f10:	07d8      	lsls	r0, r3, #31
 8004f12:	d5ea      	bpl.n	8004eea <_printf_float+0x1a6>
 8004f14:	1c4b      	adds	r3, r1, #1
 8004f16:	e7e7      	b.n	8004ee8 <_printf_float+0x1a4>
 8004f18:	2900      	cmp	r1, #0
 8004f1a:	bfd4      	ite	le
 8004f1c:	f1c1 0202 	rsble	r2, r1, #2
 8004f20:	2201      	movgt	r2, #1
 8004f22:	4413      	add	r3, r2
 8004f24:	e7e0      	b.n	8004ee8 <_printf_float+0x1a4>
 8004f26:	6823      	ldr	r3, [r4, #0]
 8004f28:	055a      	lsls	r2, r3, #21
 8004f2a:	d407      	bmi.n	8004f3c <_printf_float+0x1f8>
 8004f2c:	6923      	ldr	r3, [r4, #16]
 8004f2e:	4642      	mov	r2, r8
 8004f30:	4631      	mov	r1, r6
 8004f32:	4628      	mov	r0, r5
 8004f34:	47b8      	blx	r7
 8004f36:	3001      	adds	r0, #1
 8004f38:	d12c      	bne.n	8004f94 <_printf_float+0x250>
 8004f3a:	e764      	b.n	8004e06 <_printf_float+0xc2>
 8004f3c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004f40:	f240 80e0 	bls.w	8005104 <_printf_float+0x3c0>
 8004f44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f48:	2200      	movs	r2, #0
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	f7fb fddc 	bl	8000b08 <__aeabi_dcmpeq>
 8004f50:	2800      	cmp	r0, #0
 8004f52:	d034      	beq.n	8004fbe <_printf_float+0x27a>
 8004f54:	4a37      	ldr	r2, [pc, #220]	; (8005034 <_printf_float+0x2f0>)
 8004f56:	2301      	movs	r3, #1
 8004f58:	4631      	mov	r1, r6
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	47b8      	blx	r7
 8004f5e:	3001      	adds	r0, #1
 8004f60:	f43f af51 	beq.w	8004e06 <_printf_float+0xc2>
 8004f64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	db02      	blt.n	8004f72 <_printf_float+0x22e>
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	07d8      	lsls	r0, r3, #31
 8004f70:	d510      	bpl.n	8004f94 <_printf_float+0x250>
 8004f72:	ee18 3a10 	vmov	r3, s16
 8004f76:	4652      	mov	r2, sl
 8004f78:	4631      	mov	r1, r6
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	47b8      	blx	r7
 8004f7e:	3001      	adds	r0, #1
 8004f80:	f43f af41 	beq.w	8004e06 <_printf_float+0xc2>
 8004f84:	f04f 0800 	mov.w	r8, #0
 8004f88:	f104 091a 	add.w	r9, r4, #26
 8004f8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	4543      	cmp	r3, r8
 8004f92:	dc09      	bgt.n	8004fa8 <_printf_float+0x264>
 8004f94:	6823      	ldr	r3, [r4, #0]
 8004f96:	079b      	lsls	r3, r3, #30
 8004f98:	f100 8105 	bmi.w	80051a6 <_printf_float+0x462>
 8004f9c:	68e0      	ldr	r0, [r4, #12]
 8004f9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fa0:	4298      	cmp	r0, r3
 8004fa2:	bfb8      	it	lt
 8004fa4:	4618      	movlt	r0, r3
 8004fa6:	e730      	b.n	8004e0a <_printf_float+0xc6>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	464a      	mov	r2, r9
 8004fac:	4631      	mov	r1, r6
 8004fae:	4628      	mov	r0, r5
 8004fb0:	47b8      	blx	r7
 8004fb2:	3001      	adds	r0, #1
 8004fb4:	f43f af27 	beq.w	8004e06 <_printf_float+0xc2>
 8004fb8:	f108 0801 	add.w	r8, r8, #1
 8004fbc:	e7e6      	b.n	8004f8c <_printf_float+0x248>
 8004fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	dc39      	bgt.n	8005038 <_printf_float+0x2f4>
 8004fc4:	4a1b      	ldr	r2, [pc, #108]	; (8005034 <_printf_float+0x2f0>)
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	4631      	mov	r1, r6
 8004fca:	4628      	mov	r0, r5
 8004fcc:	47b8      	blx	r7
 8004fce:	3001      	adds	r0, #1
 8004fd0:	f43f af19 	beq.w	8004e06 <_printf_float+0xc2>
 8004fd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	d102      	bne.n	8004fe2 <_printf_float+0x29e>
 8004fdc:	6823      	ldr	r3, [r4, #0]
 8004fde:	07d9      	lsls	r1, r3, #31
 8004fe0:	d5d8      	bpl.n	8004f94 <_printf_float+0x250>
 8004fe2:	ee18 3a10 	vmov	r3, s16
 8004fe6:	4652      	mov	r2, sl
 8004fe8:	4631      	mov	r1, r6
 8004fea:	4628      	mov	r0, r5
 8004fec:	47b8      	blx	r7
 8004fee:	3001      	adds	r0, #1
 8004ff0:	f43f af09 	beq.w	8004e06 <_printf_float+0xc2>
 8004ff4:	f04f 0900 	mov.w	r9, #0
 8004ff8:	f104 0a1a 	add.w	sl, r4, #26
 8004ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ffe:	425b      	negs	r3, r3
 8005000:	454b      	cmp	r3, r9
 8005002:	dc01      	bgt.n	8005008 <_printf_float+0x2c4>
 8005004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005006:	e792      	b.n	8004f2e <_printf_float+0x1ea>
 8005008:	2301      	movs	r3, #1
 800500a:	4652      	mov	r2, sl
 800500c:	4631      	mov	r1, r6
 800500e:	4628      	mov	r0, r5
 8005010:	47b8      	blx	r7
 8005012:	3001      	adds	r0, #1
 8005014:	f43f aef7 	beq.w	8004e06 <_printf_float+0xc2>
 8005018:	f109 0901 	add.w	r9, r9, #1
 800501c:	e7ee      	b.n	8004ffc <_printf_float+0x2b8>
 800501e:	bf00      	nop
 8005020:	7fefffff 	.word	0x7fefffff
 8005024:	0800747c 	.word	0x0800747c
 8005028:	08007480 	.word	0x08007480
 800502c:	08007488 	.word	0x08007488
 8005030:	08007484 	.word	0x08007484
 8005034:	0800748c 	.word	0x0800748c
 8005038:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800503a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800503c:	429a      	cmp	r2, r3
 800503e:	bfa8      	it	ge
 8005040:	461a      	movge	r2, r3
 8005042:	2a00      	cmp	r2, #0
 8005044:	4691      	mov	r9, r2
 8005046:	dc37      	bgt.n	80050b8 <_printf_float+0x374>
 8005048:	f04f 0b00 	mov.w	fp, #0
 800504c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005050:	f104 021a 	add.w	r2, r4, #26
 8005054:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005056:	9305      	str	r3, [sp, #20]
 8005058:	eba3 0309 	sub.w	r3, r3, r9
 800505c:	455b      	cmp	r3, fp
 800505e:	dc33      	bgt.n	80050c8 <_printf_float+0x384>
 8005060:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005064:	429a      	cmp	r2, r3
 8005066:	db3b      	blt.n	80050e0 <_printf_float+0x39c>
 8005068:	6823      	ldr	r3, [r4, #0]
 800506a:	07da      	lsls	r2, r3, #31
 800506c:	d438      	bmi.n	80050e0 <_printf_float+0x39c>
 800506e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005070:	9b05      	ldr	r3, [sp, #20]
 8005072:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	eba2 0901 	sub.w	r9, r2, r1
 800507a:	4599      	cmp	r9, r3
 800507c:	bfa8      	it	ge
 800507e:	4699      	movge	r9, r3
 8005080:	f1b9 0f00 	cmp.w	r9, #0
 8005084:	dc35      	bgt.n	80050f2 <_printf_float+0x3ae>
 8005086:	f04f 0800 	mov.w	r8, #0
 800508a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800508e:	f104 0a1a 	add.w	sl, r4, #26
 8005092:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005096:	1a9b      	subs	r3, r3, r2
 8005098:	eba3 0309 	sub.w	r3, r3, r9
 800509c:	4543      	cmp	r3, r8
 800509e:	f77f af79 	ble.w	8004f94 <_printf_float+0x250>
 80050a2:	2301      	movs	r3, #1
 80050a4:	4652      	mov	r2, sl
 80050a6:	4631      	mov	r1, r6
 80050a8:	4628      	mov	r0, r5
 80050aa:	47b8      	blx	r7
 80050ac:	3001      	adds	r0, #1
 80050ae:	f43f aeaa 	beq.w	8004e06 <_printf_float+0xc2>
 80050b2:	f108 0801 	add.w	r8, r8, #1
 80050b6:	e7ec      	b.n	8005092 <_printf_float+0x34e>
 80050b8:	4613      	mov	r3, r2
 80050ba:	4631      	mov	r1, r6
 80050bc:	4642      	mov	r2, r8
 80050be:	4628      	mov	r0, r5
 80050c0:	47b8      	blx	r7
 80050c2:	3001      	adds	r0, #1
 80050c4:	d1c0      	bne.n	8005048 <_printf_float+0x304>
 80050c6:	e69e      	b.n	8004e06 <_printf_float+0xc2>
 80050c8:	2301      	movs	r3, #1
 80050ca:	4631      	mov	r1, r6
 80050cc:	4628      	mov	r0, r5
 80050ce:	9205      	str	r2, [sp, #20]
 80050d0:	47b8      	blx	r7
 80050d2:	3001      	adds	r0, #1
 80050d4:	f43f ae97 	beq.w	8004e06 <_printf_float+0xc2>
 80050d8:	9a05      	ldr	r2, [sp, #20]
 80050da:	f10b 0b01 	add.w	fp, fp, #1
 80050de:	e7b9      	b.n	8005054 <_printf_float+0x310>
 80050e0:	ee18 3a10 	vmov	r3, s16
 80050e4:	4652      	mov	r2, sl
 80050e6:	4631      	mov	r1, r6
 80050e8:	4628      	mov	r0, r5
 80050ea:	47b8      	blx	r7
 80050ec:	3001      	adds	r0, #1
 80050ee:	d1be      	bne.n	800506e <_printf_float+0x32a>
 80050f0:	e689      	b.n	8004e06 <_printf_float+0xc2>
 80050f2:	9a05      	ldr	r2, [sp, #20]
 80050f4:	464b      	mov	r3, r9
 80050f6:	4442      	add	r2, r8
 80050f8:	4631      	mov	r1, r6
 80050fa:	4628      	mov	r0, r5
 80050fc:	47b8      	blx	r7
 80050fe:	3001      	adds	r0, #1
 8005100:	d1c1      	bne.n	8005086 <_printf_float+0x342>
 8005102:	e680      	b.n	8004e06 <_printf_float+0xc2>
 8005104:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005106:	2a01      	cmp	r2, #1
 8005108:	dc01      	bgt.n	800510e <_printf_float+0x3ca>
 800510a:	07db      	lsls	r3, r3, #31
 800510c:	d538      	bpl.n	8005180 <_printf_float+0x43c>
 800510e:	2301      	movs	r3, #1
 8005110:	4642      	mov	r2, r8
 8005112:	4631      	mov	r1, r6
 8005114:	4628      	mov	r0, r5
 8005116:	47b8      	blx	r7
 8005118:	3001      	adds	r0, #1
 800511a:	f43f ae74 	beq.w	8004e06 <_printf_float+0xc2>
 800511e:	ee18 3a10 	vmov	r3, s16
 8005122:	4652      	mov	r2, sl
 8005124:	4631      	mov	r1, r6
 8005126:	4628      	mov	r0, r5
 8005128:	47b8      	blx	r7
 800512a:	3001      	adds	r0, #1
 800512c:	f43f ae6b 	beq.w	8004e06 <_printf_float+0xc2>
 8005130:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005134:	2200      	movs	r2, #0
 8005136:	2300      	movs	r3, #0
 8005138:	f7fb fce6 	bl	8000b08 <__aeabi_dcmpeq>
 800513c:	b9d8      	cbnz	r0, 8005176 <_printf_float+0x432>
 800513e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005140:	f108 0201 	add.w	r2, r8, #1
 8005144:	3b01      	subs	r3, #1
 8005146:	4631      	mov	r1, r6
 8005148:	4628      	mov	r0, r5
 800514a:	47b8      	blx	r7
 800514c:	3001      	adds	r0, #1
 800514e:	d10e      	bne.n	800516e <_printf_float+0x42a>
 8005150:	e659      	b.n	8004e06 <_printf_float+0xc2>
 8005152:	2301      	movs	r3, #1
 8005154:	4652      	mov	r2, sl
 8005156:	4631      	mov	r1, r6
 8005158:	4628      	mov	r0, r5
 800515a:	47b8      	blx	r7
 800515c:	3001      	adds	r0, #1
 800515e:	f43f ae52 	beq.w	8004e06 <_printf_float+0xc2>
 8005162:	f108 0801 	add.w	r8, r8, #1
 8005166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005168:	3b01      	subs	r3, #1
 800516a:	4543      	cmp	r3, r8
 800516c:	dcf1      	bgt.n	8005152 <_printf_float+0x40e>
 800516e:	464b      	mov	r3, r9
 8005170:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005174:	e6dc      	b.n	8004f30 <_printf_float+0x1ec>
 8005176:	f04f 0800 	mov.w	r8, #0
 800517a:	f104 0a1a 	add.w	sl, r4, #26
 800517e:	e7f2      	b.n	8005166 <_printf_float+0x422>
 8005180:	2301      	movs	r3, #1
 8005182:	4642      	mov	r2, r8
 8005184:	e7df      	b.n	8005146 <_printf_float+0x402>
 8005186:	2301      	movs	r3, #1
 8005188:	464a      	mov	r2, r9
 800518a:	4631      	mov	r1, r6
 800518c:	4628      	mov	r0, r5
 800518e:	47b8      	blx	r7
 8005190:	3001      	adds	r0, #1
 8005192:	f43f ae38 	beq.w	8004e06 <_printf_float+0xc2>
 8005196:	f108 0801 	add.w	r8, r8, #1
 800519a:	68e3      	ldr	r3, [r4, #12]
 800519c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800519e:	1a5b      	subs	r3, r3, r1
 80051a0:	4543      	cmp	r3, r8
 80051a2:	dcf0      	bgt.n	8005186 <_printf_float+0x442>
 80051a4:	e6fa      	b.n	8004f9c <_printf_float+0x258>
 80051a6:	f04f 0800 	mov.w	r8, #0
 80051aa:	f104 0919 	add.w	r9, r4, #25
 80051ae:	e7f4      	b.n	800519a <_printf_float+0x456>

080051b0 <_printf_common>:
 80051b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051b4:	4616      	mov	r6, r2
 80051b6:	4699      	mov	r9, r3
 80051b8:	688a      	ldr	r2, [r1, #8]
 80051ba:	690b      	ldr	r3, [r1, #16]
 80051bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051c0:	4293      	cmp	r3, r2
 80051c2:	bfb8      	it	lt
 80051c4:	4613      	movlt	r3, r2
 80051c6:	6033      	str	r3, [r6, #0]
 80051c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051cc:	4607      	mov	r7, r0
 80051ce:	460c      	mov	r4, r1
 80051d0:	b10a      	cbz	r2, 80051d6 <_printf_common+0x26>
 80051d2:	3301      	adds	r3, #1
 80051d4:	6033      	str	r3, [r6, #0]
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	0699      	lsls	r1, r3, #26
 80051da:	bf42      	ittt	mi
 80051dc:	6833      	ldrmi	r3, [r6, #0]
 80051de:	3302      	addmi	r3, #2
 80051e0:	6033      	strmi	r3, [r6, #0]
 80051e2:	6825      	ldr	r5, [r4, #0]
 80051e4:	f015 0506 	ands.w	r5, r5, #6
 80051e8:	d106      	bne.n	80051f8 <_printf_common+0x48>
 80051ea:	f104 0a19 	add.w	sl, r4, #25
 80051ee:	68e3      	ldr	r3, [r4, #12]
 80051f0:	6832      	ldr	r2, [r6, #0]
 80051f2:	1a9b      	subs	r3, r3, r2
 80051f4:	42ab      	cmp	r3, r5
 80051f6:	dc26      	bgt.n	8005246 <_printf_common+0x96>
 80051f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051fc:	1e13      	subs	r3, r2, #0
 80051fe:	6822      	ldr	r2, [r4, #0]
 8005200:	bf18      	it	ne
 8005202:	2301      	movne	r3, #1
 8005204:	0692      	lsls	r2, r2, #26
 8005206:	d42b      	bmi.n	8005260 <_printf_common+0xb0>
 8005208:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800520c:	4649      	mov	r1, r9
 800520e:	4638      	mov	r0, r7
 8005210:	47c0      	blx	r8
 8005212:	3001      	adds	r0, #1
 8005214:	d01e      	beq.n	8005254 <_printf_common+0xa4>
 8005216:	6823      	ldr	r3, [r4, #0]
 8005218:	68e5      	ldr	r5, [r4, #12]
 800521a:	6832      	ldr	r2, [r6, #0]
 800521c:	f003 0306 	and.w	r3, r3, #6
 8005220:	2b04      	cmp	r3, #4
 8005222:	bf08      	it	eq
 8005224:	1aad      	subeq	r5, r5, r2
 8005226:	68a3      	ldr	r3, [r4, #8]
 8005228:	6922      	ldr	r2, [r4, #16]
 800522a:	bf0c      	ite	eq
 800522c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005230:	2500      	movne	r5, #0
 8005232:	4293      	cmp	r3, r2
 8005234:	bfc4      	itt	gt
 8005236:	1a9b      	subgt	r3, r3, r2
 8005238:	18ed      	addgt	r5, r5, r3
 800523a:	2600      	movs	r6, #0
 800523c:	341a      	adds	r4, #26
 800523e:	42b5      	cmp	r5, r6
 8005240:	d11a      	bne.n	8005278 <_printf_common+0xc8>
 8005242:	2000      	movs	r0, #0
 8005244:	e008      	b.n	8005258 <_printf_common+0xa8>
 8005246:	2301      	movs	r3, #1
 8005248:	4652      	mov	r2, sl
 800524a:	4649      	mov	r1, r9
 800524c:	4638      	mov	r0, r7
 800524e:	47c0      	blx	r8
 8005250:	3001      	adds	r0, #1
 8005252:	d103      	bne.n	800525c <_printf_common+0xac>
 8005254:	f04f 30ff 	mov.w	r0, #4294967295
 8005258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800525c:	3501      	adds	r5, #1
 800525e:	e7c6      	b.n	80051ee <_printf_common+0x3e>
 8005260:	18e1      	adds	r1, r4, r3
 8005262:	1c5a      	adds	r2, r3, #1
 8005264:	2030      	movs	r0, #48	; 0x30
 8005266:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800526a:	4422      	add	r2, r4
 800526c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005270:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005274:	3302      	adds	r3, #2
 8005276:	e7c7      	b.n	8005208 <_printf_common+0x58>
 8005278:	2301      	movs	r3, #1
 800527a:	4622      	mov	r2, r4
 800527c:	4649      	mov	r1, r9
 800527e:	4638      	mov	r0, r7
 8005280:	47c0      	blx	r8
 8005282:	3001      	adds	r0, #1
 8005284:	d0e6      	beq.n	8005254 <_printf_common+0xa4>
 8005286:	3601      	adds	r6, #1
 8005288:	e7d9      	b.n	800523e <_printf_common+0x8e>
	...

0800528c <_printf_i>:
 800528c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005290:	460c      	mov	r4, r1
 8005292:	4691      	mov	r9, r2
 8005294:	7e27      	ldrb	r7, [r4, #24]
 8005296:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005298:	2f78      	cmp	r7, #120	; 0x78
 800529a:	4680      	mov	r8, r0
 800529c:	469a      	mov	sl, r3
 800529e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052a2:	d807      	bhi.n	80052b4 <_printf_i+0x28>
 80052a4:	2f62      	cmp	r7, #98	; 0x62
 80052a6:	d80a      	bhi.n	80052be <_printf_i+0x32>
 80052a8:	2f00      	cmp	r7, #0
 80052aa:	f000 80d8 	beq.w	800545e <_printf_i+0x1d2>
 80052ae:	2f58      	cmp	r7, #88	; 0x58
 80052b0:	f000 80a3 	beq.w	80053fa <_printf_i+0x16e>
 80052b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80052b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052bc:	e03a      	b.n	8005334 <_printf_i+0xa8>
 80052be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052c2:	2b15      	cmp	r3, #21
 80052c4:	d8f6      	bhi.n	80052b4 <_printf_i+0x28>
 80052c6:	a001      	add	r0, pc, #4	; (adr r0, 80052cc <_printf_i+0x40>)
 80052c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80052cc:	08005325 	.word	0x08005325
 80052d0:	08005339 	.word	0x08005339
 80052d4:	080052b5 	.word	0x080052b5
 80052d8:	080052b5 	.word	0x080052b5
 80052dc:	080052b5 	.word	0x080052b5
 80052e0:	080052b5 	.word	0x080052b5
 80052e4:	08005339 	.word	0x08005339
 80052e8:	080052b5 	.word	0x080052b5
 80052ec:	080052b5 	.word	0x080052b5
 80052f0:	080052b5 	.word	0x080052b5
 80052f4:	080052b5 	.word	0x080052b5
 80052f8:	08005445 	.word	0x08005445
 80052fc:	08005369 	.word	0x08005369
 8005300:	08005427 	.word	0x08005427
 8005304:	080052b5 	.word	0x080052b5
 8005308:	080052b5 	.word	0x080052b5
 800530c:	08005467 	.word	0x08005467
 8005310:	080052b5 	.word	0x080052b5
 8005314:	08005369 	.word	0x08005369
 8005318:	080052b5 	.word	0x080052b5
 800531c:	080052b5 	.word	0x080052b5
 8005320:	0800542f 	.word	0x0800542f
 8005324:	680b      	ldr	r3, [r1, #0]
 8005326:	1d1a      	adds	r2, r3, #4
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	600a      	str	r2, [r1, #0]
 800532c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005330:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005334:	2301      	movs	r3, #1
 8005336:	e0a3      	b.n	8005480 <_printf_i+0x1f4>
 8005338:	6825      	ldr	r5, [r4, #0]
 800533a:	6808      	ldr	r0, [r1, #0]
 800533c:	062e      	lsls	r6, r5, #24
 800533e:	f100 0304 	add.w	r3, r0, #4
 8005342:	d50a      	bpl.n	800535a <_printf_i+0xce>
 8005344:	6805      	ldr	r5, [r0, #0]
 8005346:	600b      	str	r3, [r1, #0]
 8005348:	2d00      	cmp	r5, #0
 800534a:	da03      	bge.n	8005354 <_printf_i+0xc8>
 800534c:	232d      	movs	r3, #45	; 0x2d
 800534e:	426d      	negs	r5, r5
 8005350:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005354:	485e      	ldr	r0, [pc, #376]	; (80054d0 <_printf_i+0x244>)
 8005356:	230a      	movs	r3, #10
 8005358:	e019      	b.n	800538e <_printf_i+0x102>
 800535a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800535e:	6805      	ldr	r5, [r0, #0]
 8005360:	600b      	str	r3, [r1, #0]
 8005362:	bf18      	it	ne
 8005364:	b22d      	sxthne	r5, r5
 8005366:	e7ef      	b.n	8005348 <_printf_i+0xbc>
 8005368:	680b      	ldr	r3, [r1, #0]
 800536a:	6825      	ldr	r5, [r4, #0]
 800536c:	1d18      	adds	r0, r3, #4
 800536e:	6008      	str	r0, [r1, #0]
 8005370:	0628      	lsls	r0, r5, #24
 8005372:	d501      	bpl.n	8005378 <_printf_i+0xec>
 8005374:	681d      	ldr	r5, [r3, #0]
 8005376:	e002      	b.n	800537e <_printf_i+0xf2>
 8005378:	0669      	lsls	r1, r5, #25
 800537a:	d5fb      	bpl.n	8005374 <_printf_i+0xe8>
 800537c:	881d      	ldrh	r5, [r3, #0]
 800537e:	4854      	ldr	r0, [pc, #336]	; (80054d0 <_printf_i+0x244>)
 8005380:	2f6f      	cmp	r7, #111	; 0x6f
 8005382:	bf0c      	ite	eq
 8005384:	2308      	moveq	r3, #8
 8005386:	230a      	movne	r3, #10
 8005388:	2100      	movs	r1, #0
 800538a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800538e:	6866      	ldr	r6, [r4, #4]
 8005390:	60a6      	str	r6, [r4, #8]
 8005392:	2e00      	cmp	r6, #0
 8005394:	bfa2      	ittt	ge
 8005396:	6821      	ldrge	r1, [r4, #0]
 8005398:	f021 0104 	bicge.w	r1, r1, #4
 800539c:	6021      	strge	r1, [r4, #0]
 800539e:	b90d      	cbnz	r5, 80053a4 <_printf_i+0x118>
 80053a0:	2e00      	cmp	r6, #0
 80053a2:	d04d      	beq.n	8005440 <_printf_i+0x1b4>
 80053a4:	4616      	mov	r6, r2
 80053a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80053aa:	fb03 5711 	mls	r7, r3, r1, r5
 80053ae:	5dc7      	ldrb	r7, [r0, r7]
 80053b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80053b4:	462f      	mov	r7, r5
 80053b6:	42bb      	cmp	r3, r7
 80053b8:	460d      	mov	r5, r1
 80053ba:	d9f4      	bls.n	80053a6 <_printf_i+0x11a>
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d10b      	bne.n	80053d8 <_printf_i+0x14c>
 80053c0:	6823      	ldr	r3, [r4, #0]
 80053c2:	07df      	lsls	r7, r3, #31
 80053c4:	d508      	bpl.n	80053d8 <_printf_i+0x14c>
 80053c6:	6923      	ldr	r3, [r4, #16]
 80053c8:	6861      	ldr	r1, [r4, #4]
 80053ca:	4299      	cmp	r1, r3
 80053cc:	bfde      	ittt	le
 80053ce:	2330      	movle	r3, #48	; 0x30
 80053d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80053d8:	1b92      	subs	r2, r2, r6
 80053da:	6122      	str	r2, [r4, #16]
 80053dc:	f8cd a000 	str.w	sl, [sp]
 80053e0:	464b      	mov	r3, r9
 80053e2:	aa03      	add	r2, sp, #12
 80053e4:	4621      	mov	r1, r4
 80053e6:	4640      	mov	r0, r8
 80053e8:	f7ff fee2 	bl	80051b0 <_printf_common>
 80053ec:	3001      	adds	r0, #1
 80053ee:	d14c      	bne.n	800548a <_printf_i+0x1fe>
 80053f0:	f04f 30ff 	mov.w	r0, #4294967295
 80053f4:	b004      	add	sp, #16
 80053f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053fa:	4835      	ldr	r0, [pc, #212]	; (80054d0 <_printf_i+0x244>)
 80053fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005400:	6823      	ldr	r3, [r4, #0]
 8005402:	680e      	ldr	r6, [r1, #0]
 8005404:	061f      	lsls	r7, r3, #24
 8005406:	f856 5b04 	ldr.w	r5, [r6], #4
 800540a:	600e      	str	r6, [r1, #0]
 800540c:	d514      	bpl.n	8005438 <_printf_i+0x1ac>
 800540e:	07d9      	lsls	r1, r3, #31
 8005410:	bf44      	itt	mi
 8005412:	f043 0320 	orrmi.w	r3, r3, #32
 8005416:	6023      	strmi	r3, [r4, #0]
 8005418:	b91d      	cbnz	r5, 8005422 <_printf_i+0x196>
 800541a:	6823      	ldr	r3, [r4, #0]
 800541c:	f023 0320 	bic.w	r3, r3, #32
 8005420:	6023      	str	r3, [r4, #0]
 8005422:	2310      	movs	r3, #16
 8005424:	e7b0      	b.n	8005388 <_printf_i+0xfc>
 8005426:	6823      	ldr	r3, [r4, #0]
 8005428:	f043 0320 	orr.w	r3, r3, #32
 800542c:	6023      	str	r3, [r4, #0]
 800542e:	2378      	movs	r3, #120	; 0x78
 8005430:	4828      	ldr	r0, [pc, #160]	; (80054d4 <_printf_i+0x248>)
 8005432:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005436:	e7e3      	b.n	8005400 <_printf_i+0x174>
 8005438:	065e      	lsls	r6, r3, #25
 800543a:	bf48      	it	mi
 800543c:	b2ad      	uxthmi	r5, r5
 800543e:	e7e6      	b.n	800540e <_printf_i+0x182>
 8005440:	4616      	mov	r6, r2
 8005442:	e7bb      	b.n	80053bc <_printf_i+0x130>
 8005444:	680b      	ldr	r3, [r1, #0]
 8005446:	6826      	ldr	r6, [r4, #0]
 8005448:	6960      	ldr	r0, [r4, #20]
 800544a:	1d1d      	adds	r5, r3, #4
 800544c:	600d      	str	r5, [r1, #0]
 800544e:	0635      	lsls	r5, r6, #24
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	d501      	bpl.n	8005458 <_printf_i+0x1cc>
 8005454:	6018      	str	r0, [r3, #0]
 8005456:	e002      	b.n	800545e <_printf_i+0x1d2>
 8005458:	0671      	lsls	r1, r6, #25
 800545a:	d5fb      	bpl.n	8005454 <_printf_i+0x1c8>
 800545c:	8018      	strh	r0, [r3, #0]
 800545e:	2300      	movs	r3, #0
 8005460:	6123      	str	r3, [r4, #16]
 8005462:	4616      	mov	r6, r2
 8005464:	e7ba      	b.n	80053dc <_printf_i+0x150>
 8005466:	680b      	ldr	r3, [r1, #0]
 8005468:	1d1a      	adds	r2, r3, #4
 800546a:	600a      	str	r2, [r1, #0]
 800546c:	681e      	ldr	r6, [r3, #0]
 800546e:	6862      	ldr	r2, [r4, #4]
 8005470:	2100      	movs	r1, #0
 8005472:	4630      	mov	r0, r6
 8005474:	f7fa fed4 	bl	8000220 <memchr>
 8005478:	b108      	cbz	r0, 800547e <_printf_i+0x1f2>
 800547a:	1b80      	subs	r0, r0, r6
 800547c:	6060      	str	r0, [r4, #4]
 800547e:	6863      	ldr	r3, [r4, #4]
 8005480:	6123      	str	r3, [r4, #16]
 8005482:	2300      	movs	r3, #0
 8005484:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005488:	e7a8      	b.n	80053dc <_printf_i+0x150>
 800548a:	6923      	ldr	r3, [r4, #16]
 800548c:	4632      	mov	r2, r6
 800548e:	4649      	mov	r1, r9
 8005490:	4640      	mov	r0, r8
 8005492:	47d0      	blx	sl
 8005494:	3001      	adds	r0, #1
 8005496:	d0ab      	beq.n	80053f0 <_printf_i+0x164>
 8005498:	6823      	ldr	r3, [r4, #0]
 800549a:	079b      	lsls	r3, r3, #30
 800549c:	d413      	bmi.n	80054c6 <_printf_i+0x23a>
 800549e:	68e0      	ldr	r0, [r4, #12]
 80054a0:	9b03      	ldr	r3, [sp, #12]
 80054a2:	4298      	cmp	r0, r3
 80054a4:	bfb8      	it	lt
 80054a6:	4618      	movlt	r0, r3
 80054a8:	e7a4      	b.n	80053f4 <_printf_i+0x168>
 80054aa:	2301      	movs	r3, #1
 80054ac:	4632      	mov	r2, r6
 80054ae:	4649      	mov	r1, r9
 80054b0:	4640      	mov	r0, r8
 80054b2:	47d0      	blx	sl
 80054b4:	3001      	adds	r0, #1
 80054b6:	d09b      	beq.n	80053f0 <_printf_i+0x164>
 80054b8:	3501      	adds	r5, #1
 80054ba:	68e3      	ldr	r3, [r4, #12]
 80054bc:	9903      	ldr	r1, [sp, #12]
 80054be:	1a5b      	subs	r3, r3, r1
 80054c0:	42ab      	cmp	r3, r5
 80054c2:	dcf2      	bgt.n	80054aa <_printf_i+0x21e>
 80054c4:	e7eb      	b.n	800549e <_printf_i+0x212>
 80054c6:	2500      	movs	r5, #0
 80054c8:	f104 0619 	add.w	r6, r4, #25
 80054cc:	e7f5      	b.n	80054ba <_printf_i+0x22e>
 80054ce:	bf00      	nop
 80054d0:	0800748e 	.word	0x0800748e
 80054d4:	0800749f 	.word	0x0800749f

080054d8 <_sbrk_r>:
 80054d8:	b538      	push	{r3, r4, r5, lr}
 80054da:	4d06      	ldr	r5, [pc, #24]	; (80054f4 <_sbrk_r+0x1c>)
 80054dc:	2300      	movs	r3, #0
 80054de:	4604      	mov	r4, r0
 80054e0:	4608      	mov	r0, r1
 80054e2:	602b      	str	r3, [r5, #0]
 80054e4:	f7fc f8ca 	bl	800167c <_sbrk>
 80054e8:	1c43      	adds	r3, r0, #1
 80054ea:	d102      	bne.n	80054f2 <_sbrk_r+0x1a>
 80054ec:	682b      	ldr	r3, [r5, #0]
 80054ee:	b103      	cbz	r3, 80054f2 <_sbrk_r+0x1a>
 80054f0:	6023      	str	r3, [r4, #0]
 80054f2:	bd38      	pop	{r3, r4, r5, pc}
 80054f4:	20000520 	.word	0x20000520

080054f8 <quorem>:
 80054f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054fc:	6903      	ldr	r3, [r0, #16]
 80054fe:	690c      	ldr	r4, [r1, #16]
 8005500:	42a3      	cmp	r3, r4
 8005502:	4607      	mov	r7, r0
 8005504:	f2c0 8081 	blt.w	800560a <quorem+0x112>
 8005508:	3c01      	subs	r4, #1
 800550a:	f101 0814 	add.w	r8, r1, #20
 800550e:	f100 0514 	add.w	r5, r0, #20
 8005512:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005516:	9301      	str	r3, [sp, #4]
 8005518:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800551c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005520:	3301      	adds	r3, #1
 8005522:	429a      	cmp	r2, r3
 8005524:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005528:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800552c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005530:	d331      	bcc.n	8005596 <quorem+0x9e>
 8005532:	f04f 0e00 	mov.w	lr, #0
 8005536:	4640      	mov	r0, r8
 8005538:	46ac      	mov	ip, r5
 800553a:	46f2      	mov	sl, lr
 800553c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005540:	b293      	uxth	r3, r2
 8005542:	fb06 e303 	mla	r3, r6, r3, lr
 8005546:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800554a:	b29b      	uxth	r3, r3
 800554c:	ebaa 0303 	sub.w	r3, sl, r3
 8005550:	0c12      	lsrs	r2, r2, #16
 8005552:	f8dc a000 	ldr.w	sl, [ip]
 8005556:	fb06 e202 	mla	r2, r6, r2, lr
 800555a:	fa13 f38a 	uxtah	r3, r3, sl
 800555e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005562:	fa1f fa82 	uxth.w	sl, r2
 8005566:	f8dc 2000 	ldr.w	r2, [ip]
 800556a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800556e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005572:	b29b      	uxth	r3, r3
 8005574:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005578:	4581      	cmp	r9, r0
 800557a:	f84c 3b04 	str.w	r3, [ip], #4
 800557e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005582:	d2db      	bcs.n	800553c <quorem+0x44>
 8005584:	f855 300b 	ldr.w	r3, [r5, fp]
 8005588:	b92b      	cbnz	r3, 8005596 <quorem+0x9e>
 800558a:	9b01      	ldr	r3, [sp, #4]
 800558c:	3b04      	subs	r3, #4
 800558e:	429d      	cmp	r5, r3
 8005590:	461a      	mov	r2, r3
 8005592:	d32e      	bcc.n	80055f2 <quorem+0xfa>
 8005594:	613c      	str	r4, [r7, #16]
 8005596:	4638      	mov	r0, r7
 8005598:	f001 f8c2 	bl	8006720 <__mcmp>
 800559c:	2800      	cmp	r0, #0
 800559e:	db24      	blt.n	80055ea <quorem+0xf2>
 80055a0:	3601      	adds	r6, #1
 80055a2:	4628      	mov	r0, r5
 80055a4:	f04f 0c00 	mov.w	ip, #0
 80055a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80055ac:	f8d0 e000 	ldr.w	lr, [r0]
 80055b0:	b293      	uxth	r3, r2
 80055b2:	ebac 0303 	sub.w	r3, ip, r3
 80055b6:	0c12      	lsrs	r2, r2, #16
 80055b8:	fa13 f38e 	uxtah	r3, r3, lr
 80055bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80055c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055ca:	45c1      	cmp	r9, r8
 80055cc:	f840 3b04 	str.w	r3, [r0], #4
 80055d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80055d4:	d2e8      	bcs.n	80055a8 <quorem+0xb0>
 80055d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055de:	b922      	cbnz	r2, 80055ea <quorem+0xf2>
 80055e0:	3b04      	subs	r3, #4
 80055e2:	429d      	cmp	r5, r3
 80055e4:	461a      	mov	r2, r3
 80055e6:	d30a      	bcc.n	80055fe <quorem+0x106>
 80055e8:	613c      	str	r4, [r7, #16]
 80055ea:	4630      	mov	r0, r6
 80055ec:	b003      	add	sp, #12
 80055ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055f2:	6812      	ldr	r2, [r2, #0]
 80055f4:	3b04      	subs	r3, #4
 80055f6:	2a00      	cmp	r2, #0
 80055f8:	d1cc      	bne.n	8005594 <quorem+0x9c>
 80055fa:	3c01      	subs	r4, #1
 80055fc:	e7c7      	b.n	800558e <quorem+0x96>
 80055fe:	6812      	ldr	r2, [r2, #0]
 8005600:	3b04      	subs	r3, #4
 8005602:	2a00      	cmp	r2, #0
 8005604:	d1f0      	bne.n	80055e8 <quorem+0xf0>
 8005606:	3c01      	subs	r4, #1
 8005608:	e7eb      	b.n	80055e2 <quorem+0xea>
 800560a:	2000      	movs	r0, #0
 800560c:	e7ee      	b.n	80055ec <quorem+0xf4>
	...

08005610 <_dtoa_r>:
 8005610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005614:	ed2d 8b02 	vpush	{d8}
 8005618:	ec57 6b10 	vmov	r6, r7, d0
 800561c:	b095      	sub	sp, #84	; 0x54
 800561e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005620:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005624:	9105      	str	r1, [sp, #20]
 8005626:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800562a:	4604      	mov	r4, r0
 800562c:	9209      	str	r2, [sp, #36]	; 0x24
 800562e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005630:	b975      	cbnz	r5, 8005650 <_dtoa_r+0x40>
 8005632:	2010      	movs	r0, #16
 8005634:	f7ff fa2c 	bl	8004a90 <malloc>
 8005638:	4602      	mov	r2, r0
 800563a:	6260      	str	r0, [r4, #36]	; 0x24
 800563c:	b920      	cbnz	r0, 8005648 <_dtoa_r+0x38>
 800563e:	4bb2      	ldr	r3, [pc, #712]	; (8005908 <_dtoa_r+0x2f8>)
 8005640:	21ea      	movs	r1, #234	; 0xea
 8005642:	48b2      	ldr	r0, [pc, #712]	; (800590c <_dtoa_r+0x2fc>)
 8005644:	f001 f97c 	bl	8006940 <__assert_func>
 8005648:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800564c:	6005      	str	r5, [r0, #0]
 800564e:	60c5      	str	r5, [r0, #12]
 8005650:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005652:	6819      	ldr	r1, [r3, #0]
 8005654:	b151      	cbz	r1, 800566c <_dtoa_r+0x5c>
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	604a      	str	r2, [r1, #4]
 800565a:	2301      	movs	r3, #1
 800565c:	4093      	lsls	r3, r2
 800565e:	608b      	str	r3, [r1, #8]
 8005660:	4620      	mov	r0, r4
 8005662:	f000 fe1f 	bl	80062a4 <_Bfree>
 8005666:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005668:	2200      	movs	r2, #0
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	1e3b      	subs	r3, r7, #0
 800566e:	bfb9      	ittee	lt
 8005670:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005674:	9303      	strlt	r3, [sp, #12]
 8005676:	2300      	movge	r3, #0
 8005678:	f8c8 3000 	strge.w	r3, [r8]
 800567c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005680:	4ba3      	ldr	r3, [pc, #652]	; (8005910 <_dtoa_r+0x300>)
 8005682:	bfbc      	itt	lt
 8005684:	2201      	movlt	r2, #1
 8005686:	f8c8 2000 	strlt.w	r2, [r8]
 800568a:	ea33 0309 	bics.w	r3, r3, r9
 800568e:	d11b      	bne.n	80056c8 <_dtoa_r+0xb8>
 8005690:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005692:	f242 730f 	movw	r3, #9999	; 0x270f
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800569c:	4333      	orrs	r3, r6
 800569e:	f000 857a 	beq.w	8006196 <_dtoa_r+0xb86>
 80056a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056a4:	b963      	cbnz	r3, 80056c0 <_dtoa_r+0xb0>
 80056a6:	4b9b      	ldr	r3, [pc, #620]	; (8005914 <_dtoa_r+0x304>)
 80056a8:	e024      	b.n	80056f4 <_dtoa_r+0xe4>
 80056aa:	4b9b      	ldr	r3, [pc, #620]	; (8005918 <_dtoa_r+0x308>)
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	3308      	adds	r3, #8
 80056b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80056b2:	6013      	str	r3, [r2, #0]
 80056b4:	9800      	ldr	r0, [sp, #0]
 80056b6:	b015      	add	sp, #84	; 0x54
 80056b8:	ecbd 8b02 	vpop	{d8}
 80056bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056c0:	4b94      	ldr	r3, [pc, #592]	; (8005914 <_dtoa_r+0x304>)
 80056c2:	9300      	str	r3, [sp, #0]
 80056c4:	3303      	adds	r3, #3
 80056c6:	e7f3      	b.n	80056b0 <_dtoa_r+0xa0>
 80056c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80056cc:	2200      	movs	r2, #0
 80056ce:	ec51 0b17 	vmov	r0, r1, d7
 80056d2:	2300      	movs	r3, #0
 80056d4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80056d8:	f7fb fa16 	bl	8000b08 <__aeabi_dcmpeq>
 80056dc:	4680      	mov	r8, r0
 80056de:	b158      	cbz	r0, 80056f8 <_dtoa_r+0xe8>
 80056e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80056e2:	2301      	movs	r3, #1
 80056e4:	6013      	str	r3, [r2, #0]
 80056e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f000 8551 	beq.w	8006190 <_dtoa_r+0xb80>
 80056ee:	488b      	ldr	r0, [pc, #556]	; (800591c <_dtoa_r+0x30c>)
 80056f0:	6018      	str	r0, [r3, #0]
 80056f2:	1e43      	subs	r3, r0, #1
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	e7dd      	b.n	80056b4 <_dtoa_r+0xa4>
 80056f8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80056fc:	aa12      	add	r2, sp, #72	; 0x48
 80056fe:	a913      	add	r1, sp, #76	; 0x4c
 8005700:	4620      	mov	r0, r4
 8005702:	f001 f8b1 	bl	8006868 <__d2b>
 8005706:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800570a:	4683      	mov	fp, r0
 800570c:	2d00      	cmp	r5, #0
 800570e:	d07c      	beq.n	800580a <_dtoa_r+0x1fa>
 8005710:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005712:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005716:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800571a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800571e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005722:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005726:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800572a:	4b7d      	ldr	r3, [pc, #500]	; (8005920 <_dtoa_r+0x310>)
 800572c:	2200      	movs	r2, #0
 800572e:	4630      	mov	r0, r6
 8005730:	4639      	mov	r1, r7
 8005732:	f7fa fdc9 	bl	80002c8 <__aeabi_dsub>
 8005736:	a36e      	add	r3, pc, #440	; (adr r3, 80058f0 <_dtoa_r+0x2e0>)
 8005738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573c:	f7fa ff7c 	bl	8000638 <__aeabi_dmul>
 8005740:	a36d      	add	r3, pc, #436	; (adr r3, 80058f8 <_dtoa_r+0x2e8>)
 8005742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005746:	f7fa fdc1 	bl	80002cc <__adddf3>
 800574a:	4606      	mov	r6, r0
 800574c:	4628      	mov	r0, r5
 800574e:	460f      	mov	r7, r1
 8005750:	f7fa ff08 	bl	8000564 <__aeabi_i2d>
 8005754:	a36a      	add	r3, pc, #424	; (adr r3, 8005900 <_dtoa_r+0x2f0>)
 8005756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575a:	f7fa ff6d 	bl	8000638 <__aeabi_dmul>
 800575e:	4602      	mov	r2, r0
 8005760:	460b      	mov	r3, r1
 8005762:	4630      	mov	r0, r6
 8005764:	4639      	mov	r1, r7
 8005766:	f7fa fdb1 	bl	80002cc <__adddf3>
 800576a:	4606      	mov	r6, r0
 800576c:	460f      	mov	r7, r1
 800576e:	f7fb fa13 	bl	8000b98 <__aeabi_d2iz>
 8005772:	2200      	movs	r2, #0
 8005774:	4682      	mov	sl, r0
 8005776:	2300      	movs	r3, #0
 8005778:	4630      	mov	r0, r6
 800577a:	4639      	mov	r1, r7
 800577c:	f7fb f9ce 	bl	8000b1c <__aeabi_dcmplt>
 8005780:	b148      	cbz	r0, 8005796 <_dtoa_r+0x186>
 8005782:	4650      	mov	r0, sl
 8005784:	f7fa feee 	bl	8000564 <__aeabi_i2d>
 8005788:	4632      	mov	r2, r6
 800578a:	463b      	mov	r3, r7
 800578c:	f7fb f9bc 	bl	8000b08 <__aeabi_dcmpeq>
 8005790:	b908      	cbnz	r0, 8005796 <_dtoa_r+0x186>
 8005792:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005796:	f1ba 0f16 	cmp.w	sl, #22
 800579a:	d854      	bhi.n	8005846 <_dtoa_r+0x236>
 800579c:	4b61      	ldr	r3, [pc, #388]	; (8005924 <_dtoa_r+0x314>)
 800579e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80057a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80057aa:	f7fb f9b7 	bl	8000b1c <__aeabi_dcmplt>
 80057ae:	2800      	cmp	r0, #0
 80057b0:	d04b      	beq.n	800584a <_dtoa_r+0x23a>
 80057b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057b6:	2300      	movs	r3, #0
 80057b8:	930e      	str	r3, [sp, #56]	; 0x38
 80057ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80057bc:	1b5d      	subs	r5, r3, r5
 80057be:	1e6b      	subs	r3, r5, #1
 80057c0:	9304      	str	r3, [sp, #16]
 80057c2:	bf43      	ittte	mi
 80057c4:	2300      	movmi	r3, #0
 80057c6:	f1c5 0801 	rsbmi	r8, r5, #1
 80057ca:	9304      	strmi	r3, [sp, #16]
 80057cc:	f04f 0800 	movpl.w	r8, #0
 80057d0:	f1ba 0f00 	cmp.w	sl, #0
 80057d4:	db3b      	blt.n	800584e <_dtoa_r+0x23e>
 80057d6:	9b04      	ldr	r3, [sp, #16]
 80057d8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80057dc:	4453      	add	r3, sl
 80057de:	9304      	str	r3, [sp, #16]
 80057e0:	2300      	movs	r3, #0
 80057e2:	9306      	str	r3, [sp, #24]
 80057e4:	9b05      	ldr	r3, [sp, #20]
 80057e6:	2b09      	cmp	r3, #9
 80057e8:	d869      	bhi.n	80058be <_dtoa_r+0x2ae>
 80057ea:	2b05      	cmp	r3, #5
 80057ec:	bfc4      	itt	gt
 80057ee:	3b04      	subgt	r3, #4
 80057f0:	9305      	strgt	r3, [sp, #20]
 80057f2:	9b05      	ldr	r3, [sp, #20]
 80057f4:	f1a3 0302 	sub.w	r3, r3, #2
 80057f8:	bfcc      	ite	gt
 80057fa:	2500      	movgt	r5, #0
 80057fc:	2501      	movle	r5, #1
 80057fe:	2b03      	cmp	r3, #3
 8005800:	d869      	bhi.n	80058d6 <_dtoa_r+0x2c6>
 8005802:	e8df f003 	tbb	[pc, r3]
 8005806:	4e2c      	.short	0x4e2c
 8005808:	5a4c      	.short	0x5a4c
 800580a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800580e:	441d      	add	r5, r3
 8005810:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005814:	2b20      	cmp	r3, #32
 8005816:	bfc1      	itttt	gt
 8005818:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800581c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005820:	fa09 f303 	lslgt.w	r3, r9, r3
 8005824:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005828:	bfda      	itte	le
 800582a:	f1c3 0320 	rsble	r3, r3, #32
 800582e:	fa06 f003 	lslle.w	r0, r6, r3
 8005832:	4318      	orrgt	r0, r3
 8005834:	f7fa fe86 	bl	8000544 <__aeabi_ui2d>
 8005838:	2301      	movs	r3, #1
 800583a:	4606      	mov	r6, r0
 800583c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005840:	3d01      	subs	r5, #1
 8005842:	9310      	str	r3, [sp, #64]	; 0x40
 8005844:	e771      	b.n	800572a <_dtoa_r+0x11a>
 8005846:	2301      	movs	r3, #1
 8005848:	e7b6      	b.n	80057b8 <_dtoa_r+0x1a8>
 800584a:	900e      	str	r0, [sp, #56]	; 0x38
 800584c:	e7b5      	b.n	80057ba <_dtoa_r+0x1aa>
 800584e:	f1ca 0300 	rsb	r3, sl, #0
 8005852:	9306      	str	r3, [sp, #24]
 8005854:	2300      	movs	r3, #0
 8005856:	eba8 080a 	sub.w	r8, r8, sl
 800585a:	930d      	str	r3, [sp, #52]	; 0x34
 800585c:	e7c2      	b.n	80057e4 <_dtoa_r+0x1d4>
 800585e:	2300      	movs	r3, #0
 8005860:	9308      	str	r3, [sp, #32]
 8005862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005864:	2b00      	cmp	r3, #0
 8005866:	dc39      	bgt.n	80058dc <_dtoa_r+0x2cc>
 8005868:	f04f 0901 	mov.w	r9, #1
 800586c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005870:	464b      	mov	r3, r9
 8005872:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005876:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005878:	2200      	movs	r2, #0
 800587a:	6042      	str	r2, [r0, #4]
 800587c:	2204      	movs	r2, #4
 800587e:	f102 0614 	add.w	r6, r2, #20
 8005882:	429e      	cmp	r6, r3
 8005884:	6841      	ldr	r1, [r0, #4]
 8005886:	d92f      	bls.n	80058e8 <_dtoa_r+0x2d8>
 8005888:	4620      	mov	r0, r4
 800588a:	f000 fccb 	bl	8006224 <_Balloc>
 800588e:	9000      	str	r0, [sp, #0]
 8005890:	2800      	cmp	r0, #0
 8005892:	d14b      	bne.n	800592c <_dtoa_r+0x31c>
 8005894:	4b24      	ldr	r3, [pc, #144]	; (8005928 <_dtoa_r+0x318>)
 8005896:	4602      	mov	r2, r0
 8005898:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800589c:	e6d1      	b.n	8005642 <_dtoa_r+0x32>
 800589e:	2301      	movs	r3, #1
 80058a0:	e7de      	b.n	8005860 <_dtoa_r+0x250>
 80058a2:	2300      	movs	r3, #0
 80058a4:	9308      	str	r3, [sp, #32]
 80058a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058a8:	eb0a 0903 	add.w	r9, sl, r3
 80058ac:	f109 0301 	add.w	r3, r9, #1
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	9301      	str	r3, [sp, #4]
 80058b4:	bfb8      	it	lt
 80058b6:	2301      	movlt	r3, #1
 80058b8:	e7dd      	b.n	8005876 <_dtoa_r+0x266>
 80058ba:	2301      	movs	r3, #1
 80058bc:	e7f2      	b.n	80058a4 <_dtoa_r+0x294>
 80058be:	2501      	movs	r5, #1
 80058c0:	2300      	movs	r3, #0
 80058c2:	9305      	str	r3, [sp, #20]
 80058c4:	9508      	str	r5, [sp, #32]
 80058c6:	f04f 39ff 	mov.w	r9, #4294967295
 80058ca:	2200      	movs	r2, #0
 80058cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80058d0:	2312      	movs	r3, #18
 80058d2:	9209      	str	r2, [sp, #36]	; 0x24
 80058d4:	e7cf      	b.n	8005876 <_dtoa_r+0x266>
 80058d6:	2301      	movs	r3, #1
 80058d8:	9308      	str	r3, [sp, #32]
 80058da:	e7f4      	b.n	80058c6 <_dtoa_r+0x2b6>
 80058dc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80058e0:	f8cd 9004 	str.w	r9, [sp, #4]
 80058e4:	464b      	mov	r3, r9
 80058e6:	e7c6      	b.n	8005876 <_dtoa_r+0x266>
 80058e8:	3101      	adds	r1, #1
 80058ea:	6041      	str	r1, [r0, #4]
 80058ec:	0052      	lsls	r2, r2, #1
 80058ee:	e7c6      	b.n	800587e <_dtoa_r+0x26e>
 80058f0:	636f4361 	.word	0x636f4361
 80058f4:	3fd287a7 	.word	0x3fd287a7
 80058f8:	8b60c8b3 	.word	0x8b60c8b3
 80058fc:	3fc68a28 	.word	0x3fc68a28
 8005900:	509f79fb 	.word	0x509f79fb
 8005904:	3fd34413 	.word	0x3fd34413
 8005908:	080074bd 	.word	0x080074bd
 800590c:	080074d4 	.word	0x080074d4
 8005910:	7ff00000 	.word	0x7ff00000
 8005914:	080074b9 	.word	0x080074b9
 8005918:	080074b0 	.word	0x080074b0
 800591c:	0800748d 	.word	0x0800748d
 8005920:	3ff80000 	.word	0x3ff80000
 8005924:	080075d0 	.word	0x080075d0
 8005928:	08007533 	.word	0x08007533
 800592c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800592e:	9a00      	ldr	r2, [sp, #0]
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	9b01      	ldr	r3, [sp, #4]
 8005934:	2b0e      	cmp	r3, #14
 8005936:	f200 80ad 	bhi.w	8005a94 <_dtoa_r+0x484>
 800593a:	2d00      	cmp	r5, #0
 800593c:	f000 80aa 	beq.w	8005a94 <_dtoa_r+0x484>
 8005940:	f1ba 0f00 	cmp.w	sl, #0
 8005944:	dd36      	ble.n	80059b4 <_dtoa_r+0x3a4>
 8005946:	4ac3      	ldr	r2, [pc, #780]	; (8005c54 <_dtoa_r+0x644>)
 8005948:	f00a 030f 	and.w	r3, sl, #15
 800594c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005950:	ed93 7b00 	vldr	d7, [r3]
 8005954:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005958:	ea4f 172a 	mov.w	r7, sl, asr #4
 800595c:	eeb0 8a47 	vmov.f32	s16, s14
 8005960:	eef0 8a67 	vmov.f32	s17, s15
 8005964:	d016      	beq.n	8005994 <_dtoa_r+0x384>
 8005966:	4bbc      	ldr	r3, [pc, #752]	; (8005c58 <_dtoa_r+0x648>)
 8005968:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800596c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005970:	f7fa ff8c 	bl	800088c <__aeabi_ddiv>
 8005974:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005978:	f007 070f 	and.w	r7, r7, #15
 800597c:	2503      	movs	r5, #3
 800597e:	4eb6      	ldr	r6, [pc, #728]	; (8005c58 <_dtoa_r+0x648>)
 8005980:	b957      	cbnz	r7, 8005998 <_dtoa_r+0x388>
 8005982:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005986:	ec53 2b18 	vmov	r2, r3, d8
 800598a:	f7fa ff7f 	bl	800088c <__aeabi_ddiv>
 800598e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005992:	e029      	b.n	80059e8 <_dtoa_r+0x3d8>
 8005994:	2502      	movs	r5, #2
 8005996:	e7f2      	b.n	800597e <_dtoa_r+0x36e>
 8005998:	07f9      	lsls	r1, r7, #31
 800599a:	d508      	bpl.n	80059ae <_dtoa_r+0x39e>
 800599c:	ec51 0b18 	vmov	r0, r1, d8
 80059a0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80059a4:	f7fa fe48 	bl	8000638 <__aeabi_dmul>
 80059a8:	ec41 0b18 	vmov	d8, r0, r1
 80059ac:	3501      	adds	r5, #1
 80059ae:	107f      	asrs	r7, r7, #1
 80059b0:	3608      	adds	r6, #8
 80059b2:	e7e5      	b.n	8005980 <_dtoa_r+0x370>
 80059b4:	f000 80a6 	beq.w	8005b04 <_dtoa_r+0x4f4>
 80059b8:	f1ca 0600 	rsb	r6, sl, #0
 80059bc:	4ba5      	ldr	r3, [pc, #660]	; (8005c54 <_dtoa_r+0x644>)
 80059be:	4fa6      	ldr	r7, [pc, #664]	; (8005c58 <_dtoa_r+0x648>)
 80059c0:	f006 020f 	and.w	r2, r6, #15
 80059c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80059d0:	f7fa fe32 	bl	8000638 <__aeabi_dmul>
 80059d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059d8:	1136      	asrs	r6, r6, #4
 80059da:	2300      	movs	r3, #0
 80059dc:	2502      	movs	r5, #2
 80059de:	2e00      	cmp	r6, #0
 80059e0:	f040 8085 	bne.w	8005aee <_dtoa_r+0x4de>
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1d2      	bne.n	800598e <_dtoa_r+0x37e>
 80059e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f000 808c 	beq.w	8005b08 <_dtoa_r+0x4f8>
 80059f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80059f4:	4b99      	ldr	r3, [pc, #612]	; (8005c5c <_dtoa_r+0x64c>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	4630      	mov	r0, r6
 80059fa:	4639      	mov	r1, r7
 80059fc:	f7fb f88e 	bl	8000b1c <__aeabi_dcmplt>
 8005a00:	2800      	cmp	r0, #0
 8005a02:	f000 8081 	beq.w	8005b08 <_dtoa_r+0x4f8>
 8005a06:	9b01      	ldr	r3, [sp, #4]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d07d      	beq.n	8005b08 <_dtoa_r+0x4f8>
 8005a0c:	f1b9 0f00 	cmp.w	r9, #0
 8005a10:	dd3c      	ble.n	8005a8c <_dtoa_r+0x47c>
 8005a12:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005a16:	9307      	str	r3, [sp, #28]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	4b91      	ldr	r3, [pc, #580]	; (8005c60 <_dtoa_r+0x650>)
 8005a1c:	4630      	mov	r0, r6
 8005a1e:	4639      	mov	r1, r7
 8005a20:	f7fa fe0a 	bl	8000638 <__aeabi_dmul>
 8005a24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a28:	3501      	adds	r5, #1
 8005a2a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005a2e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005a32:	4628      	mov	r0, r5
 8005a34:	f7fa fd96 	bl	8000564 <__aeabi_i2d>
 8005a38:	4632      	mov	r2, r6
 8005a3a:	463b      	mov	r3, r7
 8005a3c:	f7fa fdfc 	bl	8000638 <__aeabi_dmul>
 8005a40:	4b88      	ldr	r3, [pc, #544]	; (8005c64 <_dtoa_r+0x654>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	f7fa fc42 	bl	80002cc <__adddf3>
 8005a48:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005a4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a50:	9303      	str	r3, [sp, #12]
 8005a52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d15c      	bne.n	8005b12 <_dtoa_r+0x502>
 8005a58:	4b83      	ldr	r3, [pc, #524]	; (8005c68 <_dtoa_r+0x658>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	4630      	mov	r0, r6
 8005a5e:	4639      	mov	r1, r7
 8005a60:	f7fa fc32 	bl	80002c8 <__aeabi_dsub>
 8005a64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a68:	4606      	mov	r6, r0
 8005a6a:	460f      	mov	r7, r1
 8005a6c:	f7fb f874 	bl	8000b58 <__aeabi_dcmpgt>
 8005a70:	2800      	cmp	r0, #0
 8005a72:	f040 8296 	bne.w	8005fa2 <_dtoa_r+0x992>
 8005a76:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005a7a:	4630      	mov	r0, r6
 8005a7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a80:	4639      	mov	r1, r7
 8005a82:	f7fb f84b 	bl	8000b1c <__aeabi_dcmplt>
 8005a86:	2800      	cmp	r0, #0
 8005a88:	f040 8288 	bne.w	8005f9c <_dtoa_r+0x98c>
 8005a8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005a90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005a94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f2c0 8158 	blt.w	8005d4c <_dtoa_r+0x73c>
 8005a9c:	f1ba 0f0e 	cmp.w	sl, #14
 8005aa0:	f300 8154 	bgt.w	8005d4c <_dtoa_r+0x73c>
 8005aa4:	4b6b      	ldr	r3, [pc, #428]	; (8005c54 <_dtoa_r+0x644>)
 8005aa6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005aaa:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f280 80e3 	bge.w	8005c7c <_dtoa_r+0x66c>
 8005ab6:	9b01      	ldr	r3, [sp, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f300 80df 	bgt.w	8005c7c <_dtoa_r+0x66c>
 8005abe:	f040 826d 	bne.w	8005f9c <_dtoa_r+0x98c>
 8005ac2:	4b69      	ldr	r3, [pc, #420]	; (8005c68 <_dtoa_r+0x658>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	4640      	mov	r0, r8
 8005ac8:	4649      	mov	r1, r9
 8005aca:	f7fa fdb5 	bl	8000638 <__aeabi_dmul>
 8005ace:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ad2:	f7fb f837 	bl	8000b44 <__aeabi_dcmpge>
 8005ad6:	9e01      	ldr	r6, [sp, #4]
 8005ad8:	4637      	mov	r7, r6
 8005ada:	2800      	cmp	r0, #0
 8005adc:	f040 8243 	bne.w	8005f66 <_dtoa_r+0x956>
 8005ae0:	9d00      	ldr	r5, [sp, #0]
 8005ae2:	2331      	movs	r3, #49	; 0x31
 8005ae4:	f805 3b01 	strb.w	r3, [r5], #1
 8005ae8:	f10a 0a01 	add.w	sl, sl, #1
 8005aec:	e23f      	b.n	8005f6e <_dtoa_r+0x95e>
 8005aee:	07f2      	lsls	r2, r6, #31
 8005af0:	d505      	bpl.n	8005afe <_dtoa_r+0x4ee>
 8005af2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005af6:	f7fa fd9f 	bl	8000638 <__aeabi_dmul>
 8005afa:	3501      	adds	r5, #1
 8005afc:	2301      	movs	r3, #1
 8005afe:	1076      	asrs	r6, r6, #1
 8005b00:	3708      	adds	r7, #8
 8005b02:	e76c      	b.n	80059de <_dtoa_r+0x3ce>
 8005b04:	2502      	movs	r5, #2
 8005b06:	e76f      	b.n	80059e8 <_dtoa_r+0x3d8>
 8005b08:	9b01      	ldr	r3, [sp, #4]
 8005b0a:	f8cd a01c 	str.w	sl, [sp, #28]
 8005b0e:	930c      	str	r3, [sp, #48]	; 0x30
 8005b10:	e78d      	b.n	8005a2e <_dtoa_r+0x41e>
 8005b12:	9900      	ldr	r1, [sp, #0]
 8005b14:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005b16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b18:	4b4e      	ldr	r3, [pc, #312]	; (8005c54 <_dtoa_r+0x644>)
 8005b1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b1e:	4401      	add	r1, r0
 8005b20:	9102      	str	r1, [sp, #8]
 8005b22:	9908      	ldr	r1, [sp, #32]
 8005b24:	eeb0 8a47 	vmov.f32	s16, s14
 8005b28:	eef0 8a67 	vmov.f32	s17, s15
 8005b2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b34:	2900      	cmp	r1, #0
 8005b36:	d045      	beq.n	8005bc4 <_dtoa_r+0x5b4>
 8005b38:	494c      	ldr	r1, [pc, #304]	; (8005c6c <_dtoa_r+0x65c>)
 8005b3a:	2000      	movs	r0, #0
 8005b3c:	f7fa fea6 	bl	800088c <__aeabi_ddiv>
 8005b40:	ec53 2b18 	vmov	r2, r3, d8
 8005b44:	f7fa fbc0 	bl	80002c8 <__aeabi_dsub>
 8005b48:	9d00      	ldr	r5, [sp, #0]
 8005b4a:	ec41 0b18 	vmov	d8, r0, r1
 8005b4e:	4639      	mov	r1, r7
 8005b50:	4630      	mov	r0, r6
 8005b52:	f7fb f821 	bl	8000b98 <__aeabi_d2iz>
 8005b56:	900c      	str	r0, [sp, #48]	; 0x30
 8005b58:	f7fa fd04 	bl	8000564 <__aeabi_i2d>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	460b      	mov	r3, r1
 8005b60:	4630      	mov	r0, r6
 8005b62:	4639      	mov	r1, r7
 8005b64:	f7fa fbb0 	bl	80002c8 <__aeabi_dsub>
 8005b68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b6a:	3330      	adds	r3, #48	; 0x30
 8005b6c:	f805 3b01 	strb.w	r3, [r5], #1
 8005b70:	ec53 2b18 	vmov	r2, r3, d8
 8005b74:	4606      	mov	r6, r0
 8005b76:	460f      	mov	r7, r1
 8005b78:	f7fa ffd0 	bl	8000b1c <__aeabi_dcmplt>
 8005b7c:	2800      	cmp	r0, #0
 8005b7e:	d165      	bne.n	8005c4c <_dtoa_r+0x63c>
 8005b80:	4632      	mov	r2, r6
 8005b82:	463b      	mov	r3, r7
 8005b84:	4935      	ldr	r1, [pc, #212]	; (8005c5c <_dtoa_r+0x64c>)
 8005b86:	2000      	movs	r0, #0
 8005b88:	f7fa fb9e 	bl	80002c8 <__aeabi_dsub>
 8005b8c:	ec53 2b18 	vmov	r2, r3, d8
 8005b90:	f7fa ffc4 	bl	8000b1c <__aeabi_dcmplt>
 8005b94:	2800      	cmp	r0, #0
 8005b96:	f040 80b9 	bne.w	8005d0c <_dtoa_r+0x6fc>
 8005b9a:	9b02      	ldr	r3, [sp, #8]
 8005b9c:	429d      	cmp	r5, r3
 8005b9e:	f43f af75 	beq.w	8005a8c <_dtoa_r+0x47c>
 8005ba2:	4b2f      	ldr	r3, [pc, #188]	; (8005c60 <_dtoa_r+0x650>)
 8005ba4:	ec51 0b18 	vmov	r0, r1, d8
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f7fa fd45 	bl	8000638 <__aeabi_dmul>
 8005bae:	4b2c      	ldr	r3, [pc, #176]	; (8005c60 <_dtoa_r+0x650>)
 8005bb0:	ec41 0b18 	vmov	d8, r0, r1
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	4630      	mov	r0, r6
 8005bb8:	4639      	mov	r1, r7
 8005bba:	f7fa fd3d 	bl	8000638 <__aeabi_dmul>
 8005bbe:	4606      	mov	r6, r0
 8005bc0:	460f      	mov	r7, r1
 8005bc2:	e7c4      	b.n	8005b4e <_dtoa_r+0x53e>
 8005bc4:	ec51 0b17 	vmov	r0, r1, d7
 8005bc8:	f7fa fd36 	bl	8000638 <__aeabi_dmul>
 8005bcc:	9b02      	ldr	r3, [sp, #8]
 8005bce:	9d00      	ldr	r5, [sp, #0]
 8005bd0:	930c      	str	r3, [sp, #48]	; 0x30
 8005bd2:	ec41 0b18 	vmov	d8, r0, r1
 8005bd6:	4639      	mov	r1, r7
 8005bd8:	4630      	mov	r0, r6
 8005bda:	f7fa ffdd 	bl	8000b98 <__aeabi_d2iz>
 8005bde:	9011      	str	r0, [sp, #68]	; 0x44
 8005be0:	f7fa fcc0 	bl	8000564 <__aeabi_i2d>
 8005be4:	4602      	mov	r2, r0
 8005be6:	460b      	mov	r3, r1
 8005be8:	4630      	mov	r0, r6
 8005bea:	4639      	mov	r1, r7
 8005bec:	f7fa fb6c 	bl	80002c8 <__aeabi_dsub>
 8005bf0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005bf2:	3330      	adds	r3, #48	; 0x30
 8005bf4:	f805 3b01 	strb.w	r3, [r5], #1
 8005bf8:	9b02      	ldr	r3, [sp, #8]
 8005bfa:	429d      	cmp	r5, r3
 8005bfc:	4606      	mov	r6, r0
 8005bfe:	460f      	mov	r7, r1
 8005c00:	f04f 0200 	mov.w	r2, #0
 8005c04:	d134      	bne.n	8005c70 <_dtoa_r+0x660>
 8005c06:	4b19      	ldr	r3, [pc, #100]	; (8005c6c <_dtoa_r+0x65c>)
 8005c08:	ec51 0b18 	vmov	r0, r1, d8
 8005c0c:	f7fa fb5e 	bl	80002cc <__adddf3>
 8005c10:	4602      	mov	r2, r0
 8005c12:	460b      	mov	r3, r1
 8005c14:	4630      	mov	r0, r6
 8005c16:	4639      	mov	r1, r7
 8005c18:	f7fa ff9e 	bl	8000b58 <__aeabi_dcmpgt>
 8005c1c:	2800      	cmp	r0, #0
 8005c1e:	d175      	bne.n	8005d0c <_dtoa_r+0x6fc>
 8005c20:	ec53 2b18 	vmov	r2, r3, d8
 8005c24:	4911      	ldr	r1, [pc, #68]	; (8005c6c <_dtoa_r+0x65c>)
 8005c26:	2000      	movs	r0, #0
 8005c28:	f7fa fb4e 	bl	80002c8 <__aeabi_dsub>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	460b      	mov	r3, r1
 8005c30:	4630      	mov	r0, r6
 8005c32:	4639      	mov	r1, r7
 8005c34:	f7fa ff72 	bl	8000b1c <__aeabi_dcmplt>
 8005c38:	2800      	cmp	r0, #0
 8005c3a:	f43f af27 	beq.w	8005a8c <_dtoa_r+0x47c>
 8005c3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c40:	1e6b      	subs	r3, r5, #1
 8005c42:	930c      	str	r3, [sp, #48]	; 0x30
 8005c44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c48:	2b30      	cmp	r3, #48	; 0x30
 8005c4a:	d0f8      	beq.n	8005c3e <_dtoa_r+0x62e>
 8005c4c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005c50:	e04a      	b.n	8005ce8 <_dtoa_r+0x6d8>
 8005c52:	bf00      	nop
 8005c54:	080075d0 	.word	0x080075d0
 8005c58:	080075a8 	.word	0x080075a8
 8005c5c:	3ff00000 	.word	0x3ff00000
 8005c60:	40240000 	.word	0x40240000
 8005c64:	401c0000 	.word	0x401c0000
 8005c68:	40140000 	.word	0x40140000
 8005c6c:	3fe00000 	.word	0x3fe00000
 8005c70:	4baf      	ldr	r3, [pc, #700]	; (8005f30 <_dtoa_r+0x920>)
 8005c72:	f7fa fce1 	bl	8000638 <__aeabi_dmul>
 8005c76:	4606      	mov	r6, r0
 8005c78:	460f      	mov	r7, r1
 8005c7a:	e7ac      	b.n	8005bd6 <_dtoa_r+0x5c6>
 8005c7c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005c80:	9d00      	ldr	r5, [sp, #0]
 8005c82:	4642      	mov	r2, r8
 8005c84:	464b      	mov	r3, r9
 8005c86:	4630      	mov	r0, r6
 8005c88:	4639      	mov	r1, r7
 8005c8a:	f7fa fdff 	bl	800088c <__aeabi_ddiv>
 8005c8e:	f7fa ff83 	bl	8000b98 <__aeabi_d2iz>
 8005c92:	9002      	str	r0, [sp, #8]
 8005c94:	f7fa fc66 	bl	8000564 <__aeabi_i2d>
 8005c98:	4642      	mov	r2, r8
 8005c9a:	464b      	mov	r3, r9
 8005c9c:	f7fa fccc 	bl	8000638 <__aeabi_dmul>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	4630      	mov	r0, r6
 8005ca6:	4639      	mov	r1, r7
 8005ca8:	f7fa fb0e 	bl	80002c8 <__aeabi_dsub>
 8005cac:	9e02      	ldr	r6, [sp, #8]
 8005cae:	9f01      	ldr	r7, [sp, #4]
 8005cb0:	3630      	adds	r6, #48	; 0x30
 8005cb2:	f805 6b01 	strb.w	r6, [r5], #1
 8005cb6:	9e00      	ldr	r6, [sp, #0]
 8005cb8:	1bae      	subs	r6, r5, r6
 8005cba:	42b7      	cmp	r7, r6
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	d137      	bne.n	8005d32 <_dtoa_r+0x722>
 8005cc2:	f7fa fb03 	bl	80002cc <__adddf3>
 8005cc6:	4642      	mov	r2, r8
 8005cc8:	464b      	mov	r3, r9
 8005cca:	4606      	mov	r6, r0
 8005ccc:	460f      	mov	r7, r1
 8005cce:	f7fa ff43 	bl	8000b58 <__aeabi_dcmpgt>
 8005cd2:	b9c8      	cbnz	r0, 8005d08 <_dtoa_r+0x6f8>
 8005cd4:	4642      	mov	r2, r8
 8005cd6:	464b      	mov	r3, r9
 8005cd8:	4630      	mov	r0, r6
 8005cda:	4639      	mov	r1, r7
 8005cdc:	f7fa ff14 	bl	8000b08 <__aeabi_dcmpeq>
 8005ce0:	b110      	cbz	r0, 8005ce8 <_dtoa_r+0x6d8>
 8005ce2:	9b02      	ldr	r3, [sp, #8]
 8005ce4:	07d9      	lsls	r1, r3, #31
 8005ce6:	d40f      	bmi.n	8005d08 <_dtoa_r+0x6f8>
 8005ce8:	4620      	mov	r0, r4
 8005cea:	4659      	mov	r1, fp
 8005cec:	f000 fada 	bl	80062a4 <_Bfree>
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	702b      	strb	r3, [r5, #0]
 8005cf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005cf6:	f10a 0001 	add.w	r0, sl, #1
 8005cfa:	6018      	str	r0, [r3, #0]
 8005cfc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	f43f acd8 	beq.w	80056b4 <_dtoa_r+0xa4>
 8005d04:	601d      	str	r5, [r3, #0]
 8005d06:	e4d5      	b.n	80056b4 <_dtoa_r+0xa4>
 8005d08:	f8cd a01c 	str.w	sl, [sp, #28]
 8005d0c:	462b      	mov	r3, r5
 8005d0e:	461d      	mov	r5, r3
 8005d10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d14:	2a39      	cmp	r2, #57	; 0x39
 8005d16:	d108      	bne.n	8005d2a <_dtoa_r+0x71a>
 8005d18:	9a00      	ldr	r2, [sp, #0]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d1f7      	bne.n	8005d0e <_dtoa_r+0x6fe>
 8005d1e:	9a07      	ldr	r2, [sp, #28]
 8005d20:	9900      	ldr	r1, [sp, #0]
 8005d22:	3201      	adds	r2, #1
 8005d24:	9207      	str	r2, [sp, #28]
 8005d26:	2230      	movs	r2, #48	; 0x30
 8005d28:	700a      	strb	r2, [r1, #0]
 8005d2a:	781a      	ldrb	r2, [r3, #0]
 8005d2c:	3201      	adds	r2, #1
 8005d2e:	701a      	strb	r2, [r3, #0]
 8005d30:	e78c      	b.n	8005c4c <_dtoa_r+0x63c>
 8005d32:	4b7f      	ldr	r3, [pc, #508]	; (8005f30 <_dtoa_r+0x920>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	f7fa fc7f 	bl	8000638 <__aeabi_dmul>
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	4606      	mov	r6, r0
 8005d40:	460f      	mov	r7, r1
 8005d42:	f7fa fee1 	bl	8000b08 <__aeabi_dcmpeq>
 8005d46:	2800      	cmp	r0, #0
 8005d48:	d09b      	beq.n	8005c82 <_dtoa_r+0x672>
 8005d4a:	e7cd      	b.n	8005ce8 <_dtoa_r+0x6d8>
 8005d4c:	9a08      	ldr	r2, [sp, #32]
 8005d4e:	2a00      	cmp	r2, #0
 8005d50:	f000 80c4 	beq.w	8005edc <_dtoa_r+0x8cc>
 8005d54:	9a05      	ldr	r2, [sp, #20]
 8005d56:	2a01      	cmp	r2, #1
 8005d58:	f300 80a8 	bgt.w	8005eac <_dtoa_r+0x89c>
 8005d5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005d5e:	2a00      	cmp	r2, #0
 8005d60:	f000 80a0 	beq.w	8005ea4 <_dtoa_r+0x894>
 8005d64:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005d68:	9e06      	ldr	r6, [sp, #24]
 8005d6a:	4645      	mov	r5, r8
 8005d6c:	9a04      	ldr	r2, [sp, #16]
 8005d6e:	2101      	movs	r1, #1
 8005d70:	441a      	add	r2, r3
 8005d72:	4620      	mov	r0, r4
 8005d74:	4498      	add	r8, r3
 8005d76:	9204      	str	r2, [sp, #16]
 8005d78:	f000 fb50 	bl	800641c <__i2b>
 8005d7c:	4607      	mov	r7, r0
 8005d7e:	2d00      	cmp	r5, #0
 8005d80:	dd0b      	ble.n	8005d9a <_dtoa_r+0x78a>
 8005d82:	9b04      	ldr	r3, [sp, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	dd08      	ble.n	8005d9a <_dtoa_r+0x78a>
 8005d88:	42ab      	cmp	r3, r5
 8005d8a:	9a04      	ldr	r2, [sp, #16]
 8005d8c:	bfa8      	it	ge
 8005d8e:	462b      	movge	r3, r5
 8005d90:	eba8 0803 	sub.w	r8, r8, r3
 8005d94:	1aed      	subs	r5, r5, r3
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	9304      	str	r3, [sp, #16]
 8005d9a:	9b06      	ldr	r3, [sp, #24]
 8005d9c:	b1fb      	cbz	r3, 8005dde <_dtoa_r+0x7ce>
 8005d9e:	9b08      	ldr	r3, [sp, #32]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f000 809f 	beq.w	8005ee4 <_dtoa_r+0x8d4>
 8005da6:	2e00      	cmp	r6, #0
 8005da8:	dd11      	ble.n	8005dce <_dtoa_r+0x7be>
 8005daa:	4639      	mov	r1, r7
 8005dac:	4632      	mov	r2, r6
 8005dae:	4620      	mov	r0, r4
 8005db0:	f000 fbf0 	bl	8006594 <__pow5mult>
 8005db4:	465a      	mov	r2, fp
 8005db6:	4601      	mov	r1, r0
 8005db8:	4607      	mov	r7, r0
 8005dba:	4620      	mov	r0, r4
 8005dbc:	f000 fb44 	bl	8006448 <__multiply>
 8005dc0:	4659      	mov	r1, fp
 8005dc2:	9007      	str	r0, [sp, #28]
 8005dc4:	4620      	mov	r0, r4
 8005dc6:	f000 fa6d 	bl	80062a4 <_Bfree>
 8005dca:	9b07      	ldr	r3, [sp, #28]
 8005dcc:	469b      	mov	fp, r3
 8005dce:	9b06      	ldr	r3, [sp, #24]
 8005dd0:	1b9a      	subs	r2, r3, r6
 8005dd2:	d004      	beq.n	8005dde <_dtoa_r+0x7ce>
 8005dd4:	4659      	mov	r1, fp
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	f000 fbdc 	bl	8006594 <__pow5mult>
 8005ddc:	4683      	mov	fp, r0
 8005dde:	2101      	movs	r1, #1
 8005de0:	4620      	mov	r0, r4
 8005de2:	f000 fb1b 	bl	800641c <__i2b>
 8005de6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	4606      	mov	r6, r0
 8005dec:	dd7c      	ble.n	8005ee8 <_dtoa_r+0x8d8>
 8005dee:	461a      	mov	r2, r3
 8005df0:	4601      	mov	r1, r0
 8005df2:	4620      	mov	r0, r4
 8005df4:	f000 fbce 	bl	8006594 <__pow5mult>
 8005df8:	9b05      	ldr	r3, [sp, #20]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	4606      	mov	r6, r0
 8005dfe:	dd76      	ble.n	8005eee <_dtoa_r+0x8de>
 8005e00:	2300      	movs	r3, #0
 8005e02:	9306      	str	r3, [sp, #24]
 8005e04:	6933      	ldr	r3, [r6, #16]
 8005e06:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005e0a:	6918      	ldr	r0, [r3, #16]
 8005e0c:	f000 fab6 	bl	800637c <__hi0bits>
 8005e10:	f1c0 0020 	rsb	r0, r0, #32
 8005e14:	9b04      	ldr	r3, [sp, #16]
 8005e16:	4418      	add	r0, r3
 8005e18:	f010 001f 	ands.w	r0, r0, #31
 8005e1c:	f000 8086 	beq.w	8005f2c <_dtoa_r+0x91c>
 8005e20:	f1c0 0320 	rsb	r3, r0, #32
 8005e24:	2b04      	cmp	r3, #4
 8005e26:	dd7f      	ble.n	8005f28 <_dtoa_r+0x918>
 8005e28:	f1c0 001c 	rsb	r0, r0, #28
 8005e2c:	9b04      	ldr	r3, [sp, #16]
 8005e2e:	4403      	add	r3, r0
 8005e30:	4480      	add	r8, r0
 8005e32:	4405      	add	r5, r0
 8005e34:	9304      	str	r3, [sp, #16]
 8005e36:	f1b8 0f00 	cmp.w	r8, #0
 8005e3a:	dd05      	ble.n	8005e48 <_dtoa_r+0x838>
 8005e3c:	4659      	mov	r1, fp
 8005e3e:	4642      	mov	r2, r8
 8005e40:	4620      	mov	r0, r4
 8005e42:	f000 fc01 	bl	8006648 <__lshift>
 8005e46:	4683      	mov	fp, r0
 8005e48:	9b04      	ldr	r3, [sp, #16]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	dd05      	ble.n	8005e5a <_dtoa_r+0x84a>
 8005e4e:	4631      	mov	r1, r6
 8005e50:	461a      	mov	r2, r3
 8005e52:	4620      	mov	r0, r4
 8005e54:	f000 fbf8 	bl	8006648 <__lshift>
 8005e58:	4606      	mov	r6, r0
 8005e5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d069      	beq.n	8005f34 <_dtoa_r+0x924>
 8005e60:	4631      	mov	r1, r6
 8005e62:	4658      	mov	r0, fp
 8005e64:	f000 fc5c 	bl	8006720 <__mcmp>
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	da63      	bge.n	8005f34 <_dtoa_r+0x924>
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	4659      	mov	r1, fp
 8005e70:	220a      	movs	r2, #10
 8005e72:	4620      	mov	r0, r4
 8005e74:	f000 fa38 	bl	80062e8 <__multadd>
 8005e78:	9b08      	ldr	r3, [sp, #32]
 8005e7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e7e:	4683      	mov	fp, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f000 818f 	beq.w	80061a4 <_dtoa_r+0xb94>
 8005e86:	4639      	mov	r1, r7
 8005e88:	2300      	movs	r3, #0
 8005e8a:	220a      	movs	r2, #10
 8005e8c:	4620      	mov	r0, r4
 8005e8e:	f000 fa2b 	bl	80062e8 <__multadd>
 8005e92:	f1b9 0f00 	cmp.w	r9, #0
 8005e96:	4607      	mov	r7, r0
 8005e98:	f300 808e 	bgt.w	8005fb8 <_dtoa_r+0x9a8>
 8005e9c:	9b05      	ldr	r3, [sp, #20]
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	dc50      	bgt.n	8005f44 <_dtoa_r+0x934>
 8005ea2:	e089      	b.n	8005fb8 <_dtoa_r+0x9a8>
 8005ea4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ea6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005eaa:	e75d      	b.n	8005d68 <_dtoa_r+0x758>
 8005eac:	9b01      	ldr	r3, [sp, #4]
 8005eae:	1e5e      	subs	r6, r3, #1
 8005eb0:	9b06      	ldr	r3, [sp, #24]
 8005eb2:	42b3      	cmp	r3, r6
 8005eb4:	bfbf      	itttt	lt
 8005eb6:	9b06      	ldrlt	r3, [sp, #24]
 8005eb8:	9606      	strlt	r6, [sp, #24]
 8005eba:	1af2      	sublt	r2, r6, r3
 8005ebc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005ebe:	bfb6      	itet	lt
 8005ec0:	189b      	addlt	r3, r3, r2
 8005ec2:	1b9e      	subge	r6, r3, r6
 8005ec4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005ec6:	9b01      	ldr	r3, [sp, #4]
 8005ec8:	bfb8      	it	lt
 8005eca:	2600      	movlt	r6, #0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	bfb5      	itete	lt
 8005ed0:	eba8 0503 	sublt.w	r5, r8, r3
 8005ed4:	9b01      	ldrge	r3, [sp, #4]
 8005ed6:	2300      	movlt	r3, #0
 8005ed8:	4645      	movge	r5, r8
 8005eda:	e747      	b.n	8005d6c <_dtoa_r+0x75c>
 8005edc:	9e06      	ldr	r6, [sp, #24]
 8005ede:	9f08      	ldr	r7, [sp, #32]
 8005ee0:	4645      	mov	r5, r8
 8005ee2:	e74c      	b.n	8005d7e <_dtoa_r+0x76e>
 8005ee4:	9a06      	ldr	r2, [sp, #24]
 8005ee6:	e775      	b.n	8005dd4 <_dtoa_r+0x7c4>
 8005ee8:	9b05      	ldr	r3, [sp, #20]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	dc18      	bgt.n	8005f20 <_dtoa_r+0x910>
 8005eee:	9b02      	ldr	r3, [sp, #8]
 8005ef0:	b9b3      	cbnz	r3, 8005f20 <_dtoa_r+0x910>
 8005ef2:	9b03      	ldr	r3, [sp, #12]
 8005ef4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ef8:	b9a3      	cbnz	r3, 8005f24 <_dtoa_r+0x914>
 8005efa:	9b03      	ldr	r3, [sp, #12]
 8005efc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f00:	0d1b      	lsrs	r3, r3, #20
 8005f02:	051b      	lsls	r3, r3, #20
 8005f04:	b12b      	cbz	r3, 8005f12 <_dtoa_r+0x902>
 8005f06:	9b04      	ldr	r3, [sp, #16]
 8005f08:	3301      	adds	r3, #1
 8005f0a:	9304      	str	r3, [sp, #16]
 8005f0c:	f108 0801 	add.w	r8, r8, #1
 8005f10:	2301      	movs	r3, #1
 8005f12:	9306      	str	r3, [sp, #24]
 8005f14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	f47f af74 	bne.w	8005e04 <_dtoa_r+0x7f4>
 8005f1c:	2001      	movs	r0, #1
 8005f1e:	e779      	b.n	8005e14 <_dtoa_r+0x804>
 8005f20:	2300      	movs	r3, #0
 8005f22:	e7f6      	b.n	8005f12 <_dtoa_r+0x902>
 8005f24:	9b02      	ldr	r3, [sp, #8]
 8005f26:	e7f4      	b.n	8005f12 <_dtoa_r+0x902>
 8005f28:	d085      	beq.n	8005e36 <_dtoa_r+0x826>
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	301c      	adds	r0, #28
 8005f2e:	e77d      	b.n	8005e2c <_dtoa_r+0x81c>
 8005f30:	40240000 	.word	0x40240000
 8005f34:	9b01      	ldr	r3, [sp, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	dc38      	bgt.n	8005fac <_dtoa_r+0x99c>
 8005f3a:	9b05      	ldr	r3, [sp, #20]
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	dd35      	ble.n	8005fac <_dtoa_r+0x99c>
 8005f40:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005f44:	f1b9 0f00 	cmp.w	r9, #0
 8005f48:	d10d      	bne.n	8005f66 <_dtoa_r+0x956>
 8005f4a:	4631      	mov	r1, r6
 8005f4c:	464b      	mov	r3, r9
 8005f4e:	2205      	movs	r2, #5
 8005f50:	4620      	mov	r0, r4
 8005f52:	f000 f9c9 	bl	80062e8 <__multadd>
 8005f56:	4601      	mov	r1, r0
 8005f58:	4606      	mov	r6, r0
 8005f5a:	4658      	mov	r0, fp
 8005f5c:	f000 fbe0 	bl	8006720 <__mcmp>
 8005f60:	2800      	cmp	r0, #0
 8005f62:	f73f adbd 	bgt.w	8005ae0 <_dtoa_r+0x4d0>
 8005f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f68:	9d00      	ldr	r5, [sp, #0]
 8005f6a:	ea6f 0a03 	mvn.w	sl, r3
 8005f6e:	f04f 0800 	mov.w	r8, #0
 8005f72:	4631      	mov	r1, r6
 8005f74:	4620      	mov	r0, r4
 8005f76:	f000 f995 	bl	80062a4 <_Bfree>
 8005f7a:	2f00      	cmp	r7, #0
 8005f7c:	f43f aeb4 	beq.w	8005ce8 <_dtoa_r+0x6d8>
 8005f80:	f1b8 0f00 	cmp.w	r8, #0
 8005f84:	d005      	beq.n	8005f92 <_dtoa_r+0x982>
 8005f86:	45b8      	cmp	r8, r7
 8005f88:	d003      	beq.n	8005f92 <_dtoa_r+0x982>
 8005f8a:	4641      	mov	r1, r8
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	f000 f989 	bl	80062a4 <_Bfree>
 8005f92:	4639      	mov	r1, r7
 8005f94:	4620      	mov	r0, r4
 8005f96:	f000 f985 	bl	80062a4 <_Bfree>
 8005f9a:	e6a5      	b.n	8005ce8 <_dtoa_r+0x6d8>
 8005f9c:	2600      	movs	r6, #0
 8005f9e:	4637      	mov	r7, r6
 8005fa0:	e7e1      	b.n	8005f66 <_dtoa_r+0x956>
 8005fa2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005fa4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005fa8:	4637      	mov	r7, r6
 8005faa:	e599      	b.n	8005ae0 <_dtoa_r+0x4d0>
 8005fac:	9b08      	ldr	r3, [sp, #32]
 8005fae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f000 80fd 	beq.w	80061b2 <_dtoa_r+0xba2>
 8005fb8:	2d00      	cmp	r5, #0
 8005fba:	dd05      	ble.n	8005fc8 <_dtoa_r+0x9b8>
 8005fbc:	4639      	mov	r1, r7
 8005fbe:	462a      	mov	r2, r5
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	f000 fb41 	bl	8006648 <__lshift>
 8005fc6:	4607      	mov	r7, r0
 8005fc8:	9b06      	ldr	r3, [sp, #24]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d05c      	beq.n	8006088 <_dtoa_r+0xa78>
 8005fce:	6879      	ldr	r1, [r7, #4]
 8005fd0:	4620      	mov	r0, r4
 8005fd2:	f000 f927 	bl	8006224 <_Balloc>
 8005fd6:	4605      	mov	r5, r0
 8005fd8:	b928      	cbnz	r0, 8005fe6 <_dtoa_r+0x9d6>
 8005fda:	4b80      	ldr	r3, [pc, #512]	; (80061dc <_dtoa_r+0xbcc>)
 8005fdc:	4602      	mov	r2, r0
 8005fde:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005fe2:	f7ff bb2e 	b.w	8005642 <_dtoa_r+0x32>
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	3202      	adds	r2, #2
 8005fea:	0092      	lsls	r2, r2, #2
 8005fec:	f107 010c 	add.w	r1, r7, #12
 8005ff0:	300c      	adds	r0, #12
 8005ff2:	f000 f8fd 	bl	80061f0 <memcpy>
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	4629      	mov	r1, r5
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	f000 fb24 	bl	8006648 <__lshift>
 8006000:	9b00      	ldr	r3, [sp, #0]
 8006002:	3301      	adds	r3, #1
 8006004:	9301      	str	r3, [sp, #4]
 8006006:	9b00      	ldr	r3, [sp, #0]
 8006008:	444b      	add	r3, r9
 800600a:	9307      	str	r3, [sp, #28]
 800600c:	9b02      	ldr	r3, [sp, #8]
 800600e:	f003 0301 	and.w	r3, r3, #1
 8006012:	46b8      	mov	r8, r7
 8006014:	9306      	str	r3, [sp, #24]
 8006016:	4607      	mov	r7, r0
 8006018:	9b01      	ldr	r3, [sp, #4]
 800601a:	4631      	mov	r1, r6
 800601c:	3b01      	subs	r3, #1
 800601e:	4658      	mov	r0, fp
 8006020:	9302      	str	r3, [sp, #8]
 8006022:	f7ff fa69 	bl	80054f8 <quorem>
 8006026:	4603      	mov	r3, r0
 8006028:	3330      	adds	r3, #48	; 0x30
 800602a:	9004      	str	r0, [sp, #16]
 800602c:	4641      	mov	r1, r8
 800602e:	4658      	mov	r0, fp
 8006030:	9308      	str	r3, [sp, #32]
 8006032:	f000 fb75 	bl	8006720 <__mcmp>
 8006036:	463a      	mov	r2, r7
 8006038:	4681      	mov	r9, r0
 800603a:	4631      	mov	r1, r6
 800603c:	4620      	mov	r0, r4
 800603e:	f000 fb8b 	bl	8006758 <__mdiff>
 8006042:	68c2      	ldr	r2, [r0, #12]
 8006044:	9b08      	ldr	r3, [sp, #32]
 8006046:	4605      	mov	r5, r0
 8006048:	bb02      	cbnz	r2, 800608c <_dtoa_r+0xa7c>
 800604a:	4601      	mov	r1, r0
 800604c:	4658      	mov	r0, fp
 800604e:	f000 fb67 	bl	8006720 <__mcmp>
 8006052:	9b08      	ldr	r3, [sp, #32]
 8006054:	4602      	mov	r2, r0
 8006056:	4629      	mov	r1, r5
 8006058:	4620      	mov	r0, r4
 800605a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800605e:	f000 f921 	bl	80062a4 <_Bfree>
 8006062:	9b05      	ldr	r3, [sp, #20]
 8006064:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006066:	9d01      	ldr	r5, [sp, #4]
 8006068:	ea43 0102 	orr.w	r1, r3, r2
 800606c:	9b06      	ldr	r3, [sp, #24]
 800606e:	430b      	orrs	r3, r1
 8006070:	9b08      	ldr	r3, [sp, #32]
 8006072:	d10d      	bne.n	8006090 <_dtoa_r+0xa80>
 8006074:	2b39      	cmp	r3, #57	; 0x39
 8006076:	d029      	beq.n	80060cc <_dtoa_r+0xabc>
 8006078:	f1b9 0f00 	cmp.w	r9, #0
 800607c:	dd01      	ble.n	8006082 <_dtoa_r+0xa72>
 800607e:	9b04      	ldr	r3, [sp, #16]
 8006080:	3331      	adds	r3, #49	; 0x31
 8006082:	9a02      	ldr	r2, [sp, #8]
 8006084:	7013      	strb	r3, [r2, #0]
 8006086:	e774      	b.n	8005f72 <_dtoa_r+0x962>
 8006088:	4638      	mov	r0, r7
 800608a:	e7b9      	b.n	8006000 <_dtoa_r+0x9f0>
 800608c:	2201      	movs	r2, #1
 800608e:	e7e2      	b.n	8006056 <_dtoa_r+0xa46>
 8006090:	f1b9 0f00 	cmp.w	r9, #0
 8006094:	db06      	blt.n	80060a4 <_dtoa_r+0xa94>
 8006096:	9905      	ldr	r1, [sp, #20]
 8006098:	ea41 0909 	orr.w	r9, r1, r9
 800609c:	9906      	ldr	r1, [sp, #24]
 800609e:	ea59 0101 	orrs.w	r1, r9, r1
 80060a2:	d120      	bne.n	80060e6 <_dtoa_r+0xad6>
 80060a4:	2a00      	cmp	r2, #0
 80060a6:	ddec      	ble.n	8006082 <_dtoa_r+0xa72>
 80060a8:	4659      	mov	r1, fp
 80060aa:	2201      	movs	r2, #1
 80060ac:	4620      	mov	r0, r4
 80060ae:	9301      	str	r3, [sp, #4]
 80060b0:	f000 faca 	bl	8006648 <__lshift>
 80060b4:	4631      	mov	r1, r6
 80060b6:	4683      	mov	fp, r0
 80060b8:	f000 fb32 	bl	8006720 <__mcmp>
 80060bc:	2800      	cmp	r0, #0
 80060be:	9b01      	ldr	r3, [sp, #4]
 80060c0:	dc02      	bgt.n	80060c8 <_dtoa_r+0xab8>
 80060c2:	d1de      	bne.n	8006082 <_dtoa_r+0xa72>
 80060c4:	07da      	lsls	r2, r3, #31
 80060c6:	d5dc      	bpl.n	8006082 <_dtoa_r+0xa72>
 80060c8:	2b39      	cmp	r3, #57	; 0x39
 80060ca:	d1d8      	bne.n	800607e <_dtoa_r+0xa6e>
 80060cc:	9a02      	ldr	r2, [sp, #8]
 80060ce:	2339      	movs	r3, #57	; 0x39
 80060d0:	7013      	strb	r3, [r2, #0]
 80060d2:	462b      	mov	r3, r5
 80060d4:	461d      	mov	r5, r3
 80060d6:	3b01      	subs	r3, #1
 80060d8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80060dc:	2a39      	cmp	r2, #57	; 0x39
 80060de:	d050      	beq.n	8006182 <_dtoa_r+0xb72>
 80060e0:	3201      	adds	r2, #1
 80060e2:	701a      	strb	r2, [r3, #0]
 80060e4:	e745      	b.n	8005f72 <_dtoa_r+0x962>
 80060e6:	2a00      	cmp	r2, #0
 80060e8:	dd03      	ble.n	80060f2 <_dtoa_r+0xae2>
 80060ea:	2b39      	cmp	r3, #57	; 0x39
 80060ec:	d0ee      	beq.n	80060cc <_dtoa_r+0xabc>
 80060ee:	3301      	adds	r3, #1
 80060f0:	e7c7      	b.n	8006082 <_dtoa_r+0xa72>
 80060f2:	9a01      	ldr	r2, [sp, #4]
 80060f4:	9907      	ldr	r1, [sp, #28]
 80060f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80060fa:	428a      	cmp	r2, r1
 80060fc:	d02a      	beq.n	8006154 <_dtoa_r+0xb44>
 80060fe:	4659      	mov	r1, fp
 8006100:	2300      	movs	r3, #0
 8006102:	220a      	movs	r2, #10
 8006104:	4620      	mov	r0, r4
 8006106:	f000 f8ef 	bl	80062e8 <__multadd>
 800610a:	45b8      	cmp	r8, r7
 800610c:	4683      	mov	fp, r0
 800610e:	f04f 0300 	mov.w	r3, #0
 8006112:	f04f 020a 	mov.w	r2, #10
 8006116:	4641      	mov	r1, r8
 8006118:	4620      	mov	r0, r4
 800611a:	d107      	bne.n	800612c <_dtoa_r+0xb1c>
 800611c:	f000 f8e4 	bl	80062e8 <__multadd>
 8006120:	4680      	mov	r8, r0
 8006122:	4607      	mov	r7, r0
 8006124:	9b01      	ldr	r3, [sp, #4]
 8006126:	3301      	adds	r3, #1
 8006128:	9301      	str	r3, [sp, #4]
 800612a:	e775      	b.n	8006018 <_dtoa_r+0xa08>
 800612c:	f000 f8dc 	bl	80062e8 <__multadd>
 8006130:	4639      	mov	r1, r7
 8006132:	4680      	mov	r8, r0
 8006134:	2300      	movs	r3, #0
 8006136:	220a      	movs	r2, #10
 8006138:	4620      	mov	r0, r4
 800613a:	f000 f8d5 	bl	80062e8 <__multadd>
 800613e:	4607      	mov	r7, r0
 8006140:	e7f0      	b.n	8006124 <_dtoa_r+0xb14>
 8006142:	f1b9 0f00 	cmp.w	r9, #0
 8006146:	9a00      	ldr	r2, [sp, #0]
 8006148:	bfcc      	ite	gt
 800614a:	464d      	movgt	r5, r9
 800614c:	2501      	movle	r5, #1
 800614e:	4415      	add	r5, r2
 8006150:	f04f 0800 	mov.w	r8, #0
 8006154:	4659      	mov	r1, fp
 8006156:	2201      	movs	r2, #1
 8006158:	4620      	mov	r0, r4
 800615a:	9301      	str	r3, [sp, #4]
 800615c:	f000 fa74 	bl	8006648 <__lshift>
 8006160:	4631      	mov	r1, r6
 8006162:	4683      	mov	fp, r0
 8006164:	f000 fadc 	bl	8006720 <__mcmp>
 8006168:	2800      	cmp	r0, #0
 800616a:	dcb2      	bgt.n	80060d2 <_dtoa_r+0xac2>
 800616c:	d102      	bne.n	8006174 <_dtoa_r+0xb64>
 800616e:	9b01      	ldr	r3, [sp, #4]
 8006170:	07db      	lsls	r3, r3, #31
 8006172:	d4ae      	bmi.n	80060d2 <_dtoa_r+0xac2>
 8006174:	462b      	mov	r3, r5
 8006176:	461d      	mov	r5, r3
 8006178:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800617c:	2a30      	cmp	r2, #48	; 0x30
 800617e:	d0fa      	beq.n	8006176 <_dtoa_r+0xb66>
 8006180:	e6f7      	b.n	8005f72 <_dtoa_r+0x962>
 8006182:	9a00      	ldr	r2, [sp, #0]
 8006184:	429a      	cmp	r2, r3
 8006186:	d1a5      	bne.n	80060d4 <_dtoa_r+0xac4>
 8006188:	f10a 0a01 	add.w	sl, sl, #1
 800618c:	2331      	movs	r3, #49	; 0x31
 800618e:	e779      	b.n	8006084 <_dtoa_r+0xa74>
 8006190:	4b13      	ldr	r3, [pc, #76]	; (80061e0 <_dtoa_r+0xbd0>)
 8006192:	f7ff baaf 	b.w	80056f4 <_dtoa_r+0xe4>
 8006196:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006198:	2b00      	cmp	r3, #0
 800619a:	f47f aa86 	bne.w	80056aa <_dtoa_r+0x9a>
 800619e:	4b11      	ldr	r3, [pc, #68]	; (80061e4 <_dtoa_r+0xbd4>)
 80061a0:	f7ff baa8 	b.w	80056f4 <_dtoa_r+0xe4>
 80061a4:	f1b9 0f00 	cmp.w	r9, #0
 80061a8:	dc03      	bgt.n	80061b2 <_dtoa_r+0xba2>
 80061aa:	9b05      	ldr	r3, [sp, #20]
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	f73f aec9 	bgt.w	8005f44 <_dtoa_r+0x934>
 80061b2:	9d00      	ldr	r5, [sp, #0]
 80061b4:	4631      	mov	r1, r6
 80061b6:	4658      	mov	r0, fp
 80061b8:	f7ff f99e 	bl	80054f8 <quorem>
 80061bc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80061c0:	f805 3b01 	strb.w	r3, [r5], #1
 80061c4:	9a00      	ldr	r2, [sp, #0]
 80061c6:	1aaa      	subs	r2, r5, r2
 80061c8:	4591      	cmp	r9, r2
 80061ca:	ddba      	ble.n	8006142 <_dtoa_r+0xb32>
 80061cc:	4659      	mov	r1, fp
 80061ce:	2300      	movs	r3, #0
 80061d0:	220a      	movs	r2, #10
 80061d2:	4620      	mov	r0, r4
 80061d4:	f000 f888 	bl	80062e8 <__multadd>
 80061d8:	4683      	mov	fp, r0
 80061da:	e7eb      	b.n	80061b4 <_dtoa_r+0xba4>
 80061dc:	08007533 	.word	0x08007533
 80061e0:	0800748c 	.word	0x0800748c
 80061e4:	080074b0 	.word	0x080074b0

080061e8 <_localeconv_r>:
 80061e8:	4800      	ldr	r0, [pc, #0]	; (80061ec <_localeconv_r+0x4>)
 80061ea:	4770      	bx	lr
 80061ec:	20000160 	.word	0x20000160

080061f0 <memcpy>:
 80061f0:	440a      	add	r2, r1
 80061f2:	4291      	cmp	r1, r2
 80061f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80061f8:	d100      	bne.n	80061fc <memcpy+0xc>
 80061fa:	4770      	bx	lr
 80061fc:	b510      	push	{r4, lr}
 80061fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006202:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006206:	4291      	cmp	r1, r2
 8006208:	d1f9      	bne.n	80061fe <memcpy+0xe>
 800620a:	bd10      	pop	{r4, pc}

0800620c <__malloc_lock>:
 800620c:	4801      	ldr	r0, [pc, #4]	; (8006214 <__malloc_lock+0x8>)
 800620e:	f7fb bbb6 	b.w	800197e <__retarget_lock_acquire_recursive>
 8006212:	bf00      	nop
 8006214:	20000204 	.word	0x20000204

08006218 <__malloc_unlock>:
 8006218:	4801      	ldr	r0, [pc, #4]	; (8006220 <__malloc_unlock+0x8>)
 800621a:	f7fb bbc4 	b.w	80019a6 <__retarget_lock_release_recursive>
 800621e:	bf00      	nop
 8006220:	20000204 	.word	0x20000204

08006224 <_Balloc>:
 8006224:	b570      	push	{r4, r5, r6, lr}
 8006226:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006228:	4604      	mov	r4, r0
 800622a:	460d      	mov	r5, r1
 800622c:	b976      	cbnz	r6, 800624c <_Balloc+0x28>
 800622e:	2010      	movs	r0, #16
 8006230:	f7fe fc2e 	bl	8004a90 <malloc>
 8006234:	4602      	mov	r2, r0
 8006236:	6260      	str	r0, [r4, #36]	; 0x24
 8006238:	b920      	cbnz	r0, 8006244 <_Balloc+0x20>
 800623a:	4b18      	ldr	r3, [pc, #96]	; (800629c <_Balloc+0x78>)
 800623c:	4818      	ldr	r0, [pc, #96]	; (80062a0 <_Balloc+0x7c>)
 800623e:	2166      	movs	r1, #102	; 0x66
 8006240:	f000 fb7e 	bl	8006940 <__assert_func>
 8006244:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006248:	6006      	str	r6, [r0, #0]
 800624a:	60c6      	str	r6, [r0, #12]
 800624c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800624e:	68f3      	ldr	r3, [r6, #12]
 8006250:	b183      	cbz	r3, 8006274 <_Balloc+0x50>
 8006252:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800625a:	b9b8      	cbnz	r0, 800628c <_Balloc+0x68>
 800625c:	2101      	movs	r1, #1
 800625e:	fa01 f605 	lsl.w	r6, r1, r5
 8006262:	1d72      	adds	r2, r6, #5
 8006264:	0092      	lsls	r2, r2, #2
 8006266:	4620      	mov	r0, r4
 8006268:	f000 fb5a 	bl	8006920 <_calloc_r>
 800626c:	b160      	cbz	r0, 8006288 <_Balloc+0x64>
 800626e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006272:	e00e      	b.n	8006292 <_Balloc+0x6e>
 8006274:	2221      	movs	r2, #33	; 0x21
 8006276:	2104      	movs	r1, #4
 8006278:	4620      	mov	r0, r4
 800627a:	f000 fb51 	bl	8006920 <_calloc_r>
 800627e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006280:	60f0      	str	r0, [r6, #12]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1e4      	bne.n	8006252 <_Balloc+0x2e>
 8006288:	2000      	movs	r0, #0
 800628a:	bd70      	pop	{r4, r5, r6, pc}
 800628c:	6802      	ldr	r2, [r0, #0]
 800628e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006292:	2300      	movs	r3, #0
 8006294:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006298:	e7f7      	b.n	800628a <_Balloc+0x66>
 800629a:	bf00      	nop
 800629c:	080074bd 	.word	0x080074bd
 80062a0:	08007544 	.word	0x08007544

080062a4 <_Bfree>:
 80062a4:	b570      	push	{r4, r5, r6, lr}
 80062a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80062a8:	4605      	mov	r5, r0
 80062aa:	460c      	mov	r4, r1
 80062ac:	b976      	cbnz	r6, 80062cc <_Bfree+0x28>
 80062ae:	2010      	movs	r0, #16
 80062b0:	f7fe fbee 	bl	8004a90 <malloc>
 80062b4:	4602      	mov	r2, r0
 80062b6:	6268      	str	r0, [r5, #36]	; 0x24
 80062b8:	b920      	cbnz	r0, 80062c4 <_Bfree+0x20>
 80062ba:	4b09      	ldr	r3, [pc, #36]	; (80062e0 <_Bfree+0x3c>)
 80062bc:	4809      	ldr	r0, [pc, #36]	; (80062e4 <_Bfree+0x40>)
 80062be:	218a      	movs	r1, #138	; 0x8a
 80062c0:	f000 fb3e 	bl	8006940 <__assert_func>
 80062c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80062c8:	6006      	str	r6, [r0, #0]
 80062ca:	60c6      	str	r6, [r0, #12]
 80062cc:	b13c      	cbz	r4, 80062de <_Bfree+0x3a>
 80062ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80062d0:	6862      	ldr	r2, [r4, #4]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80062d8:	6021      	str	r1, [r4, #0]
 80062da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80062de:	bd70      	pop	{r4, r5, r6, pc}
 80062e0:	080074bd 	.word	0x080074bd
 80062e4:	08007544 	.word	0x08007544

080062e8 <__multadd>:
 80062e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062ec:	690e      	ldr	r6, [r1, #16]
 80062ee:	4607      	mov	r7, r0
 80062f0:	4698      	mov	r8, r3
 80062f2:	460c      	mov	r4, r1
 80062f4:	f101 0014 	add.w	r0, r1, #20
 80062f8:	2300      	movs	r3, #0
 80062fa:	6805      	ldr	r5, [r0, #0]
 80062fc:	b2a9      	uxth	r1, r5
 80062fe:	fb02 8101 	mla	r1, r2, r1, r8
 8006302:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006306:	0c2d      	lsrs	r5, r5, #16
 8006308:	fb02 c505 	mla	r5, r2, r5, ip
 800630c:	b289      	uxth	r1, r1
 800630e:	3301      	adds	r3, #1
 8006310:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006314:	429e      	cmp	r6, r3
 8006316:	f840 1b04 	str.w	r1, [r0], #4
 800631a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800631e:	dcec      	bgt.n	80062fa <__multadd+0x12>
 8006320:	f1b8 0f00 	cmp.w	r8, #0
 8006324:	d022      	beq.n	800636c <__multadd+0x84>
 8006326:	68a3      	ldr	r3, [r4, #8]
 8006328:	42b3      	cmp	r3, r6
 800632a:	dc19      	bgt.n	8006360 <__multadd+0x78>
 800632c:	6861      	ldr	r1, [r4, #4]
 800632e:	4638      	mov	r0, r7
 8006330:	3101      	adds	r1, #1
 8006332:	f7ff ff77 	bl	8006224 <_Balloc>
 8006336:	4605      	mov	r5, r0
 8006338:	b928      	cbnz	r0, 8006346 <__multadd+0x5e>
 800633a:	4602      	mov	r2, r0
 800633c:	4b0d      	ldr	r3, [pc, #52]	; (8006374 <__multadd+0x8c>)
 800633e:	480e      	ldr	r0, [pc, #56]	; (8006378 <__multadd+0x90>)
 8006340:	21b5      	movs	r1, #181	; 0xb5
 8006342:	f000 fafd 	bl	8006940 <__assert_func>
 8006346:	6922      	ldr	r2, [r4, #16]
 8006348:	3202      	adds	r2, #2
 800634a:	f104 010c 	add.w	r1, r4, #12
 800634e:	0092      	lsls	r2, r2, #2
 8006350:	300c      	adds	r0, #12
 8006352:	f7ff ff4d 	bl	80061f0 <memcpy>
 8006356:	4621      	mov	r1, r4
 8006358:	4638      	mov	r0, r7
 800635a:	f7ff ffa3 	bl	80062a4 <_Bfree>
 800635e:	462c      	mov	r4, r5
 8006360:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006364:	3601      	adds	r6, #1
 8006366:	f8c3 8014 	str.w	r8, [r3, #20]
 800636a:	6126      	str	r6, [r4, #16]
 800636c:	4620      	mov	r0, r4
 800636e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006372:	bf00      	nop
 8006374:	08007533 	.word	0x08007533
 8006378:	08007544 	.word	0x08007544

0800637c <__hi0bits>:
 800637c:	0c03      	lsrs	r3, r0, #16
 800637e:	041b      	lsls	r3, r3, #16
 8006380:	b9d3      	cbnz	r3, 80063b8 <__hi0bits+0x3c>
 8006382:	0400      	lsls	r0, r0, #16
 8006384:	2310      	movs	r3, #16
 8006386:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800638a:	bf04      	itt	eq
 800638c:	0200      	lsleq	r0, r0, #8
 800638e:	3308      	addeq	r3, #8
 8006390:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006394:	bf04      	itt	eq
 8006396:	0100      	lsleq	r0, r0, #4
 8006398:	3304      	addeq	r3, #4
 800639a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800639e:	bf04      	itt	eq
 80063a0:	0080      	lsleq	r0, r0, #2
 80063a2:	3302      	addeq	r3, #2
 80063a4:	2800      	cmp	r0, #0
 80063a6:	db05      	blt.n	80063b4 <__hi0bits+0x38>
 80063a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80063ac:	f103 0301 	add.w	r3, r3, #1
 80063b0:	bf08      	it	eq
 80063b2:	2320      	moveq	r3, #32
 80063b4:	4618      	mov	r0, r3
 80063b6:	4770      	bx	lr
 80063b8:	2300      	movs	r3, #0
 80063ba:	e7e4      	b.n	8006386 <__hi0bits+0xa>

080063bc <__lo0bits>:
 80063bc:	6803      	ldr	r3, [r0, #0]
 80063be:	f013 0207 	ands.w	r2, r3, #7
 80063c2:	4601      	mov	r1, r0
 80063c4:	d00b      	beq.n	80063de <__lo0bits+0x22>
 80063c6:	07da      	lsls	r2, r3, #31
 80063c8:	d424      	bmi.n	8006414 <__lo0bits+0x58>
 80063ca:	0798      	lsls	r0, r3, #30
 80063cc:	bf49      	itett	mi
 80063ce:	085b      	lsrmi	r3, r3, #1
 80063d0:	089b      	lsrpl	r3, r3, #2
 80063d2:	2001      	movmi	r0, #1
 80063d4:	600b      	strmi	r3, [r1, #0]
 80063d6:	bf5c      	itt	pl
 80063d8:	600b      	strpl	r3, [r1, #0]
 80063da:	2002      	movpl	r0, #2
 80063dc:	4770      	bx	lr
 80063de:	b298      	uxth	r0, r3
 80063e0:	b9b0      	cbnz	r0, 8006410 <__lo0bits+0x54>
 80063e2:	0c1b      	lsrs	r3, r3, #16
 80063e4:	2010      	movs	r0, #16
 80063e6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80063ea:	bf04      	itt	eq
 80063ec:	0a1b      	lsreq	r3, r3, #8
 80063ee:	3008      	addeq	r0, #8
 80063f0:	071a      	lsls	r2, r3, #28
 80063f2:	bf04      	itt	eq
 80063f4:	091b      	lsreq	r3, r3, #4
 80063f6:	3004      	addeq	r0, #4
 80063f8:	079a      	lsls	r2, r3, #30
 80063fa:	bf04      	itt	eq
 80063fc:	089b      	lsreq	r3, r3, #2
 80063fe:	3002      	addeq	r0, #2
 8006400:	07da      	lsls	r2, r3, #31
 8006402:	d403      	bmi.n	800640c <__lo0bits+0x50>
 8006404:	085b      	lsrs	r3, r3, #1
 8006406:	f100 0001 	add.w	r0, r0, #1
 800640a:	d005      	beq.n	8006418 <__lo0bits+0x5c>
 800640c:	600b      	str	r3, [r1, #0]
 800640e:	4770      	bx	lr
 8006410:	4610      	mov	r0, r2
 8006412:	e7e8      	b.n	80063e6 <__lo0bits+0x2a>
 8006414:	2000      	movs	r0, #0
 8006416:	4770      	bx	lr
 8006418:	2020      	movs	r0, #32
 800641a:	4770      	bx	lr

0800641c <__i2b>:
 800641c:	b510      	push	{r4, lr}
 800641e:	460c      	mov	r4, r1
 8006420:	2101      	movs	r1, #1
 8006422:	f7ff feff 	bl	8006224 <_Balloc>
 8006426:	4602      	mov	r2, r0
 8006428:	b928      	cbnz	r0, 8006436 <__i2b+0x1a>
 800642a:	4b05      	ldr	r3, [pc, #20]	; (8006440 <__i2b+0x24>)
 800642c:	4805      	ldr	r0, [pc, #20]	; (8006444 <__i2b+0x28>)
 800642e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006432:	f000 fa85 	bl	8006940 <__assert_func>
 8006436:	2301      	movs	r3, #1
 8006438:	6144      	str	r4, [r0, #20]
 800643a:	6103      	str	r3, [r0, #16]
 800643c:	bd10      	pop	{r4, pc}
 800643e:	bf00      	nop
 8006440:	08007533 	.word	0x08007533
 8006444:	08007544 	.word	0x08007544

08006448 <__multiply>:
 8006448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800644c:	4614      	mov	r4, r2
 800644e:	690a      	ldr	r2, [r1, #16]
 8006450:	6923      	ldr	r3, [r4, #16]
 8006452:	429a      	cmp	r2, r3
 8006454:	bfb8      	it	lt
 8006456:	460b      	movlt	r3, r1
 8006458:	460d      	mov	r5, r1
 800645a:	bfbc      	itt	lt
 800645c:	4625      	movlt	r5, r4
 800645e:	461c      	movlt	r4, r3
 8006460:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006464:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006468:	68ab      	ldr	r3, [r5, #8]
 800646a:	6869      	ldr	r1, [r5, #4]
 800646c:	eb0a 0709 	add.w	r7, sl, r9
 8006470:	42bb      	cmp	r3, r7
 8006472:	b085      	sub	sp, #20
 8006474:	bfb8      	it	lt
 8006476:	3101      	addlt	r1, #1
 8006478:	f7ff fed4 	bl	8006224 <_Balloc>
 800647c:	b930      	cbnz	r0, 800648c <__multiply+0x44>
 800647e:	4602      	mov	r2, r0
 8006480:	4b42      	ldr	r3, [pc, #264]	; (800658c <__multiply+0x144>)
 8006482:	4843      	ldr	r0, [pc, #268]	; (8006590 <__multiply+0x148>)
 8006484:	f240 115d 	movw	r1, #349	; 0x15d
 8006488:	f000 fa5a 	bl	8006940 <__assert_func>
 800648c:	f100 0614 	add.w	r6, r0, #20
 8006490:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006494:	4633      	mov	r3, r6
 8006496:	2200      	movs	r2, #0
 8006498:	4543      	cmp	r3, r8
 800649a:	d31e      	bcc.n	80064da <__multiply+0x92>
 800649c:	f105 0c14 	add.w	ip, r5, #20
 80064a0:	f104 0314 	add.w	r3, r4, #20
 80064a4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80064a8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80064ac:	9202      	str	r2, [sp, #8]
 80064ae:	ebac 0205 	sub.w	r2, ip, r5
 80064b2:	3a15      	subs	r2, #21
 80064b4:	f022 0203 	bic.w	r2, r2, #3
 80064b8:	3204      	adds	r2, #4
 80064ba:	f105 0115 	add.w	r1, r5, #21
 80064be:	458c      	cmp	ip, r1
 80064c0:	bf38      	it	cc
 80064c2:	2204      	movcc	r2, #4
 80064c4:	9201      	str	r2, [sp, #4]
 80064c6:	9a02      	ldr	r2, [sp, #8]
 80064c8:	9303      	str	r3, [sp, #12]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d808      	bhi.n	80064e0 <__multiply+0x98>
 80064ce:	2f00      	cmp	r7, #0
 80064d0:	dc55      	bgt.n	800657e <__multiply+0x136>
 80064d2:	6107      	str	r7, [r0, #16]
 80064d4:	b005      	add	sp, #20
 80064d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064da:	f843 2b04 	str.w	r2, [r3], #4
 80064de:	e7db      	b.n	8006498 <__multiply+0x50>
 80064e0:	f8b3 a000 	ldrh.w	sl, [r3]
 80064e4:	f1ba 0f00 	cmp.w	sl, #0
 80064e8:	d020      	beq.n	800652c <__multiply+0xe4>
 80064ea:	f105 0e14 	add.w	lr, r5, #20
 80064ee:	46b1      	mov	r9, r6
 80064f0:	2200      	movs	r2, #0
 80064f2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80064f6:	f8d9 b000 	ldr.w	fp, [r9]
 80064fa:	b2a1      	uxth	r1, r4
 80064fc:	fa1f fb8b 	uxth.w	fp, fp
 8006500:	fb0a b101 	mla	r1, sl, r1, fp
 8006504:	4411      	add	r1, r2
 8006506:	f8d9 2000 	ldr.w	r2, [r9]
 800650a:	0c24      	lsrs	r4, r4, #16
 800650c:	0c12      	lsrs	r2, r2, #16
 800650e:	fb0a 2404 	mla	r4, sl, r4, r2
 8006512:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006516:	b289      	uxth	r1, r1
 8006518:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800651c:	45f4      	cmp	ip, lr
 800651e:	f849 1b04 	str.w	r1, [r9], #4
 8006522:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006526:	d8e4      	bhi.n	80064f2 <__multiply+0xaa>
 8006528:	9901      	ldr	r1, [sp, #4]
 800652a:	5072      	str	r2, [r6, r1]
 800652c:	9a03      	ldr	r2, [sp, #12]
 800652e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006532:	3304      	adds	r3, #4
 8006534:	f1b9 0f00 	cmp.w	r9, #0
 8006538:	d01f      	beq.n	800657a <__multiply+0x132>
 800653a:	6834      	ldr	r4, [r6, #0]
 800653c:	f105 0114 	add.w	r1, r5, #20
 8006540:	46b6      	mov	lr, r6
 8006542:	f04f 0a00 	mov.w	sl, #0
 8006546:	880a      	ldrh	r2, [r1, #0]
 8006548:	f8be b002 	ldrh.w	fp, [lr, #2]
 800654c:	fb09 b202 	mla	r2, r9, r2, fp
 8006550:	4492      	add	sl, r2
 8006552:	b2a4      	uxth	r4, r4
 8006554:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006558:	f84e 4b04 	str.w	r4, [lr], #4
 800655c:	f851 4b04 	ldr.w	r4, [r1], #4
 8006560:	f8be 2000 	ldrh.w	r2, [lr]
 8006564:	0c24      	lsrs	r4, r4, #16
 8006566:	fb09 2404 	mla	r4, r9, r4, r2
 800656a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800656e:	458c      	cmp	ip, r1
 8006570:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006574:	d8e7      	bhi.n	8006546 <__multiply+0xfe>
 8006576:	9a01      	ldr	r2, [sp, #4]
 8006578:	50b4      	str	r4, [r6, r2]
 800657a:	3604      	adds	r6, #4
 800657c:	e7a3      	b.n	80064c6 <__multiply+0x7e>
 800657e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1a5      	bne.n	80064d2 <__multiply+0x8a>
 8006586:	3f01      	subs	r7, #1
 8006588:	e7a1      	b.n	80064ce <__multiply+0x86>
 800658a:	bf00      	nop
 800658c:	08007533 	.word	0x08007533
 8006590:	08007544 	.word	0x08007544

08006594 <__pow5mult>:
 8006594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006598:	4615      	mov	r5, r2
 800659a:	f012 0203 	ands.w	r2, r2, #3
 800659e:	4606      	mov	r6, r0
 80065a0:	460f      	mov	r7, r1
 80065a2:	d007      	beq.n	80065b4 <__pow5mult+0x20>
 80065a4:	4c25      	ldr	r4, [pc, #148]	; (800663c <__pow5mult+0xa8>)
 80065a6:	3a01      	subs	r2, #1
 80065a8:	2300      	movs	r3, #0
 80065aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80065ae:	f7ff fe9b 	bl	80062e8 <__multadd>
 80065b2:	4607      	mov	r7, r0
 80065b4:	10ad      	asrs	r5, r5, #2
 80065b6:	d03d      	beq.n	8006634 <__pow5mult+0xa0>
 80065b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80065ba:	b97c      	cbnz	r4, 80065dc <__pow5mult+0x48>
 80065bc:	2010      	movs	r0, #16
 80065be:	f7fe fa67 	bl	8004a90 <malloc>
 80065c2:	4602      	mov	r2, r0
 80065c4:	6270      	str	r0, [r6, #36]	; 0x24
 80065c6:	b928      	cbnz	r0, 80065d4 <__pow5mult+0x40>
 80065c8:	4b1d      	ldr	r3, [pc, #116]	; (8006640 <__pow5mult+0xac>)
 80065ca:	481e      	ldr	r0, [pc, #120]	; (8006644 <__pow5mult+0xb0>)
 80065cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80065d0:	f000 f9b6 	bl	8006940 <__assert_func>
 80065d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80065d8:	6004      	str	r4, [r0, #0]
 80065da:	60c4      	str	r4, [r0, #12]
 80065dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80065e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80065e4:	b94c      	cbnz	r4, 80065fa <__pow5mult+0x66>
 80065e6:	f240 2171 	movw	r1, #625	; 0x271
 80065ea:	4630      	mov	r0, r6
 80065ec:	f7ff ff16 	bl	800641c <__i2b>
 80065f0:	2300      	movs	r3, #0
 80065f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80065f6:	4604      	mov	r4, r0
 80065f8:	6003      	str	r3, [r0, #0]
 80065fa:	f04f 0900 	mov.w	r9, #0
 80065fe:	07eb      	lsls	r3, r5, #31
 8006600:	d50a      	bpl.n	8006618 <__pow5mult+0x84>
 8006602:	4639      	mov	r1, r7
 8006604:	4622      	mov	r2, r4
 8006606:	4630      	mov	r0, r6
 8006608:	f7ff ff1e 	bl	8006448 <__multiply>
 800660c:	4639      	mov	r1, r7
 800660e:	4680      	mov	r8, r0
 8006610:	4630      	mov	r0, r6
 8006612:	f7ff fe47 	bl	80062a4 <_Bfree>
 8006616:	4647      	mov	r7, r8
 8006618:	106d      	asrs	r5, r5, #1
 800661a:	d00b      	beq.n	8006634 <__pow5mult+0xa0>
 800661c:	6820      	ldr	r0, [r4, #0]
 800661e:	b938      	cbnz	r0, 8006630 <__pow5mult+0x9c>
 8006620:	4622      	mov	r2, r4
 8006622:	4621      	mov	r1, r4
 8006624:	4630      	mov	r0, r6
 8006626:	f7ff ff0f 	bl	8006448 <__multiply>
 800662a:	6020      	str	r0, [r4, #0]
 800662c:	f8c0 9000 	str.w	r9, [r0]
 8006630:	4604      	mov	r4, r0
 8006632:	e7e4      	b.n	80065fe <__pow5mult+0x6a>
 8006634:	4638      	mov	r0, r7
 8006636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800663a:	bf00      	nop
 800663c:	08007698 	.word	0x08007698
 8006640:	080074bd 	.word	0x080074bd
 8006644:	08007544 	.word	0x08007544

08006648 <__lshift>:
 8006648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800664c:	460c      	mov	r4, r1
 800664e:	6849      	ldr	r1, [r1, #4]
 8006650:	6923      	ldr	r3, [r4, #16]
 8006652:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006656:	68a3      	ldr	r3, [r4, #8]
 8006658:	4607      	mov	r7, r0
 800665a:	4691      	mov	r9, r2
 800665c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006660:	f108 0601 	add.w	r6, r8, #1
 8006664:	42b3      	cmp	r3, r6
 8006666:	db0b      	blt.n	8006680 <__lshift+0x38>
 8006668:	4638      	mov	r0, r7
 800666a:	f7ff fddb 	bl	8006224 <_Balloc>
 800666e:	4605      	mov	r5, r0
 8006670:	b948      	cbnz	r0, 8006686 <__lshift+0x3e>
 8006672:	4602      	mov	r2, r0
 8006674:	4b28      	ldr	r3, [pc, #160]	; (8006718 <__lshift+0xd0>)
 8006676:	4829      	ldr	r0, [pc, #164]	; (800671c <__lshift+0xd4>)
 8006678:	f240 11d9 	movw	r1, #473	; 0x1d9
 800667c:	f000 f960 	bl	8006940 <__assert_func>
 8006680:	3101      	adds	r1, #1
 8006682:	005b      	lsls	r3, r3, #1
 8006684:	e7ee      	b.n	8006664 <__lshift+0x1c>
 8006686:	2300      	movs	r3, #0
 8006688:	f100 0114 	add.w	r1, r0, #20
 800668c:	f100 0210 	add.w	r2, r0, #16
 8006690:	4618      	mov	r0, r3
 8006692:	4553      	cmp	r3, sl
 8006694:	db33      	blt.n	80066fe <__lshift+0xb6>
 8006696:	6920      	ldr	r0, [r4, #16]
 8006698:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800669c:	f104 0314 	add.w	r3, r4, #20
 80066a0:	f019 091f 	ands.w	r9, r9, #31
 80066a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80066a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80066ac:	d02b      	beq.n	8006706 <__lshift+0xbe>
 80066ae:	f1c9 0e20 	rsb	lr, r9, #32
 80066b2:	468a      	mov	sl, r1
 80066b4:	2200      	movs	r2, #0
 80066b6:	6818      	ldr	r0, [r3, #0]
 80066b8:	fa00 f009 	lsl.w	r0, r0, r9
 80066bc:	4302      	orrs	r2, r0
 80066be:	f84a 2b04 	str.w	r2, [sl], #4
 80066c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80066c6:	459c      	cmp	ip, r3
 80066c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80066cc:	d8f3      	bhi.n	80066b6 <__lshift+0x6e>
 80066ce:	ebac 0304 	sub.w	r3, ip, r4
 80066d2:	3b15      	subs	r3, #21
 80066d4:	f023 0303 	bic.w	r3, r3, #3
 80066d8:	3304      	adds	r3, #4
 80066da:	f104 0015 	add.w	r0, r4, #21
 80066de:	4584      	cmp	ip, r0
 80066e0:	bf38      	it	cc
 80066e2:	2304      	movcc	r3, #4
 80066e4:	50ca      	str	r2, [r1, r3]
 80066e6:	b10a      	cbz	r2, 80066ec <__lshift+0xa4>
 80066e8:	f108 0602 	add.w	r6, r8, #2
 80066ec:	3e01      	subs	r6, #1
 80066ee:	4638      	mov	r0, r7
 80066f0:	612e      	str	r6, [r5, #16]
 80066f2:	4621      	mov	r1, r4
 80066f4:	f7ff fdd6 	bl	80062a4 <_Bfree>
 80066f8:	4628      	mov	r0, r5
 80066fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8006702:	3301      	adds	r3, #1
 8006704:	e7c5      	b.n	8006692 <__lshift+0x4a>
 8006706:	3904      	subs	r1, #4
 8006708:	f853 2b04 	ldr.w	r2, [r3], #4
 800670c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006710:	459c      	cmp	ip, r3
 8006712:	d8f9      	bhi.n	8006708 <__lshift+0xc0>
 8006714:	e7ea      	b.n	80066ec <__lshift+0xa4>
 8006716:	bf00      	nop
 8006718:	08007533 	.word	0x08007533
 800671c:	08007544 	.word	0x08007544

08006720 <__mcmp>:
 8006720:	b530      	push	{r4, r5, lr}
 8006722:	6902      	ldr	r2, [r0, #16]
 8006724:	690c      	ldr	r4, [r1, #16]
 8006726:	1b12      	subs	r2, r2, r4
 8006728:	d10e      	bne.n	8006748 <__mcmp+0x28>
 800672a:	f100 0314 	add.w	r3, r0, #20
 800672e:	3114      	adds	r1, #20
 8006730:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006734:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006738:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800673c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006740:	42a5      	cmp	r5, r4
 8006742:	d003      	beq.n	800674c <__mcmp+0x2c>
 8006744:	d305      	bcc.n	8006752 <__mcmp+0x32>
 8006746:	2201      	movs	r2, #1
 8006748:	4610      	mov	r0, r2
 800674a:	bd30      	pop	{r4, r5, pc}
 800674c:	4283      	cmp	r3, r0
 800674e:	d3f3      	bcc.n	8006738 <__mcmp+0x18>
 8006750:	e7fa      	b.n	8006748 <__mcmp+0x28>
 8006752:	f04f 32ff 	mov.w	r2, #4294967295
 8006756:	e7f7      	b.n	8006748 <__mcmp+0x28>

08006758 <__mdiff>:
 8006758:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800675c:	460c      	mov	r4, r1
 800675e:	4606      	mov	r6, r0
 8006760:	4611      	mov	r1, r2
 8006762:	4620      	mov	r0, r4
 8006764:	4617      	mov	r7, r2
 8006766:	f7ff ffdb 	bl	8006720 <__mcmp>
 800676a:	1e05      	subs	r5, r0, #0
 800676c:	d110      	bne.n	8006790 <__mdiff+0x38>
 800676e:	4629      	mov	r1, r5
 8006770:	4630      	mov	r0, r6
 8006772:	f7ff fd57 	bl	8006224 <_Balloc>
 8006776:	b930      	cbnz	r0, 8006786 <__mdiff+0x2e>
 8006778:	4b39      	ldr	r3, [pc, #228]	; (8006860 <__mdiff+0x108>)
 800677a:	4602      	mov	r2, r0
 800677c:	f240 2132 	movw	r1, #562	; 0x232
 8006780:	4838      	ldr	r0, [pc, #224]	; (8006864 <__mdiff+0x10c>)
 8006782:	f000 f8dd 	bl	8006940 <__assert_func>
 8006786:	2301      	movs	r3, #1
 8006788:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800678c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006790:	bfa4      	itt	ge
 8006792:	463b      	movge	r3, r7
 8006794:	4627      	movge	r7, r4
 8006796:	4630      	mov	r0, r6
 8006798:	6879      	ldr	r1, [r7, #4]
 800679a:	bfa6      	itte	ge
 800679c:	461c      	movge	r4, r3
 800679e:	2500      	movge	r5, #0
 80067a0:	2501      	movlt	r5, #1
 80067a2:	f7ff fd3f 	bl	8006224 <_Balloc>
 80067a6:	b920      	cbnz	r0, 80067b2 <__mdiff+0x5a>
 80067a8:	4b2d      	ldr	r3, [pc, #180]	; (8006860 <__mdiff+0x108>)
 80067aa:	4602      	mov	r2, r0
 80067ac:	f44f 7110 	mov.w	r1, #576	; 0x240
 80067b0:	e7e6      	b.n	8006780 <__mdiff+0x28>
 80067b2:	693e      	ldr	r6, [r7, #16]
 80067b4:	60c5      	str	r5, [r0, #12]
 80067b6:	6925      	ldr	r5, [r4, #16]
 80067b8:	f107 0114 	add.w	r1, r7, #20
 80067bc:	f104 0914 	add.w	r9, r4, #20
 80067c0:	f100 0e14 	add.w	lr, r0, #20
 80067c4:	f107 0210 	add.w	r2, r7, #16
 80067c8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80067cc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80067d0:	46f2      	mov	sl, lr
 80067d2:	2700      	movs	r7, #0
 80067d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80067d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80067dc:	fa1f f883 	uxth.w	r8, r3
 80067e0:	fa17 f78b 	uxtah	r7, r7, fp
 80067e4:	0c1b      	lsrs	r3, r3, #16
 80067e6:	eba7 0808 	sub.w	r8, r7, r8
 80067ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80067ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80067f2:	fa1f f888 	uxth.w	r8, r8
 80067f6:	141f      	asrs	r7, r3, #16
 80067f8:	454d      	cmp	r5, r9
 80067fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80067fe:	f84a 3b04 	str.w	r3, [sl], #4
 8006802:	d8e7      	bhi.n	80067d4 <__mdiff+0x7c>
 8006804:	1b2b      	subs	r3, r5, r4
 8006806:	3b15      	subs	r3, #21
 8006808:	f023 0303 	bic.w	r3, r3, #3
 800680c:	3304      	adds	r3, #4
 800680e:	3415      	adds	r4, #21
 8006810:	42a5      	cmp	r5, r4
 8006812:	bf38      	it	cc
 8006814:	2304      	movcc	r3, #4
 8006816:	4419      	add	r1, r3
 8006818:	4473      	add	r3, lr
 800681a:	469e      	mov	lr, r3
 800681c:	460d      	mov	r5, r1
 800681e:	4565      	cmp	r5, ip
 8006820:	d30e      	bcc.n	8006840 <__mdiff+0xe8>
 8006822:	f10c 0203 	add.w	r2, ip, #3
 8006826:	1a52      	subs	r2, r2, r1
 8006828:	f022 0203 	bic.w	r2, r2, #3
 800682c:	3903      	subs	r1, #3
 800682e:	458c      	cmp	ip, r1
 8006830:	bf38      	it	cc
 8006832:	2200      	movcc	r2, #0
 8006834:	441a      	add	r2, r3
 8006836:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800683a:	b17b      	cbz	r3, 800685c <__mdiff+0x104>
 800683c:	6106      	str	r6, [r0, #16]
 800683e:	e7a5      	b.n	800678c <__mdiff+0x34>
 8006840:	f855 8b04 	ldr.w	r8, [r5], #4
 8006844:	fa17 f488 	uxtah	r4, r7, r8
 8006848:	1422      	asrs	r2, r4, #16
 800684a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800684e:	b2a4      	uxth	r4, r4
 8006850:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006854:	f84e 4b04 	str.w	r4, [lr], #4
 8006858:	1417      	asrs	r7, r2, #16
 800685a:	e7e0      	b.n	800681e <__mdiff+0xc6>
 800685c:	3e01      	subs	r6, #1
 800685e:	e7ea      	b.n	8006836 <__mdiff+0xde>
 8006860:	08007533 	.word	0x08007533
 8006864:	08007544 	.word	0x08007544

08006868 <__d2b>:
 8006868:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800686c:	4689      	mov	r9, r1
 800686e:	2101      	movs	r1, #1
 8006870:	ec57 6b10 	vmov	r6, r7, d0
 8006874:	4690      	mov	r8, r2
 8006876:	f7ff fcd5 	bl	8006224 <_Balloc>
 800687a:	4604      	mov	r4, r0
 800687c:	b930      	cbnz	r0, 800688c <__d2b+0x24>
 800687e:	4602      	mov	r2, r0
 8006880:	4b25      	ldr	r3, [pc, #148]	; (8006918 <__d2b+0xb0>)
 8006882:	4826      	ldr	r0, [pc, #152]	; (800691c <__d2b+0xb4>)
 8006884:	f240 310a 	movw	r1, #778	; 0x30a
 8006888:	f000 f85a 	bl	8006940 <__assert_func>
 800688c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006890:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006894:	bb35      	cbnz	r5, 80068e4 <__d2b+0x7c>
 8006896:	2e00      	cmp	r6, #0
 8006898:	9301      	str	r3, [sp, #4]
 800689a:	d028      	beq.n	80068ee <__d2b+0x86>
 800689c:	4668      	mov	r0, sp
 800689e:	9600      	str	r6, [sp, #0]
 80068a0:	f7ff fd8c 	bl	80063bc <__lo0bits>
 80068a4:	9900      	ldr	r1, [sp, #0]
 80068a6:	b300      	cbz	r0, 80068ea <__d2b+0x82>
 80068a8:	9a01      	ldr	r2, [sp, #4]
 80068aa:	f1c0 0320 	rsb	r3, r0, #32
 80068ae:	fa02 f303 	lsl.w	r3, r2, r3
 80068b2:	430b      	orrs	r3, r1
 80068b4:	40c2      	lsrs	r2, r0
 80068b6:	6163      	str	r3, [r4, #20]
 80068b8:	9201      	str	r2, [sp, #4]
 80068ba:	9b01      	ldr	r3, [sp, #4]
 80068bc:	61a3      	str	r3, [r4, #24]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	bf14      	ite	ne
 80068c2:	2202      	movne	r2, #2
 80068c4:	2201      	moveq	r2, #1
 80068c6:	6122      	str	r2, [r4, #16]
 80068c8:	b1d5      	cbz	r5, 8006900 <__d2b+0x98>
 80068ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80068ce:	4405      	add	r5, r0
 80068d0:	f8c9 5000 	str.w	r5, [r9]
 80068d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80068d8:	f8c8 0000 	str.w	r0, [r8]
 80068dc:	4620      	mov	r0, r4
 80068de:	b003      	add	sp, #12
 80068e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068e8:	e7d5      	b.n	8006896 <__d2b+0x2e>
 80068ea:	6161      	str	r1, [r4, #20]
 80068ec:	e7e5      	b.n	80068ba <__d2b+0x52>
 80068ee:	a801      	add	r0, sp, #4
 80068f0:	f7ff fd64 	bl	80063bc <__lo0bits>
 80068f4:	9b01      	ldr	r3, [sp, #4]
 80068f6:	6163      	str	r3, [r4, #20]
 80068f8:	2201      	movs	r2, #1
 80068fa:	6122      	str	r2, [r4, #16]
 80068fc:	3020      	adds	r0, #32
 80068fe:	e7e3      	b.n	80068c8 <__d2b+0x60>
 8006900:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006904:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006908:	f8c9 0000 	str.w	r0, [r9]
 800690c:	6918      	ldr	r0, [r3, #16]
 800690e:	f7ff fd35 	bl	800637c <__hi0bits>
 8006912:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006916:	e7df      	b.n	80068d8 <__d2b+0x70>
 8006918:	08007533 	.word	0x08007533
 800691c:	08007544 	.word	0x08007544

08006920 <_calloc_r>:
 8006920:	b513      	push	{r0, r1, r4, lr}
 8006922:	434a      	muls	r2, r1
 8006924:	4611      	mov	r1, r2
 8006926:	9201      	str	r2, [sp, #4]
 8006928:	f7fe f912 	bl	8004b50 <_malloc_r>
 800692c:	4604      	mov	r4, r0
 800692e:	b118      	cbz	r0, 8006938 <_calloc_r+0x18>
 8006930:	9a01      	ldr	r2, [sp, #4]
 8006932:	2100      	movs	r1, #0
 8006934:	f7fe f8b4 	bl	8004aa0 <memset>
 8006938:	4620      	mov	r0, r4
 800693a:	b002      	add	sp, #8
 800693c:	bd10      	pop	{r4, pc}
	...

08006940 <__assert_func>:
 8006940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006942:	4614      	mov	r4, r2
 8006944:	461a      	mov	r2, r3
 8006946:	4b09      	ldr	r3, [pc, #36]	; (800696c <__assert_func+0x2c>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4605      	mov	r5, r0
 800694c:	68d8      	ldr	r0, [r3, #12]
 800694e:	b14c      	cbz	r4, 8006964 <__assert_func+0x24>
 8006950:	4b07      	ldr	r3, [pc, #28]	; (8006970 <__assert_func+0x30>)
 8006952:	9100      	str	r1, [sp, #0]
 8006954:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006958:	4906      	ldr	r1, [pc, #24]	; (8006974 <__assert_func+0x34>)
 800695a:	462b      	mov	r3, r5
 800695c:	f000 f80e 	bl	800697c <fiprintf>
 8006960:	f000 fa58 	bl	8006e14 <abort>
 8006964:	4b04      	ldr	r3, [pc, #16]	; (8006978 <__assert_func+0x38>)
 8006966:	461c      	mov	r4, r3
 8006968:	e7f3      	b.n	8006952 <__assert_func+0x12>
 800696a:	bf00      	nop
 800696c:	2000000c 	.word	0x2000000c
 8006970:	080076a4 	.word	0x080076a4
 8006974:	080076b1 	.word	0x080076b1
 8006978:	080076df 	.word	0x080076df

0800697c <fiprintf>:
 800697c:	b40e      	push	{r1, r2, r3}
 800697e:	b503      	push	{r0, r1, lr}
 8006980:	4601      	mov	r1, r0
 8006982:	ab03      	add	r3, sp, #12
 8006984:	4805      	ldr	r0, [pc, #20]	; (800699c <fiprintf+0x20>)
 8006986:	f853 2b04 	ldr.w	r2, [r3], #4
 800698a:	6800      	ldr	r0, [r0, #0]
 800698c:	9301      	str	r3, [sp, #4]
 800698e:	f000 f843 	bl	8006a18 <_vfiprintf_r>
 8006992:	b002      	add	sp, #8
 8006994:	f85d eb04 	ldr.w	lr, [sp], #4
 8006998:	b003      	add	sp, #12
 800699a:	4770      	bx	lr
 800699c:	2000000c 	.word	0x2000000c

080069a0 <__ascii_mbtowc>:
 80069a0:	b082      	sub	sp, #8
 80069a2:	b901      	cbnz	r1, 80069a6 <__ascii_mbtowc+0x6>
 80069a4:	a901      	add	r1, sp, #4
 80069a6:	b142      	cbz	r2, 80069ba <__ascii_mbtowc+0x1a>
 80069a8:	b14b      	cbz	r3, 80069be <__ascii_mbtowc+0x1e>
 80069aa:	7813      	ldrb	r3, [r2, #0]
 80069ac:	600b      	str	r3, [r1, #0]
 80069ae:	7812      	ldrb	r2, [r2, #0]
 80069b0:	1e10      	subs	r0, r2, #0
 80069b2:	bf18      	it	ne
 80069b4:	2001      	movne	r0, #1
 80069b6:	b002      	add	sp, #8
 80069b8:	4770      	bx	lr
 80069ba:	4610      	mov	r0, r2
 80069bc:	e7fb      	b.n	80069b6 <__ascii_mbtowc+0x16>
 80069be:	f06f 0001 	mvn.w	r0, #1
 80069c2:	e7f8      	b.n	80069b6 <__ascii_mbtowc+0x16>

080069c4 <__sfputc_r>:
 80069c4:	6893      	ldr	r3, [r2, #8]
 80069c6:	3b01      	subs	r3, #1
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	b410      	push	{r4}
 80069cc:	6093      	str	r3, [r2, #8]
 80069ce:	da08      	bge.n	80069e2 <__sfputc_r+0x1e>
 80069d0:	6994      	ldr	r4, [r2, #24]
 80069d2:	42a3      	cmp	r3, r4
 80069d4:	db01      	blt.n	80069da <__sfputc_r+0x16>
 80069d6:	290a      	cmp	r1, #10
 80069d8:	d103      	bne.n	80069e2 <__sfputc_r+0x1e>
 80069da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069de:	f000 b94b 	b.w	8006c78 <__swbuf_r>
 80069e2:	6813      	ldr	r3, [r2, #0]
 80069e4:	1c58      	adds	r0, r3, #1
 80069e6:	6010      	str	r0, [r2, #0]
 80069e8:	7019      	strb	r1, [r3, #0]
 80069ea:	4608      	mov	r0, r1
 80069ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <__sfputs_r>:
 80069f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069f4:	4606      	mov	r6, r0
 80069f6:	460f      	mov	r7, r1
 80069f8:	4614      	mov	r4, r2
 80069fa:	18d5      	adds	r5, r2, r3
 80069fc:	42ac      	cmp	r4, r5
 80069fe:	d101      	bne.n	8006a04 <__sfputs_r+0x12>
 8006a00:	2000      	movs	r0, #0
 8006a02:	e007      	b.n	8006a14 <__sfputs_r+0x22>
 8006a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a08:	463a      	mov	r2, r7
 8006a0a:	4630      	mov	r0, r6
 8006a0c:	f7ff ffda 	bl	80069c4 <__sfputc_r>
 8006a10:	1c43      	adds	r3, r0, #1
 8006a12:	d1f3      	bne.n	80069fc <__sfputs_r+0xa>
 8006a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a18 <_vfiprintf_r>:
 8006a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a1c:	460d      	mov	r5, r1
 8006a1e:	b09d      	sub	sp, #116	; 0x74
 8006a20:	4614      	mov	r4, r2
 8006a22:	4698      	mov	r8, r3
 8006a24:	4606      	mov	r6, r0
 8006a26:	b118      	cbz	r0, 8006a30 <_vfiprintf_r+0x18>
 8006a28:	6983      	ldr	r3, [r0, #24]
 8006a2a:	b90b      	cbnz	r3, 8006a30 <_vfiprintf_r+0x18>
 8006a2c:	f000 fb14 	bl	8007058 <__sinit>
 8006a30:	4b89      	ldr	r3, [pc, #548]	; (8006c58 <_vfiprintf_r+0x240>)
 8006a32:	429d      	cmp	r5, r3
 8006a34:	d11b      	bne.n	8006a6e <_vfiprintf_r+0x56>
 8006a36:	6875      	ldr	r5, [r6, #4]
 8006a38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a3a:	07d9      	lsls	r1, r3, #31
 8006a3c:	d405      	bmi.n	8006a4a <_vfiprintf_r+0x32>
 8006a3e:	89ab      	ldrh	r3, [r5, #12]
 8006a40:	059a      	lsls	r2, r3, #22
 8006a42:	d402      	bmi.n	8006a4a <_vfiprintf_r+0x32>
 8006a44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a46:	f7fa ff9a 	bl	800197e <__retarget_lock_acquire_recursive>
 8006a4a:	89ab      	ldrh	r3, [r5, #12]
 8006a4c:	071b      	lsls	r3, r3, #28
 8006a4e:	d501      	bpl.n	8006a54 <_vfiprintf_r+0x3c>
 8006a50:	692b      	ldr	r3, [r5, #16]
 8006a52:	b9eb      	cbnz	r3, 8006a90 <_vfiprintf_r+0x78>
 8006a54:	4629      	mov	r1, r5
 8006a56:	4630      	mov	r0, r6
 8006a58:	f000 f96e 	bl	8006d38 <__swsetup_r>
 8006a5c:	b1c0      	cbz	r0, 8006a90 <_vfiprintf_r+0x78>
 8006a5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a60:	07dc      	lsls	r4, r3, #31
 8006a62:	d50e      	bpl.n	8006a82 <_vfiprintf_r+0x6a>
 8006a64:	f04f 30ff 	mov.w	r0, #4294967295
 8006a68:	b01d      	add	sp, #116	; 0x74
 8006a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a6e:	4b7b      	ldr	r3, [pc, #492]	; (8006c5c <_vfiprintf_r+0x244>)
 8006a70:	429d      	cmp	r5, r3
 8006a72:	d101      	bne.n	8006a78 <_vfiprintf_r+0x60>
 8006a74:	68b5      	ldr	r5, [r6, #8]
 8006a76:	e7df      	b.n	8006a38 <_vfiprintf_r+0x20>
 8006a78:	4b79      	ldr	r3, [pc, #484]	; (8006c60 <_vfiprintf_r+0x248>)
 8006a7a:	429d      	cmp	r5, r3
 8006a7c:	bf08      	it	eq
 8006a7e:	68f5      	ldreq	r5, [r6, #12]
 8006a80:	e7da      	b.n	8006a38 <_vfiprintf_r+0x20>
 8006a82:	89ab      	ldrh	r3, [r5, #12]
 8006a84:	0598      	lsls	r0, r3, #22
 8006a86:	d4ed      	bmi.n	8006a64 <_vfiprintf_r+0x4c>
 8006a88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a8a:	f7fa ff8c 	bl	80019a6 <__retarget_lock_release_recursive>
 8006a8e:	e7e9      	b.n	8006a64 <_vfiprintf_r+0x4c>
 8006a90:	2300      	movs	r3, #0
 8006a92:	9309      	str	r3, [sp, #36]	; 0x24
 8006a94:	2320      	movs	r3, #32
 8006a96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a9e:	2330      	movs	r3, #48	; 0x30
 8006aa0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006c64 <_vfiprintf_r+0x24c>
 8006aa4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006aa8:	f04f 0901 	mov.w	r9, #1
 8006aac:	4623      	mov	r3, r4
 8006aae:	469a      	mov	sl, r3
 8006ab0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ab4:	b10a      	cbz	r2, 8006aba <_vfiprintf_r+0xa2>
 8006ab6:	2a25      	cmp	r2, #37	; 0x25
 8006ab8:	d1f9      	bne.n	8006aae <_vfiprintf_r+0x96>
 8006aba:	ebba 0b04 	subs.w	fp, sl, r4
 8006abe:	d00b      	beq.n	8006ad8 <_vfiprintf_r+0xc0>
 8006ac0:	465b      	mov	r3, fp
 8006ac2:	4622      	mov	r2, r4
 8006ac4:	4629      	mov	r1, r5
 8006ac6:	4630      	mov	r0, r6
 8006ac8:	f7ff ff93 	bl	80069f2 <__sfputs_r>
 8006acc:	3001      	adds	r0, #1
 8006ace:	f000 80aa 	beq.w	8006c26 <_vfiprintf_r+0x20e>
 8006ad2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ad4:	445a      	add	r2, fp
 8006ad6:	9209      	str	r2, [sp, #36]	; 0x24
 8006ad8:	f89a 3000 	ldrb.w	r3, [sl]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f000 80a2 	beq.w	8006c26 <_vfiprintf_r+0x20e>
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ae8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006aec:	f10a 0a01 	add.w	sl, sl, #1
 8006af0:	9304      	str	r3, [sp, #16]
 8006af2:	9307      	str	r3, [sp, #28]
 8006af4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006af8:	931a      	str	r3, [sp, #104]	; 0x68
 8006afa:	4654      	mov	r4, sl
 8006afc:	2205      	movs	r2, #5
 8006afe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b02:	4858      	ldr	r0, [pc, #352]	; (8006c64 <_vfiprintf_r+0x24c>)
 8006b04:	f7f9 fb8c 	bl	8000220 <memchr>
 8006b08:	9a04      	ldr	r2, [sp, #16]
 8006b0a:	b9d8      	cbnz	r0, 8006b44 <_vfiprintf_r+0x12c>
 8006b0c:	06d1      	lsls	r1, r2, #27
 8006b0e:	bf44      	itt	mi
 8006b10:	2320      	movmi	r3, #32
 8006b12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b16:	0713      	lsls	r3, r2, #28
 8006b18:	bf44      	itt	mi
 8006b1a:	232b      	movmi	r3, #43	; 0x2b
 8006b1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b20:	f89a 3000 	ldrb.w	r3, [sl]
 8006b24:	2b2a      	cmp	r3, #42	; 0x2a
 8006b26:	d015      	beq.n	8006b54 <_vfiprintf_r+0x13c>
 8006b28:	9a07      	ldr	r2, [sp, #28]
 8006b2a:	4654      	mov	r4, sl
 8006b2c:	2000      	movs	r0, #0
 8006b2e:	f04f 0c0a 	mov.w	ip, #10
 8006b32:	4621      	mov	r1, r4
 8006b34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b38:	3b30      	subs	r3, #48	; 0x30
 8006b3a:	2b09      	cmp	r3, #9
 8006b3c:	d94e      	bls.n	8006bdc <_vfiprintf_r+0x1c4>
 8006b3e:	b1b0      	cbz	r0, 8006b6e <_vfiprintf_r+0x156>
 8006b40:	9207      	str	r2, [sp, #28]
 8006b42:	e014      	b.n	8006b6e <_vfiprintf_r+0x156>
 8006b44:	eba0 0308 	sub.w	r3, r0, r8
 8006b48:	fa09 f303 	lsl.w	r3, r9, r3
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	9304      	str	r3, [sp, #16]
 8006b50:	46a2      	mov	sl, r4
 8006b52:	e7d2      	b.n	8006afa <_vfiprintf_r+0xe2>
 8006b54:	9b03      	ldr	r3, [sp, #12]
 8006b56:	1d19      	adds	r1, r3, #4
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	9103      	str	r1, [sp, #12]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	bfbb      	ittet	lt
 8006b60:	425b      	neglt	r3, r3
 8006b62:	f042 0202 	orrlt.w	r2, r2, #2
 8006b66:	9307      	strge	r3, [sp, #28]
 8006b68:	9307      	strlt	r3, [sp, #28]
 8006b6a:	bfb8      	it	lt
 8006b6c:	9204      	strlt	r2, [sp, #16]
 8006b6e:	7823      	ldrb	r3, [r4, #0]
 8006b70:	2b2e      	cmp	r3, #46	; 0x2e
 8006b72:	d10c      	bne.n	8006b8e <_vfiprintf_r+0x176>
 8006b74:	7863      	ldrb	r3, [r4, #1]
 8006b76:	2b2a      	cmp	r3, #42	; 0x2a
 8006b78:	d135      	bne.n	8006be6 <_vfiprintf_r+0x1ce>
 8006b7a:	9b03      	ldr	r3, [sp, #12]
 8006b7c:	1d1a      	adds	r2, r3, #4
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	9203      	str	r2, [sp, #12]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	bfb8      	it	lt
 8006b86:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b8a:	3402      	adds	r4, #2
 8006b8c:	9305      	str	r3, [sp, #20]
 8006b8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006c74 <_vfiprintf_r+0x25c>
 8006b92:	7821      	ldrb	r1, [r4, #0]
 8006b94:	2203      	movs	r2, #3
 8006b96:	4650      	mov	r0, sl
 8006b98:	f7f9 fb42 	bl	8000220 <memchr>
 8006b9c:	b140      	cbz	r0, 8006bb0 <_vfiprintf_r+0x198>
 8006b9e:	2340      	movs	r3, #64	; 0x40
 8006ba0:	eba0 000a 	sub.w	r0, r0, sl
 8006ba4:	fa03 f000 	lsl.w	r0, r3, r0
 8006ba8:	9b04      	ldr	r3, [sp, #16]
 8006baa:	4303      	orrs	r3, r0
 8006bac:	3401      	adds	r4, #1
 8006bae:	9304      	str	r3, [sp, #16]
 8006bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bb4:	482c      	ldr	r0, [pc, #176]	; (8006c68 <_vfiprintf_r+0x250>)
 8006bb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006bba:	2206      	movs	r2, #6
 8006bbc:	f7f9 fb30 	bl	8000220 <memchr>
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	d03f      	beq.n	8006c44 <_vfiprintf_r+0x22c>
 8006bc4:	4b29      	ldr	r3, [pc, #164]	; (8006c6c <_vfiprintf_r+0x254>)
 8006bc6:	bb1b      	cbnz	r3, 8006c10 <_vfiprintf_r+0x1f8>
 8006bc8:	9b03      	ldr	r3, [sp, #12]
 8006bca:	3307      	adds	r3, #7
 8006bcc:	f023 0307 	bic.w	r3, r3, #7
 8006bd0:	3308      	adds	r3, #8
 8006bd2:	9303      	str	r3, [sp, #12]
 8006bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bd6:	443b      	add	r3, r7
 8006bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8006bda:	e767      	b.n	8006aac <_vfiprintf_r+0x94>
 8006bdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006be0:	460c      	mov	r4, r1
 8006be2:	2001      	movs	r0, #1
 8006be4:	e7a5      	b.n	8006b32 <_vfiprintf_r+0x11a>
 8006be6:	2300      	movs	r3, #0
 8006be8:	3401      	adds	r4, #1
 8006bea:	9305      	str	r3, [sp, #20]
 8006bec:	4619      	mov	r1, r3
 8006bee:	f04f 0c0a 	mov.w	ip, #10
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bf8:	3a30      	subs	r2, #48	; 0x30
 8006bfa:	2a09      	cmp	r2, #9
 8006bfc:	d903      	bls.n	8006c06 <_vfiprintf_r+0x1ee>
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d0c5      	beq.n	8006b8e <_vfiprintf_r+0x176>
 8006c02:	9105      	str	r1, [sp, #20]
 8006c04:	e7c3      	b.n	8006b8e <_vfiprintf_r+0x176>
 8006c06:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c0a:	4604      	mov	r4, r0
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e7f0      	b.n	8006bf2 <_vfiprintf_r+0x1da>
 8006c10:	ab03      	add	r3, sp, #12
 8006c12:	9300      	str	r3, [sp, #0]
 8006c14:	462a      	mov	r2, r5
 8006c16:	4b16      	ldr	r3, [pc, #88]	; (8006c70 <_vfiprintf_r+0x258>)
 8006c18:	a904      	add	r1, sp, #16
 8006c1a:	4630      	mov	r0, r6
 8006c1c:	f7fe f892 	bl	8004d44 <_printf_float>
 8006c20:	4607      	mov	r7, r0
 8006c22:	1c78      	adds	r0, r7, #1
 8006c24:	d1d6      	bne.n	8006bd4 <_vfiprintf_r+0x1bc>
 8006c26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c28:	07d9      	lsls	r1, r3, #31
 8006c2a:	d405      	bmi.n	8006c38 <_vfiprintf_r+0x220>
 8006c2c:	89ab      	ldrh	r3, [r5, #12]
 8006c2e:	059a      	lsls	r2, r3, #22
 8006c30:	d402      	bmi.n	8006c38 <_vfiprintf_r+0x220>
 8006c32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c34:	f7fa feb7 	bl	80019a6 <__retarget_lock_release_recursive>
 8006c38:	89ab      	ldrh	r3, [r5, #12]
 8006c3a:	065b      	lsls	r3, r3, #25
 8006c3c:	f53f af12 	bmi.w	8006a64 <_vfiprintf_r+0x4c>
 8006c40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c42:	e711      	b.n	8006a68 <_vfiprintf_r+0x50>
 8006c44:	ab03      	add	r3, sp, #12
 8006c46:	9300      	str	r3, [sp, #0]
 8006c48:	462a      	mov	r2, r5
 8006c4a:	4b09      	ldr	r3, [pc, #36]	; (8006c70 <_vfiprintf_r+0x258>)
 8006c4c:	a904      	add	r1, sp, #16
 8006c4e:	4630      	mov	r0, r6
 8006c50:	f7fe fb1c 	bl	800528c <_printf_i>
 8006c54:	e7e4      	b.n	8006c20 <_vfiprintf_r+0x208>
 8006c56:	bf00      	nop
 8006c58:	0800781c 	.word	0x0800781c
 8006c5c:	0800783c 	.word	0x0800783c
 8006c60:	080077fc 	.word	0x080077fc
 8006c64:	080076ea 	.word	0x080076ea
 8006c68:	080076f4 	.word	0x080076f4
 8006c6c:	08004d45 	.word	0x08004d45
 8006c70:	080069f3 	.word	0x080069f3
 8006c74:	080076f0 	.word	0x080076f0

08006c78 <__swbuf_r>:
 8006c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c7a:	460e      	mov	r6, r1
 8006c7c:	4614      	mov	r4, r2
 8006c7e:	4605      	mov	r5, r0
 8006c80:	b118      	cbz	r0, 8006c8a <__swbuf_r+0x12>
 8006c82:	6983      	ldr	r3, [r0, #24]
 8006c84:	b90b      	cbnz	r3, 8006c8a <__swbuf_r+0x12>
 8006c86:	f000 f9e7 	bl	8007058 <__sinit>
 8006c8a:	4b21      	ldr	r3, [pc, #132]	; (8006d10 <__swbuf_r+0x98>)
 8006c8c:	429c      	cmp	r4, r3
 8006c8e:	d12b      	bne.n	8006ce8 <__swbuf_r+0x70>
 8006c90:	686c      	ldr	r4, [r5, #4]
 8006c92:	69a3      	ldr	r3, [r4, #24]
 8006c94:	60a3      	str	r3, [r4, #8]
 8006c96:	89a3      	ldrh	r3, [r4, #12]
 8006c98:	071a      	lsls	r2, r3, #28
 8006c9a:	d52f      	bpl.n	8006cfc <__swbuf_r+0x84>
 8006c9c:	6923      	ldr	r3, [r4, #16]
 8006c9e:	b36b      	cbz	r3, 8006cfc <__swbuf_r+0x84>
 8006ca0:	6923      	ldr	r3, [r4, #16]
 8006ca2:	6820      	ldr	r0, [r4, #0]
 8006ca4:	1ac0      	subs	r0, r0, r3
 8006ca6:	6963      	ldr	r3, [r4, #20]
 8006ca8:	b2f6      	uxtb	r6, r6
 8006caa:	4283      	cmp	r3, r0
 8006cac:	4637      	mov	r7, r6
 8006cae:	dc04      	bgt.n	8006cba <__swbuf_r+0x42>
 8006cb0:	4621      	mov	r1, r4
 8006cb2:	4628      	mov	r0, r5
 8006cb4:	f000 f93c 	bl	8006f30 <_fflush_r>
 8006cb8:	bb30      	cbnz	r0, 8006d08 <__swbuf_r+0x90>
 8006cba:	68a3      	ldr	r3, [r4, #8]
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	60a3      	str	r3, [r4, #8]
 8006cc0:	6823      	ldr	r3, [r4, #0]
 8006cc2:	1c5a      	adds	r2, r3, #1
 8006cc4:	6022      	str	r2, [r4, #0]
 8006cc6:	701e      	strb	r6, [r3, #0]
 8006cc8:	6963      	ldr	r3, [r4, #20]
 8006cca:	3001      	adds	r0, #1
 8006ccc:	4283      	cmp	r3, r0
 8006cce:	d004      	beq.n	8006cda <__swbuf_r+0x62>
 8006cd0:	89a3      	ldrh	r3, [r4, #12]
 8006cd2:	07db      	lsls	r3, r3, #31
 8006cd4:	d506      	bpl.n	8006ce4 <__swbuf_r+0x6c>
 8006cd6:	2e0a      	cmp	r6, #10
 8006cd8:	d104      	bne.n	8006ce4 <__swbuf_r+0x6c>
 8006cda:	4621      	mov	r1, r4
 8006cdc:	4628      	mov	r0, r5
 8006cde:	f000 f927 	bl	8006f30 <_fflush_r>
 8006ce2:	b988      	cbnz	r0, 8006d08 <__swbuf_r+0x90>
 8006ce4:	4638      	mov	r0, r7
 8006ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ce8:	4b0a      	ldr	r3, [pc, #40]	; (8006d14 <__swbuf_r+0x9c>)
 8006cea:	429c      	cmp	r4, r3
 8006cec:	d101      	bne.n	8006cf2 <__swbuf_r+0x7a>
 8006cee:	68ac      	ldr	r4, [r5, #8]
 8006cf0:	e7cf      	b.n	8006c92 <__swbuf_r+0x1a>
 8006cf2:	4b09      	ldr	r3, [pc, #36]	; (8006d18 <__swbuf_r+0xa0>)
 8006cf4:	429c      	cmp	r4, r3
 8006cf6:	bf08      	it	eq
 8006cf8:	68ec      	ldreq	r4, [r5, #12]
 8006cfa:	e7ca      	b.n	8006c92 <__swbuf_r+0x1a>
 8006cfc:	4621      	mov	r1, r4
 8006cfe:	4628      	mov	r0, r5
 8006d00:	f000 f81a 	bl	8006d38 <__swsetup_r>
 8006d04:	2800      	cmp	r0, #0
 8006d06:	d0cb      	beq.n	8006ca0 <__swbuf_r+0x28>
 8006d08:	f04f 37ff 	mov.w	r7, #4294967295
 8006d0c:	e7ea      	b.n	8006ce4 <__swbuf_r+0x6c>
 8006d0e:	bf00      	nop
 8006d10:	0800781c 	.word	0x0800781c
 8006d14:	0800783c 	.word	0x0800783c
 8006d18:	080077fc 	.word	0x080077fc

08006d1c <__ascii_wctomb>:
 8006d1c:	b149      	cbz	r1, 8006d32 <__ascii_wctomb+0x16>
 8006d1e:	2aff      	cmp	r2, #255	; 0xff
 8006d20:	bf85      	ittet	hi
 8006d22:	238a      	movhi	r3, #138	; 0x8a
 8006d24:	6003      	strhi	r3, [r0, #0]
 8006d26:	700a      	strbls	r2, [r1, #0]
 8006d28:	f04f 30ff 	movhi.w	r0, #4294967295
 8006d2c:	bf98      	it	ls
 8006d2e:	2001      	movls	r0, #1
 8006d30:	4770      	bx	lr
 8006d32:	4608      	mov	r0, r1
 8006d34:	4770      	bx	lr
	...

08006d38 <__swsetup_r>:
 8006d38:	4b32      	ldr	r3, [pc, #200]	; (8006e04 <__swsetup_r+0xcc>)
 8006d3a:	b570      	push	{r4, r5, r6, lr}
 8006d3c:	681d      	ldr	r5, [r3, #0]
 8006d3e:	4606      	mov	r6, r0
 8006d40:	460c      	mov	r4, r1
 8006d42:	b125      	cbz	r5, 8006d4e <__swsetup_r+0x16>
 8006d44:	69ab      	ldr	r3, [r5, #24]
 8006d46:	b913      	cbnz	r3, 8006d4e <__swsetup_r+0x16>
 8006d48:	4628      	mov	r0, r5
 8006d4a:	f000 f985 	bl	8007058 <__sinit>
 8006d4e:	4b2e      	ldr	r3, [pc, #184]	; (8006e08 <__swsetup_r+0xd0>)
 8006d50:	429c      	cmp	r4, r3
 8006d52:	d10f      	bne.n	8006d74 <__swsetup_r+0x3c>
 8006d54:	686c      	ldr	r4, [r5, #4]
 8006d56:	89a3      	ldrh	r3, [r4, #12]
 8006d58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d5c:	0719      	lsls	r1, r3, #28
 8006d5e:	d42c      	bmi.n	8006dba <__swsetup_r+0x82>
 8006d60:	06dd      	lsls	r5, r3, #27
 8006d62:	d411      	bmi.n	8006d88 <__swsetup_r+0x50>
 8006d64:	2309      	movs	r3, #9
 8006d66:	6033      	str	r3, [r6, #0]
 8006d68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d6c:	81a3      	strh	r3, [r4, #12]
 8006d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d72:	e03e      	b.n	8006df2 <__swsetup_r+0xba>
 8006d74:	4b25      	ldr	r3, [pc, #148]	; (8006e0c <__swsetup_r+0xd4>)
 8006d76:	429c      	cmp	r4, r3
 8006d78:	d101      	bne.n	8006d7e <__swsetup_r+0x46>
 8006d7a:	68ac      	ldr	r4, [r5, #8]
 8006d7c:	e7eb      	b.n	8006d56 <__swsetup_r+0x1e>
 8006d7e:	4b24      	ldr	r3, [pc, #144]	; (8006e10 <__swsetup_r+0xd8>)
 8006d80:	429c      	cmp	r4, r3
 8006d82:	bf08      	it	eq
 8006d84:	68ec      	ldreq	r4, [r5, #12]
 8006d86:	e7e6      	b.n	8006d56 <__swsetup_r+0x1e>
 8006d88:	0758      	lsls	r0, r3, #29
 8006d8a:	d512      	bpl.n	8006db2 <__swsetup_r+0x7a>
 8006d8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d8e:	b141      	cbz	r1, 8006da2 <__swsetup_r+0x6a>
 8006d90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d94:	4299      	cmp	r1, r3
 8006d96:	d002      	beq.n	8006d9e <__swsetup_r+0x66>
 8006d98:	4630      	mov	r0, r6
 8006d9a:	f7fd fe89 	bl	8004ab0 <_free_r>
 8006d9e:	2300      	movs	r3, #0
 8006da0:	6363      	str	r3, [r4, #52]	; 0x34
 8006da2:	89a3      	ldrh	r3, [r4, #12]
 8006da4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006da8:	81a3      	strh	r3, [r4, #12]
 8006daa:	2300      	movs	r3, #0
 8006dac:	6063      	str	r3, [r4, #4]
 8006dae:	6923      	ldr	r3, [r4, #16]
 8006db0:	6023      	str	r3, [r4, #0]
 8006db2:	89a3      	ldrh	r3, [r4, #12]
 8006db4:	f043 0308 	orr.w	r3, r3, #8
 8006db8:	81a3      	strh	r3, [r4, #12]
 8006dba:	6923      	ldr	r3, [r4, #16]
 8006dbc:	b94b      	cbnz	r3, 8006dd2 <__swsetup_r+0x9a>
 8006dbe:	89a3      	ldrh	r3, [r4, #12]
 8006dc0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dc8:	d003      	beq.n	8006dd2 <__swsetup_r+0x9a>
 8006dca:	4621      	mov	r1, r4
 8006dcc:	4630      	mov	r0, r6
 8006dce:	f000 fa05 	bl	80071dc <__smakebuf_r>
 8006dd2:	89a0      	ldrh	r0, [r4, #12]
 8006dd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006dd8:	f010 0301 	ands.w	r3, r0, #1
 8006ddc:	d00a      	beq.n	8006df4 <__swsetup_r+0xbc>
 8006dde:	2300      	movs	r3, #0
 8006de0:	60a3      	str	r3, [r4, #8]
 8006de2:	6963      	ldr	r3, [r4, #20]
 8006de4:	425b      	negs	r3, r3
 8006de6:	61a3      	str	r3, [r4, #24]
 8006de8:	6923      	ldr	r3, [r4, #16]
 8006dea:	b943      	cbnz	r3, 8006dfe <__swsetup_r+0xc6>
 8006dec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006df0:	d1ba      	bne.n	8006d68 <__swsetup_r+0x30>
 8006df2:	bd70      	pop	{r4, r5, r6, pc}
 8006df4:	0781      	lsls	r1, r0, #30
 8006df6:	bf58      	it	pl
 8006df8:	6963      	ldrpl	r3, [r4, #20]
 8006dfa:	60a3      	str	r3, [r4, #8]
 8006dfc:	e7f4      	b.n	8006de8 <__swsetup_r+0xb0>
 8006dfe:	2000      	movs	r0, #0
 8006e00:	e7f7      	b.n	8006df2 <__swsetup_r+0xba>
 8006e02:	bf00      	nop
 8006e04:	2000000c 	.word	0x2000000c
 8006e08:	0800781c 	.word	0x0800781c
 8006e0c:	0800783c 	.word	0x0800783c
 8006e10:	080077fc 	.word	0x080077fc

08006e14 <abort>:
 8006e14:	b508      	push	{r3, lr}
 8006e16:	2006      	movs	r0, #6
 8006e18:	f000 fa48 	bl	80072ac <raise>
 8006e1c:	2001      	movs	r0, #1
 8006e1e:	f7fa fbb5 	bl	800158c <_exit>
	...

08006e24 <__sflush_r>:
 8006e24:	898a      	ldrh	r2, [r1, #12]
 8006e26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e2a:	4605      	mov	r5, r0
 8006e2c:	0710      	lsls	r0, r2, #28
 8006e2e:	460c      	mov	r4, r1
 8006e30:	d458      	bmi.n	8006ee4 <__sflush_r+0xc0>
 8006e32:	684b      	ldr	r3, [r1, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	dc05      	bgt.n	8006e44 <__sflush_r+0x20>
 8006e38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	dc02      	bgt.n	8006e44 <__sflush_r+0x20>
 8006e3e:	2000      	movs	r0, #0
 8006e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e46:	2e00      	cmp	r6, #0
 8006e48:	d0f9      	beq.n	8006e3e <__sflush_r+0x1a>
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e50:	682f      	ldr	r7, [r5, #0]
 8006e52:	602b      	str	r3, [r5, #0]
 8006e54:	d032      	beq.n	8006ebc <__sflush_r+0x98>
 8006e56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e58:	89a3      	ldrh	r3, [r4, #12]
 8006e5a:	075a      	lsls	r2, r3, #29
 8006e5c:	d505      	bpl.n	8006e6a <__sflush_r+0x46>
 8006e5e:	6863      	ldr	r3, [r4, #4]
 8006e60:	1ac0      	subs	r0, r0, r3
 8006e62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e64:	b10b      	cbz	r3, 8006e6a <__sflush_r+0x46>
 8006e66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e68:	1ac0      	subs	r0, r0, r3
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e70:	6a21      	ldr	r1, [r4, #32]
 8006e72:	4628      	mov	r0, r5
 8006e74:	47b0      	blx	r6
 8006e76:	1c43      	adds	r3, r0, #1
 8006e78:	89a3      	ldrh	r3, [r4, #12]
 8006e7a:	d106      	bne.n	8006e8a <__sflush_r+0x66>
 8006e7c:	6829      	ldr	r1, [r5, #0]
 8006e7e:	291d      	cmp	r1, #29
 8006e80:	d82c      	bhi.n	8006edc <__sflush_r+0xb8>
 8006e82:	4a2a      	ldr	r2, [pc, #168]	; (8006f2c <__sflush_r+0x108>)
 8006e84:	40ca      	lsrs	r2, r1
 8006e86:	07d6      	lsls	r6, r2, #31
 8006e88:	d528      	bpl.n	8006edc <__sflush_r+0xb8>
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	6062      	str	r2, [r4, #4]
 8006e8e:	04d9      	lsls	r1, r3, #19
 8006e90:	6922      	ldr	r2, [r4, #16]
 8006e92:	6022      	str	r2, [r4, #0]
 8006e94:	d504      	bpl.n	8006ea0 <__sflush_r+0x7c>
 8006e96:	1c42      	adds	r2, r0, #1
 8006e98:	d101      	bne.n	8006e9e <__sflush_r+0x7a>
 8006e9a:	682b      	ldr	r3, [r5, #0]
 8006e9c:	b903      	cbnz	r3, 8006ea0 <__sflush_r+0x7c>
 8006e9e:	6560      	str	r0, [r4, #84]	; 0x54
 8006ea0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ea2:	602f      	str	r7, [r5, #0]
 8006ea4:	2900      	cmp	r1, #0
 8006ea6:	d0ca      	beq.n	8006e3e <__sflush_r+0x1a>
 8006ea8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006eac:	4299      	cmp	r1, r3
 8006eae:	d002      	beq.n	8006eb6 <__sflush_r+0x92>
 8006eb0:	4628      	mov	r0, r5
 8006eb2:	f7fd fdfd 	bl	8004ab0 <_free_r>
 8006eb6:	2000      	movs	r0, #0
 8006eb8:	6360      	str	r0, [r4, #52]	; 0x34
 8006eba:	e7c1      	b.n	8006e40 <__sflush_r+0x1c>
 8006ebc:	6a21      	ldr	r1, [r4, #32]
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	47b0      	blx	r6
 8006ec4:	1c41      	adds	r1, r0, #1
 8006ec6:	d1c7      	bne.n	8006e58 <__sflush_r+0x34>
 8006ec8:	682b      	ldr	r3, [r5, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d0c4      	beq.n	8006e58 <__sflush_r+0x34>
 8006ece:	2b1d      	cmp	r3, #29
 8006ed0:	d001      	beq.n	8006ed6 <__sflush_r+0xb2>
 8006ed2:	2b16      	cmp	r3, #22
 8006ed4:	d101      	bne.n	8006eda <__sflush_r+0xb6>
 8006ed6:	602f      	str	r7, [r5, #0]
 8006ed8:	e7b1      	b.n	8006e3e <__sflush_r+0x1a>
 8006eda:	89a3      	ldrh	r3, [r4, #12]
 8006edc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ee0:	81a3      	strh	r3, [r4, #12]
 8006ee2:	e7ad      	b.n	8006e40 <__sflush_r+0x1c>
 8006ee4:	690f      	ldr	r7, [r1, #16]
 8006ee6:	2f00      	cmp	r7, #0
 8006ee8:	d0a9      	beq.n	8006e3e <__sflush_r+0x1a>
 8006eea:	0793      	lsls	r3, r2, #30
 8006eec:	680e      	ldr	r6, [r1, #0]
 8006eee:	bf08      	it	eq
 8006ef0:	694b      	ldreq	r3, [r1, #20]
 8006ef2:	600f      	str	r7, [r1, #0]
 8006ef4:	bf18      	it	ne
 8006ef6:	2300      	movne	r3, #0
 8006ef8:	eba6 0807 	sub.w	r8, r6, r7
 8006efc:	608b      	str	r3, [r1, #8]
 8006efe:	f1b8 0f00 	cmp.w	r8, #0
 8006f02:	dd9c      	ble.n	8006e3e <__sflush_r+0x1a>
 8006f04:	6a21      	ldr	r1, [r4, #32]
 8006f06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f08:	4643      	mov	r3, r8
 8006f0a:	463a      	mov	r2, r7
 8006f0c:	4628      	mov	r0, r5
 8006f0e:	47b0      	blx	r6
 8006f10:	2800      	cmp	r0, #0
 8006f12:	dc06      	bgt.n	8006f22 <__sflush_r+0xfe>
 8006f14:	89a3      	ldrh	r3, [r4, #12]
 8006f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f1a:	81a3      	strh	r3, [r4, #12]
 8006f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f20:	e78e      	b.n	8006e40 <__sflush_r+0x1c>
 8006f22:	4407      	add	r7, r0
 8006f24:	eba8 0800 	sub.w	r8, r8, r0
 8006f28:	e7e9      	b.n	8006efe <__sflush_r+0xda>
 8006f2a:	bf00      	nop
 8006f2c:	20400001 	.word	0x20400001

08006f30 <_fflush_r>:
 8006f30:	b538      	push	{r3, r4, r5, lr}
 8006f32:	690b      	ldr	r3, [r1, #16]
 8006f34:	4605      	mov	r5, r0
 8006f36:	460c      	mov	r4, r1
 8006f38:	b913      	cbnz	r3, 8006f40 <_fflush_r+0x10>
 8006f3a:	2500      	movs	r5, #0
 8006f3c:	4628      	mov	r0, r5
 8006f3e:	bd38      	pop	{r3, r4, r5, pc}
 8006f40:	b118      	cbz	r0, 8006f4a <_fflush_r+0x1a>
 8006f42:	6983      	ldr	r3, [r0, #24]
 8006f44:	b90b      	cbnz	r3, 8006f4a <_fflush_r+0x1a>
 8006f46:	f000 f887 	bl	8007058 <__sinit>
 8006f4a:	4b14      	ldr	r3, [pc, #80]	; (8006f9c <_fflush_r+0x6c>)
 8006f4c:	429c      	cmp	r4, r3
 8006f4e:	d11b      	bne.n	8006f88 <_fflush_r+0x58>
 8006f50:	686c      	ldr	r4, [r5, #4]
 8006f52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d0ef      	beq.n	8006f3a <_fflush_r+0xa>
 8006f5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f5c:	07d0      	lsls	r0, r2, #31
 8006f5e:	d404      	bmi.n	8006f6a <_fflush_r+0x3a>
 8006f60:	0599      	lsls	r1, r3, #22
 8006f62:	d402      	bmi.n	8006f6a <_fflush_r+0x3a>
 8006f64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f66:	f7fa fd0a 	bl	800197e <__retarget_lock_acquire_recursive>
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	f7ff ff59 	bl	8006e24 <__sflush_r>
 8006f72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f74:	07da      	lsls	r2, r3, #31
 8006f76:	4605      	mov	r5, r0
 8006f78:	d4e0      	bmi.n	8006f3c <_fflush_r+0xc>
 8006f7a:	89a3      	ldrh	r3, [r4, #12]
 8006f7c:	059b      	lsls	r3, r3, #22
 8006f7e:	d4dd      	bmi.n	8006f3c <_fflush_r+0xc>
 8006f80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f82:	f7fa fd10 	bl	80019a6 <__retarget_lock_release_recursive>
 8006f86:	e7d9      	b.n	8006f3c <_fflush_r+0xc>
 8006f88:	4b05      	ldr	r3, [pc, #20]	; (8006fa0 <_fflush_r+0x70>)
 8006f8a:	429c      	cmp	r4, r3
 8006f8c:	d101      	bne.n	8006f92 <_fflush_r+0x62>
 8006f8e:	68ac      	ldr	r4, [r5, #8]
 8006f90:	e7df      	b.n	8006f52 <_fflush_r+0x22>
 8006f92:	4b04      	ldr	r3, [pc, #16]	; (8006fa4 <_fflush_r+0x74>)
 8006f94:	429c      	cmp	r4, r3
 8006f96:	bf08      	it	eq
 8006f98:	68ec      	ldreq	r4, [r5, #12]
 8006f9a:	e7da      	b.n	8006f52 <_fflush_r+0x22>
 8006f9c:	0800781c 	.word	0x0800781c
 8006fa0:	0800783c 	.word	0x0800783c
 8006fa4:	080077fc 	.word	0x080077fc

08006fa8 <std>:
 8006fa8:	2300      	movs	r3, #0
 8006faa:	b510      	push	{r4, lr}
 8006fac:	4604      	mov	r4, r0
 8006fae:	e9c0 3300 	strd	r3, r3, [r0]
 8006fb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006fb6:	6083      	str	r3, [r0, #8]
 8006fb8:	8181      	strh	r1, [r0, #12]
 8006fba:	6643      	str	r3, [r0, #100]	; 0x64
 8006fbc:	81c2      	strh	r2, [r0, #14]
 8006fbe:	6183      	str	r3, [r0, #24]
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	2208      	movs	r2, #8
 8006fc4:	305c      	adds	r0, #92	; 0x5c
 8006fc6:	f7fd fd6b 	bl	8004aa0 <memset>
 8006fca:	4b05      	ldr	r3, [pc, #20]	; (8006fe0 <std+0x38>)
 8006fcc:	6263      	str	r3, [r4, #36]	; 0x24
 8006fce:	4b05      	ldr	r3, [pc, #20]	; (8006fe4 <std+0x3c>)
 8006fd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006fd2:	4b05      	ldr	r3, [pc, #20]	; (8006fe8 <std+0x40>)
 8006fd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006fd6:	4b05      	ldr	r3, [pc, #20]	; (8006fec <std+0x44>)
 8006fd8:	6224      	str	r4, [r4, #32]
 8006fda:	6323      	str	r3, [r4, #48]	; 0x30
 8006fdc:	bd10      	pop	{r4, pc}
 8006fde:	bf00      	nop
 8006fe0:	080072e5 	.word	0x080072e5
 8006fe4:	08007307 	.word	0x08007307
 8006fe8:	0800733f 	.word	0x0800733f
 8006fec:	08007363 	.word	0x08007363

08006ff0 <_cleanup_r>:
 8006ff0:	4901      	ldr	r1, [pc, #4]	; (8006ff8 <_cleanup_r+0x8>)
 8006ff2:	f000 b8af 	b.w	8007154 <_fwalk_reent>
 8006ff6:	bf00      	nop
 8006ff8:	08006f31 	.word	0x08006f31

08006ffc <__sfmoreglue>:
 8006ffc:	b570      	push	{r4, r5, r6, lr}
 8006ffe:	1e4a      	subs	r2, r1, #1
 8007000:	2568      	movs	r5, #104	; 0x68
 8007002:	4355      	muls	r5, r2
 8007004:	460e      	mov	r6, r1
 8007006:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800700a:	f7fd fda1 	bl	8004b50 <_malloc_r>
 800700e:	4604      	mov	r4, r0
 8007010:	b140      	cbz	r0, 8007024 <__sfmoreglue+0x28>
 8007012:	2100      	movs	r1, #0
 8007014:	e9c0 1600 	strd	r1, r6, [r0]
 8007018:	300c      	adds	r0, #12
 800701a:	60a0      	str	r0, [r4, #8]
 800701c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007020:	f7fd fd3e 	bl	8004aa0 <memset>
 8007024:	4620      	mov	r0, r4
 8007026:	bd70      	pop	{r4, r5, r6, pc}

08007028 <__sfp_lock_acquire>:
 8007028:	4801      	ldr	r0, [pc, #4]	; (8007030 <__sfp_lock_acquire+0x8>)
 800702a:	f7fa bca8 	b.w	800197e <__retarget_lock_acquire_recursive>
 800702e:	bf00      	nop
 8007030:	20000200 	.word	0x20000200

08007034 <__sfp_lock_release>:
 8007034:	4801      	ldr	r0, [pc, #4]	; (800703c <__sfp_lock_release+0x8>)
 8007036:	f7fa bcb6 	b.w	80019a6 <__retarget_lock_release_recursive>
 800703a:	bf00      	nop
 800703c:	20000200 	.word	0x20000200

08007040 <__sinit_lock_acquire>:
 8007040:	4801      	ldr	r0, [pc, #4]	; (8007048 <__sinit_lock_acquire+0x8>)
 8007042:	f7fa bc9c 	b.w	800197e <__retarget_lock_acquire_recursive>
 8007046:	bf00      	nop
 8007048:	200001fc 	.word	0x200001fc

0800704c <__sinit_lock_release>:
 800704c:	4801      	ldr	r0, [pc, #4]	; (8007054 <__sinit_lock_release+0x8>)
 800704e:	f7fa bcaa 	b.w	80019a6 <__retarget_lock_release_recursive>
 8007052:	bf00      	nop
 8007054:	200001fc 	.word	0x200001fc

08007058 <__sinit>:
 8007058:	b510      	push	{r4, lr}
 800705a:	4604      	mov	r4, r0
 800705c:	f7ff fff0 	bl	8007040 <__sinit_lock_acquire>
 8007060:	69a3      	ldr	r3, [r4, #24]
 8007062:	b11b      	cbz	r3, 800706c <__sinit+0x14>
 8007064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007068:	f7ff bff0 	b.w	800704c <__sinit_lock_release>
 800706c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007070:	6523      	str	r3, [r4, #80]	; 0x50
 8007072:	4b13      	ldr	r3, [pc, #76]	; (80070c0 <__sinit+0x68>)
 8007074:	4a13      	ldr	r2, [pc, #76]	; (80070c4 <__sinit+0x6c>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	62a2      	str	r2, [r4, #40]	; 0x28
 800707a:	42a3      	cmp	r3, r4
 800707c:	bf04      	itt	eq
 800707e:	2301      	moveq	r3, #1
 8007080:	61a3      	streq	r3, [r4, #24]
 8007082:	4620      	mov	r0, r4
 8007084:	f000 f820 	bl	80070c8 <__sfp>
 8007088:	6060      	str	r0, [r4, #4]
 800708a:	4620      	mov	r0, r4
 800708c:	f000 f81c 	bl	80070c8 <__sfp>
 8007090:	60a0      	str	r0, [r4, #8]
 8007092:	4620      	mov	r0, r4
 8007094:	f000 f818 	bl	80070c8 <__sfp>
 8007098:	2200      	movs	r2, #0
 800709a:	60e0      	str	r0, [r4, #12]
 800709c:	2104      	movs	r1, #4
 800709e:	6860      	ldr	r0, [r4, #4]
 80070a0:	f7ff ff82 	bl	8006fa8 <std>
 80070a4:	68a0      	ldr	r0, [r4, #8]
 80070a6:	2201      	movs	r2, #1
 80070a8:	2109      	movs	r1, #9
 80070aa:	f7ff ff7d 	bl	8006fa8 <std>
 80070ae:	68e0      	ldr	r0, [r4, #12]
 80070b0:	2202      	movs	r2, #2
 80070b2:	2112      	movs	r1, #18
 80070b4:	f7ff ff78 	bl	8006fa8 <std>
 80070b8:	2301      	movs	r3, #1
 80070ba:	61a3      	str	r3, [r4, #24]
 80070bc:	e7d2      	b.n	8007064 <__sinit+0xc>
 80070be:	bf00      	nop
 80070c0:	08007478 	.word	0x08007478
 80070c4:	08006ff1 	.word	0x08006ff1

080070c8 <__sfp>:
 80070c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ca:	4607      	mov	r7, r0
 80070cc:	f7ff ffac 	bl	8007028 <__sfp_lock_acquire>
 80070d0:	4b1e      	ldr	r3, [pc, #120]	; (800714c <__sfp+0x84>)
 80070d2:	681e      	ldr	r6, [r3, #0]
 80070d4:	69b3      	ldr	r3, [r6, #24]
 80070d6:	b913      	cbnz	r3, 80070de <__sfp+0x16>
 80070d8:	4630      	mov	r0, r6
 80070da:	f7ff ffbd 	bl	8007058 <__sinit>
 80070de:	3648      	adds	r6, #72	; 0x48
 80070e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80070e4:	3b01      	subs	r3, #1
 80070e6:	d503      	bpl.n	80070f0 <__sfp+0x28>
 80070e8:	6833      	ldr	r3, [r6, #0]
 80070ea:	b30b      	cbz	r3, 8007130 <__sfp+0x68>
 80070ec:	6836      	ldr	r6, [r6, #0]
 80070ee:	e7f7      	b.n	80070e0 <__sfp+0x18>
 80070f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80070f4:	b9d5      	cbnz	r5, 800712c <__sfp+0x64>
 80070f6:	4b16      	ldr	r3, [pc, #88]	; (8007150 <__sfp+0x88>)
 80070f8:	60e3      	str	r3, [r4, #12]
 80070fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80070fe:	6665      	str	r5, [r4, #100]	; 0x64
 8007100:	f7fa fc17 	bl	8001932 <__retarget_lock_init_recursive>
 8007104:	f7ff ff96 	bl	8007034 <__sfp_lock_release>
 8007108:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800710c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007110:	6025      	str	r5, [r4, #0]
 8007112:	61a5      	str	r5, [r4, #24]
 8007114:	2208      	movs	r2, #8
 8007116:	4629      	mov	r1, r5
 8007118:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800711c:	f7fd fcc0 	bl	8004aa0 <memset>
 8007120:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007124:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007128:	4620      	mov	r0, r4
 800712a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800712c:	3468      	adds	r4, #104	; 0x68
 800712e:	e7d9      	b.n	80070e4 <__sfp+0x1c>
 8007130:	2104      	movs	r1, #4
 8007132:	4638      	mov	r0, r7
 8007134:	f7ff ff62 	bl	8006ffc <__sfmoreglue>
 8007138:	4604      	mov	r4, r0
 800713a:	6030      	str	r0, [r6, #0]
 800713c:	2800      	cmp	r0, #0
 800713e:	d1d5      	bne.n	80070ec <__sfp+0x24>
 8007140:	f7ff ff78 	bl	8007034 <__sfp_lock_release>
 8007144:	230c      	movs	r3, #12
 8007146:	603b      	str	r3, [r7, #0]
 8007148:	e7ee      	b.n	8007128 <__sfp+0x60>
 800714a:	bf00      	nop
 800714c:	08007478 	.word	0x08007478
 8007150:	ffff0001 	.word	0xffff0001

08007154 <_fwalk_reent>:
 8007154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007158:	4606      	mov	r6, r0
 800715a:	4688      	mov	r8, r1
 800715c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007160:	2700      	movs	r7, #0
 8007162:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007166:	f1b9 0901 	subs.w	r9, r9, #1
 800716a:	d505      	bpl.n	8007178 <_fwalk_reent+0x24>
 800716c:	6824      	ldr	r4, [r4, #0]
 800716e:	2c00      	cmp	r4, #0
 8007170:	d1f7      	bne.n	8007162 <_fwalk_reent+0xe>
 8007172:	4638      	mov	r0, r7
 8007174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007178:	89ab      	ldrh	r3, [r5, #12]
 800717a:	2b01      	cmp	r3, #1
 800717c:	d907      	bls.n	800718e <_fwalk_reent+0x3a>
 800717e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007182:	3301      	adds	r3, #1
 8007184:	d003      	beq.n	800718e <_fwalk_reent+0x3a>
 8007186:	4629      	mov	r1, r5
 8007188:	4630      	mov	r0, r6
 800718a:	47c0      	blx	r8
 800718c:	4307      	orrs	r7, r0
 800718e:	3568      	adds	r5, #104	; 0x68
 8007190:	e7e9      	b.n	8007166 <_fwalk_reent+0x12>

08007192 <__swhatbuf_r>:
 8007192:	b570      	push	{r4, r5, r6, lr}
 8007194:	460e      	mov	r6, r1
 8007196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800719a:	2900      	cmp	r1, #0
 800719c:	b096      	sub	sp, #88	; 0x58
 800719e:	4614      	mov	r4, r2
 80071a0:	461d      	mov	r5, r3
 80071a2:	da07      	bge.n	80071b4 <__swhatbuf_r+0x22>
 80071a4:	2300      	movs	r3, #0
 80071a6:	602b      	str	r3, [r5, #0]
 80071a8:	89b3      	ldrh	r3, [r6, #12]
 80071aa:	061a      	lsls	r2, r3, #24
 80071ac:	d410      	bmi.n	80071d0 <__swhatbuf_r+0x3e>
 80071ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071b2:	e00e      	b.n	80071d2 <__swhatbuf_r+0x40>
 80071b4:	466a      	mov	r2, sp
 80071b6:	f000 f8fb 	bl	80073b0 <_fstat_r>
 80071ba:	2800      	cmp	r0, #0
 80071bc:	dbf2      	blt.n	80071a4 <__swhatbuf_r+0x12>
 80071be:	9a01      	ldr	r2, [sp, #4]
 80071c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80071c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80071c8:	425a      	negs	r2, r3
 80071ca:	415a      	adcs	r2, r3
 80071cc:	602a      	str	r2, [r5, #0]
 80071ce:	e7ee      	b.n	80071ae <__swhatbuf_r+0x1c>
 80071d0:	2340      	movs	r3, #64	; 0x40
 80071d2:	2000      	movs	r0, #0
 80071d4:	6023      	str	r3, [r4, #0]
 80071d6:	b016      	add	sp, #88	; 0x58
 80071d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080071dc <__smakebuf_r>:
 80071dc:	898b      	ldrh	r3, [r1, #12]
 80071de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80071e0:	079d      	lsls	r5, r3, #30
 80071e2:	4606      	mov	r6, r0
 80071e4:	460c      	mov	r4, r1
 80071e6:	d507      	bpl.n	80071f8 <__smakebuf_r+0x1c>
 80071e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80071ec:	6023      	str	r3, [r4, #0]
 80071ee:	6123      	str	r3, [r4, #16]
 80071f0:	2301      	movs	r3, #1
 80071f2:	6163      	str	r3, [r4, #20]
 80071f4:	b002      	add	sp, #8
 80071f6:	bd70      	pop	{r4, r5, r6, pc}
 80071f8:	ab01      	add	r3, sp, #4
 80071fa:	466a      	mov	r2, sp
 80071fc:	f7ff ffc9 	bl	8007192 <__swhatbuf_r>
 8007200:	9900      	ldr	r1, [sp, #0]
 8007202:	4605      	mov	r5, r0
 8007204:	4630      	mov	r0, r6
 8007206:	f7fd fca3 	bl	8004b50 <_malloc_r>
 800720a:	b948      	cbnz	r0, 8007220 <__smakebuf_r+0x44>
 800720c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007210:	059a      	lsls	r2, r3, #22
 8007212:	d4ef      	bmi.n	80071f4 <__smakebuf_r+0x18>
 8007214:	f023 0303 	bic.w	r3, r3, #3
 8007218:	f043 0302 	orr.w	r3, r3, #2
 800721c:	81a3      	strh	r3, [r4, #12]
 800721e:	e7e3      	b.n	80071e8 <__smakebuf_r+0xc>
 8007220:	4b0d      	ldr	r3, [pc, #52]	; (8007258 <__smakebuf_r+0x7c>)
 8007222:	62b3      	str	r3, [r6, #40]	; 0x28
 8007224:	89a3      	ldrh	r3, [r4, #12]
 8007226:	6020      	str	r0, [r4, #0]
 8007228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800722c:	81a3      	strh	r3, [r4, #12]
 800722e:	9b00      	ldr	r3, [sp, #0]
 8007230:	6163      	str	r3, [r4, #20]
 8007232:	9b01      	ldr	r3, [sp, #4]
 8007234:	6120      	str	r0, [r4, #16]
 8007236:	b15b      	cbz	r3, 8007250 <__smakebuf_r+0x74>
 8007238:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800723c:	4630      	mov	r0, r6
 800723e:	f000 f8c9 	bl	80073d4 <_isatty_r>
 8007242:	b128      	cbz	r0, 8007250 <__smakebuf_r+0x74>
 8007244:	89a3      	ldrh	r3, [r4, #12]
 8007246:	f023 0303 	bic.w	r3, r3, #3
 800724a:	f043 0301 	orr.w	r3, r3, #1
 800724e:	81a3      	strh	r3, [r4, #12]
 8007250:	89a0      	ldrh	r0, [r4, #12]
 8007252:	4305      	orrs	r5, r0
 8007254:	81a5      	strh	r5, [r4, #12]
 8007256:	e7cd      	b.n	80071f4 <__smakebuf_r+0x18>
 8007258:	08006ff1 	.word	0x08006ff1

0800725c <_raise_r>:
 800725c:	291f      	cmp	r1, #31
 800725e:	b538      	push	{r3, r4, r5, lr}
 8007260:	4604      	mov	r4, r0
 8007262:	460d      	mov	r5, r1
 8007264:	d904      	bls.n	8007270 <_raise_r+0x14>
 8007266:	2316      	movs	r3, #22
 8007268:	6003      	str	r3, [r0, #0]
 800726a:	f04f 30ff 	mov.w	r0, #4294967295
 800726e:	bd38      	pop	{r3, r4, r5, pc}
 8007270:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007272:	b112      	cbz	r2, 800727a <_raise_r+0x1e>
 8007274:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007278:	b94b      	cbnz	r3, 800728e <_raise_r+0x32>
 800727a:	4620      	mov	r0, r4
 800727c:	f000 f830 	bl	80072e0 <_getpid_r>
 8007280:	462a      	mov	r2, r5
 8007282:	4601      	mov	r1, r0
 8007284:	4620      	mov	r0, r4
 8007286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800728a:	f000 b817 	b.w	80072bc <_kill_r>
 800728e:	2b01      	cmp	r3, #1
 8007290:	d00a      	beq.n	80072a8 <_raise_r+0x4c>
 8007292:	1c59      	adds	r1, r3, #1
 8007294:	d103      	bne.n	800729e <_raise_r+0x42>
 8007296:	2316      	movs	r3, #22
 8007298:	6003      	str	r3, [r0, #0]
 800729a:	2001      	movs	r0, #1
 800729c:	e7e7      	b.n	800726e <_raise_r+0x12>
 800729e:	2400      	movs	r4, #0
 80072a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80072a4:	4628      	mov	r0, r5
 80072a6:	4798      	blx	r3
 80072a8:	2000      	movs	r0, #0
 80072aa:	e7e0      	b.n	800726e <_raise_r+0x12>

080072ac <raise>:
 80072ac:	4b02      	ldr	r3, [pc, #8]	; (80072b8 <raise+0xc>)
 80072ae:	4601      	mov	r1, r0
 80072b0:	6818      	ldr	r0, [r3, #0]
 80072b2:	f7ff bfd3 	b.w	800725c <_raise_r>
 80072b6:	bf00      	nop
 80072b8:	2000000c 	.word	0x2000000c

080072bc <_kill_r>:
 80072bc:	b538      	push	{r3, r4, r5, lr}
 80072be:	4d07      	ldr	r5, [pc, #28]	; (80072dc <_kill_r+0x20>)
 80072c0:	2300      	movs	r3, #0
 80072c2:	4604      	mov	r4, r0
 80072c4:	4608      	mov	r0, r1
 80072c6:	4611      	mov	r1, r2
 80072c8:	602b      	str	r3, [r5, #0]
 80072ca:	f7fa f94f 	bl	800156c <_kill>
 80072ce:	1c43      	adds	r3, r0, #1
 80072d0:	d102      	bne.n	80072d8 <_kill_r+0x1c>
 80072d2:	682b      	ldr	r3, [r5, #0]
 80072d4:	b103      	cbz	r3, 80072d8 <_kill_r+0x1c>
 80072d6:	6023      	str	r3, [r4, #0]
 80072d8:	bd38      	pop	{r3, r4, r5, pc}
 80072da:	bf00      	nop
 80072dc:	20000520 	.word	0x20000520

080072e0 <_getpid_r>:
 80072e0:	f7fa b93c 	b.w	800155c <_getpid>

080072e4 <__sread>:
 80072e4:	b510      	push	{r4, lr}
 80072e6:	460c      	mov	r4, r1
 80072e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072ec:	f000 f894 	bl	8007418 <_read_r>
 80072f0:	2800      	cmp	r0, #0
 80072f2:	bfab      	itete	ge
 80072f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80072f6:	89a3      	ldrhlt	r3, [r4, #12]
 80072f8:	181b      	addge	r3, r3, r0
 80072fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80072fe:	bfac      	ite	ge
 8007300:	6563      	strge	r3, [r4, #84]	; 0x54
 8007302:	81a3      	strhlt	r3, [r4, #12]
 8007304:	bd10      	pop	{r4, pc}

08007306 <__swrite>:
 8007306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800730a:	461f      	mov	r7, r3
 800730c:	898b      	ldrh	r3, [r1, #12]
 800730e:	05db      	lsls	r3, r3, #23
 8007310:	4605      	mov	r5, r0
 8007312:	460c      	mov	r4, r1
 8007314:	4616      	mov	r6, r2
 8007316:	d505      	bpl.n	8007324 <__swrite+0x1e>
 8007318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800731c:	2302      	movs	r3, #2
 800731e:	2200      	movs	r2, #0
 8007320:	f000 f868 	bl	80073f4 <_lseek_r>
 8007324:	89a3      	ldrh	r3, [r4, #12]
 8007326:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800732a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800732e:	81a3      	strh	r3, [r4, #12]
 8007330:	4632      	mov	r2, r6
 8007332:	463b      	mov	r3, r7
 8007334:	4628      	mov	r0, r5
 8007336:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800733a:	f000 b817 	b.w	800736c <_write_r>

0800733e <__sseek>:
 800733e:	b510      	push	{r4, lr}
 8007340:	460c      	mov	r4, r1
 8007342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007346:	f000 f855 	bl	80073f4 <_lseek_r>
 800734a:	1c43      	adds	r3, r0, #1
 800734c:	89a3      	ldrh	r3, [r4, #12]
 800734e:	bf15      	itete	ne
 8007350:	6560      	strne	r0, [r4, #84]	; 0x54
 8007352:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007356:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800735a:	81a3      	strheq	r3, [r4, #12]
 800735c:	bf18      	it	ne
 800735e:	81a3      	strhne	r3, [r4, #12]
 8007360:	bd10      	pop	{r4, pc}

08007362 <__sclose>:
 8007362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007366:	f000 b813 	b.w	8007390 <_close_r>
	...

0800736c <_write_r>:
 800736c:	b538      	push	{r3, r4, r5, lr}
 800736e:	4d07      	ldr	r5, [pc, #28]	; (800738c <_write_r+0x20>)
 8007370:	4604      	mov	r4, r0
 8007372:	4608      	mov	r0, r1
 8007374:	4611      	mov	r1, r2
 8007376:	2200      	movs	r2, #0
 8007378:	602a      	str	r2, [r5, #0]
 800737a:	461a      	mov	r2, r3
 800737c:	f7fa f92d 	bl	80015da <_write>
 8007380:	1c43      	adds	r3, r0, #1
 8007382:	d102      	bne.n	800738a <_write_r+0x1e>
 8007384:	682b      	ldr	r3, [r5, #0]
 8007386:	b103      	cbz	r3, 800738a <_write_r+0x1e>
 8007388:	6023      	str	r3, [r4, #0]
 800738a:	bd38      	pop	{r3, r4, r5, pc}
 800738c:	20000520 	.word	0x20000520

08007390 <_close_r>:
 8007390:	b538      	push	{r3, r4, r5, lr}
 8007392:	4d06      	ldr	r5, [pc, #24]	; (80073ac <_close_r+0x1c>)
 8007394:	2300      	movs	r3, #0
 8007396:	4604      	mov	r4, r0
 8007398:	4608      	mov	r0, r1
 800739a:	602b      	str	r3, [r5, #0]
 800739c:	f7fa f939 	bl	8001612 <_close>
 80073a0:	1c43      	adds	r3, r0, #1
 80073a2:	d102      	bne.n	80073aa <_close_r+0x1a>
 80073a4:	682b      	ldr	r3, [r5, #0]
 80073a6:	b103      	cbz	r3, 80073aa <_close_r+0x1a>
 80073a8:	6023      	str	r3, [r4, #0]
 80073aa:	bd38      	pop	{r3, r4, r5, pc}
 80073ac:	20000520 	.word	0x20000520

080073b0 <_fstat_r>:
 80073b0:	b538      	push	{r3, r4, r5, lr}
 80073b2:	4d07      	ldr	r5, [pc, #28]	; (80073d0 <_fstat_r+0x20>)
 80073b4:	2300      	movs	r3, #0
 80073b6:	4604      	mov	r4, r0
 80073b8:	4608      	mov	r0, r1
 80073ba:	4611      	mov	r1, r2
 80073bc:	602b      	str	r3, [r5, #0]
 80073be:	f7fa f934 	bl	800162a <_fstat>
 80073c2:	1c43      	adds	r3, r0, #1
 80073c4:	d102      	bne.n	80073cc <_fstat_r+0x1c>
 80073c6:	682b      	ldr	r3, [r5, #0]
 80073c8:	b103      	cbz	r3, 80073cc <_fstat_r+0x1c>
 80073ca:	6023      	str	r3, [r4, #0]
 80073cc:	bd38      	pop	{r3, r4, r5, pc}
 80073ce:	bf00      	nop
 80073d0:	20000520 	.word	0x20000520

080073d4 <_isatty_r>:
 80073d4:	b538      	push	{r3, r4, r5, lr}
 80073d6:	4d06      	ldr	r5, [pc, #24]	; (80073f0 <_isatty_r+0x1c>)
 80073d8:	2300      	movs	r3, #0
 80073da:	4604      	mov	r4, r0
 80073dc:	4608      	mov	r0, r1
 80073de:	602b      	str	r3, [r5, #0]
 80073e0:	f7fa f933 	bl	800164a <_isatty>
 80073e4:	1c43      	adds	r3, r0, #1
 80073e6:	d102      	bne.n	80073ee <_isatty_r+0x1a>
 80073e8:	682b      	ldr	r3, [r5, #0]
 80073ea:	b103      	cbz	r3, 80073ee <_isatty_r+0x1a>
 80073ec:	6023      	str	r3, [r4, #0]
 80073ee:	bd38      	pop	{r3, r4, r5, pc}
 80073f0:	20000520 	.word	0x20000520

080073f4 <_lseek_r>:
 80073f4:	b538      	push	{r3, r4, r5, lr}
 80073f6:	4d07      	ldr	r5, [pc, #28]	; (8007414 <_lseek_r+0x20>)
 80073f8:	4604      	mov	r4, r0
 80073fa:	4608      	mov	r0, r1
 80073fc:	4611      	mov	r1, r2
 80073fe:	2200      	movs	r2, #0
 8007400:	602a      	str	r2, [r5, #0]
 8007402:	461a      	mov	r2, r3
 8007404:	f7fa f92c 	bl	8001660 <_lseek>
 8007408:	1c43      	adds	r3, r0, #1
 800740a:	d102      	bne.n	8007412 <_lseek_r+0x1e>
 800740c:	682b      	ldr	r3, [r5, #0]
 800740e:	b103      	cbz	r3, 8007412 <_lseek_r+0x1e>
 8007410:	6023      	str	r3, [r4, #0]
 8007412:	bd38      	pop	{r3, r4, r5, pc}
 8007414:	20000520 	.word	0x20000520

08007418 <_read_r>:
 8007418:	b538      	push	{r3, r4, r5, lr}
 800741a:	4d07      	ldr	r5, [pc, #28]	; (8007438 <_read_r+0x20>)
 800741c:	4604      	mov	r4, r0
 800741e:	4608      	mov	r0, r1
 8007420:	4611      	mov	r1, r2
 8007422:	2200      	movs	r2, #0
 8007424:	602a      	str	r2, [r5, #0]
 8007426:	461a      	mov	r2, r3
 8007428:	f7fa f8ba 	bl	80015a0 <_read>
 800742c:	1c43      	adds	r3, r0, #1
 800742e:	d102      	bne.n	8007436 <_read_r+0x1e>
 8007430:	682b      	ldr	r3, [r5, #0]
 8007432:	b103      	cbz	r3, 8007436 <_read_r+0x1e>
 8007434:	6023      	str	r3, [r4, #0]
 8007436:	bd38      	pop	{r3, r4, r5, pc}
 8007438:	20000520 	.word	0x20000520

0800743c <_init>:
 800743c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800743e:	bf00      	nop
 8007440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007442:	bc08      	pop	{r3}
 8007444:	469e      	mov	lr, r3
 8007446:	4770      	bx	lr

08007448 <_fini>:
 8007448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800744a:	bf00      	nop
 800744c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800744e:	bc08      	pop	{r3}
 8007450:	469e      	mov	lr, r3
 8007452:	4770      	bx	lr
