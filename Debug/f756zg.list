
f756zg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000814c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  08008320  08008320  00018320  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008724  08008724  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008724  08008724  00018724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800872c  0800872c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800872c  0800872c  0001872c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008730  08008730  00018730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  200001dc  08008910  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005bc  08008910  000205bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013808  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e7b  00000000  00000000  00033a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  00036890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed0  00000000  00000000  000378a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028c9e  00000000  00000000  00038778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013cb4  00000000  00000000  00061416  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9e08  00000000  00000000  000750ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016eed2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005104  00000000  00000000  0016ef28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008304 	.word	0x08008304

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08008304 	.word	0x08008304

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ef2:	4b21      	ldr	r3, [pc, #132]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000ef4:	4a21      	ldr	r2, [pc, #132]	; (8000f7c <MX_ADC1_Init+0x9c>)
 8000ef6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ef8:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000efa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000efe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f00:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f06:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f0c:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f12:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f1a:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f20:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f22:	4a17      	ldr	r2, [pc, #92]	; (8000f80 <MX_ADC1_Init+0xa0>)
 8000f24:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f40:	480d      	ldr	r0, [pc, #52]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f42:	f000 fef1 	bl	8001d28 <HAL_ADC_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f4c:	f000 fa98 	bl	8001480 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f54:	2301      	movs	r3, #1
 8000f56:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4805      	ldr	r0, [pc, #20]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f62:	f001 f83d 	bl	8001fe0 <HAL_ADC_ConfigChannel>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f6c:	f000 fa88 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f70:	bf00      	nop
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000210 	.word	0x20000210
 8000f7c:	40012000 	.word	0x40012000
 8000f80:	0f000001 	.word	0x0f000001

08000f84 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a2d      	ldr	r2, [pc, #180]	; (8001058 <HAL_ADC_MspInit+0xd4>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d153      	bne.n	800104e <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fa6:	4b2d      	ldr	r3, [pc, #180]	; (800105c <HAL_ADC_MspInit+0xd8>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	4a2c      	ldr	r2, [pc, #176]	; (800105c <HAL_ADC_MspInit+0xd8>)
 8000fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb2:	4b2a      	ldr	r3, [pc, #168]	; (800105c <HAL_ADC_MspInit+0xd8>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	4b27      	ldr	r3, [pc, #156]	; (800105c <HAL_ADC_MspInit+0xd8>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a26      	ldr	r2, [pc, #152]	; (800105c <HAL_ADC_MspInit+0xd8>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b24      	ldr	r3, [pc, #144]	; (800105c <HAL_ADC_MspInit+0xd8>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	481d      	ldr	r0, [pc, #116]	; (8001060 <HAL_ADC_MspInit+0xdc>)
 8000fea:	f001 ff49 	bl	8002e80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000fee:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8000ff0:	4a1d      	ldr	r2, [pc, #116]	; (8001068 <HAL_ADC_MspInit+0xe4>)
 8000ff2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ffa:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001000:	4b18      	ldr	r3, [pc, #96]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001006:	4b17      	ldr	r3, [pc, #92]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8001008:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800100c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8001010:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001014:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001016:	4b13      	ldr	r3, [pc, #76]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8001018:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800101c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8001020:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001024:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8001028:	2200      	movs	r2, #0
 800102a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800102c:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 800102e:	2200      	movs	r2, #0
 8001030:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001032:	480c      	ldr	r0, [pc, #48]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8001034:	f001 fbac 	bl	8002790 <HAL_DMA_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 800103e:	f000 fa1f 	bl	8001480 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a07      	ldr	r2, [pc, #28]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8001046:	639a      	str	r2, [r3, #56]	; 0x38
 8001048:	4a06      	ldr	r2, [pc, #24]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800104e:	bf00      	nop
 8001050:	3728      	adds	r7, #40	; 0x28
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40012000 	.word	0x40012000
 800105c:	40023800 	.word	0x40023800
 8001060:	40020000 	.word	0x40020000
 8001064:	20000258 	.word	0x20000258
 8001068:	40026410 	.word	0x40026410

0800106c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001072:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <MX_DMA_Init+0x38>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a0b      	ldr	r2, [pc, #44]	; (80010a4 <MX_DMA_Init+0x38>)
 8001078:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MX_DMA_Init+0x38>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2100      	movs	r1, #0
 800108e:	2038      	movs	r0, #56	; 0x38
 8001090:	f001 fb47 	bl	8002722 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001094:	2038      	movs	r0, #56	; 0x38
 8001096:	f001 fb60 	bl	800275a <HAL_NVIC_EnableIRQ>

}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800

080010a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010be:	4b2a      	ldr	r3, [pc, #168]	; (8001168 <MX_GPIO_Init+0xc0>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a29      	ldr	r2, [pc, #164]	; (8001168 <MX_GPIO_Init+0xc0>)
 80010c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b27      	ldr	r3, [pc, #156]	; (8001168 <MX_GPIO_Init+0xc0>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	4b24      	ldr	r3, [pc, #144]	; (8001168 <MX_GPIO_Init+0xc0>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a23      	ldr	r2, [pc, #140]	; (8001168 <MX_GPIO_Init+0xc0>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b21      	ldr	r3, [pc, #132]	; (8001168 <MX_GPIO_Init+0xc0>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ee:	4b1e      	ldr	r3, [pc, #120]	; (8001168 <MX_GPIO_Init+0xc0>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a1d      	ldr	r2, [pc, #116]	; (8001168 <MX_GPIO_Init+0xc0>)
 80010f4:	f043 0302 	orr.w	r3, r3, #2
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <MX_GPIO_Init+0xc0>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001106:	4b18      	ldr	r3, [pc, #96]	; (8001168 <MX_GPIO_Init+0xc0>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a17      	ldr	r2, [pc, #92]	; (8001168 <MX_GPIO_Init+0xc0>)
 800110c:	f043 0308 	orr.w	r3, r3, #8
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <MX_GPIO_Init+0xc0>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0308 	and.w	r3, r3, #8
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	21f0      	movs	r1, #240	; 0xf0
 8001122:	4812      	ldr	r0, [pc, #72]	; (800116c <MX_GPIO_Init+0xc4>)
 8001124:	f002 f870 	bl	8003208 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001128:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800112c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112e:	2300      	movs	r3, #0
 8001130:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001132:	2302      	movs	r3, #2
 8001134:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	480c      	ldr	r0, [pc, #48]	; (8001170 <MX_GPIO_Init+0xc8>)
 800113e:	f001 fe9f 	bl	8002e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001142:	23f0      	movs	r3, #240	; 0xf0
 8001144:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001146:	2301      	movs	r3, #1
 8001148:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4619      	mov	r1, r3
 8001158:	4804      	ldr	r0, [pc, #16]	; (800116c <MX_GPIO_Init+0xc4>)
 800115a:	f001 fe91 	bl	8002e80 <HAL_GPIO_Init>

}
 800115e:	bf00      	nop
 8001160:	3728      	adds	r7, #40	; 0x28
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40023800 	.word	0x40023800
 800116c:	40020400 	.word	0x40020400
 8001170:	40020c00 	.word	0x40020c00

08001174 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800117c:	1d39      	adds	r1, r7, #4
 800117e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001182:	2201      	movs	r2, #1
 8001184:	4803      	ldr	r0, [pc, #12]	; (8001194 <__io_putchar+0x20>)
 8001186:	f003 ff75 	bl	8005074 <HAL_UART_Transmit>
  return ch;
 800118a:	687b      	ldr	r3, [r7, #4]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000530 	.word	0x20000530

08001198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800119c:	f000 fd67 	bl	8001c6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a0:	f000 f8de 	bl	8001360 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a4:	f7ff ff80 	bl	80010a8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80011a8:	f000 fc00 	bl	80019ac <MX_USART1_UART_Init>
  MX_DMA_Init();
 80011ac:	f7ff ff5e 	bl	800106c <MX_DMA_Init>
  MX_ADC1_Init();
 80011b0:	f7ff fe96 	bl	8000ee0 <MX_ADC1_Init>
  MX_TIM3_Init();
 80011b4:	f000 fa9a 	bl	80016ec <MX_TIM3_Init>
  MX_TIM4_Init();
 80011b8:	f000 fb00 	bl	80017bc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)&ADC_Value, 100);
 80011bc:	2264      	movs	r2, #100	; 0x64
 80011be:	4961      	ldr	r1, [pc, #388]	; (8001344 <main+0x1ac>)
 80011c0:	4861      	ldr	r0, [pc, #388]	; (8001348 <main+0x1b0>)
 80011c2:	f000 fdf5 	bl	8001db0 <HAL_ADC_Start_DMA>
  //  HAL_ADC_PollForConversion(&hadc1, 10);


  //  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
  //  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); //A03  底盘车电�???  �???个触�???
 80011c6:	2108      	movs	r1, #8
 80011c8:	4860      	ldr	r0, [pc, #384]	; (800134c <main+0x1b4>)
 80011ca:	f003 f949 	bl	8004460 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1000);
 80011ce:	4b5f      	ldr	r3, [pc, #380]	; (800134c <main+0x1b4>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011d6:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); //A04 底盘车电�??? 另一个触�???
 80011d8:	210c      	movs	r1, #12
 80011da:	485c      	ldr	r0, [pc, #368]	; (800134c <main+0x1b4>)
 80011dc:	f003 f940 	bl	8004460 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 80011e0:	4b5a      	ldr	r3, [pc, #360]	; (800134c <main+0x1b4>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2200      	movs	r2, #0
 80011e6:	641a      	str	r2, [r3, #64]	; 0x40
  //  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
  //  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); //A05 接地�???电机 �???个触�???
 80011e8:	2108      	movs	r1, #8
 80011ea:	4859      	ldr	r0, [pc, #356]	; (8001350 <main+0x1b8>)
 80011ec:	f003 f938 	bl	8004460 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 500);
 80011f0:	4b57      	ldr	r3, [pc, #348]	; (8001350 <main+0x1b8>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80011f8:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //A06 接地�???电机 另一个触�???
 80011fa:	210c      	movs	r1, #12
 80011fc:	4854      	ldr	r0, [pc, #336]	; (8001350 <main+0x1b8>)
 80011fe:	f003 f92f 	bl	8004460 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 8001202:	4b53      	ldr	r3, [pc, #332]	; (8001350 <main+0x1b8>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2200      	movs	r2, #0
 8001208:	641a      	str	r2, [r3, #64]	; 0x40
  

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); //A07 储能电机
 800120a:	2200      	movs	r2, #0
 800120c:	2110      	movs	r1, #16
 800120e:	4851      	ldr	r0, [pc, #324]	; (8001354 <main+0x1bc>)
 8001210:	f001 fffa 	bl	8003208 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); //A09 分闸线圈
 8001214:	2200      	movs	r2, #0
 8001216:	2120      	movs	r1, #32
 8001218:	484e      	ldr	r0, [pc, #312]	; (8001354 <main+0x1bc>)
 800121a:	f001 fff5 	bl	8003208 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); //A10 合闸线圈
 800121e:	2200      	movs	r2, #0
 8001220:	2140      	movs	r1, #64	; 0x40
 8001222:	484c      	ldr	r0, [pc, #304]	; (8001354 <main+0x1bc>)
 8001224:	f001 fff0 	bl	8003208 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); //A11 继电器合�???
 8001228:	2200      	movs	r2, #0
 800122a:	2180      	movs	r1, #128	; 0x80
 800122c:	4849      	ldr	r0, [pc, #292]	; (8001354 <main+0x1bc>)
 800122e:	f001 ffeb 	bl	8003208 <HAL_GPIO_WritePin>
  pdx[0] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0);         //A08 储能电机辅助�???�???  �???要和 弹簧未储能按�??? 配合
 8001232:	2101      	movs	r1, #1
 8001234:	4848      	ldr	r0, [pc, #288]	; (8001358 <main+0x1c0>)
 8001236:	f001 ffcf 	bl	80031d8 <HAL_GPIO_ReadPin>
 800123a:	4603      	mov	r3, r0
 800123c:	461a      	mov	r2, r3
 800123e:	4b47      	ldr	r3, [pc, #284]	; (800135c <main+0x1c4>)
 8001240:	601a      	str	r2, [r3, #0]
  pdx[1] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);         //A12 手动分闸按钮  A21 遥控分闸出口
 8001242:	2102      	movs	r1, #2
 8001244:	4844      	ldr	r0, [pc, #272]	; (8001358 <main+0x1c0>)
 8001246:	f001 ffc7 	bl	80031d8 <HAL_GPIO_ReadPin>
 800124a:	4603      	mov	r3, r0
 800124c:	461a      	mov	r2, r3
 800124e:	4b43      	ldr	r3, [pc, #268]	; (800135c <main+0x1c4>)
 8001250:	605a      	str	r2, [r3, #4]
  pdx[2] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2);         //A13 保护分闸按钮
 8001252:	2104      	movs	r1, #4
 8001254:	4840      	ldr	r0, [pc, #256]	; (8001358 <main+0x1c0>)
 8001256:	f001 ffbf 	bl	80031d8 <HAL_GPIO_ReadPin>
 800125a:	4603      	mov	r3, r0
 800125c:	461a      	mov	r2, r3
 800125e:	4b3f      	ldr	r3, [pc, #252]	; (800135c <main+0x1c4>)
 8001260:	609a      	str	r2, [r3, #8]
  pdx[3] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3);         //A14合闸按钮
 8001262:	2108      	movs	r1, #8
 8001264:	483c      	ldr	r0, [pc, #240]	; (8001358 <main+0x1c0>)
 8001266:	f001 ffb7 	bl	80031d8 <HAL_GPIO_ReadPin>
 800126a:	4603      	mov	r3, r0
 800126c:	461a      	mov	r2, r3
 800126e:	4b3b      	ldr	r3, [pc, #236]	; (800135c <main+0x1c4>)
 8001270:	60da      	str	r2, [r3, #12]
  pdx[4] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4);         //A23底盘车试验位�???
 8001272:	2110      	movs	r1, #16
 8001274:	4838      	ldr	r0, [pc, #224]	; (8001358 <main+0x1c0>)
 8001276:	f001 ffaf 	bl	80031d8 <HAL_GPIO_ReadPin>
 800127a:	4603      	mov	r3, r0
 800127c:	461a      	mov	r2, r3
 800127e:	4b37      	ldr	r3, [pc, #220]	; (800135c <main+0x1c4>)
 8001280:	611a      	str	r2, [r3, #16]
  pdx[5] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5);         //A24底盘车工作位�???
 8001282:	2120      	movs	r1, #32
 8001284:	4834      	ldr	r0, [pc, #208]	; (8001358 <main+0x1c0>)
 8001286:	f001 ffa7 	bl	80031d8 <HAL_GPIO_ReadPin>
 800128a:	4603      	mov	r3, r0
 800128c:	461a      	mov	r2, r3
 800128e:	4b33      	ldr	r3, [pc, #204]	; (800135c <main+0x1c4>)
 8001290:	615a      	str	r2, [r3, #20]
  pdx[6] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6);         //A25底盘车遥进按钮手�???
 8001292:	2140      	movs	r1, #64	; 0x40
 8001294:	4830      	ldr	r0, [pc, #192]	; (8001358 <main+0x1c0>)
 8001296:	f001 ff9f 	bl	80031d8 <HAL_GPIO_ReadPin>
 800129a:	4603      	mov	r3, r0
 800129c:	461a      	mov	r2, r3
 800129e:	4b2f      	ldr	r3, [pc, #188]	; (800135c <main+0x1c4>)
 80012a0:	619a      	str	r2, [r3, #24]
  pdx[7] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7);         //A26底盘车遥出按钮手�???
 80012a2:	2180      	movs	r1, #128	; 0x80
 80012a4:	482c      	ldr	r0, [pc, #176]	; (8001358 <main+0x1c0>)
 80012a6:	f001 ff97 	bl	80031d8 <HAL_GPIO_ReadPin>
 80012aa:	4603      	mov	r3, r0
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b2b      	ldr	r3, [pc, #172]	; (800135c <main+0x1c4>)
 80012b0:	61da      	str	r2, [r3, #28]
  pdx[8] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);         //A27弹簧未储能按�???
 80012b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012b6:	4828      	ldr	r0, [pc, #160]	; (8001358 <main+0x1c0>)
 80012b8:	f001 ff8e 	bl	80031d8 <HAL_GPIO_ReadPin>
 80012bc:	4603      	mov	r3, r0
 80012be:	461a      	mov	r2, r3
 80012c0:	4b26      	ldr	r3, [pc, #152]	; (800135c <main+0x1c4>)
 80012c2:	621a      	str	r2, [r3, #32]
  pdx[9] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9);         //A29遥控允许按钮
 80012c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012c8:	4823      	ldr	r0, [pc, #140]	; (8001358 <main+0x1c0>)
 80012ca:	f001 ff85 	bl	80031d8 <HAL_GPIO_ReadPin>
 80012ce:	4603      	mov	r3, r0
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b22      	ldr	r3, [pc, #136]	; (800135c <main+0x1c4>)
 80012d4:	625a      	str	r2, [r3, #36]	; 0x24
  pdx[10] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10);       //A30接地�???合闸输入
 80012d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012da:	481f      	ldr	r0, [pc, #124]	; (8001358 <main+0x1c0>)
 80012dc:	f001 ff7c 	bl	80031d8 <HAL_GPIO_ReadPin>
 80012e0:	4603      	mov	r3, r0
 80012e2:	461a      	mov	r2, r3
 80012e4:	4b1d      	ldr	r3, [pc, #116]	; (800135c <main+0x1c4>)
 80012e6:	629a      	str	r2, [r3, #40]	; 0x28
  pdx[11] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11);       //A31接地�???分闸输入
 80012e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012ec:	481a      	ldr	r0, [pc, #104]	; (8001358 <main+0x1c0>)
 80012ee:	f001 ff73 	bl	80031d8 <HAL_GPIO_ReadPin>
 80012f2:	4603      	mov	r3, r0
 80012f4:	461a      	mov	r2, r3
 80012f6:	4b19      	ldr	r3, [pc, #100]	; (800135c <main+0x1c4>)
 80012f8:	62da      	str	r2, [r3, #44]	; 0x2c
  pdx[12] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12);       //A32接地�???机构合闸位置（信号快�???
 80012fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012fe:	4816      	ldr	r0, [pc, #88]	; (8001358 <main+0x1c0>)
 8001300:	f001 ff6a 	bl	80031d8 <HAL_GPIO_ReadPin>
 8001304:	4603      	mov	r3, r0
 8001306:	461a      	mov	r2, r3
 8001308:	4b14      	ldr	r3, [pc, #80]	; (800135c <main+0x1c4>)
 800130a:	631a      	str	r2, [r3, #48]	; 0x30
  pdx[13] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13);       //A33接地�???机构分闸位置（信号快�???
 800130c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001310:	4811      	ldr	r0, [pc, #68]	; (8001358 <main+0x1c0>)
 8001312:	f001 ff61 	bl	80031d8 <HAL_GPIO_ReadPin>
 8001316:	4603      	mov	r3, r0
 8001318:	461a      	mov	r2, r3
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <main+0x1c4>)
 800131c:	635a      	str	r2, [r3, #52]	; 0x34
  pdx[14] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14);       //A34接地�???合闸位置   �???要和A32 配合
 800131e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001322:	480d      	ldr	r0, [pc, #52]	; (8001358 <main+0x1c0>)
 8001324:	f001 ff58 	bl	80031d8 <HAL_GPIO_ReadPin>
 8001328:	4603      	mov	r3, r0
 800132a:	461a      	mov	r2, r3
 800132c:	4b0b      	ldr	r3, [pc, #44]	; (800135c <main+0x1c4>)
 800132e:	639a      	str	r2, [r3, #56]	; 0x38
  pdx[15] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15);       //A35接地�???分闸位置
 8001330:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001334:	4808      	ldr	r0, [pc, #32]	; (8001358 <main+0x1c0>)
 8001336:	f001 ff4f 	bl	80031d8 <HAL_GPIO_ReadPin>
 800133a:	4603      	mov	r3, r0
 800133c:	461a      	mov	r2, r3
 800133e:	4b07      	ldr	r3, [pc, #28]	; (800135c <main+0x1c4>)
 8001340:	63da      	str	r2, [r3, #60]	; 0x3c

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001342:	e7fe      	b.n	8001342 <main+0x1aa>
 8001344:	200002bc 	.word	0x200002bc
 8001348:	20000210 	.word	0x20000210
 800134c:	200004e4 	.word	0x200004e4
 8001350:	20000498 	.word	0x20000498
 8001354:	40020400 	.word	0x40020400
 8001358:	40020c00 	.word	0x40020c00
 800135c:	20000458 	.word	0x20000458

08001360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b0b4      	sub	sp, #208	; 0xd0
 8001364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001366:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800136a:	2230      	movs	r2, #48	; 0x30
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f004 fafa 	bl	8005968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001374:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001384:	f107 0308 	add.w	r3, r7, #8
 8001388:	2284      	movs	r2, #132	; 0x84
 800138a:	2100      	movs	r1, #0
 800138c:	4618      	mov	r0, r3
 800138e:	f004 faeb 	bl	8005968 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001392:	4b39      	ldr	r3, [pc, #228]	; (8001478 <SystemClock_Config+0x118>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	4a38      	ldr	r2, [pc, #224]	; (8001478 <SystemClock_Config+0x118>)
 8001398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800139c:	6413      	str	r3, [r2, #64]	; 0x40
 800139e:	4b36      	ldr	r3, [pc, #216]	; (8001478 <SystemClock_Config+0x118>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013aa:	4b34      	ldr	r3, [pc, #208]	; (800147c <SystemClock_Config+0x11c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a33      	ldr	r2, [pc, #204]	; (800147c <SystemClock_Config+0x11c>)
 80013b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013b4:	6013      	str	r3, [r2, #0]
 80013b6:	4b31      	ldr	r3, [pc, #196]	; (800147c <SystemClock_Config+0x11c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013c2:	2302      	movs	r3, #2
 80013c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013c8:	2301      	movs	r3, #1
 80013ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ce:	2310      	movs	r3, #16
 80013d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d4:	2302      	movs	r3, #2
 80013d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013da:	2300      	movs	r3, #0
 80013dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013e0:	2308      	movs	r3, #8
 80013e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 80013e6:	23d8      	movs	r3, #216	; 0xd8
 80013e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013ec:	2302      	movs	r3, #2
 80013ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013f2:	2302      	movs	r3, #2
 80013f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f001 ff6d 	bl	80032dc <HAL_RCC_OscConfig>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001408:	f000 f83a 	bl	8001480 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800140c:	f001 ff16 	bl	800323c <HAL_PWREx_EnableOverDrive>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001416:	f000 f833 	bl	8001480 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800141a:	230f      	movs	r3, #15
 800141c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001420:	2302      	movs	r3, #2
 8001422:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001426:	2300      	movs	r3, #0
 8001428:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800142c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001430:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001434:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001438:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800143c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001440:	2107      	movs	r1, #7
 8001442:	4618      	mov	r0, r3
 8001444:	f002 f9ee 	bl	8003824 <HAL_RCC_ClockConfig>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800144e:	f000 f817 	bl	8001480 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001452:	2340      	movs	r3, #64	; 0x40
 8001454:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001456:	2300      	movs	r3, #0
 8001458:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800145a:	f107 0308 	add.w	r3, r7, #8
 800145e:	4618      	mov	r0, r3
 8001460:	f002 fbb6 	bl	8003bd0 <HAL_RCCEx_PeriphCLKConfig>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <SystemClock_Config+0x10e>
  {
    Error_Handler();
 800146a:	f000 f809 	bl	8001480 <Error_Handler>
  }
}
 800146e:	bf00      	nop
 8001470:	37d0      	adds	r7, #208	; 0xd0
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800
 800147c:	40007000 	.word	0x40007000

08001480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001484:	b672      	cpsid	i
}
 8001486:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001488:	e7fe      	b.n	8001488 <Error_Handler+0x8>
	...

0800148c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001492:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <HAL_MspInit+0x44>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	4a0e      	ldr	r2, [pc, #56]	; (80014d0 <HAL_MspInit+0x44>)
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149c:	6413      	str	r3, [r2, #64]	; 0x40
 800149e:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <HAL_MspInit+0x44>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014aa:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <HAL_MspInit+0x44>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ae:	4a08      	ldr	r2, [pc, #32]	; (80014d0 <HAL_MspInit+0x44>)
 80014b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b4:	6453      	str	r3, [r2, #68]	; 0x44
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_MspInit+0x44>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800

080014d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <NMI_Handler+0x4>

080014da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014de:	e7fe      	b.n	80014de <HardFault_Handler+0x4>

080014e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <MemManage_Handler+0x4>

080014e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ea:	e7fe      	b.n	80014ea <BusFault_Handler+0x4>

080014ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <UsageFault_Handler+0x4>

080014f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001520:	f000 fbe2 	bl	8001ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}

08001528 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800152c:	4802      	ldr	r0, [pc, #8]	; (8001538 <DMA2_Stream0_IRQHandler+0x10>)
 800152e:	f001 fa3d 	bl	80029ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000258 	.word	0x20000258

0800153c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
	return 1;
 8001540:	2301      	movs	r3, #1
}
 8001542:	4618      	mov	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <_kill>:

int _kill(int pid, int sig)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001556:	f004 f9d5 	bl	8005904 <__errno>
 800155a:	4603      	mov	r3, r0
 800155c:	2216      	movs	r2, #22
 800155e:	601a      	str	r2, [r3, #0]
	return -1;
 8001560:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <_exit>:

void _exit (int status)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001574:	f04f 31ff 	mov.w	r1, #4294967295
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ffe7 	bl	800154c <_kill>
	while (1) {}		/* Make sure we hang here */
 800157e:	e7fe      	b.n	800157e <_exit+0x12>

08001580 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
 8001590:	e00a      	b.n	80015a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001592:	f3af 8000 	nop.w
 8001596:	4601      	mov	r1, r0
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	1c5a      	adds	r2, r3, #1
 800159c:	60ba      	str	r2, [r7, #8]
 800159e:	b2ca      	uxtb	r2, r1
 80015a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	3301      	adds	r3, #1
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	dbf0      	blt.n	8001592 <_read+0x12>
	}

return len;
 80015b0:	687b      	ldr	r3, [r7, #4]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b086      	sub	sp, #24
 80015be:	af00      	add	r7, sp, #0
 80015c0:	60f8      	str	r0, [r7, #12]
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	e009      	b.n	80015e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	1c5a      	adds	r2, r3, #1
 80015d0:	60ba      	str	r2, [r7, #8]
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fdcd 	bl	8001174 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	3301      	adds	r3, #1
 80015de:	617b      	str	r3, [r7, #20]
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	dbf1      	blt.n	80015cc <_write+0x12>
	}
	return len;
 80015e8:	687b      	ldr	r3, [r7, #4]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <_close>:

int _close(int file)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b083      	sub	sp, #12
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
	return -1;
 80015fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800161a:	605a      	str	r2, [r3, #4]
	return 0;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <_isatty>:

int _isatty(int file)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
	return 1;
 8001632:	2301      	movs	r3, #1
}
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
	return 0;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001664:	4a14      	ldr	r2, [pc, #80]	; (80016b8 <_sbrk+0x5c>)
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <_sbrk+0x60>)
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001670:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <_sbrk+0x64>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d102      	bne.n	800167e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001678:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <_sbrk+0x64>)
 800167a:	4a12      	ldr	r2, [pc, #72]	; (80016c4 <_sbrk+0x68>)
 800167c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800167e:	4b10      	ldr	r3, [pc, #64]	; (80016c0 <_sbrk+0x64>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	429a      	cmp	r2, r3
 800168a:	d207      	bcs.n	800169c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800168c:	f004 f93a 	bl	8005904 <__errno>
 8001690:	4603      	mov	r3, r0
 8001692:	220c      	movs	r2, #12
 8001694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001696:	f04f 33ff 	mov.w	r3, #4294967295
 800169a:	e009      	b.n	80016b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800169c:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <_sbrk+0x64>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016a2:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <_sbrk+0x64>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	4a05      	ldr	r2, [pc, #20]	; (80016c0 <_sbrk+0x64>)
 80016ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ae:	68fb      	ldr	r3, [r7, #12]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20050000 	.word	0x20050000
 80016bc:	00000400 	.word	0x00000400
 80016c0:	200001f8 	.word	0x200001f8
 80016c4:	200005c0 	.word	0x200005c0

080016c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <SystemInit+0x20>)
 80016ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016d2:	4a05      	ldr	r2, [pc, #20]	; (80016e8 <SystemInit+0x20>)
 80016d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08a      	sub	sp, #40	; 0x28
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f2:	f107 031c 	add.w	r3, r7, #28
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016fe:	463b      	mov	r3, r7
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
 800170c:	615a      	str	r2, [r3, #20]
 800170e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001710:	4b28      	ldr	r3, [pc, #160]	; (80017b4 <MX_TIM3_Init+0xc8>)
 8001712:	4a29      	ldr	r2, [pc, #164]	; (80017b8 <MX_TIM3_Init+0xcc>)
 8001714:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 215;
 8001716:	4b27      	ldr	r3, [pc, #156]	; (80017b4 <MX_TIM3_Init+0xc8>)
 8001718:	22d7      	movs	r2, #215	; 0xd7
 800171a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171c:	4b25      	ldr	r3, [pc, #148]	; (80017b4 <MX_TIM3_Init+0xc8>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001722:	4b24      	ldr	r3, [pc, #144]	; (80017b4 <MX_TIM3_Init+0xc8>)
 8001724:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001728:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800172a:	4b22      	ldr	r3, [pc, #136]	; (80017b4 <MX_TIM3_Init+0xc8>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001730:	4b20      	ldr	r3, [pc, #128]	; (80017b4 <MX_TIM3_Init+0xc8>)
 8001732:	2200      	movs	r2, #0
 8001734:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001736:	481f      	ldr	r0, [pc, #124]	; (80017b4 <MX_TIM3_Init+0xc8>)
 8001738:	f002 fe3a 	bl	80043b0 <HAL_TIM_PWM_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001742:	f7ff fe9d 	bl	8001480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800174a:	2300      	movs	r3, #0
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800174e:	f107 031c 	add.w	r3, r7, #28
 8001752:	4619      	mov	r1, r3
 8001754:	4817      	ldr	r0, [pc, #92]	; (80017b4 <MX_TIM3_Init+0xc8>)
 8001756:	f003 fbb1 	bl	8004ebc <HAL_TIMEx_MasterConfigSynchronization>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001760:	f7ff fe8e 	bl	8001480 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001764:	2360      	movs	r3, #96	; 0x60
 8001766:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8001768:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800176c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800176e:	2300      	movs	r3, #0
 8001770:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001776:	463b      	mov	r3, r7
 8001778:	2208      	movs	r2, #8
 800177a:	4619      	mov	r1, r3
 800177c:	480d      	ldr	r0, [pc, #52]	; (80017b4 <MX_TIM3_Init+0xc8>)
 800177e:	f002 ff69 	bl	8004654 <HAL_TIM_PWM_ConfigChannel>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001788:	f7ff fe7a 	bl	8001480 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001790:	463b      	mov	r3, r7
 8001792:	220c      	movs	r2, #12
 8001794:	4619      	mov	r1, r3
 8001796:	4807      	ldr	r0, [pc, #28]	; (80017b4 <MX_TIM3_Init+0xc8>)
 8001798:	f002 ff5c 	bl	8004654 <HAL_TIM_PWM_ConfigChannel>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80017a2:	f7ff fe6d 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017a6:	4803      	ldr	r0, [pc, #12]	; (80017b4 <MX_TIM3_Init+0xc8>)
 80017a8:	f000 f8a4 	bl	80018f4 <HAL_TIM_MspPostInit>

}
 80017ac:	bf00      	nop
 80017ae:	3728      	adds	r7, #40	; 0x28
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	200004e4 	.word	0x200004e4
 80017b8:	40000400 	.word	0x40000400

080017bc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b08a      	sub	sp, #40	; 0x28
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c2:	f107 031c 	add.w	r3, r7, #28
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ce:	463b      	mov	r3, r7
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
 80017dc:	615a      	str	r2, [r3, #20]
 80017de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017e0:	4b28      	ldr	r3, [pc, #160]	; (8001884 <MX_TIM4_Init+0xc8>)
 80017e2:	4a29      	ldr	r2, [pc, #164]	; (8001888 <MX_TIM4_Init+0xcc>)
 80017e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 215;
 80017e6:	4b27      	ldr	r3, [pc, #156]	; (8001884 <MX_TIM4_Init+0xc8>)
 80017e8:	22d7      	movs	r2, #215	; 0xd7
 80017ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ec:	4b25      	ldr	r3, [pc, #148]	; (8001884 <MX_TIM4_Init+0xc8>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80017f2:	4b24      	ldr	r3, [pc, #144]	; (8001884 <MX_TIM4_Init+0xc8>)
 80017f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017fa:	4b22      	ldr	r3, [pc, #136]	; (8001884 <MX_TIM4_Init+0xc8>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001800:	4b20      	ldr	r3, [pc, #128]	; (8001884 <MX_TIM4_Init+0xc8>)
 8001802:	2200      	movs	r2, #0
 8001804:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001806:	481f      	ldr	r0, [pc, #124]	; (8001884 <MX_TIM4_Init+0xc8>)
 8001808:	f002 fdd2 	bl	80043b0 <HAL_TIM_PWM_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001812:	f7ff fe35 	bl	8001480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181a:	2300      	movs	r3, #0
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800181e:	f107 031c 	add.w	r3, r7, #28
 8001822:	4619      	mov	r1, r3
 8001824:	4817      	ldr	r0, [pc, #92]	; (8001884 <MX_TIM4_Init+0xc8>)
 8001826:	f003 fb49 	bl	8004ebc <HAL_TIMEx_MasterConfigSynchronization>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001830:	f7ff fe26 	bl	8001480 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001834:	2360      	movs	r3, #96	; 0x60
 8001836:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8001838:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800183c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800183e:	2300      	movs	r3, #0
 8001840:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001846:	463b      	mov	r3, r7
 8001848:	2208      	movs	r2, #8
 800184a:	4619      	mov	r1, r3
 800184c:	480d      	ldr	r0, [pc, #52]	; (8001884 <MX_TIM4_Init+0xc8>)
 800184e:	f002 ff01 	bl	8004654 <HAL_TIM_PWM_ConfigChannel>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8001858:	f7ff fe12 	bl	8001480 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001860:	463b      	mov	r3, r7
 8001862:	220c      	movs	r2, #12
 8001864:	4619      	mov	r1, r3
 8001866:	4807      	ldr	r0, [pc, #28]	; (8001884 <MX_TIM4_Init+0xc8>)
 8001868:	f002 fef4 	bl	8004654 <HAL_TIM_PWM_ConfigChannel>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_TIM4_Init+0xba>
  {
    Error_Handler();
 8001872:	f7ff fe05 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001876:	4803      	ldr	r0, [pc, #12]	; (8001884 <MX_TIM4_Init+0xc8>)
 8001878:	f000 f83c 	bl	80018f4 <HAL_TIM_MspPostInit>

}
 800187c:	bf00      	nop
 800187e:	3728      	adds	r7, #40	; 0x28
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000498 	.word	0x20000498
 8001888:	40000800 	.word	0x40000800

0800188c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a13      	ldr	r2, [pc, #76]	; (80018e8 <HAL_TIM_PWM_MspInit+0x5c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d10c      	bne.n	80018b8 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800189e:	4b13      	ldr	r3, [pc, #76]	; (80018ec <HAL_TIM_PWM_MspInit+0x60>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	4a12      	ldr	r2, [pc, #72]	; (80018ec <HAL_TIM_PWM_MspInit+0x60>)
 80018a4:	f043 0302 	orr.w	r3, r3, #2
 80018a8:	6413      	str	r3, [r2, #64]	; 0x40
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <HAL_TIM_PWM_MspInit+0x60>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80018b6:	e010      	b.n	80018da <HAL_TIM_PWM_MspInit+0x4e>
  else if(tim_pwmHandle->Instance==TIM4)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a0c      	ldr	r2, [pc, #48]	; (80018f0 <HAL_TIM_PWM_MspInit+0x64>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d10b      	bne.n	80018da <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018c2:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <HAL_TIM_PWM_MspInit+0x60>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	4a09      	ldr	r2, [pc, #36]	; (80018ec <HAL_TIM_PWM_MspInit+0x60>)
 80018c8:	f043 0304 	orr.w	r3, r3, #4
 80018cc:	6413      	str	r3, [r2, #64]	; 0x40
 80018ce:	4b07      	ldr	r3, [pc, #28]	; (80018ec <HAL_TIM_PWM_MspInit+0x60>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	f003 0304 	and.w	r3, r3, #4
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	68bb      	ldr	r3, [r7, #8]
}
 80018da:	bf00      	nop
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	40000400 	.word	0x40000400
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40000800 	.word	0x40000800

080018f4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08a      	sub	sp, #40	; 0x28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a22      	ldr	r2, [pc, #136]	; (800199c <HAL_TIM_MspPostInit+0xa8>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d11c      	bne.n	8001950 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001916:	4b22      	ldr	r3, [pc, #136]	; (80019a0 <HAL_TIM_MspPostInit+0xac>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a21      	ldr	r2, [pc, #132]	; (80019a0 <HAL_TIM_MspPostInit+0xac>)
 800191c:	f043 0302 	orr.w	r3, r3, #2
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b1f      	ldr	r3, [pc, #124]	; (80019a0 <HAL_TIM_MspPostInit+0xac>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800192e:	2303      	movs	r3, #3
 8001930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2300      	movs	r3, #0
 800193c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800193e:	2302      	movs	r3, #2
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4619      	mov	r1, r3
 8001948:	4816      	ldr	r0, [pc, #88]	; (80019a4 <HAL_TIM_MspPostInit+0xb0>)
 800194a:	f001 fa99 	bl	8002e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800194e:	e021      	b.n	8001994 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM4)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a14      	ldr	r2, [pc, #80]	; (80019a8 <HAL_TIM_MspPostInit+0xb4>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d11c      	bne.n	8001994 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <HAL_TIM_MspPostInit+0xac>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	4a10      	ldr	r2, [pc, #64]	; (80019a0 <HAL_TIM_MspPostInit+0xac>)
 8001960:	f043 0302 	orr.w	r3, r3, #2
 8001964:	6313      	str	r3, [r2, #48]	; 0x30
 8001966:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <HAL_TIM_MspPostInit+0xac>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001972:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001978:	2302      	movs	r3, #2
 800197a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001980:	2300      	movs	r3, #0
 8001982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001984:	2302      	movs	r3, #2
 8001986:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001988:	f107 0314 	add.w	r3, r7, #20
 800198c:	4619      	mov	r1, r3
 800198e:	4805      	ldr	r0, [pc, #20]	; (80019a4 <HAL_TIM_MspPostInit+0xb0>)
 8001990:	f001 fa76 	bl	8002e80 <HAL_GPIO_Init>
}
 8001994:	bf00      	nop
 8001996:	3728      	adds	r7, #40	; 0x28
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40000400 	.word	0x40000400
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40020400 	.word	0x40020400
 80019a8:	40000800 	.word	0x40000800

080019ac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019b0:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <MX_USART1_UART_Init+0x58>)
 80019b2:	4a15      	ldr	r2, [pc, #84]	; (8001a08 <MX_USART1_UART_Init+0x5c>)
 80019b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019b6:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <MX_USART1_UART_Init+0x58>)
 80019b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019be:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <MX_USART1_UART_Init+0x58>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019c4:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <MX_USART1_UART_Init+0x58>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019ca:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <MX_USART1_UART_Init+0x58>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <MX_USART1_UART_Init+0x58>)
 80019d2:	220c      	movs	r2, #12
 80019d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019d6:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <MX_USART1_UART_Init+0x58>)
 80019d8:	2200      	movs	r2, #0
 80019da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019dc:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <MX_USART1_UART_Init+0x58>)
 80019de:	2200      	movs	r2, #0
 80019e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019e2:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <MX_USART1_UART_Init+0x58>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <MX_USART1_UART_Init+0x58>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019ee:	4805      	ldr	r0, [pc, #20]	; (8001a04 <MX_USART1_UART_Init+0x58>)
 80019f0:	f003 faf2 	bl	8004fd8 <HAL_UART_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80019fa:	f7ff fd41 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000530 	.word	0x20000530
 8001a08:	40011000 	.word	0x40011000

08001a0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08a      	sub	sp, #40	; 0x28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a17      	ldr	r2, [pc, #92]	; (8001a88 <HAL_UART_MspInit+0x7c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d128      	bne.n	8001a80 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a2e:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <HAL_UART_MspInit+0x80>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	4a16      	ldr	r2, [pc, #88]	; (8001a8c <HAL_UART_MspInit+0x80>)
 8001a34:	f043 0310 	orr.w	r3, r3, #16
 8001a38:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3a:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <HAL_UART_MspInit+0x80>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	f003 0310 	and.w	r3, r3, #16
 8001a42:	613b      	str	r3, [r7, #16]
 8001a44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <HAL_UART_MspInit+0x80>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	4a10      	ldr	r2, [pc, #64]	; (8001a8c <HAL_UART_MspInit+0x80>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	6313      	str	r3, [r2, #48]	; 0x30
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <HAL_UART_MspInit+0x80>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a5e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a70:	2307      	movs	r3, #7
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4805      	ldr	r0, [pc, #20]	; (8001a90 <HAL_UART_MspInit+0x84>)
 8001a7c:	f001 fa00 	bl	8002e80 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001a80:	bf00      	nop
 8001a82:	3728      	adds	r7, #40	; 0x28
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40011000 	.word	0x40011000
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40020000 	.word	0x40020000

08001a94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001acc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a98:	480d      	ldr	r0, [pc, #52]	; (8001ad0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a9a:	490e      	ldr	r1, [pc, #56]	; (8001ad4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a9c:	4a0e      	ldr	r2, [pc, #56]	; (8001ad8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa0:	e002      	b.n	8001aa8 <LoopCopyDataInit>

08001aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa6:	3304      	adds	r3, #4

08001aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aac:	d3f9      	bcc.n	8001aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aae:	4a0b      	ldr	r2, [pc, #44]	; (8001adc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ab0:	4c0b      	ldr	r4, [pc, #44]	; (8001ae0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab4:	e001      	b.n	8001aba <LoopFillZerobss>

08001ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab8:	3204      	adds	r2, #4

08001aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001abc:	d3fb      	bcc.n	8001ab6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001abe:	f7ff fe03 	bl	80016c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ac2:	f003 ff25 	bl	8005910 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ac6:	f7ff fb67 	bl	8001198 <main>
  bx  lr    
 8001aca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001acc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001ad8:	08008734 	.word	0x08008734
  ldr r2, =_sbss
 8001adc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001ae0:	200005bc 	.word	0x200005bc

08001ae4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ae4:	e7fe      	b.n	8001ae4 <ADC_IRQHandler>

08001ae6 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d104      	bne.n	8001afe <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001af4:	b672      	cpsid	i
}
 8001af6:	bf00      	nop
 8001af8:	f7ff fcc2 	bl	8001480 <Error_Handler>
 8001afc:	e7fe      	b.n	8001afc <stm32_lock_init+0x16>
  lock->flag = 0;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	701a      	strb	r2, [r3, #0]
  lock->counter = 0;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	705a      	strb	r2, [r3, #1]
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b084      	sub	sp, #16
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b1a:	f3ef 8310 	mrs	r3, PRIMASK
 8001b1e:	60bb      	str	r3, [r7, #8]
  return(result);
 8001b20:	68bb      	ldr	r3, [r7, #8]
  uint8_t flag = (uint8_t)(__get_PRIMASK() & 0x1); /* PRIMASK.PM */
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b2a:	b672      	cpsid	i
}
 8001b2c:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001b2e:	f3bf 8f4f 	dsb	sy
}
 8001b32:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b34:	f3bf 8f6f 	isb	sy
}
 8001b38:	bf00      	nop
  __disable_irq();
  __DSB();
  __ISB();
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d104      	bne.n	8001b4a <stm32_lock_acquire+0x38>
  __ASM volatile ("cpsid i" : : : "memory");
 8001b40:	b672      	cpsid	i
}
 8001b42:	bf00      	nop
 8001b44:	f7ff fc9c 	bl	8001480 <Error_Handler>
 8001b48:	e7fe      	b.n	8001b48 <stm32_lock_acquire+0x36>
  if (lock->counter == 0)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	785b      	ldrb	r3, [r3, #1]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d103      	bne.n	8001b5a <stm32_lock_acquire+0x48>
  {
    lock->flag = flag;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	7bfa      	ldrb	r2, [r7, #15]
 8001b56:	701a      	strb	r2, [r3, #0]
 8001b58:	e008      	b.n	8001b6c <stm32_lock_acquire+0x5a>
  }
  else if (lock->counter == UINT8_MAX)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	785b      	ldrb	r3, [r3, #1]
 8001b5e:	2bff      	cmp	r3, #255	; 0xff
 8001b60:	d104      	bne.n	8001b6c <stm32_lock_acquire+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001b62:	b672      	cpsid	i
}
 8001b64:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8001b66:	f7ff fc8b 	bl	8001480 <Error_Handler>
 8001b6a:	e7fe      	b.n	8001b6a <stm32_lock_acquire+0x58>
  }
  lock->counter++;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	785b      	ldrb	r3, [r3, #1]
 8001b70:	3301      	adds	r3, #1
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	705a      	strb	r2, [r3, #1]
}
 8001b78:	bf00      	nop
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d104      	bne.n	8001b98 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001b8e:	b672      	cpsid	i
}
 8001b90:	bf00      	nop
 8001b92:	f7ff fc75 	bl	8001480 <Error_Handler>
 8001b96:	e7fe      	b.n	8001b96 <stm32_lock_release+0x16>
  if (lock->counter == 0)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	785b      	ldrb	r3, [r3, #1]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d104      	bne.n	8001baa <stm32_lock_release+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba0:	b672      	cpsid	i
}
 8001ba2:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8001ba4:	f7ff fc6c 	bl	8001480 <Error_Handler>
 8001ba8:	e7fe      	b.n	8001ba8 <stm32_lock_release+0x28>
  }
  lock->counter--;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	785b      	ldrb	r3, [r3, #1]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	705a      	strb	r2, [r3, #1]
  if (lock->counter == 0 && lock->flag == 0)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	785b      	ldrb	r3, [r3, #1]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d105      	bne.n	8001bca <stm32_lock_release+0x4a>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <stm32_lock_release+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
 8001bc6:	b662      	cpsie	i
}
 8001bc8:	bf00      	nop
  {
    __enable_irq();
  }
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d105      	bne.n	8001bec <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8001be0:	f003 fe90 	bl	8005904 <__errno>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2216      	movs	r2, #22
 8001be8:	601a      	str	r2, [r3, #0]
    return;
 8001bea:	e015      	b.n	8001c18 <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8001bec:	2002      	movs	r0, #2
 8001bee:	f003 feb3 	bl	8005958 <malloc>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d005      	beq.n	8001c0e <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff ff6d 	bl	8001ae6 <stm32_lock_init>
    return;
 8001c0c:	e004      	b.n	8001c18 <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 8001c0e:	b672      	cpsid	i
}
 8001c10:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8001c12:	f7ff fc35 	bl	8001480 <Error_Handler>
 8001c16:	e7fe      	b.n	8001c16 <__retarget_lock_init_recursive+0x44>
}
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d104      	bne.n	8001c36 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001c2c:	b672      	cpsid	i
}
 8001c2e:	bf00      	nop
 8001c30:	f7ff fc26 	bl	8001480 <Error_Handler>
 8001c34:	e7fe      	b.n	8001c34 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff6a 	bl	8001b12 <stm32_lock_acquire>
}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d104      	bne.n	8001c5e <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001c54:	b672      	cpsid	i
}
 8001c56:	bf00      	nop
 8001c58:	f7ff fc12 	bl	8001480 <Error_Handler>
 8001c5c:	e7fe      	b.n	8001c5c <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff8d 	bl	8001b80 <stm32_lock_release>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c72:	2003      	movs	r0, #3
 8001c74:	f000 fd4a 	bl	800270c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c78:	200f      	movs	r0, #15
 8001c7a:	f000 f805 	bl	8001c88 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001c7e:	f7ff fc05 	bl	800148c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c90:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <HAL_InitTick+0x54>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <HAL_InitTick+0x58>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 fd65 	bl	8002776 <HAL_SYSTICK_Config>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e00e      	b.n	8001cd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b0f      	cmp	r3, #15
 8001cba:	d80a      	bhi.n	8001cd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc4:	f000 fd2d 	bl	8002722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cc8:	4a06      	ldr	r2, [pc, #24]	; (8001ce4 <HAL_InitTick+0x5c>)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	e000      	b.n	8001cd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	20000008 	.word	0x20000008
 8001ce4:	20000004 	.word	0x20000004

08001ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_IncTick+0x20>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_IncTick+0x24>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	4a04      	ldr	r2, [pc, #16]	; (8001d0c <HAL_IncTick+0x24>)
 8001cfa:	6013      	str	r3, [r2, #0]
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	20000008 	.word	0x20000008
 8001d0c:	200005b4 	.word	0x200005b4

08001d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return uwTick;
 8001d14:	4b03      	ldr	r3, [pc, #12]	; (8001d24 <HAL_GetTick+0x14>)
 8001d16:	681b      	ldr	r3, [r3, #0]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	200005b4 	.word	0x200005b4

08001d28 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d30:	2300      	movs	r3, #0
 8001d32:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e031      	b.n	8001da2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d109      	bne.n	8001d5a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff f91c 	bl	8000f84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f003 0310 	and.w	r3, r3, #16
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d116      	bne.n	8001d94 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <HAL_ADC_Init+0x84>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	f043 0202 	orr.w	r2, r3, #2
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 fa7c 	bl	8002274 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f023 0303 	bic.w	r3, r3, #3
 8001d8a:	f043 0201 	orr.w	r2, r3, #1
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	641a      	str	r2, [r3, #64]	; 0x40
 8001d92:	e001      	b.n	8001d98 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	ffffeefd 	.word	0xffffeefd

08001db0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d101      	bne.n	8001dce <HAL_ADC_Start_DMA+0x1e>
 8001dca:	2302      	movs	r3, #2
 8001dcc:	e0d4      	b.n	8001f78 <HAL_ADC_Start_DMA+0x1c8>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d018      	beq.n	8001e16 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 0201 	orr.w	r2, r2, #1
 8001df2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001df4:	4b62      	ldr	r3, [pc, #392]	; (8001f80 <HAL_ADC_Start_DMA+0x1d0>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a62      	ldr	r2, [pc, #392]	; (8001f84 <HAL_ADC_Start_DMA+0x1d4>)
 8001dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfe:	0c9a      	lsrs	r2, r3, #18
 8001e00:	4613      	mov	r3, r2
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	4413      	add	r3, r2
 8001e06:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001e08:	e002      	b.n	8001e10 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f9      	bne.n	8001e0a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	f040 809c 	bne.w	8001f5e <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e2a:	4b57      	ldr	r3, [pc, #348]	; (8001f88 <HAL_ADC_Start_DMA+0x1d8>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d007      	beq.n	8001e54 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e48:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e4c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e60:	d106      	bne.n	8001e70 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	f023 0206 	bic.w	r2, r3, #6
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	645a      	str	r2, [r3, #68]	; 0x44
 8001e6e:	e002      	b.n	8001e76 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2200      	movs	r2, #0
 8001e74:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e82:	4a42      	ldr	r2, [pc, #264]	; (8001f8c <HAL_ADC_Start_DMA+0x1dc>)
 8001e84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8a:	4a41      	ldr	r2, [pc, #260]	; (8001f90 <HAL_ADC_Start_DMA+0x1e0>)
 8001e8c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e92:	4a40      	ldr	r2, [pc, #256]	; (8001f94 <HAL_ADC_Start_DMA+0x1e4>)
 8001e94:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e9e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001eae:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	689a      	ldr	r2, [r3, #8]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ebe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	334c      	adds	r3, #76	; 0x4c
 8001eca:	4619      	mov	r1, r3
 8001ecc:	68ba      	ldr	r2, [r7, #8]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f000 fd0c 	bl	80028ec <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001ed4:	4b30      	ldr	r3, [pc, #192]	; (8001f98 <HAL_ADC_Start_DMA+0x1e8>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 031f 	and.w	r3, r3, #31
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d10f      	bne.n	8001f00 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d143      	bne.n	8001f76 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	e03a      	b.n	8001f76 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a25      	ldr	r2, [pc, #148]	; (8001f9c <HAL_ADC_Start_DMA+0x1ec>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d10e      	bne.n	8001f28 <HAL_ADC_Start_DMA+0x178>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d107      	bne.n	8001f28 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f26:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001f28:	4b1b      	ldr	r3, [pc, #108]	; (8001f98 <HAL_ADC_Start_DMA+0x1e8>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 0310 	and.w	r3, r3, #16
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d120      	bne.n	8001f76 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a19      	ldr	r2, [pc, #100]	; (8001fa0 <HAL_ADC_Start_DMA+0x1f0>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d11b      	bne.n	8001f76 <HAL_ADC_Start_DMA+0x1c6>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d114      	bne.n	8001f76 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689a      	ldr	r2, [r3, #8]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	e00b      	b.n	8001f76 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	f043 0210 	orr.w	r2, r3, #16
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	f043 0201 	orr.w	r2, r3, #1
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20000000 	.word	0x20000000
 8001f84:	431bde83 	.word	0x431bde83
 8001f88:	fffff8fe 	.word	0xfffff8fe
 8001f8c:	08002469 	.word	0x08002469
 8001f90:	08002523 	.word	0x08002523
 8001f94:	0800253f 	.word	0x0800253f
 8001f98:	40012300 	.word	0x40012300
 8001f9c:	40012000 	.word	0x40012000
 8001fa0:	40012200 	.word	0x40012200

08001fa4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x1c>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e12a      	b.n	8002252 <HAL_ADC_ConfigChannel+0x272>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b09      	cmp	r3, #9
 800200a:	d93a      	bls.n	8002082 <HAL_ADC_ConfigChannel+0xa2>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002014:	d035      	beq.n	8002082 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68d9      	ldr	r1, [r3, #12]
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	b29b      	uxth	r3, r3
 8002022:	461a      	mov	r2, r3
 8002024:	4613      	mov	r3, r2
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4413      	add	r3, r2
 800202a:	3b1e      	subs	r3, #30
 800202c:	2207      	movs	r2, #7
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43da      	mvns	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	400a      	ands	r2, r1
 800203a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a87      	ldr	r2, [pc, #540]	; (8002260 <HAL_ADC_ConfigChannel+0x280>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d10a      	bne.n	800205c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68d9      	ldr	r1, [r3, #12]
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	061a      	lsls	r2, r3, #24
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	430a      	orrs	r2, r1
 8002058:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800205a:	e035      	b.n	80020c8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68d9      	ldr	r1, [r3, #12]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	b29b      	uxth	r3, r3
 800206c:	4618      	mov	r0, r3
 800206e:	4603      	mov	r3, r0
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	4403      	add	r3, r0
 8002074:	3b1e      	subs	r3, #30
 8002076:	409a      	lsls	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	430a      	orrs	r2, r1
 800207e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002080:	e022      	b.n	80020c8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6919      	ldr	r1, [r3, #16]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	b29b      	uxth	r3, r3
 800208e:	461a      	mov	r2, r3
 8002090:	4613      	mov	r3, r2
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	4413      	add	r3, r2
 8002096:	2207      	movs	r2, #7
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43da      	mvns	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	400a      	ands	r2, r1
 80020a4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6919      	ldr	r1, [r3, #16]
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	4618      	mov	r0, r3
 80020b8:	4603      	mov	r3, r0
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	4403      	add	r3, r0
 80020be:	409a      	lsls	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b06      	cmp	r3, #6
 80020ce:	d824      	bhi.n	800211a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	3b05      	subs	r3, #5
 80020e2:	221f      	movs	r2, #31
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43da      	mvns	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	400a      	ands	r2, r1
 80020f0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	4618      	mov	r0, r3
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	3b05      	subs	r3, #5
 800210c:	fa00 f203 	lsl.w	r2, r0, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	635a      	str	r2, [r3, #52]	; 0x34
 8002118:	e04c      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b0c      	cmp	r3, #12
 8002120:	d824      	bhi.n	800216c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	3b23      	subs	r3, #35	; 0x23
 8002134:	221f      	movs	r2, #31
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43da      	mvns	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	400a      	ands	r2, r1
 8002142:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	b29b      	uxth	r3, r3
 8002150:	4618      	mov	r0, r3
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	3b23      	subs	r3, #35	; 0x23
 800215e:	fa00 f203 	lsl.w	r2, r0, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	631a      	str	r2, [r3, #48]	; 0x30
 800216a:	e023      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	3b41      	subs	r3, #65	; 0x41
 800217e:	221f      	movs	r2, #31
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43da      	mvns	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	400a      	ands	r2, r1
 800218c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	b29b      	uxth	r3, r3
 800219a:	4618      	mov	r0, r3
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	4613      	mov	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	3b41      	subs	r3, #65	; 0x41
 80021a8:	fa00 f203 	lsl.w	r2, r0, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a2a      	ldr	r2, [pc, #168]	; (8002264 <HAL_ADC_ConfigChannel+0x284>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d10a      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x1f4>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021c6:	d105      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80021c8:	4b27      	ldr	r3, [pc, #156]	; (8002268 <HAL_ADC_ConfigChannel+0x288>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	4a26      	ldr	r2, [pc, #152]	; (8002268 <HAL_ADC_ConfigChannel+0x288>)
 80021ce:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80021d2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a22      	ldr	r2, [pc, #136]	; (8002264 <HAL_ADC_ConfigChannel+0x284>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d109      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x212>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2b12      	cmp	r3, #18
 80021e4:	d105      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80021e6:	4b20      	ldr	r3, [pc, #128]	; (8002268 <HAL_ADC_ConfigChannel+0x288>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	4a1f      	ldr	r2, [pc, #124]	; (8002268 <HAL_ADC_ConfigChannel+0x288>)
 80021ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021f0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a1b      	ldr	r2, [pc, #108]	; (8002264 <HAL_ADC_ConfigChannel+0x284>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d125      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x268>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a17      	ldr	r2, [pc, #92]	; (8002260 <HAL_ADC_ConfigChannel+0x280>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d003      	beq.n	800220e <HAL_ADC_ConfigChannel+0x22e>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2b11      	cmp	r3, #17
 800220c:	d11c      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800220e:	4b16      	ldr	r3, [pc, #88]	; (8002268 <HAL_ADC_ConfigChannel+0x288>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	4a15      	ldr	r2, [pc, #84]	; (8002268 <HAL_ADC_ConfigChannel+0x288>)
 8002214:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002218:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a10      	ldr	r2, [pc, #64]	; (8002260 <HAL_ADC_ConfigChannel+0x280>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d111      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002224:	4b11      	ldr	r3, [pc, #68]	; (800226c <HAL_ADC_ConfigChannel+0x28c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a11      	ldr	r2, [pc, #68]	; (8002270 <HAL_ADC_ConfigChannel+0x290>)
 800222a:	fba2 2303 	umull	r2, r3, r2, r3
 800222e:	0c9a      	lsrs	r2, r3, #18
 8002230:	4613      	mov	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800223a:	e002      	b.n	8002242 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	3b01      	subs	r3, #1
 8002240:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1f9      	bne.n	800223c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	10000012 	.word	0x10000012
 8002264:	40012000 	.word	0x40012000
 8002268:	40012300 	.word	0x40012300
 800226c:	20000000 	.word	0x20000000
 8002270:	431bde83 	.word	0x431bde83

08002274 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800227c:	4b78      	ldr	r3, [pc, #480]	; (8002460 <ADC_Init+0x1ec>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	4a77      	ldr	r2, [pc, #476]	; (8002460 <ADC_Init+0x1ec>)
 8002282:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002286:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002288:	4b75      	ldr	r3, [pc, #468]	; (8002460 <ADC_Init+0x1ec>)
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	4973      	ldr	r1, [pc, #460]	; (8002460 <ADC_Init+0x1ec>)
 8002292:	4313      	orrs	r3, r2
 8002294:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6859      	ldr	r1, [r3, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	021a      	lsls	r2, r3, #8
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6859      	ldr	r1, [r3, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6899      	ldr	r1, [r3, #8]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002302:	4a58      	ldr	r2, [pc, #352]	; (8002464 <ADC_Init+0x1f0>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d022      	beq.n	800234e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002316:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6899      	ldr	r1, [r3, #8]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002338:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6899      	ldr	r1, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	e00f      	b.n	800236e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800235c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800236c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 0202 	bic.w	r2, r2, #2
 800237c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6899      	ldr	r1, [r3, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	005a      	lsls	r2, r3, #1
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d01b      	beq.n	80023d4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80023ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6859      	ldr	r1, [r3, #4]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c6:	3b01      	subs	r3, #1
 80023c8:	035a      	lsls	r2, r3, #13
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	e007      	b.n	80023e4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	3b01      	subs	r3, #1
 8002400:	051a      	lsls	r2, r3, #20
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002418:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6899      	ldr	r1, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002426:	025a      	lsls	r2, r3, #9
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800243e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6899      	ldr	r1, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	029a      	lsls	r2, r3, #10
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	609a      	str	r2, [r3, #8]
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	40012300 	.word	0x40012300
 8002464:	0f000001 	.word	0x0f000001

08002468 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002474:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800247e:	2b00      	cmp	r3, #0
 8002480:	d13c      	bne.n	80024fc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d12b      	bne.n	80024f4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d127      	bne.n	80024f4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024aa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d006      	beq.n	80024c0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d119      	bne.n	80024f4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 0220 	bic.w	r2, r2, #32
 80024ce:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d105      	bne.n	80024f4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	f043 0201 	orr.w	r2, r3, #1
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f7ff fd55 	bl	8001fa4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80024fa:	e00e      	b.n	800251a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	f003 0310 	and.w	r3, r3, #16
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f7ff fd5f 	bl	8001fcc <HAL_ADC_ErrorCallback>
}
 800250e:	e004      	b.n	800251a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	4798      	blx	r3
}
 800251a:	bf00      	nop
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b084      	sub	sp, #16
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800252e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f7ff fd41 	bl	8001fb8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002536:	bf00      	nop
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b084      	sub	sp, #16
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2240      	movs	r2, #64	; 0x40
 8002550:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	f043 0204 	orr.w	r2, r3, #4
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f7ff fd34 	bl	8001fcc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002564:	bf00      	nop
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800257c:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <__NVIC_SetPriorityGrouping+0x40>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002588:	4013      	ands	r3, r2
 800258a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002594:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <__NVIC_SetPriorityGrouping+0x44>)
 8002596:	4313      	orrs	r3, r2
 8002598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800259a:	4a04      	ldr	r2, [pc, #16]	; (80025ac <__NVIC_SetPriorityGrouping+0x40>)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	60d3      	str	r3, [r2, #12]
}
 80025a0:	bf00      	nop
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	e000ed00 	.word	0xe000ed00
 80025b0:	05fa0000 	.word	0x05fa0000

080025b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025b8:	4b04      	ldr	r3, [pc, #16]	; (80025cc <__NVIC_GetPriorityGrouping+0x18>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	0a1b      	lsrs	r3, r3, #8
 80025be:	f003 0307 	and.w	r3, r3, #7
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	db0b      	blt.n	80025fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	f003 021f 	and.w	r2, r3, #31
 80025e8:	4907      	ldr	r1, [pc, #28]	; (8002608 <__NVIC_EnableIRQ+0x38>)
 80025ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ee:	095b      	lsrs	r3, r3, #5
 80025f0:	2001      	movs	r0, #1
 80025f2:	fa00 f202 	lsl.w	r2, r0, r2
 80025f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	e000e100 	.word	0xe000e100

0800260c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	6039      	str	r1, [r7, #0]
 8002616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261c:	2b00      	cmp	r3, #0
 800261e:	db0a      	blt.n	8002636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	b2da      	uxtb	r2, r3
 8002624:	490c      	ldr	r1, [pc, #48]	; (8002658 <__NVIC_SetPriority+0x4c>)
 8002626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262a:	0112      	lsls	r2, r2, #4
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	440b      	add	r3, r1
 8002630:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002634:	e00a      	b.n	800264c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	b2da      	uxtb	r2, r3
 800263a:	4908      	ldr	r1, [pc, #32]	; (800265c <__NVIC_SetPriority+0x50>)
 800263c:	79fb      	ldrb	r3, [r7, #7]
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	3b04      	subs	r3, #4
 8002644:	0112      	lsls	r2, r2, #4
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	440b      	add	r3, r1
 800264a:	761a      	strb	r2, [r3, #24]
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	e000e100 	.word	0xe000e100
 800265c:	e000ed00 	.word	0xe000ed00

08002660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002660:	b480      	push	{r7}
 8002662:	b089      	sub	sp, #36	; 0x24
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f1c3 0307 	rsb	r3, r3, #7
 800267a:	2b04      	cmp	r3, #4
 800267c:	bf28      	it	cs
 800267e:	2304      	movcs	r3, #4
 8002680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3304      	adds	r3, #4
 8002686:	2b06      	cmp	r3, #6
 8002688:	d902      	bls.n	8002690 <NVIC_EncodePriority+0x30>
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	3b03      	subs	r3, #3
 800268e:	e000      	b.n	8002692 <NVIC_EncodePriority+0x32>
 8002690:	2300      	movs	r3, #0
 8002692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002694:	f04f 32ff 	mov.w	r2, #4294967295
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43da      	mvns	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	401a      	ands	r2, r3
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026a8:	f04f 31ff 	mov.w	r1, #4294967295
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	fa01 f303 	lsl.w	r3, r1, r3
 80026b2:	43d9      	mvns	r1, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b8:	4313      	orrs	r3, r2
         );
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3724      	adds	r7, #36	; 0x24
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
	...

080026c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026d8:	d301      	bcc.n	80026de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026da:	2301      	movs	r3, #1
 80026dc:	e00f      	b.n	80026fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026de:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <SysTick_Config+0x40>)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026e6:	210f      	movs	r1, #15
 80026e8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ec:	f7ff ff8e 	bl	800260c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026f0:	4b05      	ldr	r3, [pc, #20]	; (8002708 <SysTick_Config+0x40>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026f6:	4b04      	ldr	r3, [pc, #16]	; (8002708 <SysTick_Config+0x40>)
 80026f8:	2207      	movs	r2, #7
 80026fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	e000e010 	.word	0xe000e010

0800270c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff ff29 	bl	800256c <__NVIC_SetPriorityGrouping>
}
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002722:	b580      	push	{r7, lr}
 8002724:	b086      	sub	sp, #24
 8002726:	af00      	add	r7, sp, #0
 8002728:	4603      	mov	r3, r0
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	607a      	str	r2, [r7, #4]
 800272e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002734:	f7ff ff3e 	bl	80025b4 <__NVIC_GetPriorityGrouping>
 8002738:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	68b9      	ldr	r1, [r7, #8]
 800273e:	6978      	ldr	r0, [r7, #20]
 8002740:	f7ff ff8e 	bl	8002660 <NVIC_EncodePriority>
 8002744:	4602      	mov	r2, r0
 8002746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800274a:	4611      	mov	r1, r2
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff5d 	bl	800260c <__NVIC_SetPriority>
}
 8002752:	bf00      	nop
 8002754:	3718      	adds	r7, #24
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	4603      	mov	r3, r0
 8002762:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff ff31 	bl	80025d0 <__NVIC_EnableIRQ>
}
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff ffa2 	bl	80026c8 <SysTick_Config>
 8002784:	4603      	mov	r3, r0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800279c:	f7ff fab8 	bl	8001d10 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e099      	b.n	80028e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2202      	movs	r2, #2
 80027b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0201 	bic.w	r2, r2, #1
 80027ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027cc:	e00f      	b.n	80027ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027ce:	f7ff fa9f 	bl	8001d10 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b05      	cmp	r3, #5
 80027da:	d908      	bls.n	80027ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2220      	movs	r2, #32
 80027e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2203      	movs	r2, #3
 80027e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e078      	b.n	80028e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1e8      	bne.n	80027ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	4b38      	ldr	r3, [pc, #224]	; (80028e8 <HAL_DMA_Init+0x158>)
 8002808:	4013      	ands	r3, r2
 800280a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800281a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002826:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002832:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	4313      	orrs	r3, r2
 800283e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002844:	2b04      	cmp	r3, #4
 8002846:	d107      	bne.n	8002858 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002850:	4313      	orrs	r3, r2
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	4313      	orrs	r3, r2
 8002856:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	697a      	ldr	r2, [r7, #20]
 800285e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	f023 0307 	bic.w	r3, r3, #7
 800286e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002874:	697a      	ldr	r2, [r7, #20]
 8002876:	4313      	orrs	r3, r2
 8002878:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	2b04      	cmp	r3, #4
 8002880:	d117      	bne.n	80028b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	4313      	orrs	r3, r2
 800288a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00e      	beq.n	80028b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 fa77 	bl	8002d88 <DMA_CheckFifoParam>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d008      	beq.n	80028b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2240      	movs	r2, #64	; 0x40
 80028a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028ae:	2301      	movs	r3, #1
 80028b0:	e016      	b.n	80028e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 fa2e 	bl	8002d1c <DMA_CalcBaseAndBitshift>
 80028c0:	4603      	mov	r3, r0
 80028c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c8:	223f      	movs	r2, #63	; 0x3f
 80028ca:	409a      	lsls	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	f010803f 	.word	0xf010803f

080028ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	60b9      	str	r1, [r7, #8]
 80028f6:	607a      	str	r2, [r7, #4]
 80028f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002902:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_DMA_Start_IT+0x26>
 800290e:	2302      	movs	r3, #2
 8002910:	e048      	b.n	80029a4 <HAL_DMA_Start_IT+0xb8>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b01      	cmp	r3, #1
 8002924:	d137      	bne.n	8002996 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2202      	movs	r2, #2
 800292a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	68b9      	ldr	r1, [r7, #8]
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 f9c0 	bl	8002cc0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002944:	223f      	movs	r2, #63	; 0x3f
 8002946:	409a      	lsls	r2, r3
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0216 	orr.w	r2, r2, #22
 800295a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	695a      	ldr	r2, [r3, #20]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800296a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002970:	2b00      	cmp	r3, #0
 8002972:	d007      	beq.n	8002984 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0208 	orr.w	r2, r2, #8
 8002982:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0201 	orr.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	e005      	b.n	80029a2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800299e:	2302      	movs	r3, #2
 80029a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80029a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80029b4:	2300      	movs	r3, #0
 80029b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80029b8:	4b92      	ldr	r3, [pc, #584]	; (8002c04 <HAL_DMA_IRQHandler+0x258>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a92      	ldr	r2, [pc, #584]	; (8002c08 <HAL_DMA_IRQHandler+0x25c>)
 80029be:	fba2 2303 	umull	r2, r3, r2, r3
 80029c2:	0a9b      	lsrs	r3, r3, #10
 80029c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d6:	2208      	movs	r2, #8
 80029d8:	409a      	lsls	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	4013      	ands	r3, r2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d01a      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d013      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0204 	bic.w	r2, r2, #4
 80029fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a04:	2208      	movs	r2, #8
 8002a06:	409a      	lsls	r2, r3
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a10:	f043 0201 	orr.w	r2, r3, #1
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	409a      	lsls	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4013      	ands	r3, r2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d012      	beq.n	8002a4e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00b      	beq.n	8002a4e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	409a      	lsls	r2, r3
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a46:	f043 0202 	orr.w	r2, r3, #2
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a52:	2204      	movs	r2, #4
 8002a54:	409a      	lsls	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d012      	beq.n	8002a84 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00b      	beq.n	8002a84 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a70:	2204      	movs	r2, #4
 8002a72:	409a      	lsls	r2, r3
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7c:	f043 0204 	orr.w	r2, r3, #4
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a88:	2210      	movs	r2, #16
 8002a8a:	409a      	lsls	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d043      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d03c      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa6:	2210      	movs	r2, #16
 8002aa8:	409a      	lsls	r2, r3
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d018      	beq.n	8002aee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d108      	bne.n	8002adc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d024      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	4798      	blx	r3
 8002ada:	e01f      	b.n	8002b1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d01b      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	4798      	blx	r3
 8002aec:	e016      	b.n	8002b1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d107      	bne.n	8002b0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 0208 	bic.w	r2, r2, #8
 8002b0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b20:	2220      	movs	r2, #32
 8002b22:	409a      	lsls	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	4013      	ands	r3, r2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 808e 	beq.w	8002c4a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0310 	and.w	r3, r3, #16
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 8086 	beq.w	8002c4a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b42:	2220      	movs	r2, #32
 8002b44:	409a      	lsls	r2, r3
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b05      	cmp	r3, #5
 8002b54:	d136      	bne.n	8002bc4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0216 	bic.w	r2, r2, #22
 8002b64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	695a      	ldr	r2, [r3, #20]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d103      	bne.n	8002b86 <HAL_DMA_IRQHandler+0x1da>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d007      	beq.n	8002b96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0208 	bic.w	r2, r2, #8
 8002b94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9a:	223f      	movs	r2, #63	; 0x3f
 8002b9c:	409a      	lsls	r2, r3
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d07d      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	4798      	blx	r3
        }
        return;
 8002bc2:	e078      	b.n	8002cb6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d01c      	beq.n	8002c0c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d108      	bne.n	8002bf2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d030      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	4798      	blx	r3
 8002bf0:	e02b      	b.n	8002c4a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d027      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	4798      	blx	r3
 8002c02:	e022      	b.n	8002c4a <HAL_DMA_IRQHandler+0x29e>
 8002c04:	20000000 	.word	0x20000000
 8002c08:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10f      	bne.n	8002c3a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 0210 	bic.w	r2, r2, #16
 8002c28:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d032      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d022      	beq.n	8002ca4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2205      	movs	r2, #5
 8002c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 0201 	bic.w	r2, r2, #1
 8002c74:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	60bb      	str	r3, [r7, #8]
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d307      	bcc.n	8002c92 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d1f2      	bne.n	8002c76 <HAL_DMA_IRQHandler+0x2ca>
 8002c90:	e000      	b.n	8002c94 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002c92:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d005      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	4798      	blx	r3
 8002cb4:	e000      	b.n	8002cb8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002cb6:	bf00      	nop
    }
  }
}
 8002cb8:	3718      	adds	r7, #24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop

08002cc0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
 8002ccc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cdc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	2b40      	cmp	r3, #64	; 0x40
 8002cec:	d108      	bne.n	8002d00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002cfe:	e007      	b.n	8002d10 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	60da      	str	r2, [r3, #12]
}
 8002d10:	bf00      	nop
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	3b10      	subs	r3, #16
 8002d2c:	4a13      	ldr	r2, [pc, #76]	; (8002d7c <DMA_CalcBaseAndBitshift+0x60>)
 8002d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d32:	091b      	lsrs	r3, r3, #4
 8002d34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d36:	4a12      	ldr	r2, [pc, #72]	; (8002d80 <DMA_CalcBaseAndBitshift+0x64>)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	461a      	mov	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2b03      	cmp	r3, #3
 8002d48:	d908      	bls.n	8002d5c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	4b0c      	ldr	r3, [pc, #48]	; (8002d84 <DMA_CalcBaseAndBitshift+0x68>)
 8002d52:	4013      	ands	r3, r2
 8002d54:	1d1a      	adds	r2, r3, #4
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	659a      	str	r2, [r3, #88]	; 0x58
 8002d5a:	e006      	b.n	8002d6a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <DMA_CalcBaseAndBitshift+0x68>)
 8002d64:	4013      	ands	r3, r2
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	aaaaaaab 	.word	0xaaaaaaab
 8002d80:	08008338 	.word	0x08008338
 8002d84:	fffffc00 	.word	0xfffffc00

08002d88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d11f      	bne.n	8002de2 <DMA_CheckFifoParam+0x5a>
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	d856      	bhi.n	8002e56 <DMA_CheckFifoParam+0xce>
 8002da8:	a201      	add	r2, pc, #4	; (adr r2, 8002db0 <DMA_CheckFifoParam+0x28>)
 8002daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dae:	bf00      	nop
 8002db0:	08002dc1 	.word	0x08002dc1
 8002db4:	08002dd3 	.word	0x08002dd3
 8002db8:	08002dc1 	.word	0x08002dc1
 8002dbc:	08002e57 	.word	0x08002e57
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d046      	beq.n	8002e5a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dd0:	e043      	b.n	8002e5a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002dda:	d140      	bne.n	8002e5e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002de0:	e03d      	b.n	8002e5e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dea:	d121      	bne.n	8002e30 <DMA_CheckFifoParam+0xa8>
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2b03      	cmp	r3, #3
 8002df0:	d837      	bhi.n	8002e62 <DMA_CheckFifoParam+0xda>
 8002df2:	a201      	add	r2, pc, #4	; (adr r2, 8002df8 <DMA_CheckFifoParam+0x70>)
 8002df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df8:	08002e09 	.word	0x08002e09
 8002dfc:	08002e0f 	.word	0x08002e0f
 8002e00:	08002e09 	.word	0x08002e09
 8002e04:	08002e21 	.word	0x08002e21
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e0c:	e030      	b.n	8002e70 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d025      	beq.n	8002e66 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e1e:	e022      	b.n	8002e66 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e28:	d11f      	bne.n	8002e6a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e2e:	e01c      	b.n	8002e6a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d903      	bls.n	8002e3e <DMA_CheckFifoParam+0xb6>
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	d003      	beq.n	8002e44 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e3c:	e018      	b.n	8002e70 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	73fb      	strb	r3, [r7, #15]
      break;
 8002e42:	e015      	b.n	8002e70 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00e      	beq.n	8002e6e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	73fb      	strb	r3, [r7, #15]
      break;
 8002e54:	e00b      	b.n	8002e6e <DMA_CheckFifoParam+0xe6>
      break;
 8002e56:	bf00      	nop
 8002e58:	e00a      	b.n	8002e70 <DMA_CheckFifoParam+0xe8>
      break;
 8002e5a:	bf00      	nop
 8002e5c:	e008      	b.n	8002e70 <DMA_CheckFifoParam+0xe8>
      break;
 8002e5e:	bf00      	nop
 8002e60:	e006      	b.n	8002e70 <DMA_CheckFifoParam+0xe8>
      break;
 8002e62:	bf00      	nop
 8002e64:	e004      	b.n	8002e70 <DMA_CheckFifoParam+0xe8>
      break;
 8002e66:	bf00      	nop
 8002e68:	e002      	b.n	8002e70 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e6a:	bf00      	nop
 8002e6c:	e000      	b.n	8002e70 <DMA_CheckFifoParam+0xe8>
      break;
 8002e6e:	bf00      	nop
    }
  } 
  
  return status; 
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3714      	adds	r7, #20
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop

08002e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b089      	sub	sp, #36	; 0x24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002e92:	2300      	movs	r3, #0
 8002e94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002e96:	2300      	movs	r3, #0
 8002e98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61fb      	str	r3, [r7, #28]
 8002e9e:	e175      	b.n	800318c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	697a      	ldr	r2, [r7, #20]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	f040 8164 	bne.w	8003186 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d00b      	beq.n	8002ede <HAL_GPIO_Init+0x5e>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d007      	beq.n	8002ede <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ed2:	2b11      	cmp	r3, #17
 8002ed4:	d003      	beq.n	8002ede <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b12      	cmp	r3, #18
 8002edc:	d130      	bne.n	8002f40 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	2203      	movs	r2, #3
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	fa02 f303 	lsl.w	r3, r2, r3
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f14:	2201      	movs	r2, #1
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4013      	ands	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	091b      	lsrs	r3, r3, #4
 8002f2a:	f003 0201 	and.w	r2, r3, #1
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	2203      	movs	r2, #3
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	43db      	mvns	r3, r3
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4013      	ands	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d003      	beq.n	8002f80 <HAL_GPIO_Init+0x100>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b12      	cmp	r3, #18
 8002f7e:	d123      	bne.n	8002fc8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	08da      	lsrs	r2, r3, #3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3208      	adds	r2, #8
 8002f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	220f      	movs	r2, #15
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	691a      	ldr	r2, [r3, #16]
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	08da      	lsrs	r2, r3, #3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	3208      	adds	r2, #8
 8002fc2:	69b9      	ldr	r1, [r7, #24]
 8002fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	2203      	movs	r2, #3
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f003 0203 	and.w	r2, r3, #3
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 80be 	beq.w	8003186 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800300a:	4b66      	ldr	r3, [pc, #408]	; (80031a4 <HAL_GPIO_Init+0x324>)
 800300c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300e:	4a65      	ldr	r2, [pc, #404]	; (80031a4 <HAL_GPIO_Init+0x324>)
 8003010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003014:	6453      	str	r3, [r2, #68]	; 0x44
 8003016:	4b63      	ldr	r3, [pc, #396]	; (80031a4 <HAL_GPIO_Init+0x324>)
 8003018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003022:	4a61      	ldr	r2, [pc, #388]	; (80031a8 <HAL_GPIO_Init+0x328>)
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	089b      	lsrs	r3, r3, #2
 8003028:	3302      	adds	r3, #2
 800302a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800302e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	220f      	movs	r2, #15
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	43db      	mvns	r3, r3
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	4013      	ands	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a58      	ldr	r2, [pc, #352]	; (80031ac <HAL_GPIO_Init+0x32c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d037      	beq.n	80030be <HAL_GPIO_Init+0x23e>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a57      	ldr	r2, [pc, #348]	; (80031b0 <HAL_GPIO_Init+0x330>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d031      	beq.n	80030ba <HAL_GPIO_Init+0x23a>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a56      	ldr	r2, [pc, #344]	; (80031b4 <HAL_GPIO_Init+0x334>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d02b      	beq.n	80030b6 <HAL_GPIO_Init+0x236>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a55      	ldr	r2, [pc, #340]	; (80031b8 <HAL_GPIO_Init+0x338>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d025      	beq.n	80030b2 <HAL_GPIO_Init+0x232>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a54      	ldr	r2, [pc, #336]	; (80031bc <HAL_GPIO_Init+0x33c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d01f      	beq.n	80030ae <HAL_GPIO_Init+0x22e>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a53      	ldr	r2, [pc, #332]	; (80031c0 <HAL_GPIO_Init+0x340>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d019      	beq.n	80030aa <HAL_GPIO_Init+0x22a>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a52      	ldr	r2, [pc, #328]	; (80031c4 <HAL_GPIO_Init+0x344>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d013      	beq.n	80030a6 <HAL_GPIO_Init+0x226>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a51      	ldr	r2, [pc, #324]	; (80031c8 <HAL_GPIO_Init+0x348>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d00d      	beq.n	80030a2 <HAL_GPIO_Init+0x222>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a50      	ldr	r2, [pc, #320]	; (80031cc <HAL_GPIO_Init+0x34c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d007      	beq.n	800309e <HAL_GPIO_Init+0x21e>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a4f      	ldr	r2, [pc, #316]	; (80031d0 <HAL_GPIO_Init+0x350>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d101      	bne.n	800309a <HAL_GPIO_Init+0x21a>
 8003096:	2309      	movs	r3, #9
 8003098:	e012      	b.n	80030c0 <HAL_GPIO_Init+0x240>
 800309a:	230a      	movs	r3, #10
 800309c:	e010      	b.n	80030c0 <HAL_GPIO_Init+0x240>
 800309e:	2308      	movs	r3, #8
 80030a0:	e00e      	b.n	80030c0 <HAL_GPIO_Init+0x240>
 80030a2:	2307      	movs	r3, #7
 80030a4:	e00c      	b.n	80030c0 <HAL_GPIO_Init+0x240>
 80030a6:	2306      	movs	r3, #6
 80030a8:	e00a      	b.n	80030c0 <HAL_GPIO_Init+0x240>
 80030aa:	2305      	movs	r3, #5
 80030ac:	e008      	b.n	80030c0 <HAL_GPIO_Init+0x240>
 80030ae:	2304      	movs	r3, #4
 80030b0:	e006      	b.n	80030c0 <HAL_GPIO_Init+0x240>
 80030b2:	2303      	movs	r3, #3
 80030b4:	e004      	b.n	80030c0 <HAL_GPIO_Init+0x240>
 80030b6:	2302      	movs	r3, #2
 80030b8:	e002      	b.n	80030c0 <HAL_GPIO_Init+0x240>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <HAL_GPIO_Init+0x240>
 80030be:	2300      	movs	r3, #0
 80030c0:	69fa      	ldr	r2, [r7, #28]
 80030c2:	f002 0203 	and.w	r2, r2, #3
 80030c6:	0092      	lsls	r2, r2, #2
 80030c8:	4093      	lsls	r3, r2
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80030d0:	4935      	ldr	r1, [pc, #212]	; (80031a8 <HAL_GPIO_Init+0x328>)
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	089b      	lsrs	r3, r3, #2
 80030d6:	3302      	adds	r3, #2
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030de:	4b3d      	ldr	r3, [pc, #244]	; (80031d4 <HAL_GPIO_Init+0x354>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	43db      	mvns	r3, r3
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	4013      	ands	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	4313      	orrs	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003102:	4a34      	ldr	r2, [pc, #208]	; (80031d4 <HAL_GPIO_Init+0x354>)
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003108:	4b32      	ldr	r3, [pc, #200]	; (80031d4 <HAL_GPIO_Init+0x354>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	43db      	mvns	r3, r3
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	4013      	ands	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d003      	beq.n	800312c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	4313      	orrs	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800312c:	4a29      	ldr	r2, [pc, #164]	; (80031d4 <HAL_GPIO_Init+0x354>)
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003132:	4b28      	ldr	r3, [pc, #160]	; (80031d4 <HAL_GPIO_Init+0x354>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	43db      	mvns	r3, r3
 800313c:	69ba      	ldr	r2, [r7, #24]
 800313e:	4013      	ands	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	4313      	orrs	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003156:	4a1f      	ldr	r2, [pc, #124]	; (80031d4 <HAL_GPIO_Init+0x354>)
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800315c:	4b1d      	ldr	r3, [pc, #116]	; (80031d4 <HAL_GPIO_Init+0x354>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	43db      	mvns	r3, r3
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4013      	ands	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	4313      	orrs	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003180:	4a14      	ldr	r2, [pc, #80]	; (80031d4 <HAL_GPIO_Init+0x354>)
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	3301      	adds	r3, #1
 800318a:	61fb      	str	r3, [r7, #28]
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	2b0f      	cmp	r3, #15
 8003190:	f67f ae86 	bls.w	8002ea0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003194:	bf00      	nop
 8003196:	bf00      	nop
 8003198:	3724      	adds	r7, #36	; 0x24
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40023800 	.word	0x40023800
 80031a8:	40013800 	.word	0x40013800
 80031ac:	40020000 	.word	0x40020000
 80031b0:	40020400 	.word	0x40020400
 80031b4:	40020800 	.word	0x40020800
 80031b8:	40020c00 	.word	0x40020c00
 80031bc:	40021000 	.word	0x40021000
 80031c0:	40021400 	.word	0x40021400
 80031c4:	40021800 	.word	0x40021800
 80031c8:	40021c00 	.word	0x40021c00
 80031cc:	40022000 	.word	0x40022000
 80031d0:	40022400 	.word	0x40022400
 80031d4:	40013c00 	.word	0x40013c00

080031d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691a      	ldr	r2, [r3, #16]
 80031e8:	887b      	ldrh	r3, [r7, #2]
 80031ea:	4013      	ands	r3, r2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d002      	beq.n	80031f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031f0:	2301      	movs	r3, #1
 80031f2:	73fb      	strb	r3, [r7, #15]
 80031f4:	e001      	b.n	80031fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031f6:	2300      	movs	r3, #0
 80031f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	460b      	mov	r3, r1
 8003212:	807b      	strh	r3, [r7, #2]
 8003214:	4613      	mov	r3, r2
 8003216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003218:	787b      	ldrb	r3, [r7, #1]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800321e:	887a      	ldrh	r2, [r7, #2]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003224:	e003      	b.n	800322e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003226:	887b      	ldrh	r3, [r7, #2]
 8003228:	041a      	lsls	r2, r3, #16
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	619a      	str	r2, [r3, #24]
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
	...

0800323c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003242:	2300      	movs	r3, #0
 8003244:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003246:	4b23      	ldr	r3, [pc, #140]	; (80032d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	4a22      	ldr	r2, [pc, #136]	; (80032d4 <HAL_PWREx_EnableOverDrive+0x98>)
 800324c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003250:	6413      	str	r3, [r2, #64]	; 0x40
 8003252:	4b20      	ldr	r3, [pc, #128]	; (80032d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325a:	603b      	str	r3, [r7, #0]
 800325c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800325e:	4b1e      	ldr	r3, [pc, #120]	; (80032d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a1d      	ldr	r2, [pc, #116]	; (80032d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003268:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800326a:	f7fe fd51 	bl	8001d10 <HAL_GetTick>
 800326e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003270:	e009      	b.n	8003286 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003272:	f7fe fd4d 	bl	8001d10 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003280:	d901      	bls.n	8003286 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e022      	b.n	80032cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003286:	4b14      	ldr	r3, [pc, #80]	; (80032d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800328e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003292:	d1ee      	bne.n	8003272 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003294:	4b10      	ldr	r3, [pc, #64]	; (80032d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a0f      	ldr	r2, [pc, #60]	; (80032d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800329a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800329e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032a0:	f7fe fd36 	bl	8001d10 <HAL_GetTick>
 80032a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032a6:	e009      	b.n	80032bc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032a8:	f7fe fd32 	bl	8001d10 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032b6:	d901      	bls.n	80032bc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e007      	b.n	80032cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032bc:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032c8:	d1ee      	bne.n	80032a8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	40023800 	.word	0x40023800
 80032d8:	40007000 	.word	0x40007000

080032dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80032e4:	2300      	movs	r3, #0
 80032e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e291      	b.n	8003816 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 8087 	beq.w	800340e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003300:	4b96      	ldr	r3, [pc, #600]	; (800355c <HAL_RCC_OscConfig+0x280>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 030c 	and.w	r3, r3, #12
 8003308:	2b04      	cmp	r3, #4
 800330a:	d00c      	beq.n	8003326 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800330c:	4b93      	ldr	r3, [pc, #588]	; (800355c <HAL_RCC_OscConfig+0x280>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 030c 	and.w	r3, r3, #12
 8003314:	2b08      	cmp	r3, #8
 8003316:	d112      	bne.n	800333e <HAL_RCC_OscConfig+0x62>
 8003318:	4b90      	ldr	r3, [pc, #576]	; (800355c <HAL_RCC_OscConfig+0x280>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003320:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003324:	d10b      	bne.n	800333e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003326:	4b8d      	ldr	r3, [pc, #564]	; (800355c <HAL_RCC_OscConfig+0x280>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d06c      	beq.n	800340c <HAL_RCC_OscConfig+0x130>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d168      	bne.n	800340c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e26b      	b.n	8003816 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003346:	d106      	bne.n	8003356 <HAL_RCC_OscConfig+0x7a>
 8003348:	4b84      	ldr	r3, [pc, #528]	; (800355c <HAL_RCC_OscConfig+0x280>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a83      	ldr	r2, [pc, #524]	; (800355c <HAL_RCC_OscConfig+0x280>)
 800334e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003352:	6013      	str	r3, [r2, #0]
 8003354:	e02e      	b.n	80033b4 <HAL_RCC_OscConfig+0xd8>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10c      	bne.n	8003378 <HAL_RCC_OscConfig+0x9c>
 800335e:	4b7f      	ldr	r3, [pc, #508]	; (800355c <HAL_RCC_OscConfig+0x280>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a7e      	ldr	r2, [pc, #504]	; (800355c <HAL_RCC_OscConfig+0x280>)
 8003364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	4b7c      	ldr	r3, [pc, #496]	; (800355c <HAL_RCC_OscConfig+0x280>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a7b      	ldr	r2, [pc, #492]	; (800355c <HAL_RCC_OscConfig+0x280>)
 8003370:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	e01d      	b.n	80033b4 <HAL_RCC_OscConfig+0xd8>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003380:	d10c      	bne.n	800339c <HAL_RCC_OscConfig+0xc0>
 8003382:	4b76      	ldr	r3, [pc, #472]	; (800355c <HAL_RCC_OscConfig+0x280>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a75      	ldr	r2, [pc, #468]	; (800355c <HAL_RCC_OscConfig+0x280>)
 8003388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	4b73      	ldr	r3, [pc, #460]	; (800355c <HAL_RCC_OscConfig+0x280>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a72      	ldr	r2, [pc, #456]	; (800355c <HAL_RCC_OscConfig+0x280>)
 8003394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	e00b      	b.n	80033b4 <HAL_RCC_OscConfig+0xd8>
 800339c:	4b6f      	ldr	r3, [pc, #444]	; (800355c <HAL_RCC_OscConfig+0x280>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a6e      	ldr	r2, [pc, #440]	; (800355c <HAL_RCC_OscConfig+0x280>)
 80033a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033a6:	6013      	str	r3, [r2, #0]
 80033a8:	4b6c      	ldr	r3, [pc, #432]	; (800355c <HAL_RCC_OscConfig+0x280>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a6b      	ldr	r2, [pc, #428]	; (800355c <HAL_RCC_OscConfig+0x280>)
 80033ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d013      	beq.n	80033e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033bc:	f7fe fca8 	bl	8001d10 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033c4:	f7fe fca4 	bl	8001d10 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b64      	cmp	r3, #100	; 0x64
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e21f      	b.n	8003816 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d6:	4b61      	ldr	r3, [pc, #388]	; (800355c <HAL_RCC_OscConfig+0x280>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0f0      	beq.n	80033c4 <HAL_RCC_OscConfig+0xe8>
 80033e2:	e014      	b.n	800340e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e4:	f7fe fc94 	bl	8001d10 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033ec:	f7fe fc90 	bl	8001d10 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b64      	cmp	r3, #100	; 0x64
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e20b      	b.n	8003816 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033fe:	4b57      	ldr	r3, [pc, #348]	; (800355c <HAL_RCC_OscConfig+0x280>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1f0      	bne.n	80033ec <HAL_RCC_OscConfig+0x110>
 800340a:	e000      	b.n	800340e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800340c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d069      	beq.n	80034ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800341a:	4b50      	ldr	r3, [pc, #320]	; (800355c <HAL_RCC_OscConfig+0x280>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 030c 	and.w	r3, r3, #12
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00b      	beq.n	800343e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003426:	4b4d      	ldr	r3, [pc, #308]	; (800355c <HAL_RCC_OscConfig+0x280>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 030c 	and.w	r3, r3, #12
 800342e:	2b08      	cmp	r3, #8
 8003430:	d11c      	bne.n	800346c <HAL_RCC_OscConfig+0x190>
 8003432:	4b4a      	ldr	r3, [pc, #296]	; (800355c <HAL_RCC_OscConfig+0x280>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d116      	bne.n	800346c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800343e:	4b47      	ldr	r3, [pc, #284]	; (800355c <HAL_RCC_OscConfig+0x280>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d005      	beq.n	8003456 <HAL_RCC_OscConfig+0x17a>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d001      	beq.n	8003456 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e1df      	b.n	8003816 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003456:	4b41      	ldr	r3, [pc, #260]	; (800355c <HAL_RCC_OscConfig+0x280>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	493d      	ldr	r1, [pc, #244]	; (800355c <HAL_RCC_OscConfig+0x280>)
 8003466:	4313      	orrs	r3, r2
 8003468:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800346a:	e040      	b.n	80034ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d023      	beq.n	80034bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003474:	4b39      	ldr	r3, [pc, #228]	; (800355c <HAL_RCC_OscConfig+0x280>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a38      	ldr	r2, [pc, #224]	; (800355c <HAL_RCC_OscConfig+0x280>)
 800347a:	f043 0301 	orr.w	r3, r3, #1
 800347e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003480:	f7fe fc46 	bl	8001d10 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003488:	f7fe fc42 	bl	8001d10 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e1bd      	b.n	8003816 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800349a:	4b30      	ldr	r3, [pc, #192]	; (800355c <HAL_RCC_OscConfig+0x280>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d0f0      	beq.n	8003488 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a6:	4b2d      	ldr	r3, [pc, #180]	; (800355c <HAL_RCC_OscConfig+0x280>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	4929      	ldr	r1, [pc, #164]	; (800355c <HAL_RCC_OscConfig+0x280>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	600b      	str	r3, [r1, #0]
 80034ba:	e018      	b.n	80034ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034bc:	4b27      	ldr	r3, [pc, #156]	; (800355c <HAL_RCC_OscConfig+0x280>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a26      	ldr	r2, [pc, #152]	; (800355c <HAL_RCC_OscConfig+0x280>)
 80034c2:	f023 0301 	bic.w	r3, r3, #1
 80034c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c8:	f7fe fc22 	bl	8001d10 <HAL_GetTick>
 80034cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ce:	e008      	b.n	80034e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034d0:	f7fe fc1e 	bl	8001d10 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d901      	bls.n	80034e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e199      	b.n	8003816 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034e2:	4b1e      	ldr	r3, [pc, #120]	; (800355c <HAL_RCC_OscConfig+0x280>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1f0      	bne.n	80034d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d038      	beq.n	800356c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d019      	beq.n	8003536 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003502:	4b16      	ldr	r3, [pc, #88]	; (800355c <HAL_RCC_OscConfig+0x280>)
 8003504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003506:	4a15      	ldr	r2, [pc, #84]	; (800355c <HAL_RCC_OscConfig+0x280>)
 8003508:	f043 0301 	orr.w	r3, r3, #1
 800350c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800350e:	f7fe fbff 	bl	8001d10 <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003516:	f7fe fbfb 	bl	8001d10 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e176      	b.n	8003816 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003528:	4b0c      	ldr	r3, [pc, #48]	; (800355c <HAL_RCC_OscConfig+0x280>)
 800352a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0f0      	beq.n	8003516 <HAL_RCC_OscConfig+0x23a>
 8003534:	e01a      	b.n	800356c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003536:	4b09      	ldr	r3, [pc, #36]	; (800355c <HAL_RCC_OscConfig+0x280>)
 8003538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800353a:	4a08      	ldr	r2, [pc, #32]	; (800355c <HAL_RCC_OscConfig+0x280>)
 800353c:	f023 0301 	bic.w	r3, r3, #1
 8003540:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003542:	f7fe fbe5 	bl	8001d10 <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003548:	e00a      	b.n	8003560 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800354a:	f7fe fbe1 	bl	8001d10 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d903      	bls.n	8003560 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e15c      	b.n	8003816 <HAL_RCC_OscConfig+0x53a>
 800355c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003560:	4b91      	ldr	r3, [pc, #580]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 8003562:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1ee      	bne.n	800354a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 80a4 	beq.w	80036c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800357a:	4b8b      	ldr	r3, [pc, #556]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10d      	bne.n	80035a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003586:	4b88      	ldr	r3, [pc, #544]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	4a87      	ldr	r2, [pc, #540]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 800358c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003590:	6413      	str	r3, [r2, #64]	; 0x40
 8003592:	4b85      	ldr	r3, [pc, #532]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359a:	60bb      	str	r3, [r7, #8]
 800359c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800359e:	2301      	movs	r3, #1
 80035a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035a2:	4b82      	ldr	r3, [pc, #520]	; (80037ac <HAL_RCC_OscConfig+0x4d0>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d118      	bne.n	80035e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80035ae:	4b7f      	ldr	r3, [pc, #508]	; (80037ac <HAL_RCC_OscConfig+0x4d0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a7e      	ldr	r2, [pc, #504]	; (80037ac <HAL_RCC_OscConfig+0x4d0>)
 80035b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ba:	f7fe fba9 	bl	8001d10 <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035c2:	f7fe fba5 	bl	8001d10 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b64      	cmp	r3, #100	; 0x64
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e120      	b.n	8003816 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035d4:	4b75      	ldr	r3, [pc, #468]	; (80037ac <HAL_RCC_OscConfig+0x4d0>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0f0      	beq.n	80035c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d106      	bne.n	80035f6 <HAL_RCC_OscConfig+0x31a>
 80035e8:	4b6f      	ldr	r3, [pc, #444]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 80035ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ec:	4a6e      	ldr	r2, [pc, #440]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 80035ee:	f043 0301 	orr.w	r3, r3, #1
 80035f2:	6713      	str	r3, [r2, #112]	; 0x70
 80035f4:	e02d      	b.n	8003652 <HAL_RCC_OscConfig+0x376>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10c      	bne.n	8003618 <HAL_RCC_OscConfig+0x33c>
 80035fe:	4b6a      	ldr	r3, [pc, #424]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 8003600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003602:	4a69      	ldr	r2, [pc, #420]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 8003604:	f023 0301 	bic.w	r3, r3, #1
 8003608:	6713      	str	r3, [r2, #112]	; 0x70
 800360a:	4b67      	ldr	r3, [pc, #412]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 800360c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360e:	4a66      	ldr	r2, [pc, #408]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 8003610:	f023 0304 	bic.w	r3, r3, #4
 8003614:	6713      	str	r3, [r2, #112]	; 0x70
 8003616:	e01c      	b.n	8003652 <HAL_RCC_OscConfig+0x376>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	2b05      	cmp	r3, #5
 800361e:	d10c      	bne.n	800363a <HAL_RCC_OscConfig+0x35e>
 8003620:	4b61      	ldr	r3, [pc, #388]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 8003622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003624:	4a60      	ldr	r2, [pc, #384]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 8003626:	f043 0304 	orr.w	r3, r3, #4
 800362a:	6713      	str	r3, [r2, #112]	; 0x70
 800362c:	4b5e      	ldr	r3, [pc, #376]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 800362e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003630:	4a5d      	ldr	r2, [pc, #372]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 8003632:	f043 0301 	orr.w	r3, r3, #1
 8003636:	6713      	str	r3, [r2, #112]	; 0x70
 8003638:	e00b      	b.n	8003652 <HAL_RCC_OscConfig+0x376>
 800363a:	4b5b      	ldr	r3, [pc, #364]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 800363c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363e:	4a5a      	ldr	r2, [pc, #360]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 8003640:	f023 0301 	bic.w	r3, r3, #1
 8003644:	6713      	str	r3, [r2, #112]	; 0x70
 8003646:	4b58      	ldr	r3, [pc, #352]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 8003648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364a:	4a57      	ldr	r2, [pc, #348]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 800364c:	f023 0304 	bic.w	r3, r3, #4
 8003650:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d015      	beq.n	8003686 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800365a:	f7fe fb59 	bl	8001d10 <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003660:	e00a      	b.n	8003678 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003662:	f7fe fb55 	bl	8001d10 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003670:	4293      	cmp	r3, r2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e0ce      	b.n	8003816 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003678:	4b4b      	ldr	r3, [pc, #300]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 800367a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0ee      	beq.n	8003662 <HAL_RCC_OscConfig+0x386>
 8003684:	e014      	b.n	80036b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003686:	f7fe fb43 	bl	8001d10 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800368c:	e00a      	b.n	80036a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800368e:	f7fe fb3f 	bl	8001d10 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	f241 3288 	movw	r2, #5000	; 0x1388
 800369c:	4293      	cmp	r3, r2
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e0b8      	b.n	8003816 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036a4:	4b40      	ldr	r3, [pc, #256]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 80036a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1ee      	bne.n	800368e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036b0:	7dfb      	ldrb	r3, [r7, #23]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d105      	bne.n	80036c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036b6:	4b3c      	ldr	r3, [pc, #240]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	4a3b      	ldr	r2, [pc, #236]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 80036bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 80a4 	beq.w	8003814 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036cc:	4b36      	ldr	r3, [pc, #216]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f003 030c 	and.w	r3, r3, #12
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d06b      	beq.n	80037b0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d149      	bne.n	8003774 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e0:	4b31      	ldr	r3, [pc, #196]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a30      	ldr	r2, [pc, #192]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 80036e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ec:	f7fe fb10 	bl	8001d10 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f4:	f7fe fb0c 	bl	8001d10 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e087      	b.n	8003816 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003706:	4b28      	ldr	r3, [pc, #160]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1f0      	bne.n	80036f4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	69da      	ldr	r2, [r3, #28]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	019b      	lsls	r3, r3, #6
 8003722:	431a      	orrs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003728:	085b      	lsrs	r3, r3, #1
 800372a:	3b01      	subs	r3, #1
 800372c:	041b      	lsls	r3, r3, #16
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003734:	061b      	lsls	r3, r3, #24
 8003736:	4313      	orrs	r3, r2
 8003738:	4a1b      	ldr	r2, [pc, #108]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 800373a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800373e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003740:	4b19      	ldr	r3, [pc, #100]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a18      	ldr	r2, [pc, #96]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 8003746:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800374a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800374c:	f7fe fae0 	bl	8001d10 <HAL_GetTick>
 8003750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003752:	e008      	b.n	8003766 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003754:	f7fe fadc 	bl	8001d10 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e057      	b.n	8003816 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003766:	4b10      	ldr	r3, [pc, #64]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0f0      	beq.n	8003754 <HAL_RCC_OscConfig+0x478>
 8003772:	e04f      	b.n	8003814 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003774:	4b0c      	ldr	r3, [pc, #48]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a0b      	ldr	r2, [pc, #44]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 800377a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800377e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003780:	f7fe fac6 	bl	8001d10 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003788:	f7fe fac2 	bl	8001d10 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e03d      	b.n	8003816 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800379a:	4b03      	ldr	r3, [pc, #12]	; (80037a8 <HAL_RCC_OscConfig+0x4cc>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1f0      	bne.n	8003788 <HAL_RCC_OscConfig+0x4ac>
 80037a6:	e035      	b.n	8003814 <HAL_RCC_OscConfig+0x538>
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80037b0:	4b1b      	ldr	r3, [pc, #108]	; (8003820 <HAL_RCC_OscConfig+0x544>)
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d028      	beq.n	8003810 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d121      	bne.n	8003810 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d11a      	bne.n	8003810 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037e0:	4013      	ands	r3, r2
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d111      	bne.n	8003810 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f6:	085b      	lsrs	r3, r3, #1
 80037f8:	3b01      	subs	r3, #1
 80037fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d107      	bne.n	8003810 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800380c:	429a      	cmp	r2, r3
 800380e:	d001      	beq.n	8003814 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e000      	b.n	8003816 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40023800 	.word	0x40023800

08003824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800382e:	2300      	movs	r3, #0
 8003830:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e0d0      	b.n	80039de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800383c:	4b6a      	ldr	r3, [pc, #424]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 030f 	and.w	r3, r3, #15
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d910      	bls.n	800386c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800384a:	4b67      	ldr	r3, [pc, #412]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f023 020f 	bic.w	r2, r3, #15
 8003852:	4965      	ldr	r1, [pc, #404]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	4313      	orrs	r3, r2
 8003858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800385a:	4b63      	ldr	r3, [pc, #396]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	429a      	cmp	r2, r3
 8003866:	d001      	beq.n	800386c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e0b8      	b.n	80039de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d020      	beq.n	80038ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b00      	cmp	r3, #0
 8003882:	d005      	beq.n	8003890 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003884:	4b59      	ldr	r3, [pc, #356]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	4a58      	ldr	r2, [pc, #352]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 800388a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800388e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0308 	and.w	r3, r3, #8
 8003898:	2b00      	cmp	r3, #0
 800389a:	d005      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800389c:	4b53      	ldr	r3, [pc, #332]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	4a52      	ldr	r2, [pc, #328]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 80038a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038a8:	4b50      	ldr	r3, [pc, #320]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	494d      	ldr	r1, [pc, #308]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d040      	beq.n	8003948 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d107      	bne.n	80038de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ce:	4b47      	ldr	r3, [pc, #284]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d115      	bne.n	8003906 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e07f      	b.n	80039de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d107      	bne.n	80038f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e6:	4b41      	ldr	r3, [pc, #260]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d109      	bne.n	8003906 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e073      	b.n	80039de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038f6:	4b3d      	ldr	r3, [pc, #244]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d101      	bne.n	8003906 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e06b      	b.n	80039de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003906:	4b39      	ldr	r3, [pc, #228]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f023 0203 	bic.w	r2, r3, #3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	4936      	ldr	r1, [pc, #216]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 8003914:	4313      	orrs	r3, r2
 8003916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003918:	f7fe f9fa 	bl	8001d10 <HAL_GetTick>
 800391c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800391e:	e00a      	b.n	8003936 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003920:	f7fe f9f6 	bl	8001d10 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	f241 3288 	movw	r2, #5000	; 0x1388
 800392e:	4293      	cmp	r3, r2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e053      	b.n	80039de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003936:	4b2d      	ldr	r3, [pc, #180]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 020c 	and.w	r2, r3, #12
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	429a      	cmp	r2, r3
 8003946:	d1eb      	bne.n	8003920 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003948:	4b27      	ldr	r3, [pc, #156]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 030f 	and.w	r3, r3, #15
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	429a      	cmp	r2, r3
 8003954:	d210      	bcs.n	8003978 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003956:	4b24      	ldr	r3, [pc, #144]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f023 020f 	bic.w	r2, r3, #15
 800395e:	4922      	ldr	r1, [pc, #136]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	4313      	orrs	r3, r2
 8003964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003966:	4b20      	ldr	r3, [pc, #128]	; (80039e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	429a      	cmp	r2, r3
 8003972:	d001      	beq.n	8003978 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e032      	b.n	80039de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b00      	cmp	r3, #0
 8003982:	d008      	beq.n	8003996 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003984:	4b19      	ldr	r3, [pc, #100]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	4916      	ldr	r1, [pc, #88]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 8003992:	4313      	orrs	r3, r2
 8003994:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d009      	beq.n	80039b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039a2:	4b12      	ldr	r3, [pc, #72]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	00db      	lsls	r3, r3, #3
 80039b0:	490e      	ldr	r1, [pc, #56]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039b6:	f000 f821 	bl	80039fc <HAL_RCC_GetSysClockFreq>
 80039ba:	4602      	mov	r2, r0
 80039bc:	4b0b      	ldr	r3, [pc, #44]	; (80039ec <HAL_RCC_ClockConfig+0x1c8>)
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	091b      	lsrs	r3, r3, #4
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	490a      	ldr	r1, [pc, #40]	; (80039f0 <HAL_RCC_ClockConfig+0x1cc>)
 80039c8:	5ccb      	ldrb	r3, [r1, r3]
 80039ca:	fa22 f303 	lsr.w	r3, r2, r3
 80039ce:	4a09      	ldr	r2, [pc, #36]	; (80039f4 <HAL_RCC_ClockConfig+0x1d0>)
 80039d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039d2:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <HAL_RCC_ClockConfig+0x1d4>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fe f956 	bl	8001c88 <HAL_InitTick>

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40023c00 	.word	0x40023c00
 80039ec:	40023800 	.word	0x40023800
 80039f0:	08008320 	.word	0x08008320
 80039f4:	20000000 	.word	0x20000000
 80039f8:	20000004 	.word	0x20000004

080039fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039fc:	b5b0      	push	{r4, r5, r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003a02:	2100      	movs	r1, #0
 8003a04:	6079      	str	r1, [r7, #4]
 8003a06:	2100      	movs	r1, #0
 8003a08:	60f9      	str	r1, [r7, #12]
 8003a0a:	2100      	movs	r1, #0
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003a0e:	2100      	movs	r1, #0
 8003a10:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a12:	4952      	ldr	r1, [pc, #328]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x160>)
 8003a14:	6889      	ldr	r1, [r1, #8]
 8003a16:	f001 010c 	and.w	r1, r1, #12
 8003a1a:	2908      	cmp	r1, #8
 8003a1c:	d00d      	beq.n	8003a3a <HAL_RCC_GetSysClockFreq+0x3e>
 8003a1e:	2908      	cmp	r1, #8
 8003a20:	f200 8094 	bhi.w	8003b4c <HAL_RCC_GetSysClockFreq+0x150>
 8003a24:	2900      	cmp	r1, #0
 8003a26:	d002      	beq.n	8003a2e <HAL_RCC_GetSysClockFreq+0x32>
 8003a28:	2904      	cmp	r1, #4
 8003a2a:	d003      	beq.n	8003a34 <HAL_RCC_GetSysClockFreq+0x38>
 8003a2c:	e08e      	b.n	8003b4c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a2e:	4b4c      	ldr	r3, [pc, #304]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x164>)
 8003a30:	60bb      	str	r3, [r7, #8]
      break;
 8003a32:	e08e      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a34:	4b4b      	ldr	r3, [pc, #300]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x168>)
 8003a36:	60bb      	str	r3, [r7, #8]
      break;
 8003a38:	e08b      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a3a:	4948      	ldr	r1, [pc, #288]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x160>)
 8003a3c:	6849      	ldr	r1, [r1, #4]
 8003a3e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003a42:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a44:	4945      	ldr	r1, [pc, #276]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x160>)
 8003a46:	6849      	ldr	r1, [r1, #4]
 8003a48:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003a4c:	2900      	cmp	r1, #0
 8003a4e:	d024      	beq.n	8003a9a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a50:	4942      	ldr	r1, [pc, #264]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x160>)
 8003a52:	6849      	ldr	r1, [r1, #4]
 8003a54:	0989      	lsrs	r1, r1, #6
 8003a56:	4608      	mov	r0, r1
 8003a58:	f04f 0100 	mov.w	r1, #0
 8003a5c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003a60:	f04f 0500 	mov.w	r5, #0
 8003a64:	ea00 0204 	and.w	r2, r0, r4
 8003a68:	ea01 0305 	and.w	r3, r1, r5
 8003a6c:	493d      	ldr	r1, [pc, #244]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x168>)
 8003a6e:	fb01 f003 	mul.w	r0, r1, r3
 8003a72:	2100      	movs	r1, #0
 8003a74:	fb01 f102 	mul.w	r1, r1, r2
 8003a78:	1844      	adds	r4, r0, r1
 8003a7a:	493a      	ldr	r1, [pc, #232]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x168>)
 8003a7c:	fba2 0101 	umull	r0, r1, r2, r1
 8003a80:	1863      	adds	r3, r4, r1
 8003a82:	4619      	mov	r1, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	461a      	mov	r2, r3
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	f7fd f8ac 	bl	8000be8 <__aeabi_uldivmod>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	4613      	mov	r3, r2
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	e04a      	b.n	8003b30 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a9a:	4b30      	ldr	r3, [pc, #192]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x160>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	099b      	lsrs	r3, r3, #6
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	f04f 0300 	mov.w	r3, #0
 8003aa6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003aaa:	f04f 0100 	mov.w	r1, #0
 8003aae:	ea02 0400 	and.w	r4, r2, r0
 8003ab2:	ea03 0501 	and.w	r5, r3, r1
 8003ab6:	4620      	mov	r0, r4
 8003ab8:	4629      	mov	r1, r5
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	f04f 0300 	mov.w	r3, #0
 8003ac2:	014b      	lsls	r3, r1, #5
 8003ac4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ac8:	0142      	lsls	r2, r0, #5
 8003aca:	4610      	mov	r0, r2
 8003acc:	4619      	mov	r1, r3
 8003ace:	1b00      	subs	r0, r0, r4
 8003ad0:	eb61 0105 	sbc.w	r1, r1, r5
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	f04f 0300 	mov.w	r3, #0
 8003adc:	018b      	lsls	r3, r1, #6
 8003ade:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ae2:	0182      	lsls	r2, r0, #6
 8003ae4:	1a12      	subs	r2, r2, r0
 8003ae6:	eb63 0301 	sbc.w	r3, r3, r1
 8003aea:	f04f 0000 	mov.w	r0, #0
 8003aee:	f04f 0100 	mov.w	r1, #0
 8003af2:	00d9      	lsls	r1, r3, #3
 8003af4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003af8:	00d0      	lsls	r0, r2, #3
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	1912      	adds	r2, r2, r4
 8003b00:	eb45 0303 	adc.w	r3, r5, r3
 8003b04:	f04f 0000 	mov.w	r0, #0
 8003b08:	f04f 0100 	mov.w	r1, #0
 8003b0c:	0299      	lsls	r1, r3, #10
 8003b0e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003b12:	0290      	lsls	r0, r2, #10
 8003b14:	4602      	mov	r2, r0
 8003b16:	460b      	mov	r3, r1
 8003b18:	4610      	mov	r0, r2
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	f04f 0300 	mov.w	r3, #0
 8003b24:	f7fd f860 	bl	8000be8 <__aeabi_uldivmod>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003b30:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x160>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	0c1b      	lsrs	r3, r3, #16
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b48:	60bb      	str	r3, [r7, #8]
      break;
 8003b4a:	e002      	b.n	8003b52 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b4c:	4b04      	ldr	r3, [pc, #16]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x164>)
 8003b4e:	60bb      	str	r3, [r7, #8]
      break;
 8003b50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b52:	68bb      	ldr	r3, [r7, #8]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	00f42400 	.word	0x00f42400
 8003b64:	017d7840 	.word	0x017d7840

08003b68 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b6c:	4b03      	ldr	r3, [pc, #12]	; (8003b7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	20000000 	.word	0x20000000

08003b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b84:	f7ff fff0 	bl	8003b68 <HAL_RCC_GetHCLKFreq>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	0a9b      	lsrs	r3, r3, #10
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	4903      	ldr	r1, [pc, #12]	; (8003ba4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b96:	5ccb      	ldrb	r3, [r1, r3]
 8003b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	08008330 	.word	0x08008330

08003ba8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bac:	f7ff ffdc 	bl	8003b68 <HAL_RCC_GetHCLKFreq>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	4b05      	ldr	r3, [pc, #20]	; (8003bc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	0b5b      	lsrs	r3, r3, #13
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	4903      	ldr	r1, [pc, #12]	; (8003bcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bbe:	5ccb      	ldrb	r3, [r1, r3]
 8003bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	08008330 	.word	0x08008330

08003bd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b088      	sub	sp, #32
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003be0:	2300      	movs	r3, #0
 8003be2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003be4:	2300      	movs	r3, #0
 8003be6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003be8:	2300      	movs	r3, #0
 8003bea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d012      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003bf8:	4b69      	ldr	r3, [pc, #420]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	4a68      	ldr	r2, [pc, #416]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bfe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c02:	6093      	str	r3, [r2, #8]
 8003c04:	4b66      	ldr	r3, [pc, #408]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0c:	4964      	ldr	r1, [pc, #400]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d017      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c2a:	4b5d      	ldr	r3, [pc, #372]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c38:	4959      	ldr	r1, [pc, #356]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c48:	d101      	bne.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003c56:	2301      	movs	r3, #1
 8003c58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d017      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c66:	4b4e      	ldr	r3, [pc, #312]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c6c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c74:	494a      	ldr	r1, [pc, #296]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c84:	d101      	bne.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003c86:	2301      	movs	r3, #1
 8003c88:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003c92:	2301      	movs	r3, #1
 8003c94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0320 	and.w	r3, r3, #32
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 808b 	beq.w	8003dca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cb4:	4b3a      	ldr	r3, [pc, #232]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb8:	4a39      	ldr	r2, [pc, #228]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cbe:	6413      	str	r3, [r2, #64]	; 0x40
 8003cc0:	4b37      	ldr	r3, [pc, #220]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc8:	60bb      	str	r3, [r7, #8]
 8003cca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ccc:	4b35      	ldr	r3, [pc, #212]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a34      	ldr	r2, [pc, #208]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cd8:	f7fe f81a 	bl	8001d10 <HAL_GetTick>
 8003cdc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce0:	f7fe f816 	bl	8001d10 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b64      	cmp	r3, #100	; 0x64
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e357      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003cf2:	4b2c      	ldr	r3, [pc, #176]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d0f0      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cfe:	4b28      	ldr	r3, [pc, #160]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d06:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d035      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d02e      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d1c:	4b20      	ldr	r3, [pc, #128]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d24:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d26:	4b1e      	ldr	r3, [pc, #120]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2a:	4a1d      	ldr	r2, [pc, #116]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d30:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d32:	4b1b      	ldr	r3, [pc, #108]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d36:	4a1a      	ldr	r2, [pc, #104]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d3c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003d3e:	4a18      	ldr	r2, [pc, #96]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d44:	4b16      	ldr	r3, [pc, #88]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d114      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d50:	f7fd ffde 	bl	8001d10 <HAL_GetTick>
 8003d54:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d56:	e00a      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d58:	f7fd ffda 	bl	8001d10 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e319      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d6e:	4b0c      	ldr	r3, [pc, #48]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0ee      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d86:	d111      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003d88:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d94:	4b04      	ldr	r3, [pc, #16]	; (8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d96:	400b      	ands	r3, r1
 8003d98:	4901      	ldr	r1, [pc, #4]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	608b      	str	r3, [r1, #8]
 8003d9e:	e00b      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003da0:	40023800 	.word	0x40023800
 8003da4:	40007000 	.word	0x40007000
 8003da8:	0ffffcff 	.word	0x0ffffcff
 8003dac:	4bb1      	ldr	r3, [pc, #708]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	4ab0      	ldr	r2, [pc, #704]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003db2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003db6:	6093      	str	r3, [r2, #8]
 8003db8:	4bae      	ldr	r3, [pc, #696]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003dba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dc4:	49ab      	ldr	r1, [pc, #684]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0310 	and.w	r3, r3, #16
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d010      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003dd6:	4ba7      	ldr	r3, [pc, #668]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ddc:	4aa5      	ldr	r2, [pc, #660]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003dde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003de2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003de6:	4ba3      	ldr	r3, [pc, #652]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003de8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df0:	49a0      	ldr	r1, [pc, #640]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00a      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e04:	4b9b      	ldr	r3, [pc, #620]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e12:	4998      	ldr	r1, [pc, #608]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00a      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e26:	4b93      	ldr	r3, [pc, #588]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e34:	498f      	ldr	r1, [pc, #572]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00a      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e48:	4b8a      	ldr	r3, [pc, #552]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e56:	4987      	ldr	r1, [pc, #540]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e6a:	4b82      	ldr	r3, [pc, #520]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e70:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e78:	497e      	ldr	r1, [pc, #504]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00a      	beq.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e8c:	4b79      	ldr	r3, [pc, #484]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e92:	f023 0203 	bic.w	r2, r3, #3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9a:	4976      	ldr	r1, [pc, #472]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00a      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003eae:	4b71      	ldr	r3, [pc, #452]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb4:	f023 020c 	bic.w	r2, r3, #12
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ebc:	496d      	ldr	r1, [pc, #436]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00a      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ed0:	4b68      	ldr	r3, [pc, #416]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ede:	4965      	ldr	r1, [pc, #404]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00a      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ef2:	4b60      	ldr	r3, [pc, #384]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f00:	495c      	ldr	r1, [pc, #368]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00a      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f14:	4b57      	ldr	r3, [pc, #348]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f22:	4954      	ldr	r1, [pc, #336]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00a      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003f36:	4b4f      	ldr	r3, [pc, #316]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f44:	494b      	ldr	r1, [pc, #300]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00a      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003f58:	4b46      	ldr	r3, [pc, #280]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f66:	4943      	ldr	r1, [pc, #268]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00a      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003f7a:	4b3e      	ldr	r3, [pc, #248]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f88:	493a      	ldr	r1, [pc, #232]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00a      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f9c:	4b35      	ldr	r3, [pc, #212]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003faa:	4932      	ldr	r1, [pc, #200]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d011      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003fbe:	4b2d      	ldr	r3, [pc, #180]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fcc:	4929      	ldr	r1, [pc, #164]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fdc:	d101      	bne.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0308 	and.w	r3, r3, #8
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00a      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ffe:	4b1d      	ldr	r3, [pc, #116]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004004:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800400c:	4919      	ldr	r1, [pc, #100]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800400e:	4313      	orrs	r3, r2
 8004010:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00b      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004020:	4b14      	ldr	r3, [pc, #80]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004026:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004030:	4910      	ldr	r1, [pc, #64]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004032:	4313      	orrs	r3, r2
 8004034:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d006      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 80d9 	beq.w	80041fe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800404c:	4b09      	ldr	r3, [pc, #36]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a08      	ldr	r2, [pc, #32]	; (8004074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004052:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004056:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004058:	f7fd fe5a 	bl	8001d10 <HAL_GetTick>
 800405c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800405e:	e00b      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004060:	f7fd fe56 	bl	8001d10 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b64      	cmp	r3, #100	; 0x64
 800406c:	d904      	bls.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e197      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004072:	bf00      	nop
 8004074:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004078:	4b6c      	ldr	r3, [pc, #432]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1ed      	bne.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b00      	cmp	r3, #0
 800408e:	d021      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004094:	2b00      	cmp	r3, #0
 8004096:	d11d      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004098:	4b64      	ldr	r3, [pc, #400]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800409a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800409e:	0c1b      	lsrs	r3, r3, #16
 80040a0:	f003 0303 	and.w	r3, r3, #3
 80040a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040a6:	4b61      	ldr	r3, [pc, #388]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040ac:	0e1b      	lsrs	r3, r3, #24
 80040ae:	f003 030f 	and.w	r3, r3, #15
 80040b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	019a      	lsls	r2, r3, #6
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	041b      	lsls	r3, r3, #16
 80040be:	431a      	orrs	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	061b      	lsls	r3, r3, #24
 80040c4:	431a      	orrs	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	071b      	lsls	r3, r3, #28
 80040cc:	4957      	ldr	r1, [pc, #348]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d004      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040e8:	d00a      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d02e      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040fe:	d129      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004100:	4b4a      	ldr	r3, [pc, #296]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004102:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004106:	0c1b      	lsrs	r3, r3, #16
 8004108:	f003 0303 	and.w	r3, r3, #3
 800410c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800410e:	4b47      	ldr	r3, [pc, #284]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004110:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004114:	0f1b      	lsrs	r3, r3, #28
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	019a      	lsls	r2, r3, #6
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	041b      	lsls	r3, r3, #16
 8004126:	431a      	orrs	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	061b      	lsls	r3, r3, #24
 800412e:	431a      	orrs	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	071b      	lsls	r3, r3, #28
 8004134:	493d      	ldr	r1, [pc, #244]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004136:	4313      	orrs	r3, r2
 8004138:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800413c:	4b3b      	ldr	r3, [pc, #236]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800413e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004142:	f023 021f 	bic.w	r2, r3, #31
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	3b01      	subs	r3, #1
 800414c:	4937      	ldr	r1, [pc, #220]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800414e:	4313      	orrs	r3, r2
 8004150:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d01d      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004160:	4b32      	ldr	r3, [pc, #200]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004162:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004166:	0e1b      	lsrs	r3, r3, #24
 8004168:	f003 030f 	and.w	r3, r3, #15
 800416c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800416e:	4b2f      	ldr	r3, [pc, #188]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004170:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004174:	0f1b      	lsrs	r3, r3, #28
 8004176:	f003 0307 	and.w	r3, r3, #7
 800417a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	019a      	lsls	r2, r3, #6
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	041b      	lsls	r3, r3, #16
 8004188:	431a      	orrs	r2, r3
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	061b      	lsls	r3, r3, #24
 800418e:	431a      	orrs	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	071b      	lsls	r3, r3, #28
 8004194:	4925      	ldr	r1, [pc, #148]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004196:	4313      	orrs	r3, r2
 8004198:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d011      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	019a      	lsls	r2, r3, #6
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	041b      	lsls	r3, r3, #16
 80041b4:	431a      	orrs	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	061b      	lsls	r3, r3, #24
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	071b      	lsls	r3, r3, #28
 80041c4:	4919      	ldr	r1, [pc, #100]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80041cc:	4b17      	ldr	r3, [pc, #92]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a16      	ldr	r2, [pc, #88]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041d8:	f7fd fd9a 	bl	8001d10 <HAL_GetTick>
 80041dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041de:	e008      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041e0:	f7fd fd96 	bl	8001d10 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b64      	cmp	r3, #100	; 0x64
 80041ec:	d901      	bls.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e0d7      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041f2:	4b0e      	ldr	r3, [pc, #56]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d0f0      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	2b01      	cmp	r3, #1
 8004202:	f040 80cd 	bne.w	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004206:	4b09      	ldr	r3, [pc, #36]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a08      	ldr	r2, [pc, #32]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800420c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004210:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004212:	f7fd fd7d 	bl	8001d10 <HAL_GetTick>
 8004216:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004218:	e00a      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800421a:	f7fd fd79 	bl	8001d10 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b64      	cmp	r3, #100	; 0x64
 8004226:	d903      	bls.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e0ba      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800422c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004230:	4b5e      	ldr	r3, [pc, #376]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004238:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800423c:	d0ed      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424e:	2b00      	cmp	r3, #0
 8004250:	d009      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800425a:	2b00      	cmp	r3, #0
 800425c:	d02e      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	2b00      	cmp	r3, #0
 8004264:	d12a      	bne.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004266:	4b51      	ldr	r3, [pc, #324]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426c:	0c1b      	lsrs	r3, r3, #16
 800426e:	f003 0303 	and.w	r3, r3, #3
 8004272:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004274:	4b4d      	ldr	r3, [pc, #308]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427a:	0f1b      	lsrs	r3, r3, #28
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	019a      	lsls	r2, r3, #6
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	041b      	lsls	r3, r3, #16
 800428c:	431a      	orrs	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	061b      	lsls	r3, r3, #24
 8004294:	431a      	orrs	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	071b      	lsls	r3, r3, #28
 800429a:	4944      	ldr	r1, [pc, #272]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80042a2:	4b42      	ldr	r3, [pc, #264]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042a8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b0:	3b01      	subs	r3, #1
 80042b2:	021b      	lsls	r3, r3, #8
 80042b4:	493d      	ldr	r1, [pc, #244]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d022      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042d0:	d11d      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80042d2:	4b36      	ldr	r3, [pc, #216]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d8:	0e1b      	lsrs	r3, r3, #24
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80042e0:	4b32      	ldr	r3, [pc, #200]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e6:	0f1b      	lsrs	r3, r3, #28
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	019a      	lsls	r2, r3, #6
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	041b      	lsls	r3, r3, #16
 80042fa:	431a      	orrs	r2, r3
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	061b      	lsls	r3, r3, #24
 8004300:	431a      	orrs	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	071b      	lsls	r3, r3, #28
 8004306:	4929      	ldr	r1, [pc, #164]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004308:	4313      	orrs	r3, r2
 800430a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0308 	and.w	r3, r3, #8
 8004316:	2b00      	cmp	r3, #0
 8004318:	d028      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800431a:	4b24      	ldr	r3, [pc, #144]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800431c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004320:	0e1b      	lsrs	r3, r3, #24
 8004322:	f003 030f 	and.w	r3, r3, #15
 8004326:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004328:	4b20      	ldr	r3, [pc, #128]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800432a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432e:	0c1b      	lsrs	r3, r3, #16
 8004330:	f003 0303 	and.w	r3, r3, #3
 8004334:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	019a      	lsls	r2, r3, #6
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	041b      	lsls	r3, r3, #16
 8004340:	431a      	orrs	r2, r3
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	061b      	lsls	r3, r3, #24
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	69db      	ldr	r3, [r3, #28]
 800434c:	071b      	lsls	r3, r3, #28
 800434e:	4917      	ldr	r1, [pc, #92]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004350:	4313      	orrs	r3, r2
 8004352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004356:	4b15      	ldr	r3, [pc, #84]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800435c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004364:	4911      	ldr	r1, [pc, #68]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004366:	4313      	orrs	r3, r2
 8004368:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800436c:	4b0f      	ldr	r3, [pc, #60]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a0e      	ldr	r2, [pc, #56]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004376:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004378:	f7fd fcca 	bl	8001d10 <HAL_GetTick>
 800437c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004380:	f7fd fcc6 	bl	8001d10 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b64      	cmp	r3, #100	; 0x64
 800438c:	d901      	bls.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e007      	b.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004392:	4b06      	ldr	r3, [pc, #24]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800439a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800439e:	d1ef      	bne.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3720      	adds	r7, #32
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	40023800 	.word	0x40023800

080043b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e049      	b.n	8004456 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d106      	bne.n	80043dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7fd fa58 	bl	800188c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2202      	movs	r2, #2
 80043e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	3304      	adds	r3, #4
 80043ec:	4619      	mov	r1, r3
 80043ee:	4610      	mov	r0, r2
 80043f0:	f000 fa40 	bl	8004874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
	...

08004460 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d109      	bne.n	8004484 <HAL_TIM_PWM_Start+0x24>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b01      	cmp	r3, #1
 800447a:	bf14      	ite	ne
 800447c:	2301      	movne	r3, #1
 800447e:	2300      	moveq	r3, #0
 8004480:	b2db      	uxtb	r3, r3
 8004482:	e03c      	b.n	80044fe <HAL_TIM_PWM_Start+0x9e>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	2b04      	cmp	r3, #4
 8004488:	d109      	bne.n	800449e <HAL_TIM_PWM_Start+0x3e>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b01      	cmp	r3, #1
 8004494:	bf14      	ite	ne
 8004496:	2301      	movne	r3, #1
 8004498:	2300      	moveq	r3, #0
 800449a:	b2db      	uxtb	r3, r3
 800449c:	e02f      	b.n	80044fe <HAL_TIM_PWM_Start+0x9e>
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d109      	bne.n	80044b8 <HAL_TIM_PWM_Start+0x58>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	bf14      	ite	ne
 80044b0:	2301      	movne	r3, #1
 80044b2:	2300      	moveq	r3, #0
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	e022      	b.n	80044fe <HAL_TIM_PWM_Start+0x9e>
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	2b0c      	cmp	r3, #12
 80044bc:	d109      	bne.n	80044d2 <HAL_TIM_PWM_Start+0x72>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	bf14      	ite	ne
 80044ca:	2301      	movne	r3, #1
 80044cc:	2300      	moveq	r3, #0
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	e015      	b.n	80044fe <HAL_TIM_PWM_Start+0x9e>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2b10      	cmp	r3, #16
 80044d6:	d109      	bne.n	80044ec <HAL_TIM_PWM_Start+0x8c>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	bf14      	ite	ne
 80044e4:	2301      	movne	r3, #1
 80044e6:	2300      	moveq	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	e008      	b.n	80044fe <HAL_TIM_PWM_Start+0x9e>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	bf14      	ite	ne
 80044f8:	2301      	movne	r3, #1
 80044fa:	2300      	moveq	r3, #0
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e092      	b.n	800462c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d104      	bne.n	8004516 <HAL_TIM_PWM_Start+0xb6>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2202      	movs	r2, #2
 8004510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004514:	e023      	b.n	800455e <HAL_TIM_PWM_Start+0xfe>
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b04      	cmp	r3, #4
 800451a:	d104      	bne.n	8004526 <HAL_TIM_PWM_Start+0xc6>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004524:	e01b      	b.n	800455e <HAL_TIM_PWM_Start+0xfe>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b08      	cmp	r3, #8
 800452a:	d104      	bne.n	8004536 <HAL_TIM_PWM_Start+0xd6>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004534:	e013      	b.n	800455e <HAL_TIM_PWM_Start+0xfe>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b0c      	cmp	r3, #12
 800453a:	d104      	bne.n	8004546 <HAL_TIM_PWM_Start+0xe6>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004544:	e00b      	b.n	800455e <HAL_TIM_PWM_Start+0xfe>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b10      	cmp	r3, #16
 800454a:	d104      	bne.n	8004556 <HAL_TIM_PWM_Start+0xf6>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2202      	movs	r2, #2
 8004550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004554:	e003      	b.n	800455e <HAL_TIM_PWM_Start+0xfe>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2202      	movs	r2, #2
 800455a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2201      	movs	r2, #1
 8004564:	6839      	ldr	r1, [r7, #0]
 8004566:	4618      	mov	r0, r3
 8004568:	f000 fc82 	bl	8004e70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a30      	ldr	r2, [pc, #192]	; (8004634 <HAL_TIM_PWM_Start+0x1d4>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d004      	beq.n	8004580 <HAL_TIM_PWM_Start+0x120>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a2f      	ldr	r2, [pc, #188]	; (8004638 <HAL_TIM_PWM_Start+0x1d8>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d101      	bne.n	8004584 <HAL_TIM_PWM_Start+0x124>
 8004580:	2301      	movs	r3, #1
 8004582:	e000      	b.n	8004586 <HAL_TIM_PWM_Start+0x126>
 8004584:	2300      	movs	r3, #0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d007      	beq.n	800459a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004598:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a25      	ldr	r2, [pc, #148]	; (8004634 <HAL_TIM_PWM_Start+0x1d4>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d022      	beq.n	80045ea <HAL_TIM_PWM_Start+0x18a>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ac:	d01d      	beq.n	80045ea <HAL_TIM_PWM_Start+0x18a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a22      	ldr	r2, [pc, #136]	; (800463c <HAL_TIM_PWM_Start+0x1dc>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d018      	beq.n	80045ea <HAL_TIM_PWM_Start+0x18a>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a20      	ldr	r2, [pc, #128]	; (8004640 <HAL_TIM_PWM_Start+0x1e0>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d013      	beq.n	80045ea <HAL_TIM_PWM_Start+0x18a>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a1f      	ldr	r2, [pc, #124]	; (8004644 <HAL_TIM_PWM_Start+0x1e4>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d00e      	beq.n	80045ea <HAL_TIM_PWM_Start+0x18a>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a19      	ldr	r2, [pc, #100]	; (8004638 <HAL_TIM_PWM_Start+0x1d8>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d009      	beq.n	80045ea <HAL_TIM_PWM_Start+0x18a>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a1b      	ldr	r2, [pc, #108]	; (8004648 <HAL_TIM_PWM_Start+0x1e8>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d004      	beq.n	80045ea <HAL_TIM_PWM_Start+0x18a>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a19      	ldr	r2, [pc, #100]	; (800464c <HAL_TIM_PWM_Start+0x1ec>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d115      	bne.n	8004616 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	4b17      	ldr	r3, [pc, #92]	; (8004650 <HAL_TIM_PWM_Start+0x1f0>)
 80045f2:	4013      	ands	r3, r2
 80045f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2b06      	cmp	r3, #6
 80045fa:	d015      	beq.n	8004628 <HAL_TIM_PWM_Start+0x1c8>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004602:	d011      	beq.n	8004628 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0201 	orr.w	r2, r2, #1
 8004612:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004614:	e008      	b.n	8004628 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f042 0201 	orr.w	r2, r2, #1
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	e000      	b.n	800462a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004628:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}
 8004634:	40010000 	.word	0x40010000
 8004638:	40010400 	.word	0x40010400
 800463c:	40000400 	.word	0x40000400
 8004640:	40000800 	.word	0x40000800
 8004644:	40000c00 	.word	0x40000c00
 8004648:	40014000 	.word	0x40014000
 800464c:	40001800 	.word	0x40001800
 8004650:	00010007 	.word	0x00010007

08004654 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004666:	2b01      	cmp	r3, #1
 8004668:	d101      	bne.n	800466e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800466a:	2302      	movs	r3, #2
 800466c:	e0fd      	b.n	800486a <HAL_TIM_PWM_ConfigChannel+0x216>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b14      	cmp	r3, #20
 800467a:	f200 80f0 	bhi.w	800485e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800467e:	a201      	add	r2, pc, #4	; (adr r2, 8004684 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004684:	080046d9 	.word	0x080046d9
 8004688:	0800485f 	.word	0x0800485f
 800468c:	0800485f 	.word	0x0800485f
 8004690:	0800485f 	.word	0x0800485f
 8004694:	08004719 	.word	0x08004719
 8004698:	0800485f 	.word	0x0800485f
 800469c:	0800485f 	.word	0x0800485f
 80046a0:	0800485f 	.word	0x0800485f
 80046a4:	0800475b 	.word	0x0800475b
 80046a8:	0800485f 	.word	0x0800485f
 80046ac:	0800485f 	.word	0x0800485f
 80046b0:	0800485f 	.word	0x0800485f
 80046b4:	0800479b 	.word	0x0800479b
 80046b8:	0800485f 	.word	0x0800485f
 80046bc:	0800485f 	.word	0x0800485f
 80046c0:	0800485f 	.word	0x0800485f
 80046c4:	080047dd 	.word	0x080047dd
 80046c8:	0800485f 	.word	0x0800485f
 80046cc:	0800485f 	.word	0x0800485f
 80046d0:	0800485f 	.word	0x0800485f
 80046d4:	0800481d 	.word	0x0800481d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68b9      	ldr	r1, [r7, #8]
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 f968 	bl	80049b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	699a      	ldr	r2, [r3, #24]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f042 0208 	orr.w	r2, r2, #8
 80046f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	699a      	ldr	r2, [r3, #24]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0204 	bic.w	r2, r2, #4
 8004702:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6999      	ldr	r1, [r3, #24]
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	691a      	ldr	r2, [r3, #16]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	619a      	str	r2, [r3, #24]
      break;
 8004716:	e0a3      	b.n	8004860 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68b9      	ldr	r1, [r7, #8]
 800471e:	4618      	mov	r0, r3
 8004720:	f000 f9ba 	bl	8004a98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	699a      	ldr	r2, [r3, #24]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004732:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699a      	ldr	r2, [r3, #24]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004742:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6999      	ldr	r1, [r3, #24]
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	021a      	lsls	r2, r3, #8
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	619a      	str	r2, [r3, #24]
      break;
 8004758:	e082      	b.n	8004860 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68b9      	ldr	r1, [r7, #8]
 8004760:	4618      	mov	r0, r3
 8004762:	f000 fa11 	bl	8004b88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	69da      	ldr	r2, [r3, #28]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f042 0208 	orr.w	r2, r2, #8
 8004774:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	69da      	ldr	r2, [r3, #28]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 0204 	bic.w	r2, r2, #4
 8004784:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	69d9      	ldr	r1, [r3, #28]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	691a      	ldr	r2, [r3, #16]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	61da      	str	r2, [r3, #28]
      break;
 8004798:	e062      	b.n	8004860 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68b9      	ldr	r1, [r7, #8]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 fa67 	bl	8004c74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	69da      	ldr	r2, [r3, #28]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	69da      	ldr	r2, [r3, #28]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	69d9      	ldr	r1, [r3, #28]
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	021a      	lsls	r2, r3, #8
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	61da      	str	r2, [r3, #28]
      break;
 80047da:	e041      	b.n	8004860 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68b9      	ldr	r1, [r7, #8]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 fa9e 	bl	8004d24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0208 	orr.w	r2, r2, #8
 80047f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f022 0204 	bic.w	r2, r2, #4
 8004806:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	691a      	ldr	r2, [r3, #16]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800481a:	e021      	b.n	8004860 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68b9      	ldr	r1, [r7, #8]
 8004822:	4618      	mov	r0, r3
 8004824:	f000 fad0 	bl	8004dc8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004836:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004846:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	021a      	lsls	r2, r3, #8
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800485c:	e000      	b.n	8004860 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800485e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop

08004874 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a40      	ldr	r2, [pc, #256]	; (8004988 <TIM_Base_SetConfig+0x114>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d013      	beq.n	80048b4 <TIM_Base_SetConfig+0x40>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004892:	d00f      	beq.n	80048b4 <TIM_Base_SetConfig+0x40>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a3d      	ldr	r2, [pc, #244]	; (800498c <TIM_Base_SetConfig+0x118>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d00b      	beq.n	80048b4 <TIM_Base_SetConfig+0x40>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a3c      	ldr	r2, [pc, #240]	; (8004990 <TIM_Base_SetConfig+0x11c>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d007      	beq.n	80048b4 <TIM_Base_SetConfig+0x40>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a3b      	ldr	r2, [pc, #236]	; (8004994 <TIM_Base_SetConfig+0x120>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d003      	beq.n	80048b4 <TIM_Base_SetConfig+0x40>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a3a      	ldr	r2, [pc, #232]	; (8004998 <TIM_Base_SetConfig+0x124>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d108      	bne.n	80048c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a2f      	ldr	r2, [pc, #188]	; (8004988 <TIM_Base_SetConfig+0x114>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d02b      	beq.n	8004926 <TIM_Base_SetConfig+0xb2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048d4:	d027      	beq.n	8004926 <TIM_Base_SetConfig+0xb2>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a2c      	ldr	r2, [pc, #176]	; (800498c <TIM_Base_SetConfig+0x118>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d023      	beq.n	8004926 <TIM_Base_SetConfig+0xb2>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a2b      	ldr	r2, [pc, #172]	; (8004990 <TIM_Base_SetConfig+0x11c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d01f      	beq.n	8004926 <TIM_Base_SetConfig+0xb2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a2a      	ldr	r2, [pc, #168]	; (8004994 <TIM_Base_SetConfig+0x120>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d01b      	beq.n	8004926 <TIM_Base_SetConfig+0xb2>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a29      	ldr	r2, [pc, #164]	; (8004998 <TIM_Base_SetConfig+0x124>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d017      	beq.n	8004926 <TIM_Base_SetConfig+0xb2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a28      	ldr	r2, [pc, #160]	; (800499c <TIM_Base_SetConfig+0x128>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d013      	beq.n	8004926 <TIM_Base_SetConfig+0xb2>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a27      	ldr	r2, [pc, #156]	; (80049a0 <TIM_Base_SetConfig+0x12c>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d00f      	beq.n	8004926 <TIM_Base_SetConfig+0xb2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a26      	ldr	r2, [pc, #152]	; (80049a4 <TIM_Base_SetConfig+0x130>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d00b      	beq.n	8004926 <TIM_Base_SetConfig+0xb2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a25      	ldr	r2, [pc, #148]	; (80049a8 <TIM_Base_SetConfig+0x134>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d007      	beq.n	8004926 <TIM_Base_SetConfig+0xb2>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a24      	ldr	r2, [pc, #144]	; (80049ac <TIM_Base_SetConfig+0x138>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d003      	beq.n	8004926 <TIM_Base_SetConfig+0xb2>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a23      	ldr	r2, [pc, #140]	; (80049b0 <TIM_Base_SetConfig+0x13c>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d108      	bne.n	8004938 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800492c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	4313      	orrs	r3, r2
 8004936:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	4313      	orrs	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a0a      	ldr	r2, [pc, #40]	; (8004988 <TIM_Base_SetConfig+0x114>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d003      	beq.n	800496c <TIM_Base_SetConfig+0xf8>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a0c      	ldr	r2, [pc, #48]	; (8004998 <TIM_Base_SetConfig+0x124>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d103      	bne.n	8004974 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	691a      	ldr	r2, [r3, #16]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	615a      	str	r2, [r3, #20]
}
 800497a:	bf00      	nop
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	40010000 	.word	0x40010000
 800498c:	40000400 	.word	0x40000400
 8004990:	40000800 	.word	0x40000800
 8004994:	40000c00 	.word	0x40000c00
 8004998:	40010400 	.word	0x40010400
 800499c:	40014000 	.word	0x40014000
 80049a0:	40014400 	.word	0x40014400
 80049a4:	40014800 	.word	0x40014800
 80049a8:	40001800 	.word	0x40001800
 80049ac:	40001c00 	.word	0x40001c00
 80049b0:	40002000 	.word	0x40002000

080049b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b087      	sub	sp, #28
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	f023 0201 	bic.w	r2, r3, #1
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	4b2b      	ldr	r3, [pc, #172]	; (8004a8c <TIM_OC1_SetConfig+0xd8>)
 80049e0:	4013      	ands	r3, r2
 80049e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f023 0303 	bic.w	r3, r3, #3
 80049ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f023 0302 	bic.w	r3, r3, #2
 80049fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a21      	ldr	r2, [pc, #132]	; (8004a90 <TIM_OC1_SetConfig+0xdc>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d003      	beq.n	8004a18 <TIM_OC1_SetConfig+0x64>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a20      	ldr	r2, [pc, #128]	; (8004a94 <TIM_OC1_SetConfig+0xe0>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d10c      	bne.n	8004a32 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f023 0308 	bic.w	r3, r3, #8
 8004a1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f023 0304 	bic.w	r3, r3, #4
 8004a30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a16      	ldr	r2, [pc, #88]	; (8004a90 <TIM_OC1_SetConfig+0xdc>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d003      	beq.n	8004a42 <TIM_OC1_SetConfig+0x8e>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a15      	ldr	r2, [pc, #84]	; (8004a94 <TIM_OC1_SetConfig+0xe0>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d111      	bne.n	8004a66 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	685a      	ldr	r2, [r3, #4]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	697a      	ldr	r2, [r7, #20]
 8004a7e:	621a      	str	r2, [r3, #32]
}
 8004a80:	bf00      	nop
 8004a82:	371c      	adds	r7, #28
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	fffeff8f 	.word	0xfffeff8f
 8004a90:	40010000 	.word	0x40010000
 8004a94:	40010400 	.word	0x40010400

08004a98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	f023 0210 	bic.w	r2, r3, #16
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	4b2e      	ldr	r3, [pc, #184]	; (8004b7c <TIM_OC2_SetConfig+0xe4>)
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	021b      	lsls	r3, r3, #8
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	f023 0320 	bic.w	r3, r3, #32
 8004ae2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	011b      	lsls	r3, r3, #4
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a23      	ldr	r2, [pc, #140]	; (8004b80 <TIM_OC2_SetConfig+0xe8>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d003      	beq.n	8004b00 <TIM_OC2_SetConfig+0x68>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a22      	ldr	r2, [pc, #136]	; (8004b84 <TIM_OC2_SetConfig+0xec>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d10d      	bne.n	8004b1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	011b      	lsls	r3, r3, #4
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a18      	ldr	r2, [pc, #96]	; (8004b80 <TIM_OC2_SetConfig+0xe8>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d003      	beq.n	8004b2c <TIM_OC2_SetConfig+0x94>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a17      	ldr	r2, [pc, #92]	; (8004b84 <TIM_OC2_SetConfig+0xec>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d113      	bne.n	8004b54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	695b      	ldr	r3, [r3, #20]
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	621a      	str	r2, [r3, #32]
}
 8004b6e:	bf00      	nop
 8004b70:	371c      	adds	r7, #28
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	feff8fff 	.word	0xfeff8fff
 8004b80:	40010000 	.word	0x40010000
 8004b84:	40010400 	.word	0x40010400

08004b88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b087      	sub	sp, #28
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	4b2d      	ldr	r3, [pc, #180]	; (8004c68 <TIM_OC3_SetConfig+0xe0>)
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f023 0303 	bic.w	r3, r3, #3
 8004bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	021b      	lsls	r3, r3, #8
 8004bd8:	697a      	ldr	r2, [r7, #20]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a22      	ldr	r2, [pc, #136]	; (8004c6c <TIM_OC3_SetConfig+0xe4>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d003      	beq.n	8004bee <TIM_OC3_SetConfig+0x66>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a21      	ldr	r2, [pc, #132]	; (8004c70 <TIM_OC3_SetConfig+0xe8>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d10d      	bne.n	8004c0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bf4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	021b      	lsls	r3, r3, #8
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a17      	ldr	r2, [pc, #92]	; (8004c6c <TIM_OC3_SetConfig+0xe4>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d003      	beq.n	8004c1a <TIM_OC3_SetConfig+0x92>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a16      	ldr	r2, [pc, #88]	; (8004c70 <TIM_OC3_SetConfig+0xe8>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d113      	bne.n	8004c42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	011b      	lsls	r3, r3, #4
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	011b      	lsls	r3, r3, #4
 8004c3c:	693a      	ldr	r2, [r7, #16]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	693a      	ldr	r2, [r7, #16]
 8004c46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	621a      	str	r2, [r3, #32]
}
 8004c5c:	bf00      	nop
 8004c5e:	371c      	adds	r7, #28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr
 8004c68:	fffeff8f 	.word	0xfffeff8f
 8004c6c:	40010000 	.word	0x40010000
 8004c70:	40010400 	.word	0x40010400

08004c74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b087      	sub	sp, #28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	4b1e      	ldr	r3, [pc, #120]	; (8004d18 <TIM_OC4_SetConfig+0xa4>)
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	021b      	lsls	r3, r3, #8
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	031b      	lsls	r3, r3, #12
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a13      	ldr	r2, [pc, #76]	; (8004d1c <TIM_OC4_SetConfig+0xa8>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d003      	beq.n	8004cdc <TIM_OC4_SetConfig+0x68>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a12      	ldr	r2, [pc, #72]	; (8004d20 <TIM_OC4_SetConfig+0xac>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d109      	bne.n	8004cf0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ce2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	019b      	lsls	r3, r3, #6
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	621a      	str	r2, [r3, #32]
}
 8004d0a:	bf00      	nop
 8004d0c:	371c      	adds	r7, #28
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	feff8fff 	.word	0xfeff8fff
 8004d1c:	40010000 	.word	0x40010000
 8004d20:	40010400 	.word	0x40010400

08004d24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b087      	sub	sp, #28
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a1b      	ldr	r3, [r3, #32]
 8004d3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	4b1b      	ldr	r3, [pc, #108]	; (8004dbc <TIM_OC5_SetConfig+0x98>)
 8004d50:	4013      	ands	r3, r2
 8004d52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004d64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	041b      	lsls	r3, r3, #16
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a12      	ldr	r2, [pc, #72]	; (8004dc0 <TIM_OC5_SetConfig+0x9c>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d003      	beq.n	8004d82 <TIM_OC5_SetConfig+0x5e>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a11      	ldr	r2, [pc, #68]	; (8004dc4 <TIM_OC5_SetConfig+0xa0>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d109      	bne.n	8004d96 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	021b      	lsls	r3, r3, #8
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	621a      	str	r2, [r3, #32]
}
 8004db0:	bf00      	nop
 8004db2:	371c      	adds	r7, #28
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	fffeff8f 	.word	0xfffeff8f
 8004dc0:	40010000 	.word	0x40010000
 8004dc4:	40010400 	.word	0x40010400

08004dc8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b087      	sub	sp, #28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	4b1c      	ldr	r3, [pc, #112]	; (8004e64 <TIM_OC6_SetConfig+0x9c>)
 8004df4:	4013      	ands	r3, r2
 8004df6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	021b      	lsls	r3, r3, #8
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	051b      	lsls	r3, r3, #20
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a13      	ldr	r2, [pc, #76]	; (8004e68 <TIM_OC6_SetConfig+0xa0>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d003      	beq.n	8004e28 <TIM_OC6_SetConfig+0x60>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a12      	ldr	r2, [pc, #72]	; (8004e6c <TIM_OC6_SetConfig+0xa4>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d109      	bne.n	8004e3c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	029b      	lsls	r3, r3, #10
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	621a      	str	r2, [r3, #32]
}
 8004e56:	bf00      	nop
 8004e58:	371c      	adds	r7, #28
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	feff8fff 	.word	0xfeff8fff
 8004e68:	40010000 	.word	0x40010000
 8004e6c:	40010400 	.word	0x40010400

08004e70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b087      	sub	sp, #28
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	f003 031f 	and.w	r3, r3, #31
 8004e82:	2201      	movs	r2, #1
 8004e84:	fa02 f303 	lsl.w	r3, r2, r3
 8004e88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6a1a      	ldr	r2, [r3, #32]
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	43db      	mvns	r3, r3
 8004e92:	401a      	ands	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6a1a      	ldr	r2, [r3, #32]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	f003 031f 	and.w	r3, r3, #31
 8004ea2:	6879      	ldr	r1, [r7, #4]
 8004ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea8:	431a      	orrs	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	621a      	str	r2, [r3, #32]
}
 8004eae:	bf00      	nop
 8004eb0:	371c      	adds	r7, #28
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
	...

08004ebc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e06d      	b.n	8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2202      	movs	r2, #2
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a30      	ldr	r2, [pc, #192]	; (8004fbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d004      	beq.n	8004f08 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a2f      	ldr	r2, [pc, #188]	; (8004fc0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d108      	bne.n	8004f1a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f0e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f20:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a20      	ldr	r2, [pc, #128]	; (8004fbc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d022      	beq.n	8004f84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f46:	d01d      	beq.n	8004f84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a1d      	ldr	r2, [pc, #116]	; (8004fc4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d018      	beq.n	8004f84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a1c      	ldr	r2, [pc, #112]	; (8004fc8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d013      	beq.n	8004f84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a1a      	ldr	r2, [pc, #104]	; (8004fcc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d00e      	beq.n	8004f84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a15      	ldr	r2, [pc, #84]	; (8004fc0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d009      	beq.n	8004f84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a16      	ldr	r2, [pc, #88]	; (8004fd0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d004      	beq.n	8004f84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a15      	ldr	r2, [pc, #84]	; (8004fd4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d10c      	bne.n	8004f9e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	40010000 	.word	0x40010000
 8004fc0:	40010400 	.word	0x40010400
 8004fc4:	40000400 	.word	0x40000400
 8004fc8:	40000800 	.word	0x40000800
 8004fcc:	40000c00 	.word	0x40000c00
 8004fd0:	40014000 	.word	0x40014000
 8004fd4:	40001800 	.word	0x40001800

08004fd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e040      	b.n	800506c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d106      	bne.n	8005000 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7fc fd06 	bl	8001a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2224      	movs	r2, #36	; 0x24
 8005004:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 0201 	bic.w	r2, r2, #1
 8005014:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f8c0 	bl	800519c <UART_SetConfig>
 800501c:	4603      	mov	r3, r0
 800501e:	2b01      	cmp	r3, #1
 8005020:	d101      	bne.n	8005026 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e022      	b.n	800506c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502a:	2b00      	cmp	r3, #0
 800502c:	d002      	beq.n	8005034 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 fb16 	bl	8005660 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005042:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689a      	ldr	r2, [r3, #8]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005052:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f042 0201 	orr.w	r2, r2, #1
 8005062:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 fb9d 	bl	80057a4 <UART_CheckIdleState>
 800506a:	4603      	mov	r3, r0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3708      	adds	r7, #8
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b08a      	sub	sp, #40	; 0x28
 8005078:	af02      	add	r7, sp, #8
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	603b      	str	r3, [r7, #0]
 8005080:	4613      	mov	r3, r2
 8005082:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005088:	2b20      	cmp	r3, #32
 800508a:	f040 8081 	bne.w	8005190 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d002      	beq.n	800509a <HAL_UART_Transmit+0x26>
 8005094:	88fb      	ldrh	r3, [r7, #6]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e079      	b.n	8005192 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d101      	bne.n	80050ac <HAL_UART_Transmit+0x38>
 80050a8:	2302      	movs	r3, #2
 80050aa:	e072      	b.n	8005192 <HAL_UART_Transmit+0x11e>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2221      	movs	r2, #33	; 0x21
 80050c0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050c2:	f7fc fe25 	bl	8001d10 <HAL_GetTick>
 80050c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	88fa      	ldrh	r2, [r7, #6]
 80050cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	88fa      	ldrh	r2, [r7, #6]
 80050d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050e0:	d108      	bne.n	80050f4 <HAL_UART_Transmit+0x80>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d104      	bne.n	80050f4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80050ea:	2300      	movs	r3, #0
 80050ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	61bb      	str	r3, [r7, #24]
 80050f2:	e003      	b.n	80050fc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050f8:	2300      	movs	r3, #0
 80050fa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005104:	e02c      	b.n	8005160 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	2200      	movs	r2, #0
 800510e:	2180      	movs	r1, #128	; 0x80
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f000 fb7a 	bl	800580a <UART_WaitOnFlagUntilTimeout>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d001      	beq.n	8005120 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e038      	b.n	8005192 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10b      	bne.n	800513e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	881b      	ldrh	r3, [r3, #0]
 800512a:	461a      	mov	r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005134:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	3302      	adds	r3, #2
 800513a:	61bb      	str	r3, [r7, #24]
 800513c:	e007      	b.n	800514e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	781a      	ldrb	r2, [r3, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	3301      	adds	r3, #1
 800514c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005154:	b29b      	uxth	r3, r3
 8005156:	3b01      	subs	r3, #1
 8005158:	b29a      	uxth	r2, r3
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005166:	b29b      	uxth	r3, r3
 8005168:	2b00      	cmp	r3, #0
 800516a:	d1cc      	bne.n	8005106 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	2200      	movs	r2, #0
 8005174:	2140      	movs	r1, #64	; 0x40
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f000 fb47 	bl	800580a <UART_WaitOnFlagUntilTimeout>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d001      	beq.n	8005186 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e005      	b.n	8005192 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2220      	movs	r2, #32
 800518a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800518c:	2300      	movs	r3, #0
 800518e:	e000      	b.n	8005192 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005190:	2302      	movs	r3, #2
  }
}
 8005192:	4618      	mov	r0, r3
 8005194:	3720      	adds	r7, #32
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
	...

0800519c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b088      	sub	sp, #32
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051a4:	2300      	movs	r3, #0
 80051a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689a      	ldr	r2, [r3, #8]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	431a      	orrs	r2, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	431a      	orrs	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	69db      	ldr	r3, [r3, #28]
 80051bc:	4313      	orrs	r3, r2
 80051be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	4ba7      	ldr	r3, [pc, #668]	; (8005464 <UART_SetConfig+0x2c8>)
 80051c8:	4013      	ands	r3, r2
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	6812      	ldr	r2, [r2, #0]
 80051ce:	6979      	ldr	r1, [r7, #20]
 80051d0:	430b      	orrs	r3, r1
 80051d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68da      	ldr	r2, [r3, #12]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	430a      	orrs	r2, r1
 800520c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a95      	ldr	r2, [pc, #596]	; (8005468 <UART_SetConfig+0x2cc>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d120      	bne.n	800525a <UART_SetConfig+0xbe>
 8005218:	4b94      	ldr	r3, [pc, #592]	; (800546c <UART_SetConfig+0x2d0>)
 800521a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800521e:	f003 0303 	and.w	r3, r3, #3
 8005222:	2b03      	cmp	r3, #3
 8005224:	d816      	bhi.n	8005254 <UART_SetConfig+0xb8>
 8005226:	a201      	add	r2, pc, #4	; (adr r2, 800522c <UART_SetConfig+0x90>)
 8005228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800522c:	0800523d 	.word	0x0800523d
 8005230:	08005249 	.word	0x08005249
 8005234:	08005243 	.word	0x08005243
 8005238:	0800524f 	.word	0x0800524f
 800523c:	2301      	movs	r3, #1
 800523e:	77fb      	strb	r3, [r7, #31]
 8005240:	e14f      	b.n	80054e2 <UART_SetConfig+0x346>
 8005242:	2302      	movs	r3, #2
 8005244:	77fb      	strb	r3, [r7, #31]
 8005246:	e14c      	b.n	80054e2 <UART_SetConfig+0x346>
 8005248:	2304      	movs	r3, #4
 800524a:	77fb      	strb	r3, [r7, #31]
 800524c:	e149      	b.n	80054e2 <UART_SetConfig+0x346>
 800524e:	2308      	movs	r3, #8
 8005250:	77fb      	strb	r3, [r7, #31]
 8005252:	e146      	b.n	80054e2 <UART_SetConfig+0x346>
 8005254:	2310      	movs	r3, #16
 8005256:	77fb      	strb	r3, [r7, #31]
 8005258:	e143      	b.n	80054e2 <UART_SetConfig+0x346>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a84      	ldr	r2, [pc, #528]	; (8005470 <UART_SetConfig+0x2d4>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d132      	bne.n	80052ca <UART_SetConfig+0x12e>
 8005264:	4b81      	ldr	r3, [pc, #516]	; (800546c <UART_SetConfig+0x2d0>)
 8005266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800526a:	f003 030c 	and.w	r3, r3, #12
 800526e:	2b0c      	cmp	r3, #12
 8005270:	d828      	bhi.n	80052c4 <UART_SetConfig+0x128>
 8005272:	a201      	add	r2, pc, #4	; (adr r2, 8005278 <UART_SetConfig+0xdc>)
 8005274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005278:	080052ad 	.word	0x080052ad
 800527c:	080052c5 	.word	0x080052c5
 8005280:	080052c5 	.word	0x080052c5
 8005284:	080052c5 	.word	0x080052c5
 8005288:	080052b9 	.word	0x080052b9
 800528c:	080052c5 	.word	0x080052c5
 8005290:	080052c5 	.word	0x080052c5
 8005294:	080052c5 	.word	0x080052c5
 8005298:	080052b3 	.word	0x080052b3
 800529c:	080052c5 	.word	0x080052c5
 80052a0:	080052c5 	.word	0x080052c5
 80052a4:	080052c5 	.word	0x080052c5
 80052a8:	080052bf 	.word	0x080052bf
 80052ac:	2300      	movs	r3, #0
 80052ae:	77fb      	strb	r3, [r7, #31]
 80052b0:	e117      	b.n	80054e2 <UART_SetConfig+0x346>
 80052b2:	2302      	movs	r3, #2
 80052b4:	77fb      	strb	r3, [r7, #31]
 80052b6:	e114      	b.n	80054e2 <UART_SetConfig+0x346>
 80052b8:	2304      	movs	r3, #4
 80052ba:	77fb      	strb	r3, [r7, #31]
 80052bc:	e111      	b.n	80054e2 <UART_SetConfig+0x346>
 80052be:	2308      	movs	r3, #8
 80052c0:	77fb      	strb	r3, [r7, #31]
 80052c2:	e10e      	b.n	80054e2 <UART_SetConfig+0x346>
 80052c4:	2310      	movs	r3, #16
 80052c6:	77fb      	strb	r3, [r7, #31]
 80052c8:	e10b      	b.n	80054e2 <UART_SetConfig+0x346>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a69      	ldr	r2, [pc, #420]	; (8005474 <UART_SetConfig+0x2d8>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d120      	bne.n	8005316 <UART_SetConfig+0x17a>
 80052d4:	4b65      	ldr	r3, [pc, #404]	; (800546c <UART_SetConfig+0x2d0>)
 80052d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80052de:	2b30      	cmp	r3, #48	; 0x30
 80052e0:	d013      	beq.n	800530a <UART_SetConfig+0x16e>
 80052e2:	2b30      	cmp	r3, #48	; 0x30
 80052e4:	d814      	bhi.n	8005310 <UART_SetConfig+0x174>
 80052e6:	2b20      	cmp	r3, #32
 80052e8:	d009      	beq.n	80052fe <UART_SetConfig+0x162>
 80052ea:	2b20      	cmp	r3, #32
 80052ec:	d810      	bhi.n	8005310 <UART_SetConfig+0x174>
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d002      	beq.n	80052f8 <UART_SetConfig+0x15c>
 80052f2:	2b10      	cmp	r3, #16
 80052f4:	d006      	beq.n	8005304 <UART_SetConfig+0x168>
 80052f6:	e00b      	b.n	8005310 <UART_SetConfig+0x174>
 80052f8:	2300      	movs	r3, #0
 80052fa:	77fb      	strb	r3, [r7, #31]
 80052fc:	e0f1      	b.n	80054e2 <UART_SetConfig+0x346>
 80052fe:	2302      	movs	r3, #2
 8005300:	77fb      	strb	r3, [r7, #31]
 8005302:	e0ee      	b.n	80054e2 <UART_SetConfig+0x346>
 8005304:	2304      	movs	r3, #4
 8005306:	77fb      	strb	r3, [r7, #31]
 8005308:	e0eb      	b.n	80054e2 <UART_SetConfig+0x346>
 800530a:	2308      	movs	r3, #8
 800530c:	77fb      	strb	r3, [r7, #31]
 800530e:	e0e8      	b.n	80054e2 <UART_SetConfig+0x346>
 8005310:	2310      	movs	r3, #16
 8005312:	77fb      	strb	r3, [r7, #31]
 8005314:	e0e5      	b.n	80054e2 <UART_SetConfig+0x346>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a57      	ldr	r2, [pc, #348]	; (8005478 <UART_SetConfig+0x2dc>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d120      	bne.n	8005362 <UART_SetConfig+0x1c6>
 8005320:	4b52      	ldr	r3, [pc, #328]	; (800546c <UART_SetConfig+0x2d0>)
 8005322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005326:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800532a:	2bc0      	cmp	r3, #192	; 0xc0
 800532c:	d013      	beq.n	8005356 <UART_SetConfig+0x1ba>
 800532e:	2bc0      	cmp	r3, #192	; 0xc0
 8005330:	d814      	bhi.n	800535c <UART_SetConfig+0x1c0>
 8005332:	2b80      	cmp	r3, #128	; 0x80
 8005334:	d009      	beq.n	800534a <UART_SetConfig+0x1ae>
 8005336:	2b80      	cmp	r3, #128	; 0x80
 8005338:	d810      	bhi.n	800535c <UART_SetConfig+0x1c0>
 800533a:	2b00      	cmp	r3, #0
 800533c:	d002      	beq.n	8005344 <UART_SetConfig+0x1a8>
 800533e:	2b40      	cmp	r3, #64	; 0x40
 8005340:	d006      	beq.n	8005350 <UART_SetConfig+0x1b4>
 8005342:	e00b      	b.n	800535c <UART_SetConfig+0x1c0>
 8005344:	2300      	movs	r3, #0
 8005346:	77fb      	strb	r3, [r7, #31]
 8005348:	e0cb      	b.n	80054e2 <UART_SetConfig+0x346>
 800534a:	2302      	movs	r3, #2
 800534c:	77fb      	strb	r3, [r7, #31]
 800534e:	e0c8      	b.n	80054e2 <UART_SetConfig+0x346>
 8005350:	2304      	movs	r3, #4
 8005352:	77fb      	strb	r3, [r7, #31]
 8005354:	e0c5      	b.n	80054e2 <UART_SetConfig+0x346>
 8005356:	2308      	movs	r3, #8
 8005358:	77fb      	strb	r3, [r7, #31]
 800535a:	e0c2      	b.n	80054e2 <UART_SetConfig+0x346>
 800535c:	2310      	movs	r3, #16
 800535e:	77fb      	strb	r3, [r7, #31]
 8005360:	e0bf      	b.n	80054e2 <UART_SetConfig+0x346>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a45      	ldr	r2, [pc, #276]	; (800547c <UART_SetConfig+0x2e0>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d125      	bne.n	80053b8 <UART_SetConfig+0x21c>
 800536c:	4b3f      	ldr	r3, [pc, #252]	; (800546c <UART_SetConfig+0x2d0>)
 800536e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005376:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800537a:	d017      	beq.n	80053ac <UART_SetConfig+0x210>
 800537c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005380:	d817      	bhi.n	80053b2 <UART_SetConfig+0x216>
 8005382:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005386:	d00b      	beq.n	80053a0 <UART_SetConfig+0x204>
 8005388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800538c:	d811      	bhi.n	80053b2 <UART_SetConfig+0x216>
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <UART_SetConfig+0x1fe>
 8005392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005396:	d006      	beq.n	80053a6 <UART_SetConfig+0x20a>
 8005398:	e00b      	b.n	80053b2 <UART_SetConfig+0x216>
 800539a:	2300      	movs	r3, #0
 800539c:	77fb      	strb	r3, [r7, #31]
 800539e:	e0a0      	b.n	80054e2 <UART_SetConfig+0x346>
 80053a0:	2302      	movs	r3, #2
 80053a2:	77fb      	strb	r3, [r7, #31]
 80053a4:	e09d      	b.n	80054e2 <UART_SetConfig+0x346>
 80053a6:	2304      	movs	r3, #4
 80053a8:	77fb      	strb	r3, [r7, #31]
 80053aa:	e09a      	b.n	80054e2 <UART_SetConfig+0x346>
 80053ac:	2308      	movs	r3, #8
 80053ae:	77fb      	strb	r3, [r7, #31]
 80053b0:	e097      	b.n	80054e2 <UART_SetConfig+0x346>
 80053b2:	2310      	movs	r3, #16
 80053b4:	77fb      	strb	r3, [r7, #31]
 80053b6:	e094      	b.n	80054e2 <UART_SetConfig+0x346>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a30      	ldr	r2, [pc, #192]	; (8005480 <UART_SetConfig+0x2e4>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d125      	bne.n	800540e <UART_SetConfig+0x272>
 80053c2:	4b2a      	ldr	r3, [pc, #168]	; (800546c <UART_SetConfig+0x2d0>)
 80053c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80053cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053d0:	d017      	beq.n	8005402 <UART_SetConfig+0x266>
 80053d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053d6:	d817      	bhi.n	8005408 <UART_SetConfig+0x26c>
 80053d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053dc:	d00b      	beq.n	80053f6 <UART_SetConfig+0x25a>
 80053de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053e2:	d811      	bhi.n	8005408 <UART_SetConfig+0x26c>
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d003      	beq.n	80053f0 <UART_SetConfig+0x254>
 80053e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053ec:	d006      	beq.n	80053fc <UART_SetConfig+0x260>
 80053ee:	e00b      	b.n	8005408 <UART_SetConfig+0x26c>
 80053f0:	2301      	movs	r3, #1
 80053f2:	77fb      	strb	r3, [r7, #31]
 80053f4:	e075      	b.n	80054e2 <UART_SetConfig+0x346>
 80053f6:	2302      	movs	r3, #2
 80053f8:	77fb      	strb	r3, [r7, #31]
 80053fa:	e072      	b.n	80054e2 <UART_SetConfig+0x346>
 80053fc:	2304      	movs	r3, #4
 80053fe:	77fb      	strb	r3, [r7, #31]
 8005400:	e06f      	b.n	80054e2 <UART_SetConfig+0x346>
 8005402:	2308      	movs	r3, #8
 8005404:	77fb      	strb	r3, [r7, #31]
 8005406:	e06c      	b.n	80054e2 <UART_SetConfig+0x346>
 8005408:	2310      	movs	r3, #16
 800540a:	77fb      	strb	r3, [r7, #31]
 800540c:	e069      	b.n	80054e2 <UART_SetConfig+0x346>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a1c      	ldr	r2, [pc, #112]	; (8005484 <UART_SetConfig+0x2e8>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d137      	bne.n	8005488 <UART_SetConfig+0x2ec>
 8005418:	4b14      	ldr	r3, [pc, #80]	; (800546c <UART_SetConfig+0x2d0>)
 800541a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800541e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005422:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005426:	d017      	beq.n	8005458 <UART_SetConfig+0x2bc>
 8005428:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800542c:	d817      	bhi.n	800545e <UART_SetConfig+0x2c2>
 800542e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005432:	d00b      	beq.n	800544c <UART_SetConfig+0x2b0>
 8005434:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005438:	d811      	bhi.n	800545e <UART_SetConfig+0x2c2>
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <UART_SetConfig+0x2aa>
 800543e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005442:	d006      	beq.n	8005452 <UART_SetConfig+0x2b6>
 8005444:	e00b      	b.n	800545e <UART_SetConfig+0x2c2>
 8005446:	2300      	movs	r3, #0
 8005448:	77fb      	strb	r3, [r7, #31]
 800544a:	e04a      	b.n	80054e2 <UART_SetConfig+0x346>
 800544c:	2302      	movs	r3, #2
 800544e:	77fb      	strb	r3, [r7, #31]
 8005450:	e047      	b.n	80054e2 <UART_SetConfig+0x346>
 8005452:	2304      	movs	r3, #4
 8005454:	77fb      	strb	r3, [r7, #31]
 8005456:	e044      	b.n	80054e2 <UART_SetConfig+0x346>
 8005458:	2308      	movs	r3, #8
 800545a:	77fb      	strb	r3, [r7, #31]
 800545c:	e041      	b.n	80054e2 <UART_SetConfig+0x346>
 800545e:	2310      	movs	r3, #16
 8005460:	77fb      	strb	r3, [r7, #31]
 8005462:	e03e      	b.n	80054e2 <UART_SetConfig+0x346>
 8005464:	efff69f3 	.word	0xefff69f3
 8005468:	40011000 	.word	0x40011000
 800546c:	40023800 	.word	0x40023800
 8005470:	40004400 	.word	0x40004400
 8005474:	40004800 	.word	0x40004800
 8005478:	40004c00 	.word	0x40004c00
 800547c:	40005000 	.word	0x40005000
 8005480:	40011400 	.word	0x40011400
 8005484:	40007800 	.word	0x40007800
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a71      	ldr	r2, [pc, #452]	; (8005654 <UART_SetConfig+0x4b8>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d125      	bne.n	80054de <UART_SetConfig+0x342>
 8005492:	4b71      	ldr	r3, [pc, #452]	; (8005658 <UART_SetConfig+0x4bc>)
 8005494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005498:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800549c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80054a0:	d017      	beq.n	80054d2 <UART_SetConfig+0x336>
 80054a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80054a6:	d817      	bhi.n	80054d8 <UART_SetConfig+0x33c>
 80054a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054ac:	d00b      	beq.n	80054c6 <UART_SetConfig+0x32a>
 80054ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054b2:	d811      	bhi.n	80054d8 <UART_SetConfig+0x33c>
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d003      	beq.n	80054c0 <UART_SetConfig+0x324>
 80054b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054bc:	d006      	beq.n	80054cc <UART_SetConfig+0x330>
 80054be:	e00b      	b.n	80054d8 <UART_SetConfig+0x33c>
 80054c0:	2300      	movs	r3, #0
 80054c2:	77fb      	strb	r3, [r7, #31]
 80054c4:	e00d      	b.n	80054e2 <UART_SetConfig+0x346>
 80054c6:	2302      	movs	r3, #2
 80054c8:	77fb      	strb	r3, [r7, #31]
 80054ca:	e00a      	b.n	80054e2 <UART_SetConfig+0x346>
 80054cc:	2304      	movs	r3, #4
 80054ce:	77fb      	strb	r3, [r7, #31]
 80054d0:	e007      	b.n	80054e2 <UART_SetConfig+0x346>
 80054d2:	2308      	movs	r3, #8
 80054d4:	77fb      	strb	r3, [r7, #31]
 80054d6:	e004      	b.n	80054e2 <UART_SetConfig+0x346>
 80054d8:	2310      	movs	r3, #16
 80054da:	77fb      	strb	r3, [r7, #31]
 80054dc:	e001      	b.n	80054e2 <UART_SetConfig+0x346>
 80054de:	2310      	movs	r3, #16
 80054e0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054ea:	d15b      	bne.n	80055a4 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80054ec:	7ffb      	ldrb	r3, [r7, #31]
 80054ee:	2b08      	cmp	r3, #8
 80054f0:	d827      	bhi.n	8005542 <UART_SetConfig+0x3a6>
 80054f2:	a201      	add	r2, pc, #4	; (adr r2, 80054f8 <UART_SetConfig+0x35c>)
 80054f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f8:	0800551d 	.word	0x0800551d
 80054fc:	08005525 	.word	0x08005525
 8005500:	0800552d 	.word	0x0800552d
 8005504:	08005543 	.word	0x08005543
 8005508:	08005533 	.word	0x08005533
 800550c:	08005543 	.word	0x08005543
 8005510:	08005543 	.word	0x08005543
 8005514:	08005543 	.word	0x08005543
 8005518:	0800553b 	.word	0x0800553b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800551c:	f7fe fb30 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 8005520:	61b8      	str	r0, [r7, #24]
        break;
 8005522:	e013      	b.n	800554c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005524:	f7fe fb40 	bl	8003ba8 <HAL_RCC_GetPCLK2Freq>
 8005528:	61b8      	str	r0, [r7, #24]
        break;
 800552a:	e00f      	b.n	800554c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800552c:	4b4b      	ldr	r3, [pc, #300]	; (800565c <UART_SetConfig+0x4c0>)
 800552e:	61bb      	str	r3, [r7, #24]
        break;
 8005530:	e00c      	b.n	800554c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005532:	f7fe fa63 	bl	80039fc <HAL_RCC_GetSysClockFreq>
 8005536:	61b8      	str	r0, [r7, #24]
        break;
 8005538:	e008      	b.n	800554c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800553a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800553e:	61bb      	str	r3, [r7, #24]
        break;
 8005540:	e004      	b.n	800554c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005542:	2300      	movs	r3, #0
 8005544:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	77bb      	strb	r3, [r7, #30]
        break;
 800554a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d074      	beq.n	800563c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	005a      	lsls	r2, r3, #1
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	085b      	lsrs	r3, r3, #1
 800555c:	441a      	add	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	fbb2 f3f3 	udiv	r3, r2, r3
 8005566:	b29b      	uxth	r3, r3
 8005568:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	2b0f      	cmp	r3, #15
 800556e:	d916      	bls.n	800559e <UART_SetConfig+0x402>
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005576:	d212      	bcs.n	800559e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	b29b      	uxth	r3, r3
 800557c:	f023 030f 	bic.w	r3, r3, #15
 8005580:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	085b      	lsrs	r3, r3, #1
 8005586:	b29b      	uxth	r3, r3
 8005588:	f003 0307 	and.w	r3, r3, #7
 800558c:	b29a      	uxth	r2, r3
 800558e:	89fb      	ldrh	r3, [r7, #14]
 8005590:	4313      	orrs	r3, r2
 8005592:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	89fa      	ldrh	r2, [r7, #14]
 800559a:	60da      	str	r2, [r3, #12]
 800559c:	e04e      	b.n	800563c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	77bb      	strb	r3, [r7, #30]
 80055a2:	e04b      	b.n	800563c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055a4:	7ffb      	ldrb	r3, [r7, #31]
 80055a6:	2b08      	cmp	r3, #8
 80055a8:	d827      	bhi.n	80055fa <UART_SetConfig+0x45e>
 80055aa:	a201      	add	r2, pc, #4	; (adr r2, 80055b0 <UART_SetConfig+0x414>)
 80055ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b0:	080055d5 	.word	0x080055d5
 80055b4:	080055dd 	.word	0x080055dd
 80055b8:	080055e5 	.word	0x080055e5
 80055bc:	080055fb 	.word	0x080055fb
 80055c0:	080055eb 	.word	0x080055eb
 80055c4:	080055fb 	.word	0x080055fb
 80055c8:	080055fb 	.word	0x080055fb
 80055cc:	080055fb 	.word	0x080055fb
 80055d0:	080055f3 	.word	0x080055f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055d4:	f7fe fad4 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 80055d8:	61b8      	str	r0, [r7, #24]
        break;
 80055da:	e013      	b.n	8005604 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055dc:	f7fe fae4 	bl	8003ba8 <HAL_RCC_GetPCLK2Freq>
 80055e0:	61b8      	str	r0, [r7, #24]
        break;
 80055e2:	e00f      	b.n	8005604 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055e4:	4b1d      	ldr	r3, [pc, #116]	; (800565c <UART_SetConfig+0x4c0>)
 80055e6:	61bb      	str	r3, [r7, #24]
        break;
 80055e8:	e00c      	b.n	8005604 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055ea:	f7fe fa07 	bl	80039fc <HAL_RCC_GetSysClockFreq>
 80055ee:	61b8      	str	r0, [r7, #24]
        break;
 80055f0:	e008      	b.n	8005604 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055f6:	61bb      	str	r3, [r7, #24]
        break;
 80055f8:	e004      	b.n	8005604 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80055fa:	2300      	movs	r3, #0
 80055fc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	77bb      	strb	r3, [r7, #30]
        break;
 8005602:	bf00      	nop
    }

    if (pclk != 0U)
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d018      	beq.n	800563c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	085a      	lsrs	r2, r3, #1
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	441a      	add	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	fbb2 f3f3 	udiv	r3, r2, r3
 800561c:	b29b      	uxth	r3, r3
 800561e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	2b0f      	cmp	r3, #15
 8005624:	d908      	bls.n	8005638 <UART_SetConfig+0x49c>
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800562c:	d204      	bcs.n	8005638 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	60da      	str	r2, [r3, #12]
 8005636:	e001      	b.n	800563c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005648:	7fbb      	ldrb	r3, [r7, #30]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3720      	adds	r7, #32
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	40007c00 	.word	0x40007c00
 8005658:	40023800 	.word	0x40023800
 800565c:	00f42400 	.word	0x00f42400

08005660 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00a      	beq.n	800568a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	430a      	orrs	r2, r1
 8005688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00a      	beq.n	80056ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	430a      	orrs	r2, r1
 80056aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b0:	f003 0304 	and.w	r3, r3, #4
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00a      	beq.n	80056ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d2:	f003 0308 	and.w	r3, r3, #8
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00a      	beq.n	80056f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	430a      	orrs	r2, r1
 80056ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f4:	f003 0310 	and.w	r3, r3, #16
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00a      	beq.n	8005712 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	430a      	orrs	r2, r1
 8005710:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005716:	f003 0320 	and.w	r3, r3, #32
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00a      	beq.n	8005734 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800573c:	2b00      	cmp	r3, #0
 800573e:	d01a      	beq.n	8005776 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	430a      	orrs	r2, r1
 8005754:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800575e:	d10a      	bne.n	8005776 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00a      	beq.n	8005798 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	430a      	orrs	r2, r1
 8005796:	605a      	str	r2, [r3, #4]
  }
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b086      	sub	sp, #24
 80057a8:	af02      	add	r7, sp, #8
 80057aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057b4:	f7fc faac 	bl	8001d10 <HAL_GetTick>
 80057b8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0308 	and.w	r3, r3, #8
 80057c4:	2b08      	cmp	r3, #8
 80057c6:	d10e      	bne.n	80057e6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057cc:	9300      	str	r3, [sp, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f817 	bl	800580a <UART_WaitOnFlagUntilTimeout>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e00d      	b.n	8005802 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2220      	movs	r2, #32
 80057ea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2220      	movs	r2, #32
 80057f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b084      	sub	sp, #16
 800580e:	af00      	add	r7, sp, #0
 8005810:	60f8      	str	r0, [r7, #12]
 8005812:	60b9      	str	r1, [r7, #8]
 8005814:	603b      	str	r3, [r7, #0]
 8005816:	4613      	mov	r3, r2
 8005818:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800581a:	e05e      	b.n	80058da <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005822:	d05a      	beq.n	80058da <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005824:	f7fc fa74 	bl	8001d10 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	69ba      	ldr	r2, [r7, #24]
 8005830:	429a      	cmp	r2, r3
 8005832:	d302      	bcc.n	800583a <UART_WaitOnFlagUntilTimeout+0x30>
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d11b      	bne.n	8005872 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005848:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	689a      	ldr	r2, [r3, #8]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f022 0201 	bic.w	r2, r2, #1
 8005858:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2220      	movs	r2, #32
 800585e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2220      	movs	r2, #32
 8005864:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e043      	b.n	80058fa <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0304 	and.w	r3, r3, #4
 800587c:	2b00      	cmp	r3, #0
 800587e:	d02c      	beq.n	80058da <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800588a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800588e:	d124      	bne.n	80058da <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005898:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80058a8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	689a      	ldr	r2, [r3, #8]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 0201 	bic.w	r2, r2, #1
 80058b8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2220      	movs	r2, #32
 80058be:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2220      	movs	r2, #32
 80058c4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2220      	movs	r2, #32
 80058ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e00f      	b.n	80058fa <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	69da      	ldr	r2, [r3, #28]
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	4013      	ands	r3, r2
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	bf0c      	ite	eq
 80058ea:	2301      	moveq	r3, #1
 80058ec:	2300      	movne	r3, #0
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	461a      	mov	r2, r3
 80058f2:	79fb      	ldrb	r3, [r7, #7]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d091      	beq.n	800581c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
	...

08005904 <__errno>:
 8005904:	4b01      	ldr	r3, [pc, #4]	; (800590c <__errno+0x8>)
 8005906:	6818      	ldr	r0, [r3, #0]
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	2000000c 	.word	0x2000000c

08005910 <__libc_init_array>:
 8005910:	b570      	push	{r4, r5, r6, lr}
 8005912:	4d0d      	ldr	r5, [pc, #52]	; (8005948 <__libc_init_array+0x38>)
 8005914:	4c0d      	ldr	r4, [pc, #52]	; (800594c <__libc_init_array+0x3c>)
 8005916:	1b64      	subs	r4, r4, r5
 8005918:	10a4      	asrs	r4, r4, #2
 800591a:	2600      	movs	r6, #0
 800591c:	42a6      	cmp	r6, r4
 800591e:	d109      	bne.n	8005934 <__libc_init_array+0x24>
 8005920:	4d0b      	ldr	r5, [pc, #44]	; (8005950 <__libc_init_array+0x40>)
 8005922:	4c0c      	ldr	r4, [pc, #48]	; (8005954 <__libc_init_array+0x44>)
 8005924:	f002 fcee 	bl	8008304 <_init>
 8005928:	1b64      	subs	r4, r4, r5
 800592a:	10a4      	asrs	r4, r4, #2
 800592c:	2600      	movs	r6, #0
 800592e:	42a6      	cmp	r6, r4
 8005930:	d105      	bne.n	800593e <__libc_init_array+0x2e>
 8005932:	bd70      	pop	{r4, r5, r6, pc}
 8005934:	f855 3b04 	ldr.w	r3, [r5], #4
 8005938:	4798      	blx	r3
 800593a:	3601      	adds	r6, #1
 800593c:	e7ee      	b.n	800591c <__libc_init_array+0xc>
 800593e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005942:	4798      	blx	r3
 8005944:	3601      	adds	r6, #1
 8005946:	e7f2      	b.n	800592e <__libc_init_array+0x1e>
 8005948:	0800872c 	.word	0x0800872c
 800594c:	0800872c 	.word	0x0800872c
 8005950:	0800872c 	.word	0x0800872c
 8005954:	08008730 	.word	0x08008730

08005958 <malloc>:
 8005958:	4b02      	ldr	r3, [pc, #8]	; (8005964 <malloc+0xc>)
 800595a:	4601      	mov	r1, r0
 800595c:	6818      	ldr	r0, [r3, #0]
 800595e:	f000 b85b 	b.w	8005a18 <_malloc_r>
 8005962:	bf00      	nop
 8005964:	2000000c 	.word	0x2000000c

08005968 <memset>:
 8005968:	4402      	add	r2, r0
 800596a:	4603      	mov	r3, r0
 800596c:	4293      	cmp	r3, r2
 800596e:	d100      	bne.n	8005972 <memset+0xa>
 8005970:	4770      	bx	lr
 8005972:	f803 1b01 	strb.w	r1, [r3], #1
 8005976:	e7f9      	b.n	800596c <memset+0x4>

08005978 <_free_r>:
 8005978:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800597a:	2900      	cmp	r1, #0
 800597c:	d048      	beq.n	8005a10 <_free_r+0x98>
 800597e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005982:	9001      	str	r0, [sp, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	f1a1 0404 	sub.w	r4, r1, #4
 800598a:	bfb8      	it	lt
 800598c:	18e4      	addlt	r4, r4, r3
 800598e:	f001 fba1 	bl	80070d4 <__malloc_lock>
 8005992:	4a20      	ldr	r2, [pc, #128]	; (8005a14 <_free_r+0x9c>)
 8005994:	9801      	ldr	r0, [sp, #4]
 8005996:	6813      	ldr	r3, [r2, #0]
 8005998:	4615      	mov	r5, r2
 800599a:	b933      	cbnz	r3, 80059aa <_free_r+0x32>
 800599c:	6063      	str	r3, [r4, #4]
 800599e:	6014      	str	r4, [r2, #0]
 80059a0:	b003      	add	sp, #12
 80059a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059a6:	f001 bb9b 	b.w	80070e0 <__malloc_unlock>
 80059aa:	42a3      	cmp	r3, r4
 80059ac:	d90b      	bls.n	80059c6 <_free_r+0x4e>
 80059ae:	6821      	ldr	r1, [r4, #0]
 80059b0:	1862      	adds	r2, r4, r1
 80059b2:	4293      	cmp	r3, r2
 80059b4:	bf04      	itt	eq
 80059b6:	681a      	ldreq	r2, [r3, #0]
 80059b8:	685b      	ldreq	r3, [r3, #4]
 80059ba:	6063      	str	r3, [r4, #4]
 80059bc:	bf04      	itt	eq
 80059be:	1852      	addeq	r2, r2, r1
 80059c0:	6022      	streq	r2, [r4, #0]
 80059c2:	602c      	str	r4, [r5, #0]
 80059c4:	e7ec      	b.n	80059a0 <_free_r+0x28>
 80059c6:	461a      	mov	r2, r3
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	b10b      	cbz	r3, 80059d0 <_free_r+0x58>
 80059cc:	42a3      	cmp	r3, r4
 80059ce:	d9fa      	bls.n	80059c6 <_free_r+0x4e>
 80059d0:	6811      	ldr	r1, [r2, #0]
 80059d2:	1855      	adds	r5, r2, r1
 80059d4:	42a5      	cmp	r5, r4
 80059d6:	d10b      	bne.n	80059f0 <_free_r+0x78>
 80059d8:	6824      	ldr	r4, [r4, #0]
 80059da:	4421      	add	r1, r4
 80059dc:	1854      	adds	r4, r2, r1
 80059de:	42a3      	cmp	r3, r4
 80059e0:	6011      	str	r1, [r2, #0]
 80059e2:	d1dd      	bne.n	80059a0 <_free_r+0x28>
 80059e4:	681c      	ldr	r4, [r3, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	6053      	str	r3, [r2, #4]
 80059ea:	4421      	add	r1, r4
 80059ec:	6011      	str	r1, [r2, #0]
 80059ee:	e7d7      	b.n	80059a0 <_free_r+0x28>
 80059f0:	d902      	bls.n	80059f8 <_free_r+0x80>
 80059f2:	230c      	movs	r3, #12
 80059f4:	6003      	str	r3, [r0, #0]
 80059f6:	e7d3      	b.n	80059a0 <_free_r+0x28>
 80059f8:	6825      	ldr	r5, [r4, #0]
 80059fa:	1961      	adds	r1, r4, r5
 80059fc:	428b      	cmp	r3, r1
 80059fe:	bf04      	itt	eq
 8005a00:	6819      	ldreq	r1, [r3, #0]
 8005a02:	685b      	ldreq	r3, [r3, #4]
 8005a04:	6063      	str	r3, [r4, #4]
 8005a06:	bf04      	itt	eq
 8005a08:	1949      	addeq	r1, r1, r5
 8005a0a:	6021      	streq	r1, [r4, #0]
 8005a0c:	6054      	str	r4, [r2, #4]
 8005a0e:	e7c7      	b.n	80059a0 <_free_r+0x28>
 8005a10:	b003      	add	sp, #12
 8005a12:	bd30      	pop	{r4, r5, pc}
 8005a14:	20000208 	.word	0x20000208

08005a18 <_malloc_r>:
 8005a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a1a:	1ccd      	adds	r5, r1, #3
 8005a1c:	f025 0503 	bic.w	r5, r5, #3
 8005a20:	3508      	adds	r5, #8
 8005a22:	2d0c      	cmp	r5, #12
 8005a24:	bf38      	it	cc
 8005a26:	250c      	movcc	r5, #12
 8005a28:	2d00      	cmp	r5, #0
 8005a2a:	4606      	mov	r6, r0
 8005a2c:	db01      	blt.n	8005a32 <_malloc_r+0x1a>
 8005a2e:	42a9      	cmp	r1, r5
 8005a30:	d903      	bls.n	8005a3a <_malloc_r+0x22>
 8005a32:	230c      	movs	r3, #12
 8005a34:	6033      	str	r3, [r6, #0]
 8005a36:	2000      	movs	r0, #0
 8005a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a3a:	f001 fb4b 	bl	80070d4 <__malloc_lock>
 8005a3e:	4921      	ldr	r1, [pc, #132]	; (8005ac4 <_malloc_r+0xac>)
 8005a40:	680a      	ldr	r2, [r1, #0]
 8005a42:	4614      	mov	r4, r2
 8005a44:	b99c      	cbnz	r4, 8005a6e <_malloc_r+0x56>
 8005a46:	4f20      	ldr	r7, [pc, #128]	; (8005ac8 <_malloc_r+0xb0>)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	b923      	cbnz	r3, 8005a56 <_malloc_r+0x3e>
 8005a4c:	4621      	mov	r1, r4
 8005a4e:	4630      	mov	r0, r6
 8005a50:	f000 fca6 	bl	80063a0 <_sbrk_r>
 8005a54:	6038      	str	r0, [r7, #0]
 8005a56:	4629      	mov	r1, r5
 8005a58:	4630      	mov	r0, r6
 8005a5a:	f000 fca1 	bl	80063a0 <_sbrk_r>
 8005a5e:	1c43      	adds	r3, r0, #1
 8005a60:	d123      	bne.n	8005aaa <_malloc_r+0x92>
 8005a62:	230c      	movs	r3, #12
 8005a64:	6033      	str	r3, [r6, #0]
 8005a66:	4630      	mov	r0, r6
 8005a68:	f001 fb3a 	bl	80070e0 <__malloc_unlock>
 8005a6c:	e7e3      	b.n	8005a36 <_malloc_r+0x1e>
 8005a6e:	6823      	ldr	r3, [r4, #0]
 8005a70:	1b5b      	subs	r3, r3, r5
 8005a72:	d417      	bmi.n	8005aa4 <_malloc_r+0x8c>
 8005a74:	2b0b      	cmp	r3, #11
 8005a76:	d903      	bls.n	8005a80 <_malloc_r+0x68>
 8005a78:	6023      	str	r3, [r4, #0]
 8005a7a:	441c      	add	r4, r3
 8005a7c:	6025      	str	r5, [r4, #0]
 8005a7e:	e004      	b.n	8005a8a <_malloc_r+0x72>
 8005a80:	6863      	ldr	r3, [r4, #4]
 8005a82:	42a2      	cmp	r2, r4
 8005a84:	bf0c      	ite	eq
 8005a86:	600b      	streq	r3, [r1, #0]
 8005a88:	6053      	strne	r3, [r2, #4]
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	f001 fb28 	bl	80070e0 <__malloc_unlock>
 8005a90:	f104 000b 	add.w	r0, r4, #11
 8005a94:	1d23      	adds	r3, r4, #4
 8005a96:	f020 0007 	bic.w	r0, r0, #7
 8005a9a:	1ac2      	subs	r2, r0, r3
 8005a9c:	d0cc      	beq.n	8005a38 <_malloc_r+0x20>
 8005a9e:	1a1b      	subs	r3, r3, r0
 8005aa0:	50a3      	str	r3, [r4, r2]
 8005aa2:	e7c9      	b.n	8005a38 <_malloc_r+0x20>
 8005aa4:	4622      	mov	r2, r4
 8005aa6:	6864      	ldr	r4, [r4, #4]
 8005aa8:	e7cc      	b.n	8005a44 <_malloc_r+0x2c>
 8005aaa:	1cc4      	adds	r4, r0, #3
 8005aac:	f024 0403 	bic.w	r4, r4, #3
 8005ab0:	42a0      	cmp	r0, r4
 8005ab2:	d0e3      	beq.n	8005a7c <_malloc_r+0x64>
 8005ab4:	1a21      	subs	r1, r4, r0
 8005ab6:	4630      	mov	r0, r6
 8005ab8:	f000 fc72 	bl	80063a0 <_sbrk_r>
 8005abc:	3001      	adds	r0, #1
 8005abe:	d1dd      	bne.n	8005a7c <_malloc_r+0x64>
 8005ac0:	e7cf      	b.n	8005a62 <_malloc_r+0x4a>
 8005ac2:	bf00      	nop
 8005ac4:	20000208 	.word	0x20000208
 8005ac8:	2000020c 	.word	0x2000020c

08005acc <__cvt>:
 8005acc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ad0:	ec55 4b10 	vmov	r4, r5, d0
 8005ad4:	2d00      	cmp	r5, #0
 8005ad6:	460e      	mov	r6, r1
 8005ad8:	4619      	mov	r1, r3
 8005ada:	462b      	mov	r3, r5
 8005adc:	bfbb      	ittet	lt
 8005ade:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005ae2:	461d      	movlt	r5, r3
 8005ae4:	2300      	movge	r3, #0
 8005ae6:	232d      	movlt	r3, #45	; 0x2d
 8005ae8:	700b      	strb	r3, [r1, #0]
 8005aea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005aec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005af0:	4691      	mov	r9, r2
 8005af2:	f023 0820 	bic.w	r8, r3, #32
 8005af6:	bfbc      	itt	lt
 8005af8:	4622      	movlt	r2, r4
 8005afa:	4614      	movlt	r4, r2
 8005afc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b00:	d005      	beq.n	8005b0e <__cvt+0x42>
 8005b02:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005b06:	d100      	bne.n	8005b0a <__cvt+0x3e>
 8005b08:	3601      	adds	r6, #1
 8005b0a:	2102      	movs	r1, #2
 8005b0c:	e000      	b.n	8005b10 <__cvt+0x44>
 8005b0e:	2103      	movs	r1, #3
 8005b10:	ab03      	add	r3, sp, #12
 8005b12:	9301      	str	r3, [sp, #4]
 8005b14:	ab02      	add	r3, sp, #8
 8005b16:	9300      	str	r3, [sp, #0]
 8005b18:	ec45 4b10 	vmov	d0, r4, r5
 8005b1c:	4653      	mov	r3, sl
 8005b1e:	4632      	mov	r2, r6
 8005b20:	f000 fcda 	bl	80064d8 <_dtoa_r>
 8005b24:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005b28:	4607      	mov	r7, r0
 8005b2a:	d102      	bne.n	8005b32 <__cvt+0x66>
 8005b2c:	f019 0f01 	tst.w	r9, #1
 8005b30:	d022      	beq.n	8005b78 <__cvt+0xac>
 8005b32:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b36:	eb07 0906 	add.w	r9, r7, r6
 8005b3a:	d110      	bne.n	8005b5e <__cvt+0x92>
 8005b3c:	783b      	ldrb	r3, [r7, #0]
 8005b3e:	2b30      	cmp	r3, #48	; 0x30
 8005b40:	d10a      	bne.n	8005b58 <__cvt+0x8c>
 8005b42:	2200      	movs	r2, #0
 8005b44:	2300      	movs	r3, #0
 8005b46:	4620      	mov	r0, r4
 8005b48:	4629      	mov	r1, r5
 8005b4a:	f7fa ffdd 	bl	8000b08 <__aeabi_dcmpeq>
 8005b4e:	b918      	cbnz	r0, 8005b58 <__cvt+0x8c>
 8005b50:	f1c6 0601 	rsb	r6, r6, #1
 8005b54:	f8ca 6000 	str.w	r6, [sl]
 8005b58:	f8da 3000 	ldr.w	r3, [sl]
 8005b5c:	4499      	add	r9, r3
 8005b5e:	2200      	movs	r2, #0
 8005b60:	2300      	movs	r3, #0
 8005b62:	4620      	mov	r0, r4
 8005b64:	4629      	mov	r1, r5
 8005b66:	f7fa ffcf 	bl	8000b08 <__aeabi_dcmpeq>
 8005b6a:	b108      	cbz	r0, 8005b70 <__cvt+0xa4>
 8005b6c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b70:	2230      	movs	r2, #48	; 0x30
 8005b72:	9b03      	ldr	r3, [sp, #12]
 8005b74:	454b      	cmp	r3, r9
 8005b76:	d307      	bcc.n	8005b88 <__cvt+0xbc>
 8005b78:	9b03      	ldr	r3, [sp, #12]
 8005b7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b7c:	1bdb      	subs	r3, r3, r7
 8005b7e:	4638      	mov	r0, r7
 8005b80:	6013      	str	r3, [r2, #0]
 8005b82:	b004      	add	sp, #16
 8005b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b88:	1c59      	adds	r1, r3, #1
 8005b8a:	9103      	str	r1, [sp, #12]
 8005b8c:	701a      	strb	r2, [r3, #0]
 8005b8e:	e7f0      	b.n	8005b72 <__cvt+0xa6>

08005b90 <__exponent>:
 8005b90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b92:	4603      	mov	r3, r0
 8005b94:	2900      	cmp	r1, #0
 8005b96:	bfb8      	it	lt
 8005b98:	4249      	neglt	r1, r1
 8005b9a:	f803 2b02 	strb.w	r2, [r3], #2
 8005b9e:	bfb4      	ite	lt
 8005ba0:	222d      	movlt	r2, #45	; 0x2d
 8005ba2:	222b      	movge	r2, #43	; 0x2b
 8005ba4:	2909      	cmp	r1, #9
 8005ba6:	7042      	strb	r2, [r0, #1]
 8005ba8:	dd2a      	ble.n	8005c00 <__exponent+0x70>
 8005baa:	f10d 0407 	add.w	r4, sp, #7
 8005bae:	46a4      	mov	ip, r4
 8005bb0:	270a      	movs	r7, #10
 8005bb2:	46a6      	mov	lr, r4
 8005bb4:	460a      	mov	r2, r1
 8005bb6:	fb91 f6f7 	sdiv	r6, r1, r7
 8005bba:	fb07 1516 	mls	r5, r7, r6, r1
 8005bbe:	3530      	adds	r5, #48	; 0x30
 8005bc0:	2a63      	cmp	r2, #99	; 0x63
 8005bc2:	f104 34ff 	add.w	r4, r4, #4294967295
 8005bc6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005bca:	4631      	mov	r1, r6
 8005bcc:	dcf1      	bgt.n	8005bb2 <__exponent+0x22>
 8005bce:	3130      	adds	r1, #48	; 0x30
 8005bd0:	f1ae 0502 	sub.w	r5, lr, #2
 8005bd4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005bd8:	1c44      	adds	r4, r0, #1
 8005bda:	4629      	mov	r1, r5
 8005bdc:	4561      	cmp	r1, ip
 8005bde:	d30a      	bcc.n	8005bf6 <__exponent+0x66>
 8005be0:	f10d 0209 	add.w	r2, sp, #9
 8005be4:	eba2 020e 	sub.w	r2, r2, lr
 8005be8:	4565      	cmp	r5, ip
 8005bea:	bf88      	it	hi
 8005bec:	2200      	movhi	r2, #0
 8005bee:	4413      	add	r3, r2
 8005bf0:	1a18      	subs	r0, r3, r0
 8005bf2:	b003      	add	sp, #12
 8005bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bf6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bfa:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005bfe:	e7ed      	b.n	8005bdc <__exponent+0x4c>
 8005c00:	2330      	movs	r3, #48	; 0x30
 8005c02:	3130      	adds	r1, #48	; 0x30
 8005c04:	7083      	strb	r3, [r0, #2]
 8005c06:	70c1      	strb	r1, [r0, #3]
 8005c08:	1d03      	adds	r3, r0, #4
 8005c0a:	e7f1      	b.n	8005bf0 <__exponent+0x60>

08005c0c <_printf_float>:
 8005c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c10:	ed2d 8b02 	vpush	{d8}
 8005c14:	b08d      	sub	sp, #52	; 0x34
 8005c16:	460c      	mov	r4, r1
 8005c18:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005c1c:	4616      	mov	r6, r2
 8005c1e:	461f      	mov	r7, r3
 8005c20:	4605      	mov	r5, r0
 8005c22:	f001 fa45 	bl	80070b0 <_localeconv_r>
 8005c26:	f8d0 a000 	ldr.w	sl, [r0]
 8005c2a:	4650      	mov	r0, sl
 8005c2c:	f7fa faf0 	bl	8000210 <strlen>
 8005c30:	2300      	movs	r3, #0
 8005c32:	930a      	str	r3, [sp, #40]	; 0x28
 8005c34:	6823      	ldr	r3, [r4, #0]
 8005c36:	9305      	str	r3, [sp, #20]
 8005c38:	f8d8 3000 	ldr.w	r3, [r8]
 8005c3c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005c40:	3307      	adds	r3, #7
 8005c42:	f023 0307 	bic.w	r3, r3, #7
 8005c46:	f103 0208 	add.w	r2, r3, #8
 8005c4a:	f8c8 2000 	str.w	r2, [r8]
 8005c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c52:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005c56:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005c5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005c5e:	9307      	str	r3, [sp, #28]
 8005c60:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c64:	ee08 0a10 	vmov	s16, r0
 8005c68:	4b9f      	ldr	r3, [pc, #636]	; (8005ee8 <_printf_float+0x2dc>)
 8005c6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c72:	f7fa ff7b 	bl	8000b6c <__aeabi_dcmpun>
 8005c76:	bb88      	cbnz	r0, 8005cdc <_printf_float+0xd0>
 8005c78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c7c:	4b9a      	ldr	r3, [pc, #616]	; (8005ee8 <_printf_float+0x2dc>)
 8005c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c82:	f7fa ff55 	bl	8000b30 <__aeabi_dcmple>
 8005c86:	bb48      	cbnz	r0, 8005cdc <_printf_float+0xd0>
 8005c88:	2200      	movs	r2, #0
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	4640      	mov	r0, r8
 8005c8e:	4649      	mov	r1, r9
 8005c90:	f7fa ff44 	bl	8000b1c <__aeabi_dcmplt>
 8005c94:	b110      	cbz	r0, 8005c9c <_printf_float+0x90>
 8005c96:	232d      	movs	r3, #45	; 0x2d
 8005c98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c9c:	4b93      	ldr	r3, [pc, #588]	; (8005eec <_printf_float+0x2e0>)
 8005c9e:	4894      	ldr	r0, [pc, #592]	; (8005ef0 <_printf_float+0x2e4>)
 8005ca0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005ca4:	bf94      	ite	ls
 8005ca6:	4698      	movls	r8, r3
 8005ca8:	4680      	movhi	r8, r0
 8005caa:	2303      	movs	r3, #3
 8005cac:	6123      	str	r3, [r4, #16]
 8005cae:	9b05      	ldr	r3, [sp, #20]
 8005cb0:	f023 0204 	bic.w	r2, r3, #4
 8005cb4:	6022      	str	r2, [r4, #0]
 8005cb6:	f04f 0900 	mov.w	r9, #0
 8005cba:	9700      	str	r7, [sp, #0]
 8005cbc:	4633      	mov	r3, r6
 8005cbe:	aa0b      	add	r2, sp, #44	; 0x2c
 8005cc0:	4621      	mov	r1, r4
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	f000 f9d8 	bl	8006078 <_printf_common>
 8005cc8:	3001      	adds	r0, #1
 8005cca:	f040 8090 	bne.w	8005dee <_printf_float+0x1e2>
 8005cce:	f04f 30ff 	mov.w	r0, #4294967295
 8005cd2:	b00d      	add	sp, #52	; 0x34
 8005cd4:	ecbd 8b02 	vpop	{d8}
 8005cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cdc:	4642      	mov	r2, r8
 8005cde:	464b      	mov	r3, r9
 8005ce0:	4640      	mov	r0, r8
 8005ce2:	4649      	mov	r1, r9
 8005ce4:	f7fa ff42 	bl	8000b6c <__aeabi_dcmpun>
 8005ce8:	b140      	cbz	r0, 8005cfc <_printf_float+0xf0>
 8005cea:	464b      	mov	r3, r9
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	bfbc      	itt	lt
 8005cf0:	232d      	movlt	r3, #45	; 0x2d
 8005cf2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005cf6:	487f      	ldr	r0, [pc, #508]	; (8005ef4 <_printf_float+0x2e8>)
 8005cf8:	4b7f      	ldr	r3, [pc, #508]	; (8005ef8 <_printf_float+0x2ec>)
 8005cfa:	e7d1      	b.n	8005ca0 <_printf_float+0x94>
 8005cfc:	6863      	ldr	r3, [r4, #4]
 8005cfe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005d02:	9206      	str	r2, [sp, #24]
 8005d04:	1c5a      	adds	r2, r3, #1
 8005d06:	d13f      	bne.n	8005d88 <_printf_float+0x17c>
 8005d08:	2306      	movs	r3, #6
 8005d0a:	6063      	str	r3, [r4, #4]
 8005d0c:	9b05      	ldr	r3, [sp, #20]
 8005d0e:	6861      	ldr	r1, [r4, #4]
 8005d10:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005d14:	2300      	movs	r3, #0
 8005d16:	9303      	str	r3, [sp, #12]
 8005d18:	ab0a      	add	r3, sp, #40	; 0x28
 8005d1a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005d1e:	ab09      	add	r3, sp, #36	; 0x24
 8005d20:	ec49 8b10 	vmov	d0, r8, r9
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	6022      	str	r2, [r4, #0]
 8005d28:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005d2c:	4628      	mov	r0, r5
 8005d2e:	f7ff fecd 	bl	8005acc <__cvt>
 8005d32:	9b06      	ldr	r3, [sp, #24]
 8005d34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d36:	2b47      	cmp	r3, #71	; 0x47
 8005d38:	4680      	mov	r8, r0
 8005d3a:	d108      	bne.n	8005d4e <_printf_float+0x142>
 8005d3c:	1cc8      	adds	r0, r1, #3
 8005d3e:	db02      	blt.n	8005d46 <_printf_float+0x13a>
 8005d40:	6863      	ldr	r3, [r4, #4]
 8005d42:	4299      	cmp	r1, r3
 8005d44:	dd41      	ble.n	8005dca <_printf_float+0x1be>
 8005d46:	f1ab 0b02 	sub.w	fp, fp, #2
 8005d4a:	fa5f fb8b 	uxtb.w	fp, fp
 8005d4e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d52:	d820      	bhi.n	8005d96 <_printf_float+0x18a>
 8005d54:	3901      	subs	r1, #1
 8005d56:	465a      	mov	r2, fp
 8005d58:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d5c:	9109      	str	r1, [sp, #36]	; 0x24
 8005d5e:	f7ff ff17 	bl	8005b90 <__exponent>
 8005d62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d64:	1813      	adds	r3, r2, r0
 8005d66:	2a01      	cmp	r2, #1
 8005d68:	4681      	mov	r9, r0
 8005d6a:	6123      	str	r3, [r4, #16]
 8005d6c:	dc02      	bgt.n	8005d74 <_printf_float+0x168>
 8005d6e:	6822      	ldr	r2, [r4, #0]
 8005d70:	07d2      	lsls	r2, r2, #31
 8005d72:	d501      	bpl.n	8005d78 <_printf_float+0x16c>
 8005d74:	3301      	adds	r3, #1
 8005d76:	6123      	str	r3, [r4, #16]
 8005d78:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d09c      	beq.n	8005cba <_printf_float+0xae>
 8005d80:	232d      	movs	r3, #45	; 0x2d
 8005d82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d86:	e798      	b.n	8005cba <_printf_float+0xae>
 8005d88:	9a06      	ldr	r2, [sp, #24]
 8005d8a:	2a47      	cmp	r2, #71	; 0x47
 8005d8c:	d1be      	bne.n	8005d0c <_printf_float+0x100>
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1bc      	bne.n	8005d0c <_printf_float+0x100>
 8005d92:	2301      	movs	r3, #1
 8005d94:	e7b9      	b.n	8005d0a <_printf_float+0xfe>
 8005d96:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005d9a:	d118      	bne.n	8005dce <_printf_float+0x1c2>
 8005d9c:	2900      	cmp	r1, #0
 8005d9e:	6863      	ldr	r3, [r4, #4]
 8005da0:	dd0b      	ble.n	8005dba <_printf_float+0x1ae>
 8005da2:	6121      	str	r1, [r4, #16]
 8005da4:	b913      	cbnz	r3, 8005dac <_printf_float+0x1a0>
 8005da6:	6822      	ldr	r2, [r4, #0]
 8005da8:	07d0      	lsls	r0, r2, #31
 8005daa:	d502      	bpl.n	8005db2 <_printf_float+0x1a6>
 8005dac:	3301      	adds	r3, #1
 8005dae:	440b      	add	r3, r1
 8005db0:	6123      	str	r3, [r4, #16]
 8005db2:	65a1      	str	r1, [r4, #88]	; 0x58
 8005db4:	f04f 0900 	mov.w	r9, #0
 8005db8:	e7de      	b.n	8005d78 <_printf_float+0x16c>
 8005dba:	b913      	cbnz	r3, 8005dc2 <_printf_float+0x1b6>
 8005dbc:	6822      	ldr	r2, [r4, #0]
 8005dbe:	07d2      	lsls	r2, r2, #31
 8005dc0:	d501      	bpl.n	8005dc6 <_printf_float+0x1ba>
 8005dc2:	3302      	adds	r3, #2
 8005dc4:	e7f4      	b.n	8005db0 <_printf_float+0x1a4>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e7f2      	b.n	8005db0 <_printf_float+0x1a4>
 8005dca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dd0:	4299      	cmp	r1, r3
 8005dd2:	db05      	blt.n	8005de0 <_printf_float+0x1d4>
 8005dd4:	6823      	ldr	r3, [r4, #0]
 8005dd6:	6121      	str	r1, [r4, #16]
 8005dd8:	07d8      	lsls	r0, r3, #31
 8005dda:	d5ea      	bpl.n	8005db2 <_printf_float+0x1a6>
 8005ddc:	1c4b      	adds	r3, r1, #1
 8005dde:	e7e7      	b.n	8005db0 <_printf_float+0x1a4>
 8005de0:	2900      	cmp	r1, #0
 8005de2:	bfd4      	ite	le
 8005de4:	f1c1 0202 	rsble	r2, r1, #2
 8005de8:	2201      	movgt	r2, #1
 8005dea:	4413      	add	r3, r2
 8005dec:	e7e0      	b.n	8005db0 <_printf_float+0x1a4>
 8005dee:	6823      	ldr	r3, [r4, #0]
 8005df0:	055a      	lsls	r2, r3, #21
 8005df2:	d407      	bmi.n	8005e04 <_printf_float+0x1f8>
 8005df4:	6923      	ldr	r3, [r4, #16]
 8005df6:	4642      	mov	r2, r8
 8005df8:	4631      	mov	r1, r6
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	47b8      	blx	r7
 8005dfe:	3001      	adds	r0, #1
 8005e00:	d12c      	bne.n	8005e5c <_printf_float+0x250>
 8005e02:	e764      	b.n	8005cce <_printf_float+0xc2>
 8005e04:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005e08:	f240 80e0 	bls.w	8005fcc <_printf_float+0x3c0>
 8005e0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e10:	2200      	movs	r2, #0
 8005e12:	2300      	movs	r3, #0
 8005e14:	f7fa fe78 	bl	8000b08 <__aeabi_dcmpeq>
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	d034      	beq.n	8005e86 <_printf_float+0x27a>
 8005e1c:	4a37      	ldr	r2, [pc, #220]	; (8005efc <_printf_float+0x2f0>)
 8005e1e:	2301      	movs	r3, #1
 8005e20:	4631      	mov	r1, r6
 8005e22:	4628      	mov	r0, r5
 8005e24:	47b8      	blx	r7
 8005e26:	3001      	adds	r0, #1
 8005e28:	f43f af51 	beq.w	8005cce <_printf_float+0xc2>
 8005e2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e30:	429a      	cmp	r2, r3
 8005e32:	db02      	blt.n	8005e3a <_printf_float+0x22e>
 8005e34:	6823      	ldr	r3, [r4, #0]
 8005e36:	07d8      	lsls	r0, r3, #31
 8005e38:	d510      	bpl.n	8005e5c <_printf_float+0x250>
 8005e3a:	ee18 3a10 	vmov	r3, s16
 8005e3e:	4652      	mov	r2, sl
 8005e40:	4631      	mov	r1, r6
 8005e42:	4628      	mov	r0, r5
 8005e44:	47b8      	blx	r7
 8005e46:	3001      	adds	r0, #1
 8005e48:	f43f af41 	beq.w	8005cce <_printf_float+0xc2>
 8005e4c:	f04f 0800 	mov.w	r8, #0
 8005e50:	f104 091a 	add.w	r9, r4, #26
 8005e54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e56:	3b01      	subs	r3, #1
 8005e58:	4543      	cmp	r3, r8
 8005e5a:	dc09      	bgt.n	8005e70 <_printf_float+0x264>
 8005e5c:	6823      	ldr	r3, [r4, #0]
 8005e5e:	079b      	lsls	r3, r3, #30
 8005e60:	f100 8105 	bmi.w	800606e <_printf_float+0x462>
 8005e64:	68e0      	ldr	r0, [r4, #12]
 8005e66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e68:	4298      	cmp	r0, r3
 8005e6a:	bfb8      	it	lt
 8005e6c:	4618      	movlt	r0, r3
 8005e6e:	e730      	b.n	8005cd2 <_printf_float+0xc6>
 8005e70:	2301      	movs	r3, #1
 8005e72:	464a      	mov	r2, r9
 8005e74:	4631      	mov	r1, r6
 8005e76:	4628      	mov	r0, r5
 8005e78:	47b8      	blx	r7
 8005e7a:	3001      	adds	r0, #1
 8005e7c:	f43f af27 	beq.w	8005cce <_printf_float+0xc2>
 8005e80:	f108 0801 	add.w	r8, r8, #1
 8005e84:	e7e6      	b.n	8005e54 <_printf_float+0x248>
 8005e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	dc39      	bgt.n	8005f00 <_printf_float+0x2f4>
 8005e8c:	4a1b      	ldr	r2, [pc, #108]	; (8005efc <_printf_float+0x2f0>)
 8005e8e:	2301      	movs	r3, #1
 8005e90:	4631      	mov	r1, r6
 8005e92:	4628      	mov	r0, r5
 8005e94:	47b8      	blx	r7
 8005e96:	3001      	adds	r0, #1
 8005e98:	f43f af19 	beq.w	8005cce <_printf_float+0xc2>
 8005e9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	d102      	bne.n	8005eaa <_printf_float+0x29e>
 8005ea4:	6823      	ldr	r3, [r4, #0]
 8005ea6:	07d9      	lsls	r1, r3, #31
 8005ea8:	d5d8      	bpl.n	8005e5c <_printf_float+0x250>
 8005eaa:	ee18 3a10 	vmov	r3, s16
 8005eae:	4652      	mov	r2, sl
 8005eb0:	4631      	mov	r1, r6
 8005eb2:	4628      	mov	r0, r5
 8005eb4:	47b8      	blx	r7
 8005eb6:	3001      	adds	r0, #1
 8005eb8:	f43f af09 	beq.w	8005cce <_printf_float+0xc2>
 8005ebc:	f04f 0900 	mov.w	r9, #0
 8005ec0:	f104 0a1a 	add.w	sl, r4, #26
 8005ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ec6:	425b      	negs	r3, r3
 8005ec8:	454b      	cmp	r3, r9
 8005eca:	dc01      	bgt.n	8005ed0 <_printf_float+0x2c4>
 8005ecc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ece:	e792      	b.n	8005df6 <_printf_float+0x1ea>
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	4652      	mov	r2, sl
 8005ed4:	4631      	mov	r1, r6
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	47b8      	blx	r7
 8005eda:	3001      	adds	r0, #1
 8005edc:	f43f aef7 	beq.w	8005cce <_printf_float+0xc2>
 8005ee0:	f109 0901 	add.w	r9, r9, #1
 8005ee4:	e7ee      	b.n	8005ec4 <_printf_float+0x2b8>
 8005ee6:	bf00      	nop
 8005ee8:	7fefffff 	.word	0x7fefffff
 8005eec:	08008344 	.word	0x08008344
 8005ef0:	08008348 	.word	0x08008348
 8005ef4:	08008350 	.word	0x08008350
 8005ef8:	0800834c 	.word	0x0800834c
 8005efc:	08008354 	.word	0x08008354
 8005f00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f04:	429a      	cmp	r2, r3
 8005f06:	bfa8      	it	ge
 8005f08:	461a      	movge	r2, r3
 8005f0a:	2a00      	cmp	r2, #0
 8005f0c:	4691      	mov	r9, r2
 8005f0e:	dc37      	bgt.n	8005f80 <_printf_float+0x374>
 8005f10:	f04f 0b00 	mov.w	fp, #0
 8005f14:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f18:	f104 021a 	add.w	r2, r4, #26
 8005f1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f1e:	9305      	str	r3, [sp, #20]
 8005f20:	eba3 0309 	sub.w	r3, r3, r9
 8005f24:	455b      	cmp	r3, fp
 8005f26:	dc33      	bgt.n	8005f90 <_printf_float+0x384>
 8005f28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	db3b      	blt.n	8005fa8 <_printf_float+0x39c>
 8005f30:	6823      	ldr	r3, [r4, #0]
 8005f32:	07da      	lsls	r2, r3, #31
 8005f34:	d438      	bmi.n	8005fa8 <_printf_float+0x39c>
 8005f36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f38:	9b05      	ldr	r3, [sp, #20]
 8005f3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	eba2 0901 	sub.w	r9, r2, r1
 8005f42:	4599      	cmp	r9, r3
 8005f44:	bfa8      	it	ge
 8005f46:	4699      	movge	r9, r3
 8005f48:	f1b9 0f00 	cmp.w	r9, #0
 8005f4c:	dc35      	bgt.n	8005fba <_printf_float+0x3ae>
 8005f4e:	f04f 0800 	mov.w	r8, #0
 8005f52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f56:	f104 0a1a 	add.w	sl, r4, #26
 8005f5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f5e:	1a9b      	subs	r3, r3, r2
 8005f60:	eba3 0309 	sub.w	r3, r3, r9
 8005f64:	4543      	cmp	r3, r8
 8005f66:	f77f af79 	ble.w	8005e5c <_printf_float+0x250>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	4652      	mov	r2, sl
 8005f6e:	4631      	mov	r1, r6
 8005f70:	4628      	mov	r0, r5
 8005f72:	47b8      	blx	r7
 8005f74:	3001      	adds	r0, #1
 8005f76:	f43f aeaa 	beq.w	8005cce <_printf_float+0xc2>
 8005f7a:	f108 0801 	add.w	r8, r8, #1
 8005f7e:	e7ec      	b.n	8005f5a <_printf_float+0x34e>
 8005f80:	4613      	mov	r3, r2
 8005f82:	4631      	mov	r1, r6
 8005f84:	4642      	mov	r2, r8
 8005f86:	4628      	mov	r0, r5
 8005f88:	47b8      	blx	r7
 8005f8a:	3001      	adds	r0, #1
 8005f8c:	d1c0      	bne.n	8005f10 <_printf_float+0x304>
 8005f8e:	e69e      	b.n	8005cce <_printf_float+0xc2>
 8005f90:	2301      	movs	r3, #1
 8005f92:	4631      	mov	r1, r6
 8005f94:	4628      	mov	r0, r5
 8005f96:	9205      	str	r2, [sp, #20]
 8005f98:	47b8      	blx	r7
 8005f9a:	3001      	adds	r0, #1
 8005f9c:	f43f ae97 	beq.w	8005cce <_printf_float+0xc2>
 8005fa0:	9a05      	ldr	r2, [sp, #20]
 8005fa2:	f10b 0b01 	add.w	fp, fp, #1
 8005fa6:	e7b9      	b.n	8005f1c <_printf_float+0x310>
 8005fa8:	ee18 3a10 	vmov	r3, s16
 8005fac:	4652      	mov	r2, sl
 8005fae:	4631      	mov	r1, r6
 8005fb0:	4628      	mov	r0, r5
 8005fb2:	47b8      	blx	r7
 8005fb4:	3001      	adds	r0, #1
 8005fb6:	d1be      	bne.n	8005f36 <_printf_float+0x32a>
 8005fb8:	e689      	b.n	8005cce <_printf_float+0xc2>
 8005fba:	9a05      	ldr	r2, [sp, #20]
 8005fbc:	464b      	mov	r3, r9
 8005fbe:	4442      	add	r2, r8
 8005fc0:	4631      	mov	r1, r6
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	47b8      	blx	r7
 8005fc6:	3001      	adds	r0, #1
 8005fc8:	d1c1      	bne.n	8005f4e <_printf_float+0x342>
 8005fca:	e680      	b.n	8005cce <_printf_float+0xc2>
 8005fcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fce:	2a01      	cmp	r2, #1
 8005fd0:	dc01      	bgt.n	8005fd6 <_printf_float+0x3ca>
 8005fd2:	07db      	lsls	r3, r3, #31
 8005fd4:	d538      	bpl.n	8006048 <_printf_float+0x43c>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	4642      	mov	r2, r8
 8005fda:	4631      	mov	r1, r6
 8005fdc:	4628      	mov	r0, r5
 8005fde:	47b8      	blx	r7
 8005fe0:	3001      	adds	r0, #1
 8005fe2:	f43f ae74 	beq.w	8005cce <_printf_float+0xc2>
 8005fe6:	ee18 3a10 	vmov	r3, s16
 8005fea:	4652      	mov	r2, sl
 8005fec:	4631      	mov	r1, r6
 8005fee:	4628      	mov	r0, r5
 8005ff0:	47b8      	blx	r7
 8005ff2:	3001      	adds	r0, #1
 8005ff4:	f43f ae6b 	beq.w	8005cce <_printf_float+0xc2>
 8005ff8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	2300      	movs	r3, #0
 8006000:	f7fa fd82 	bl	8000b08 <__aeabi_dcmpeq>
 8006004:	b9d8      	cbnz	r0, 800603e <_printf_float+0x432>
 8006006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006008:	f108 0201 	add.w	r2, r8, #1
 800600c:	3b01      	subs	r3, #1
 800600e:	4631      	mov	r1, r6
 8006010:	4628      	mov	r0, r5
 8006012:	47b8      	blx	r7
 8006014:	3001      	adds	r0, #1
 8006016:	d10e      	bne.n	8006036 <_printf_float+0x42a>
 8006018:	e659      	b.n	8005cce <_printf_float+0xc2>
 800601a:	2301      	movs	r3, #1
 800601c:	4652      	mov	r2, sl
 800601e:	4631      	mov	r1, r6
 8006020:	4628      	mov	r0, r5
 8006022:	47b8      	blx	r7
 8006024:	3001      	adds	r0, #1
 8006026:	f43f ae52 	beq.w	8005cce <_printf_float+0xc2>
 800602a:	f108 0801 	add.w	r8, r8, #1
 800602e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006030:	3b01      	subs	r3, #1
 8006032:	4543      	cmp	r3, r8
 8006034:	dcf1      	bgt.n	800601a <_printf_float+0x40e>
 8006036:	464b      	mov	r3, r9
 8006038:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800603c:	e6dc      	b.n	8005df8 <_printf_float+0x1ec>
 800603e:	f04f 0800 	mov.w	r8, #0
 8006042:	f104 0a1a 	add.w	sl, r4, #26
 8006046:	e7f2      	b.n	800602e <_printf_float+0x422>
 8006048:	2301      	movs	r3, #1
 800604a:	4642      	mov	r2, r8
 800604c:	e7df      	b.n	800600e <_printf_float+0x402>
 800604e:	2301      	movs	r3, #1
 8006050:	464a      	mov	r2, r9
 8006052:	4631      	mov	r1, r6
 8006054:	4628      	mov	r0, r5
 8006056:	47b8      	blx	r7
 8006058:	3001      	adds	r0, #1
 800605a:	f43f ae38 	beq.w	8005cce <_printf_float+0xc2>
 800605e:	f108 0801 	add.w	r8, r8, #1
 8006062:	68e3      	ldr	r3, [r4, #12]
 8006064:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006066:	1a5b      	subs	r3, r3, r1
 8006068:	4543      	cmp	r3, r8
 800606a:	dcf0      	bgt.n	800604e <_printf_float+0x442>
 800606c:	e6fa      	b.n	8005e64 <_printf_float+0x258>
 800606e:	f04f 0800 	mov.w	r8, #0
 8006072:	f104 0919 	add.w	r9, r4, #25
 8006076:	e7f4      	b.n	8006062 <_printf_float+0x456>

08006078 <_printf_common>:
 8006078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800607c:	4616      	mov	r6, r2
 800607e:	4699      	mov	r9, r3
 8006080:	688a      	ldr	r2, [r1, #8]
 8006082:	690b      	ldr	r3, [r1, #16]
 8006084:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006088:	4293      	cmp	r3, r2
 800608a:	bfb8      	it	lt
 800608c:	4613      	movlt	r3, r2
 800608e:	6033      	str	r3, [r6, #0]
 8006090:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006094:	4607      	mov	r7, r0
 8006096:	460c      	mov	r4, r1
 8006098:	b10a      	cbz	r2, 800609e <_printf_common+0x26>
 800609a:	3301      	adds	r3, #1
 800609c:	6033      	str	r3, [r6, #0]
 800609e:	6823      	ldr	r3, [r4, #0]
 80060a0:	0699      	lsls	r1, r3, #26
 80060a2:	bf42      	ittt	mi
 80060a4:	6833      	ldrmi	r3, [r6, #0]
 80060a6:	3302      	addmi	r3, #2
 80060a8:	6033      	strmi	r3, [r6, #0]
 80060aa:	6825      	ldr	r5, [r4, #0]
 80060ac:	f015 0506 	ands.w	r5, r5, #6
 80060b0:	d106      	bne.n	80060c0 <_printf_common+0x48>
 80060b2:	f104 0a19 	add.w	sl, r4, #25
 80060b6:	68e3      	ldr	r3, [r4, #12]
 80060b8:	6832      	ldr	r2, [r6, #0]
 80060ba:	1a9b      	subs	r3, r3, r2
 80060bc:	42ab      	cmp	r3, r5
 80060be:	dc26      	bgt.n	800610e <_printf_common+0x96>
 80060c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060c4:	1e13      	subs	r3, r2, #0
 80060c6:	6822      	ldr	r2, [r4, #0]
 80060c8:	bf18      	it	ne
 80060ca:	2301      	movne	r3, #1
 80060cc:	0692      	lsls	r2, r2, #26
 80060ce:	d42b      	bmi.n	8006128 <_printf_common+0xb0>
 80060d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060d4:	4649      	mov	r1, r9
 80060d6:	4638      	mov	r0, r7
 80060d8:	47c0      	blx	r8
 80060da:	3001      	adds	r0, #1
 80060dc:	d01e      	beq.n	800611c <_printf_common+0xa4>
 80060de:	6823      	ldr	r3, [r4, #0]
 80060e0:	68e5      	ldr	r5, [r4, #12]
 80060e2:	6832      	ldr	r2, [r6, #0]
 80060e4:	f003 0306 	and.w	r3, r3, #6
 80060e8:	2b04      	cmp	r3, #4
 80060ea:	bf08      	it	eq
 80060ec:	1aad      	subeq	r5, r5, r2
 80060ee:	68a3      	ldr	r3, [r4, #8]
 80060f0:	6922      	ldr	r2, [r4, #16]
 80060f2:	bf0c      	ite	eq
 80060f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060f8:	2500      	movne	r5, #0
 80060fa:	4293      	cmp	r3, r2
 80060fc:	bfc4      	itt	gt
 80060fe:	1a9b      	subgt	r3, r3, r2
 8006100:	18ed      	addgt	r5, r5, r3
 8006102:	2600      	movs	r6, #0
 8006104:	341a      	adds	r4, #26
 8006106:	42b5      	cmp	r5, r6
 8006108:	d11a      	bne.n	8006140 <_printf_common+0xc8>
 800610a:	2000      	movs	r0, #0
 800610c:	e008      	b.n	8006120 <_printf_common+0xa8>
 800610e:	2301      	movs	r3, #1
 8006110:	4652      	mov	r2, sl
 8006112:	4649      	mov	r1, r9
 8006114:	4638      	mov	r0, r7
 8006116:	47c0      	blx	r8
 8006118:	3001      	adds	r0, #1
 800611a:	d103      	bne.n	8006124 <_printf_common+0xac>
 800611c:	f04f 30ff 	mov.w	r0, #4294967295
 8006120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006124:	3501      	adds	r5, #1
 8006126:	e7c6      	b.n	80060b6 <_printf_common+0x3e>
 8006128:	18e1      	adds	r1, r4, r3
 800612a:	1c5a      	adds	r2, r3, #1
 800612c:	2030      	movs	r0, #48	; 0x30
 800612e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006132:	4422      	add	r2, r4
 8006134:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006138:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800613c:	3302      	adds	r3, #2
 800613e:	e7c7      	b.n	80060d0 <_printf_common+0x58>
 8006140:	2301      	movs	r3, #1
 8006142:	4622      	mov	r2, r4
 8006144:	4649      	mov	r1, r9
 8006146:	4638      	mov	r0, r7
 8006148:	47c0      	blx	r8
 800614a:	3001      	adds	r0, #1
 800614c:	d0e6      	beq.n	800611c <_printf_common+0xa4>
 800614e:	3601      	adds	r6, #1
 8006150:	e7d9      	b.n	8006106 <_printf_common+0x8e>
	...

08006154 <_printf_i>:
 8006154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006158:	460c      	mov	r4, r1
 800615a:	4691      	mov	r9, r2
 800615c:	7e27      	ldrb	r7, [r4, #24]
 800615e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006160:	2f78      	cmp	r7, #120	; 0x78
 8006162:	4680      	mov	r8, r0
 8006164:	469a      	mov	sl, r3
 8006166:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800616a:	d807      	bhi.n	800617c <_printf_i+0x28>
 800616c:	2f62      	cmp	r7, #98	; 0x62
 800616e:	d80a      	bhi.n	8006186 <_printf_i+0x32>
 8006170:	2f00      	cmp	r7, #0
 8006172:	f000 80d8 	beq.w	8006326 <_printf_i+0x1d2>
 8006176:	2f58      	cmp	r7, #88	; 0x58
 8006178:	f000 80a3 	beq.w	80062c2 <_printf_i+0x16e>
 800617c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006180:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006184:	e03a      	b.n	80061fc <_printf_i+0xa8>
 8006186:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800618a:	2b15      	cmp	r3, #21
 800618c:	d8f6      	bhi.n	800617c <_printf_i+0x28>
 800618e:	a001      	add	r0, pc, #4	; (adr r0, 8006194 <_printf_i+0x40>)
 8006190:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006194:	080061ed 	.word	0x080061ed
 8006198:	08006201 	.word	0x08006201
 800619c:	0800617d 	.word	0x0800617d
 80061a0:	0800617d 	.word	0x0800617d
 80061a4:	0800617d 	.word	0x0800617d
 80061a8:	0800617d 	.word	0x0800617d
 80061ac:	08006201 	.word	0x08006201
 80061b0:	0800617d 	.word	0x0800617d
 80061b4:	0800617d 	.word	0x0800617d
 80061b8:	0800617d 	.word	0x0800617d
 80061bc:	0800617d 	.word	0x0800617d
 80061c0:	0800630d 	.word	0x0800630d
 80061c4:	08006231 	.word	0x08006231
 80061c8:	080062ef 	.word	0x080062ef
 80061cc:	0800617d 	.word	0x0800617d
 80061d0:	0800617d 	.word	0x0800617d
 80061d4:	0800632f 	.word	0x0800632f
 80061d8:	0800617d 	.word	0x0800617d
 80061dc:	08006231 	.word	0x08006231
 80061e0:	0800617d 	.word	0x0800617d
 80061e4:	0800617d 	.word	0x0800617d
 80061e8:	080062f7 	.word	0x080062f7
 80061ec:	680b      	ldr	r3, [r1, #0]
 80061ee:	1d1a      	adds	r2, r3, #4
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	600a      	str	r2, [r1, #0]
 80061f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80061f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061fc:	2301      	movs	r3, #1
 80061fe:	e0a3      	b.n	8006348 <_printf_i+0x1f4>
 8006200:	6825      	ldr	r5, [r4, #0]
 8006202:	6808      	ldr	r0, [r1, #0]
 8006204:	062e      	lsls	r6, r5, #24
 8006206:	f100 0304 	add.w	r3, r0, #4
 800620a:	d50a      	bpl.n	8006222 <_printf_i+0xce>
 800620c:	6805      	ldr	r5, [r0, #0]
 800620e:	600b      	str	r3, [r1, #0]
 8006210:	2d00      	cmp	r5, #0
 8006212:	da03      	bge.n	800621c <_printf_i+0xc8>
 8006214:	232d      	movs	r3, #45	; 0x2d
 8006216:	426d      	negs	r5, r5
 8006218:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800621c:	485e      	ldr	r0, [pc, #376]	; (8006398 <_printf_i+0x244>)
 800621e:	230a      	movs	r3, #10
 8006220:	e019      	b.n	8006256 <_printf_i+0x102>
 8006222:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006226:	6805      	ldr	r5, [r0, #0]
 8006228:	600b      	str	r3, [r1, #0]
 800622a:	bf18      	it	ne
 800622c:	b22d      	sxthne	r5, r5
 800622e:	e7ef      	b.n	8006210 <_printf_i+0xbc>
 8006230:	680b      	ldr	r3, [r1, #0]
 8006232:	6825      	ldr	r5, [r4, #0]
 8006234:	1d18      	adds	r0, r3, #4
 8006236:	6008      	str	r0, [r1, #0]
 8006238:	0628      	lsls	r0, r5, #24
 800623a:	d501      	bpl.n	8006240 <_printf_i+0xec>
 800623c:	681d      	ldr	r5, [r3, #0]
 800623e:	e002      	b.n	8006246 <_printf_i+0xf2>
 8006240:	0669      	lsls	r1, r5, #25
 8006242:	d5fb      	bpl.n	800623c <_printf_i+0xe8>
 8006244:	881d      	ldrh	r5, [r3, #0]
 8006246:	4854      	ldr	r0, [pc, #336]	; (8006398 <_printf_i+0x244>)
 8006248:	2f6f      	cmp	r7, #111	; 0x6f
 800624a:	bf0c      	ite	eq
 800624c:	2308      	moveq	r3, #8
 800624e:	230a      	movne	r3, #10
 8006250:	2100      	movs	r1, #0
 8006252:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006256:	6866      	ldr	r6, [r4, #4]
 8006258:	60a6      	str	r6, [r4, #8]
 800625a:	2e00      	cmp	r6, #0
 800625c:	bfa2      	ittt	ge
 800625e:	6821      	ldrge	r1, [r4, #0]
 8006260:	f021 0104 	bicge.w	r1, r1, #4
 8006264:	6021      	strge	r1, [r4, #0]
 8006266:	b90d      	cbnz	r5, 800626c <_printf_i+0x118>
 8006268:	2e00      	cmp	r6, #0
 800626a:	d04d      	beq.n	8006308 <_printf_i+0x1b4>
 800626c:	4616      	mov	r6, r2
 800626e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006272:	fb03 5711 	mls	r7, r3, r1, r5
 8006276:	5dc7      	ldrb	r7, [r0, r7]
 8006278:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800627c:	462f      	mov	r7, r5
 800627e:	42bb      	cmp	r3, r7
 8006280:	460d      	mov	r5, r1
 8006282:	d9f4      	bls.n	800626e <_printf_i+0x11a>
 8006284:	2b08      	cmp	r3, #8
 8006286:	d10b      	bne.n	80062a0 <_printf_i+0x14c>
 8006288:	6823      	ldr	r3, [r4, #0]
 800628a:	07df      	lsls	r7, r3, #31
 800628c:	d508      	bpl.n	80062a0 <_printf_i+0x14c>
 800628e:	6923      	ldr	r3, [r4, #16]
 8006290:	6861      	ldr	r1, [r4, #4]
 8006292:	4299      	cmp	r1, r3
 8006294:	bfde      	ittt	le
 8006296:	2330      	movle	r3, #48	; 0x30
 8006298:	f806 3c01 	strble.w	r3, [r6, #-1]
 800629c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80062a0:	1b92      	subs	r2, r2, r6
 80062a2:	6122      	str	r2, [r4, #16]
 80062a4:	f8cd a000 	str.w	sl, [sp]
 80062a8:	464b      	mov	r3, r9
 80062aa:	aa03      	add	r2, sp, #12
 80062ac:	4621      	mov	r1, r4
 80062ae:	4640      	mov	r0, r8
 80062b0:	f7ff fee2 	bl	8006078 <_printf_common>
 80062b4:	3001      	adds	r0, #1
 80062b6:	d14c      	bne.n	8006352 <_printf_i+0x1fe>
 80062b8:	f04f 30ff 	mov.w	r0, #4294967295
 80062bc:	b004      	add	sp, #16
 80062be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062c2:	4835      	ldr	r0, [pc, #212]	; (8006398 <_printf_i+0x244>)
 80062c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80062c8:	6823      	ldr	r3, [r4, #0]
 80062ca:	680e      	ldr	r6, [r1, #0]
 80062cc:	061f      	lsls	r7, r3, #24
 80062ce:	f856 5b04 	ldr.w	r5, [r6], #4
 80062d2:	600e      	str	r6, [r1, #0]
 80062d4:	d514      	bpl.n	8006300 <_printf_i+0x1ac>
 80062d6:	07d9      	lsls	r1, r3, #31
 80062d8:	bf44      	itt	mi
 80062da:	f043 0320 	orrmi.w	r3, r3, #32
 80062de:	6023      	strmi	r3, [r4, #0]
 80062e0:	b91d      	cbnz	r5, 80062ea <_printf_i+0x196>
 80062e2:	6823      	ldr	r3, [r4, #0]
 80062e4:	f023 0320 	bic.w	r3, r3, #32
 80062e8:	6023      	str	r3, [r4, #0]
 80062ea:	2310      	movs	r3, #16
 80062ec:	e7b0      	b.n	8006250 <_printf_i+0xfc>
 80062ee:	6823      	ldr	r3, [r4, #0]
 80062f0:	f043 0320 	orr.w	r3, r3, #32
 80062f4:	6023      	str	r3, [r4, #0]
 80062f6:	2378      	movs	r3, #120	; 0x78
 80062f8:	4828      	ldr	r0, [pc, #160]	; (800639c <_printf_i+0x248>)
 80062fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062fe:	e7e3      	b.n	80062c8 <_printf_i+0x174>
 8006300:	065e      	lsls	r6, r3, #25
 8006302:	bf48      	it	mi
 8006304:	b2ad      	uxthmi	r5, r5
 8006306:	e7e6      	b.n	80062d6 <_printf_i+0x182>
 8006308:	4616      	mov	r6, r2
 800630a:	e7bb      	b.n	8006284 <_printf_i+0x130>
 800630c:	680b      	ldr	r3, [r1, #0]
 800630e:	6826      	ldr	r6, [r4, #0]
 8006310:	6960      	ldr	r0, [r4, #20]
 8006312:	1d1d      	adds	r5, r3, #4
 8006314:	600d      	str	r5, [r1, #0]
 8006316:	0635      	lsls	r5, r6, #24
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	d501      	bpl.n	8006320 <_printf_i+0x1cc>
 800631c:	6018      	str	r0, [r3, #0]
 800631e:	e002      	b.n	8006326 <_printf_i+0x1d2>
 8006320:	0671      	lsls	r1, r6, #25
 8006322:	d5fb      	bpl.n	800631c <_printf_i+0x1c8>
 8006324:	8018      	strh	r0, [r3, #0]
 8006326:	2300      	movs	r3, #0
 8006328:	6123      	str	r3, [r4, #16]
 800632a:	4616      	mov	r6, r2
 800632c:	e7ba      	b.n	80062a4 <_printf_i+0x150>
 800632e:	680b      	ldr	r3, [r1, #0]
 8006330:	1d1a      	adds	r2, r3, #4
 8006332:	600a      	str	r2, [r1, #0]
 8006334:	681e      	ldr	r6, [r3, #0]
 8006336:	6862      	ldr	r2, [r4, #4]
 8006338:	2100      	movs	r1, #0
 800633a:	4630      	mov	r0, r6
 800633c:	f7f9 ff70 	bl	8000220 <memchr>
 8006340:	b108      	cbz	r0, 8006346 <_printf_i+0x1f2>
 8006342:	1b80      	subs	r0, r0, r6
 8006344:	6060      	str	r0, [r4, #4]
 8006346:	6863      	ldr	r3, [r4, #4]
 8006348:	6123      	str	r3, [r4, #16]
 800634a:	2300      	movs	r3, #0
 800634c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006350:	e7a8      	b.n	80062a4 <_printf_i+0x150>
 8006352:	6923      	ldr	r3, [r4, #16]
 8006354:	4632      	mov	r2, r6
 8006356:	4649      	mov	r1, r9
 8006358:	4640      	mov	r0, r8
 800635a:	47d0      	blx	sl
 800635c:	3001      	adds	r0, #1
 800635e:	d0ab      	beq.n	80062b8 <_printf_i+0x164>
 8006360:	6823      	ldr	r3, [r4, #0]
 8006362:	079b      	lsls	r3, r3, #30
 8006364:	d413      	bmi.n	800638e <_printf_i+0x23a>
 8006366:	68e0      	ldr	r0, [r4, #12]
 8006368:	9b03      	ldr	r3, [sp, #12]
 800636a:	4298      	cmp	r0, r3
 800636c:	bfb8      	it	lt
 800636e:	4618      	movlt	r0, r3
 8006370:	e7a4      	b.n	80062bc <_printf_i+0x168>
 8006372:	2301      	movs	r3, #1
 8006374:	4632      	mov	r2, r6
 8006376:	4649      	mov	r1, r9
 8006378:	4640      	mov	r0, r8
 800637a:	47d0      	blx	sl
 800637c:	3001      	adds	r0, #1
 800637e:	d09b      	beq.n	80062b8 <_printf_i+0x164>
 8006380:	3501      	adds	r5, #1
 8006382:	68e3      	ldr	r3, [r4, #12]
 8006384:	9903      	ldr	r1, [sp, #12]
 8006386:	1a5b      	subs	r3, r3, r1
 8006388:	42ab      	cmp	r3, r5
 800638a:	dcf2      	bgt.n	8006372 <_printf_i+0x21e>
 800638c:	e7eb      	b.n	8006366 <_printf_i+0x212>
 800638e:	2500      	movs	r5, #0
 8006390:	f104 0619 	add.w	r6, r4, #25
 8006394:	e7f5      	b.n	8006382 <_printf_i+0x22e>
 8006396:	bf00      	nop
 8006398:	08008356 	.word	0x08008356
 800639c:	08008367 	.word	0x08008367

080063a0 <_sbrk_r>:
 80063a0:	b538      	push	{r3, r4, r5, lr}
 80063a2:	4d06      	ldr	r5, [pc, #24]	; (80063bc <_sbrk_r+0x1c>)
 80063a4:	2300      	movs	r3, #0
 80063a6:	4604      	mov	r4, r0
 80063a8:	4608      	mov	r0, r1
 80063aa:	602b      	str	r3, [r5, #0]
 80063ac:	f7fb f956 	bl	800165c <_sbrk>
 80063b0:	1c43      	adds	r3, r0, #1
 80063b2:	d102      	bne.n	80063ba <_sbrk_r+0x1a>
 80063b4:	682b      	ldr	r3, [r5, #0]
 80063b6:	b103      	cbz	r3, 80063ba <_sbrk_r+0x1a>
 80063b8:	6023      	str	r3, [r4, #0]
 80063ba:	bd38      	pop	{r3, r4, r5, pc}
 80063bc:	200005b8 	.word	0x200005b8

080063c0 <quorem>:
 80063c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c4:	6903      	ldr	r3, [r0, #16]
 80063c6:	690c      	ldr	r4, [r1, #16]
 80063c8:	42a3      	cmp	r3, r4
 80063ca:	4607      	mov	r7, r0
 80063cc:	f2c0 8081 	blt.w	80064d2 <quorem+0x112>
 80063d0:	3c01      	subs	r4, #1
 80063d2:	f101 0814 	add.w	r8, r1, #20
 80063d6:	f100 0514 	add.w	r5, r0, #20
 80063da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063de:	9301      	str	r3, [sp, #4]
 80063e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80063e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063e8:	3301      	adds	r3, #1
 80063ea:	429a      	cmp	r2, r3
 80063ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80063f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80063f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80063f8:	d331      	bcc.n	800645e <quorem+0x9e>
 80063fa:	f04f 0e00 	mov.w	lr, #0
 80063fe:	4640      	mov	r0, r8
 8006400:	46ac      	mov	ip, r5
 8006402:	46f2      	mov	sl, lr
 8006404:	f850 2b04 	ldr.w	r2, [r0], #4
 8006408:	b293      	uxth	r3, r2
 800640a:	fb06 e303 	mla	r3, r6, r3, lr
 800640e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006412:	b29b      	uxth	r3, r3
 8006414:	ebaa 0303 	sub.w	r3, sl, r3
 8006418:	0c12      	lsrs	r2, r2, #16
 800641a:	f8dc a000 	ldr.w	sl, [ip]
 800641e:	fb06 e202 	mla	r2, r6, r2, lr
 8006422:	fa13 f38a 	uxtah	r3, r3, sl
 8006426:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800642a:	fa1f fa82 	uxth.w	sl, r2
 800642e:	f8dc 2000 	ldr.w	r2, [ip]
 8006432:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006436:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800643a:	b29b      	uxth	r3, r3
 800643c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006440:	4581      	cmp	r9, r0
 8006442:	f84c 3b04 	str.w	r3, [ip], #4
 8006446:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800644a:	d2db      	bcs.n	8006404 <quorem+0x44>
 800644c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006450:	b92b      	cbnz	r3, 800645e <quorem+0x9e>
 8006452:	9b01      	ldr	r3, [sp, #4]
 8006454:	3b04      	subs	r3, #4
 8006456:	429d      	cmp	r5, r3
 8006458:	461a      	mov	r2, r3
 800645a:	d32e      	bcc.n	80064ba <quorem+0xfa>
 800645c:	613c      	str	r4, [r7, #16]
 800645e:	4638      	mov	r0, r7
 8006460:	f001 f8c2 	bl	80075e8 <__mcmp>
 8006464:	2800      	cmp	r0, #0
 8006466:	db24      	blt.n	80064b2 <quorem+0xf2>
 8006468:	3601      	adds	r6, #1
 800646a:	4628      	mov	r0, r5
 800646c:	f04f 0c00 	mov.w	ip, #0
 8006470:	f858 2b04 	ldr.w	r2, [r8], #4
 8006474:	f8d0 e000 	ldr.w	lr, [r0]
 8006478:	b293      	uxth	r3, r2
 800647a:	ebac 0303 	sub.w	r3, ip, r3
 800647e:	0c12      	lsrs	r2, r2, #16
 8006480:	fa13 f38e 	uxtah	r3, r3, lr
 8006484:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006488:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800648c:	b29b      	uxth	r3, r3
 800648e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006492:	45c1      	cmp	r9, r8
 8006494:	f840 3b04 	str.w	r3, [r0], #4
 8006498:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800649c:	d2e8      	bcs.n	8006470 <quorem+0xb0>
 800649e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064a6:	b922      	cbnz	r2, 80064b2 <quorem+0xf2>
 80064a8:	3b04      	subs	r3, #4
 80064aa:	429d      	cmp	r5, r3
 80064ac:	461a      	mov	r2, r3
 80064ae:	d30a      	bcc.n	80064c6 <quorem+0x106>
 80064b0:	613c      	str	r4, [r7, #16]
 80064b2:	4630      	mov	r0, r6
 80064b4:	b003      	add	sp, #12
 80064b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ba:	6812      	ldr	r2, [r2, #0]
 80064bc:	3b04      	subs	r3, #4
 80064be:	2a00      	cmp	r2, #0
 80064c0:	d1cc      	bne.n	800645c <quorem+0x9c>
 80064c2:	3c01      	subs	r4, #1
 80064c4:	e7c7      	b.n	8006456 <quorem+0x96>
 80064c6:	6812      	ldr	r2, [r2, #0]
 80064c8:	3b04      	subs	r3, #4
 80064ca:	2a00      	cmp	r2, #0
 80064cc:	d1f0      	bne.n	80064b0 <quorem+0xf0>
 80064ce:	3c01      	subs	r4, #1
 80064d0:	e7eb      	b.n	80064aa <quorem+0xea>
 80064d2:	2000      	movs	r0, #0
 80064d4:	e7ee      	b.n	80064b4 <quorem+0xf4>
	...

080064d8 <_dtoa_r>:
 80064d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064dc:	ed2d 8b02 	vpush	{d8}
 80064e0:	ec57 6b10 	vmov	r6, r7, d0
 80064e4:	b095      	sub	sp, #84	; 0x54
 80064e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80064e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80064ec:	9105      	str	r1, [sp, #20]
 80064ee:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80064f2:	4604      	mov	r4, r0
 80064f4:	9209      	str	r2, [sp, #36]	; 0x24
 80064f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80064f8:	b975      	cbnz	r5, 8006518 <_dtoa_r+0x40>
 80064fa:	2010      	movs	r0, #16
 80064fc:	f7ff fa2c 	bl	8005958 <malloc>
 8006500:	4602      	mov	r2, r0
 8006502:	6260      	str	r0, [r4, #36]	; 0x24
 8006504:	b920      	cbnz	r0, 8006510 <_dtoa_r+0x38>
 8006506:	4bb2      	ldr	r3, [pc, #712]	; (80067d0 <_dtoa_r+0x2f8>)
 8006508:	21ea      	movs	r1, #234	; 0xea
 800650a:	48b2      	ldr	r0, [pc, #712]	; (80067d4 <_dtoa_r+0x2fc>)
 800650c:	f001 f97c 	bl	8007808 <__assert_func>
 8006510:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006514:	6005      	str	r5, [r0, #0]
 8006516:	60c5      	str	r5, [r0, #12]
 8006518:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800651a:	6819      	ldr	r1, [r3, #0]
 800651c:	b151      	cbz	r1, 8006534 <_dtoa_r+0x5c>
 800651e:	685a      	ldr	r2, [r3, #4]
 8006520:	604a      	str	r2, [r1, #4]
 8006522:	2301      	movs	r3, #1
 8006524:	4093      	lsls	r3, r2
 8006526:	608b      	str	r3, [r1, #8]
 8006528:	4620      	mov	r0, r4
 800652a:	f000 fe1f 	bl	800716c <_Bfree>
 800652e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006530:	2200      	movs	r2, #0
 8006532:	601a      	str	r2, [r3, #0]
 8006534:	1e3b      	subs	r3, r7, #0
 8006536:	bfb9      	ittee	lt
 8006538:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800653c:	9303      	strlt	r3, [sp, #12]
 800653e:	2300      	movge	r3, #0
 8006540:	f8c8 3000 	strge.w	r3, [r8]
 8006544:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006548:	4ba3      	ldr	r3, [pc, #652]	; (80067d8 <_dtoa_r+0x300>)
 800654a:	bfbc      	itt	lt
 800654c:	2201      	movlt	r2, #1
 800654e:	f8c8 2000 	strlt.w	r2, [r8]
 8006552:	ea33 0309 	bics.w	r3, r3, r9
 8006556:	d11b      	bne.n	8006590 <_dtoa_r+0xb8>
 8006558:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800655a:	f242 730f 	movw	r3, #9999	; 0x270f
 800655e:	6013      	str	r3, [r2, #0]
 8006560:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006564:	4333      	orrs	r3, r6
 8006566:	f000 857a 	beq.w	800705e <_dtoa_r+0xb86>
 800656a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800656c:	b963      	cbnz	r3, 8006588 <_dtoa_r+0xb0>
 800656e:	4b9b      	ldr	r3, [pc, #620]	; (80067dc <_dtoa_r+0x304>)
 8006570:	e024      	b.n	80065bc <_dtoa_r+0xe4>
 8006572:	4b9b      	ldr	r3, [pc, #620]	; (80067e0 <_dtoa_r+0x308>)
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	3308      	adds	r3, #8
 8006578:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800657a:	6013      	str	r3, [r2, #0]
 800657c:	9800      	ldr	r0, [sp, #0]
 800657e:	b015      	add	sp, #84	; 0x54
 8006580:	ecbd 8b02 	vpop	{d8}
 8006584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006588:	4b94      	ldr	r3, [pc, #592]	; (80067dc <_dtoa_r+0x304>)
 800658a:	9300      	str	r3, [sp, #0]
 800658c:	3303      	adds	r3, #3
 800658e:	e7f3      	b.n	8006578 <_dtoa_r+0xa0>
 8006590:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006594:	2200      	movs	r2, #0
 8006596:	ec51 0b17 	vmov	r0, r1, d7
 800659a:	2300      	movs	r3, #0
 800659c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80065a0:	f7fa fab2 	bl	8000b08 <__aeabi_dcmpeq>
 80065a4:	4680      	mov	r8, r0
 80065a6:	b158      	cbz	r0, 80065c0 <_dtoa_r+0xe8>
 80065a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80065aa:	2301      	movs	r3, #1
 80065ac:	6013      	str	r3, [r2, #0]
 80065ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f000 8551 	beq.w	8007058 <_dtoa_r+0xb80>
 80065b6:	488b      	ldr	r0, [pc, #556]	; (80067e4 <_dtoa_r+0x30c>)
 80065b8:	6018      	str	r0, [r3, #0]
 80065ba:	1e43      	subs	r3, r0, #1
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	e7dd      	b.n	800657c <_dtoa_r+0xa4>
 80065c0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80065c4:	aa12      	add	r2, sp, #72	; 0x48
 80065c6:	a913      	add	r1, sp, #76	; 0x4c
 80065c8:	4620      	mov	r0, r4
 80065ca:	f001 f8b1 	bl	8007730 <__d2b>
 80065ce:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80065d2:	4683      	mov	fp, r0
 80065d4:	2d00      	cmp	r5, #0
 80065d6:	d07c      	beq.n	80066d2 <_dtoa_r+0x1fa>
 80065d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065da:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80065de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065e2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80065e6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80065ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80065ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80065f2:	4b7d      	ldr	r3, [pc, #500]	; (80067e8 <_dtoa_r+0x310>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	4630      	mov	r0, r6
 80065f8:	4639      	mov	r1, r7
 80065fa:	f7f9 fe65 	bl	80002c8 <__aeabi_dsub>
 80065fe:	a36e      	add	r3, pc, #440	; (adr r3, 80067b8 <_dtoa_r+0x2e0>)
 8006600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006604:	f7fa f818 	bl	8000638 <__aeabi_dmul>
 8006608:	a36d      	add	r3, pc, #436	; (adr r3, 80067c0 <_dtoa_r+0x2e8>)
 800660a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660e:	f7f9 fe5d 	bl	80002cc <__adddf3>
 8006612:	4606      	mov	r6, r0
 8006614:	4628      	mov	r0, r5
 8006616:	460f      	mov	r7, r1
 8006618:	f7f9 ffa4 	bl	8000564 <__aeabi_i2d>
 800661c:	a36a      	add	r3, pc, #424	; (adr r3, 80067c8 <_dtoa_r+0x2f0>)
 800661e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006622:	f7fa f809 	bl	8000638 <__aeabi_dmul>
 8006626:	4602      	mov	r2, r0
 8006628:	460b      	mov	r3, r1
 800662a:	4630      	mov	r0, r6
 800662c:	4639      	mov	r1, r7
 800662e:	f7f9 fe4d 	bl	80002cc <__adddf3>
 8006632:	4606      	mov	r6, r0
 8006634:	460f      	mov	r7, r1
 8006636:	f7fa faaf 	bl	8000b98 <__aeabi_d2iz>
 800663a:	2200      	movs	r2, #0
 800663c:	4682      	mov	sl, r0
 800663e:	2300      	movs	r3, #0
 8006640:	4630      	mov	r0, r6
 8006642:	4639      	mov	r1, r7
 8006644:	f7fa fa6a 	bl	8000b1c <__aeabi_dcmplt>
 8006648:	b148      	cbz	r0, 800665e <_dtoa_r+0x186>
 800664a:	4650      	mov	r0, sl
 800664c:	f7f9 ff8a 	bl	8000564 <__aeabi_i2d>
 8006650:	4632      	mov	r2, r6
 8006652:	463b      	mov	r3, r7
 8006654:	f7fa fa58 	bl	8000b08 <__aeabi_dcmpeq>
 8006658:	b908      	cbnz	r0, 800665e <_dtoa_r+0x186>
 800665a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800665e:	f1ba 0f16 	cmp.w	sl, #22
 8006662:	d854      	bhi.n	800670e <_dtoa_r+0x236>
 8006664:	4b61      	ldr	r3, [pc, #388]	; (80067ec <_dtoa_r+0x314>)
 8006666:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800666a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006672:	f7fa fa53 	bl	8000b1c <__aeabi_dcmplt>
 8006676:	2800      	cmp	r0, #0
 8006678:	d04b      	beq.n	8006712 <_dtoa_r+0x23a>
 800667a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800667e:	2300      	movs	r3, #0
 8006680:	930e      	str	r3, [sp, #56]	; 0x38
 8006682:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006684:	1b5d      	subs	r5, r3, r5
 8006686:	1e6b      	subs	r3, r5, #1
 8006688:	9304      	str	r3, [sp, #16]
 800668a:	bf43      	ittte	mi
 800668c:	2300      	movmi	r3, #0
 800668e:	f1c5 0801 	rsbmi	r8, r5, #1
 8006692:	9304      	strmi	r3, [sp, #16]
 8006694:	f04f 0800 	movpl.w	r8, #0
 8006698:	f1ba 0f00 	cmp.w	sl, #0
 800669c:	db3b      	blt.n	8006716 <_dtoa_r+0x23e>
 800669e:	9b04      	ldr	r3, [sp, #16]
 80066a0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80066a4:	4453      	add	r3, sl
 80066a6:	9304      	str	r3, [sp, #16]
 80066a8:	2300      	movs	r3, #0
 80066aa:	9306      	str	r3, [sp, #24]
 80066ac:	9b05      	ldr	r3, [sp, #20]
 80066ae:	2b09      	cmp	r3, #9
 80066b0:	d869      	bhi.n	8006786 <_dtoa_r+0x2ae>
 80066b2:	2b05      	cmp	r3, #5
 80066b4:	bfc4      	itt	gt
 80066b6:	3b04      	subgt	r3, #4
 80066b8:	9305      	strgt	r3, [sp, #20]
 80066ba:	9b05      	ldr	r3, [sp, #20]
 80066bc:	f1a3 0302 	sub.w	r3, r3, #2
 80066c0:	bfcc      	ite	gt
 80066c2:	2500      	movgt	r5, #0
 80066c4:	2501      	movle	r5, #1
 80066c6:	2b03      	cmp	r3, #3
 80066c8:	d869      	bhi.n	800679e <_dtoa_r+0x2c6>
 80066ca:	e8df f003 	tbb	[pc, r3]
 80066ce:	4e2c      	.short	0x4e2c
 80066d0:	5a4c      	.short	0x5a4c
 80066d2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80066d6:	441d      	add	r5, r3
 80066d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80066dc:	2b20      	cmp	r3, #32
 80066de:	bfc1      	itttt	gt
 80066e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80066e4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80066e8:	fa09 f303 	lslgt.w	r3, r9, r3
 80066ec:	fa26 f000 	lsrgt.w	r0, r6, r0
 80066f0:	bfda      	itte	le
 80066f2:	f1c3 0320 	rsble	r3, r3, #32
 80066f6:	fa06 f003 	lslle.w	r0, r6, r3
 80066fa:	4318      	orrgt	r0, r3
 80066fc:	f7f9 ff22 	bl	8000544 <__aeabi_ui2d>
 8006700:	2301      	movs	r3, #1
 8006702:	4606      	mov	r6, r0
 8006704:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006708:	3d01      	subs	r5, #1
 800670a:	9310      	str	r3, [sp, #64]	; 0x40
 800670c:	e771      	b.n	80065f2 <_dtoa_r+0x11a>
 800670e:	2301      	movs	r3, #1
 8006710:	e7b6      	b.n	8006680 <_dtoa_r+0x1a8>
 8006712:	900e      	str	r0, [sp, #56]	; 0x38
 8006714:	e7b5      	b.n	8006682 <_dtoa_r+0x1aa>
 8006716:	f1ca 0300 	rsb	r3, sl, #0
 800671a:	9306      	str	r3, [sp, #24]
 800671c:	2300      	movs	r3, #0
 800671e:	eba8 080a 	sub.w	r8, r8, sl
 8006722:	930d      	str	r3, [sp, #52]	; 0x34
 8006724:	e7c2      	b.n	80066ac <_dtoa_r+0x1d4>
 8006726:	2300      	movs	r3, #0
 8006728:	9308      	str	r3, [sp, #32]
 800672a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800672c:	2b00      	cmp	r3, #0
 800672e:	dc39      	bgt.n	80067a4 <_dtoa_r+0x2cc>
 8006730:	f04f 0901 	mov.w	r9, #1
 8006734:	f8cd 9004 	str.w	r9, [sp, #4]
 8006738:	464b      	mov	r3, r9
 800673a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800673e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006740:	2200      	movs	r2, #0
 8006742:	6042      	str	r2, [r0, #4]
 8006744:	2204      	movs	r2, #4
 8006746:	f102 0614 	add.w	r6, r2, #20
 800674a:	429e      	cmp	r6, r3
 800674c:	6841      	ldr	r1, [r0, #4]
 800674e:	d92f      	bls.n	80067b0 <_dtoa_r+0x2d8>
 8006750:	4620      	mov	r0, r4
 8006752:	f000 fccb 	bl	80070ec <_Balloc>
 8006756:	9000      	str	r0, [sp, #0]
 8006758:	2800      	cmp	r0, #0
 800675a:	d14b      	bne.n	80067f4 <_dtoa_r+0x31c>
 800675c:	4b24      	ldr	r3, [pc, #144]	; (80067f0 <_dtoa_r+0x318>)
 800675e:	4602      	mov	r2, r0
 8006760:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006764:	e6d1      	b.n	800650a <_dtoa_r+0x32>
 8006766:	2301      	movs	r3, #1
 8006768:	e7de      	b.n	8006728 <_dtoa_r+0x250>
 800676a:	2300      	movs	r3, #0
 800676c:	9308      	str	r3, [sp, #32]
 800676e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006770:	eb0a 0903 	add.w	r9, sl, r3
 8006774:	f109 0301 	add.w	r3, r9, #1
 8006778:	2b01      	cmp	r3, #1
 800677a:	9301      	str	r3, [sp, #4]
 800677c:	bfb8      	it	lt
 800677e:	2301      	movlt	r3, #1
 8006780:	e7dd      	b.n	800673e <_dtoa_r+0x266>
 8006782:	2301      	movs	r3, #1
 8006784:	e7f2      	b.n	800676c <_dtoa_r+0x294>
 8006786:	2501      	movs	r5, #1
 8006788:	2300      	movs	r3, #0
 800678a:	9305      	str	r3, [sp, #20]
 800678c:	9508      	str	r5, [sp, #32]
 800678e:	f04f 39ff 	mov.w	r9, #4294967295
 8006792:	2200      	movs	r2, #0
 8006794:	f8cd 9004 	str.w	r9, [sp, #4]
 8006798:	2312      	movs	r3, #18
 800679a:	9209      	str	r2, [sp, #36]	; 0x24
 800679c:	e7cf      	b.n	800673e <_dtoa_r+0x266>
 800679e:	2301      	movs	r3, #1
 80067a0:	9308      	str	r3, [sp, #32]
 80067a2:	e7f4      	b.n	800678e <_dtoa_r+0x2b6>
 80067a4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80067a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80067ac:	464b      	mov	r3, r9
 80067ae:	e7c6      	b.n	800673e <_dtoa_r+0x266>
 80067b0:	3101      	adds	r1, #1
 80067b2:	6041      	str	r1, [r0, #4]
 80067b4:	0052      	lsls	r2, r2, #1
 80067b6:	e7c6      	b.n	8006746 <_dtoa_r+0x26e>
 80067b8:	636f4361 	.word	0x636f4361
 80067bc:	3fd287a7 	.word	0x3fd287a7
 80067c0:	8b60c8b3 	.word	0x8b60c8b3
 80067c4:	3fc68a28 	.word	0x3fc68a28
 80067c8:	509f79fb 	.word	0x509f79fb
 80067cc:	3fd34413 	.word	0x3fd34413
 80067d0:	08008385 	.word	0x08008385
 80067d4:	0800839c 	.word	0x0800839c
 80067d8:	7ff00000 	.word	0x7ff00000
 80067dc:	08008381 	.word	0x08008381
 80067e0:	08008378 	.word	0x08008378
 80067e4:	08008355 	.word	0x08008355
 80067e8:	3ff80000 	.word	0x3ff80000
 80067ec:	08008498 	.word	0x08008498
 80067f0:	080083fb 	.word	0x080083fb
 80067f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067f6:	9a00      	ldr	r2, [sp, #0]
 80067f8:	601a      	str	r2, [r3, #0]
 80067fa:	9b01      	ldr	r3, [sp, #4]
 80067fc:	2b0e      	cmp	r3, #14
 80067fe:	f200 80ad 	bhi.w	800695c <_dtoa_r+0x484>
 8006802:	2d00      	cmp	r5, #0
 8006804:	f000 80aa 	beq.w	800695c <_dtoa_r+0x484>
 8006808:	f1ba 0f00 	cmp.w	sl, #0
 800680c:	dd36      	ble.n	800687c <_dtoa_r+0x3a4>
 800680e:	4ac3      	ldr	r2, [pc, #780]	; (8006b1c <_dtoa_r+0x644>)
 8006810:	f00a 030f 	and.w	r3, sl, #15
 8006814:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006818:	ed93 7b00 	vldr	d7, [r3]
 800681c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006820:	ea4f 172a 	mov.w	r7, sl, asr #4
 8006824:	eeb0 8a47 	vmov.f32	s16, s14
 8006828:	eef0 8a67 	vmov.f32	s17, s15
 800682c:	d016      	beq.n	800685c <_dtoa_r+0x384>
 800682e:	4bbc      	ldr	r3, [pc, #752]	; (8006b20 <_dtoa_r+0x648>)
 8006830:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006834:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006838:	f7fa f828 	bl	800088c <__aeabi_ddiv>
 800683c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006840:	f007 070f 	and.w	r7, r7, #15
 8006844:	2503      	movs	r5, #3
 8006846:	4eb6      	ldr	r6, [pc, #728]	; (8006b20 <_dtoa_r+0x648>)
 8006848:	b957      	cbnz	r7, 8006860 <_dtoa_r+0x388>
 800684a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800684e:	ec53 2b18 	vmov	r2, r3, d8
 8006852:	f7fa f81b 	bl	800088c <__aeabi_ddiv>
 8006856:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800685a:	e029      	b.n	80068b0 <_dtoa_r+0x3d8>
 800685c:	2502      	movs	r5, #2
 800685e:	e7f2      	b.n	8006846 <_dtoa_r+0x36e>
 8006860:	07f9      	lsls	r1, r7, #31
 8006862:	d508      	bpl.n	8006876 <_dtoa_r+0x39e>
 8006864:	ec51 0b18 	vmov	r0, r1, d8
 8006868:	e9d6 2300 	ldrd	r2, r3, [r6]
 800686c:	f7f9 fee4 	bl	8000638 <__aeabi_dmul>
 8006870:	ec41 0b18 	vmov	d8, r0, r1
 8006874:	3501      	adds	r5, #1
 8006876:	107f      	asrs	r7, r7, #1
 8006878:	3608      	adds	r6, #8
 800687a:	e7e5      	b.n	8006848 <_dtoa_r+0x370>
 800687c:	f000 80a6 	beq.w	80069cc <_dtoa_r+0x4f4>
 8006880:	f1ca 0600 	rsb	r6, sl, #0
 8006884:	4ba5      	ldr	r3, [pc, #660]	; (8006b1c <_dtoa_r+0x644>)
 8006886:	4fa6      	ldr	r7, [pc, #664]	; (8006b20 <_dtoa_r+0x648>)
 8006888:	f006 020f 	and.w	r2, r6, #15
 800688c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006894:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006898:	f7f9 fece 	bl	8000638 <__aeabi_dmul>
 800689c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068a0:	1136      	asrs	r6, r6, #4
 80068a2:	2300      	movs	r3, #0
 80068a4:	2502      	movs	r5, #2
 80068a6:	2e00      	cmp	r6, #0
 80068a8:	f040 8085 	bne.w	80069b6 <_dtoa_r+0x4de>
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d1d2      	bne.n	8006856 <_dtoa_r+0x37e>
 80068b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f000 808c 	beq.w	80069d0 <_dtoa_r+0x4f8>
 80068b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80068bc:	4b99      	ldr	r3, [pc, #612]	; (8006b24 <_dtoa_r+0x64c>)
 80068be:	2200      	movs	r2, #0
 80068c0:	4630      	mov	r0, r6
 80068c2:	4639      	mov	r1, r7
 80068c4:	f7fa f92a 	bl	8000b1c <__aeabi_dcmplt>
 80068c8:	2800      	cmp	r0, #0
 80068ca:	f000 8081 	beq.w	80069d0 <_dtoa_r+0x4f8>
 80068ce:	9b01      	ldr	r3, [sp, #4]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d07d      	beq.n	80069d0 <_dtoa_r+0x4f8>
 80068d4:	f1b9 0f00 	cmp.w	r9, #0
 80068d8:	dd3c      	ble.n	8006954 <_dtoa_r+0x47c>
 80068da:	f10a 33ff 	add.w	r3, sl, #4294967295
 80068de:	9307      	str	r3, [sp, #28]
 80068e0:	2200      	movs	r2, #0
 80068e2:	4b91      	ldr	r3, [pc, #580]	; (8006b28 <_dtoa_r+0x650>)
 80068e4:	4630      	mov	r0, r6
 80068e6:	4639      	mov	r1, r7
 80068e8:	f7f9 fea6 	bl	8000638 <__aeabi_dmul>
 80068ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068f0:	3501      	adds	r5, #1
 80068f2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80068f6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80068fa:	4628      	mov	r0, r5
 80068fc:	f7f9 fe32 	bl	8000564 <__aeabi_i2d>
 8006900:	4632      	mov	r2, r6
 8006902:	463b      	mov	r3, r7
 8006904:	f7f9 fe98 	bl	8000638 <__aeabi_dmul>
 8006908:	4b88      	ldr	r3, [pc, #544]	; (8006b2c <_dtoa_r+0x654>)
 800690a:	2200      	movs	r2, #0
 800690c:	f7f9 fcde 	bl	80002cc <__adddf3>
 8006910:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006914:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006918:	9303      	str	r3, [sp, #12]
 800691a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800691c:	2b00      	cmp	r3, #0
 800691e:	d15c      	bne.n	80069da <_dtoa_r+0x502>
 8006920:	4b83      	ldr	r3, [pc, #524]	; (8006b30 <_dtoa_r+0x658>)
 8006922:	2200      	movs	r2, #0
 8006924:	4630      	mov	r0, r6
 8006926:	4639      	mov	r1, r7
 8006928:	f7f9 fcce 	bl	80002c8 <__aeabi_dsub>
 800692c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006930:	4606      	mov	r6, r0
 8006932:	460f      	mov	r7, r1
 8006934:	f7fa f910 	bl	8000b58 <__aeabi_dcmpgt>
 8006938:	2800      	cmp	r0, #0
 800693a:	f040 8296 	bne.w	8006e6a <_dtoa_r+0x992>
 800693e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006942:	4630      	mov	r0, r6
 8006944:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006948:	4639      	mov	r1, r7
 800694a:	f7fa f8e7 	bl	8000b1c <__aeabi_dcmplt>
 800694e:	2800      	cmp	r0, #0
 8006950:	f040 8288 	bne.w	8006e64 <_dtoa_r+0x98c>
 8006954:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006958:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800695c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800695e:	2b00      	cmp	r3, #0
 8006960:	f2c0 8158 	blt.w	8006c14 <_dtoa_r+0x73c>
 8006964:	f1ba 0f0e 	cmp.w	sl, #14
 8006968:	f300 8154 	bgt.w	8006c14 <_dtoa_r+0x73c>
 800696c:	4b6b      	ldr	r3, [pc, #428]	; (8006b1c <_dtoa_r+0x644>)
 800696e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006972:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006978:	2b00      	cmp	r3, #0
 800697a:	f280 80e3 	bge.w	8006b44 <_dtoa_r+0x66c>
 800697e:	9b01      	ldr	r3, [sp, #4]
 8006980:	2b00      	cmp	r3, #0
 8006982:	f300 80df 	bgt.w	8006b44 <_dtoa_r+0x66c>
 8006986:	f040 826d 	bne.w	8006e64 <_dtoa_r+0x98c>
 800698a:	4b69      	ldr	r3, [pc, #420]	; (8006b30 <_dtoa_r+0x658>)
 800698c:	2200      	movs	r2, #0
 800698e:	4640      	mov	r0, r8
 8006990:	4649      	mov	r1, r9
 8006992:	f7f9 fe51 	bl	8000638 <__aeabi_dmul>
 8006996:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800699a:	f7fa f8d3 	bl	8000b44 <__aeabi_dcmpge>
 800699e:	9e01      	ldr	r6, [sp, #4]
 80069a0:	4637      	mov	r7, r6
 80069a2:	2800      	cmp	r0, #0
 80069a4:	f040 8243 	bne.w	8006e2e <_dtoa_r+0x956>
 80069a8:	9d00      	ldr	r5, [sp, #0]
 80069aa:	2331      	movs	r3, #49	; 0x31
 80069ac:	f805 3b01 	strb.w	r3, [r5], #1
 80069b0:	f10a 0a01 	add.w	sl, sl, #1
 80069b4:	e23f      	b.n	8006e36 <_dtoa_r+0x95e>
 80069b6:	07f2      	lsls	r2, r6, #31
 80069b8:	d505      	bpl.n	80069c6 <_dtoa_r+0x4ee>
 80069ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069be:	f7f9 fe3b 	bl	8000638 <__aeabi_dmul>
 80069c2:	3501      	adds	r5, #1
 80069c4:	2301      	movs	r3, #1
 80069c6:	1076      	asrs	r6, r6, #1
 80069c8:	3708      	adds	r7, #8
 80069ca:	e76c      	b.n	80068a6 <_dtoa_r+0x3ce>
 80069cc:	2502      	movs	r5, #2
 80069ce:	e76f      	b.n	80068b0 <_dtoa_r+0x3d8>
 80069d0:	9b01      	ldr	r3, [sp, #4]
 80069d2:	f8cd a01c 	str.w	sl, [sp, #28]
 80069d6:	930c      	str	r3, [sp, #48]	; 0x30
 80069d8:	e78d      	b.n	80068f6 <_dtoa_r+0x41e>
 80069da:	9900      	ldr	r1, [sp, #0]
 80069dc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80069de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80069e0:	4b4e      	ldr	r3, [pc, #312]	; (8006b1c <_dtoa_r+0x644>)
 80069e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80069e6:	4401      	add	r1, r0
 80069e8:	9102      	str	r1, [sp, #8]
 80069ea:	9908      	ldr	r1, [sp, #32]
 80069ec:	eeb0 8a47 	vmov.f32	s16, s14
 80069f0:	eef0 8a67 	vmov.f32	s17, s15
 80069f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80069fc:	2900      	cmp	r1, #0
 80069fe:	d045      	beq.n	8006a8c <_dtoa_r+0x5b4>
 8006a00:	494c      	ldr	r1, [pc, #304]	; (8006b34 <_dtoa_r+0x65c>)
 8006a02:	2000      	movs	r0, #0
 8006a04:	f7f9 ff42 	bl	800088c <__aeabi_ddiv>
 8006a08:	ec53 2b18 	vmov	r2, r3, d8
 8006a0c:	f7f9 fc5c 	bl	80002c8 <__aeabi_dsub>
 8006a10:	9d00      	ldr	r5, [sp, #0]
 8006a12:	ec41 0b18 	vmov	d8, r0, r1
 8006a16:	4639      	mov	r1, r7
 8006a18:	4630      	mov	r0, r6
 8006a1a:	f7fa f8bd 	bl	8000b98 <__aeabi_d2iz>
 8006a1e:	900c      	str	r0, [sp, #48]	; 0x30
 8006a20:	f7f9 fda0 	bl	8000564 <__aeabi_i2d>
 8006a24:	4602      	mov	r2, r0
 8006a26:	460b      	mov	r3, r1
 8006a28:	4630      	mov	r0, r6
 8006a2a:	4639      	mov	r1, r7
 8006a2c:	f7f9 fc4c 	bl	80002c8 <__aeabi_dsub>
 8006a30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a32:	3330      	adds	r3, #48	; 0x30
 8006a34:	f805 3b01 	strb.w	r3, [r5], #1
 8006a38:	ec53 2b18 	vmov	r2, r3, d8
 8006a3c:	4606      	mov	r6, r0
 8006a3e:	460f      	mov	r7, r1
 8006a40:	f7fa f86c 	bl	8000b1c <__aeabi_dcmplt>
 8006a44:	2800      	cmp	r0, #0
 8006a46:	d165      	bne.n	8006b14 <_dtoa_r+0x63c>
 8006a48:	4632      	mov	r2, r6
 8006a4a:	463b      	mov	r3, r7
 8006a4c:	4935      	ldr	r1, [pc, #212]	; (8006b24 <_dtoa_r+0x64c>)
 8006a4e:	2000      	movs	r0, #0
 8006a50:	f7f9 fc3a 	bl	80002c8 <__aeabi_dsub>
 8006a54:	ec53 2b18 	vmov	r2, r3, d8
 8006a58:	f7fa f860 	bl	8000b1c <__aeabi_dcmplt>
 8006a5c:	2800      	cmp	r0, #0
 8006a5e:	f040 80b9 	bne.w	8006bd4 <_dtoa_r+0x6fc>
 8006a62:	9b02      	ldr	r3, [sp, #8]
 8006a64:	429d      	cmp	r5, r3
 8006a66:	f43f af75 	beq.w	8006954 <_dtoa_r+0x47c>
 8006a6a:	4b2f      	ldr	r3, [pc, #188]	; (8006b28 <_dtoa_r+0x650>)
 8006a6c:	ec51 0b18 	vmov	r0, r1, d8
 8006a70:	2200      	movs	r2, #0
 8006a72:	f7f9 fde1 	bl	8000638 <__aeabi_dmul>
 8006a76:	4b2c      	ldr	r3, [pc, #176]	; (8006b28 <_dtoa_r+0x650>)
 8006a78:	ec41 0b18 	vmov	d8, r0, r1
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	4630      	mov	r0, r6
 8006a80:	4639      	mov	r1, r7
 8006a82:	f7f9 fdd9 	bl	8000638 <__aeabi_dmul>
 8006a86:	4606      	mov	r6, r0
 8006a88:	460f      	mov	r7, r1
 8006a8a:	e7c4      	b.n	8006a16 <_dtoa_r+0x53e>
 8006a8c:	ec51 0b17 	vmov	r0, r1, d7
 8006a90:	f7f9 fdd2 	bl	8000638 <__aeabi_dmul>
 8006a94:	9b02      	ldr	r3, [sp, #8]
 8006a96:	9d00      	ldr	r5, [sp, #0]
 8006a98:	930c      	str	r3, [sp, #48]	; 0x30
 8006a9a:	ec41 0b18 	vmov	d8, r0, r1
 8006a9e:	4639      	mov	r1, r7
 8006aa0:	4630      	mov	r0, r6
 8006aa2:	f7fa f879 	bl	8000b98 <__aeabi_d2iz>
 8006aa6:	9011      	str	r0, [sp, #68]	; 0x44
 8006aa8:	f7f9 fd5c 	bl	8000564 <__aeabi_i2d>
 8006aac:	4602      	mov	r2, r0
 8006aae:	460b      	mov	r3, r1
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	4639      	mov	r1, r7
 8006ab4:	f7f9 fc08 	bl	80002c8 <__aeabi_dsub>
 8006ab8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006aba:	3330      	adds	r3, #48	; 0x30
 8006abc:	f805 3b01 	strb.w	r3, [r5], #1
 8006ac0:	9b02      	ldr	r3, [sp, #8]
 8006ac2:	429d      	cmp	r5, r3
 8006ac4:	4606      	mov	r6, r0
 8006ac6:	460f      	mov	r7, r1
 8006ac8:	f04f 0200 	mov.w	r2, #0
 8006acc:	d134      	bne.n	8006b38 <_dtoa_r+0x660>
 8006ace:	4b19      	ldr	r3, [pc, #100]	; (8006b34 <_dtoa_r+0x65c>)
 8006ad0:	ec51 0b18 	vmov	r0, r1, d8
 8006ad4:	f7f9 fbfa 	bl	80002cc <__adddf3>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	460b      	mov	r3, r1
 8006adc:	4630      	mov	r0, r6
 8006ade:	4639      	mov	r1, r7
 8006ae0:	f7fa f83a 	bl	8000b58 <__aeabi_dcmpgt>
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	d175      	bne.n	8006bd4 <_dtoa_r+0x6fc>
 8006ae8:	ec53 2b18 	vmov	r2, r3, d8
 8006aec:	4911      	ldr	r1, [pc, #68]	; (8006b34 <_dtoa_r+0x65c>)
 8006aee:	2000      	movs	r0, #0
 8006af0:	f7f9 fbea 	bl	80002c8 <__aeabi_dsub>
 8006af4:	4602      	mov	r2, r0
 8006af6:	460b      	mov	r3, r1
 8006af8:	4630      	mov	r0, r6
 8006afa:	4639      	mov	r1, r7
 8006afc:	f7fa f80e 	bl	8000b1c <__aeabi_dcmplt>
 8006b00:	2800      	cmp	r0, #0
 8006b02:	f43f af27 	beq.w	8006954 <_dtoa_r+0x47c>
 8006b06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b08:	1e6b      	subs	r3, r5, #1
 8006b0a:	930c      	str	r3, [sp, #48]	; 0x30
 8006b0c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b10:	2b30      	cmp	r3, #48	; 0x30
 8006b12:	d0f8      	beq.n	8006b06 <_dtoa_r+0x62e>
 8006b14:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006b18:	e04a      	b.n	8006bb0 <_dtoa_r+0x6d8>
 8006b1a:	bf00      	nop
 8006b1c:	08008498 	.word	0x08008498
 8006b20:	08008470 	.word	0x08008470
 8006b24:	3ff00000 	.word	0x3ff00000
 8006b28:	40240000 	.word	0x40240000
 8006b2c:	401c0000 	.word	0x401c0000
 8006b30:	40140000 	.word	0x40140000
 8006b34:	3fe00000 	.word	0x3fe00000
 8006b38:	4baf      	ldr	r3, [pc, #700]	; (8006df8 <_dtoa_r+0x920>)
 8006b3a:	f7f9 fd7d 	bl	8000638 <__aeabi_dmul>
 8006b3e:	4606      	mov	r6, r0
 8006b40:	460f      	mov	r7, r1
 8006b42:	e7ac      	b.n	8006a9e <_dtoa_r+0x5c6>
 8006b44:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006b48:	9d00      	ldr	r5, [sp, #0]
 8006b4a:	4642      	mov	r2, r8
 8006b4c:	464b      	mov	r3, r9
 8006b4e:	4630      	mov	r0, r6
 8006b50:	4639      	mov	r1, r7
 8006b52:	f7f9 fe9b 	bl	800088c <__aeabi_ddiv>
 8006b56:	f7fa f81f 	bl	8000b98 <__aeabi_d2iz>
 8006b5a:	9002      	str	r0, [sp, #8]
 8006b5c:	f7f9 fd02 	bl	8000564 <__aeabi_i2d>
 8006b60:	4642      	mov	r2, r8
 8006b62:	464b      	mov	r3, r9
 8006b64:	f7f9 fd68 	bl	8000638 <__aeabi_dmul>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	4630      	mov	r0, r6
 8006b6e:	4639      	mov	r1, r7
 8006b70:	f7f9 fbaa 	bl	80002c8 <__aeabi_dsub>
 8006b74:	9e02      	ldr	r6, [sp, #8]
 8006b76:	9f01      	ldr	r7, [sp, #4]
 8006b78:	3630      	adds	r6, #48	; 0x30
 8006b7a:	f805 6b01 	strb.w	r6, [r5], #1
 8006b7e:	9e00      	ldr	r6, [sp, #0]
 8006b80:	1bae      	subs	r6, r5, r6
 8006b82:	42b7      	cmp	r7, r6
 8006b84:	4602      	mov	r2, r0
 8006b86:	460b      	mov	r3, r1
 8006b88:	d137      	bne.n	8006bfa <_dtoa_r+0x722>
 8006b8a:	f7f9 fb9f 	bl	80002cc <__adddf3>
 8006b8e:	4642      	mov	r2, r8
 8006b90:	464b      	mov	r3, r9
 8006b92:	4606      	mov	r6, r0
 8006b94:	460f      	mov	r7, r1
 8006b96:	f7f9 ffdf 	bl	8000b58 <__aeabi_dcmpgt>
 8006b9a:	b9c8      	cbnz	r0, 8006bd0 <_dtoa_r+0x6f8>
 8006b9c:	4642      	mov	r2, r8
 8006b9e:	464b      	mov	r3, r9
 8006ba0:	4630      	mov	r0, r6
 8006ba2:	4639      	mov	r1, r7
 8006ba4:	f7f9 ffb0 	bl	8000b08 <__aeabi_dcmpeq>
 8006ba8:	b110      	cbz	r0, 8006bb0 <_dtoa_r+0x6d8>
 8006baa:	9b02      	ldr	r3, [sp, #8]
 8006bac:	07d9      	lsls	r1, r3, #31
 8006bae:	d40f      	bmi.n	8006bd0 <_dtoa_r+0x6f8>
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	4659      	mov	r1, fp
 8006bb4:	f000 fada 	bl	800716c <_Bfree>
 8006bb8:	2300      	movs	r3, #0
 8006bba:	702b      	strb	r3, [r5, #0]
 8006bbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006bbe:	f10a 0001 	add.w	r0, sl, #1
 8006bc2:	6018      	str	r0, [r3, #0]
 8006bc4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f43f acd8 	beq.w	800657c <_dtoa_r+0xa4>
 8006bcc:	601d      	str	r5, [r3, #0]
 8006bce:	e4d5      	b.n	800657c <_dtoa_r+0xa4>
 8006bd0:	f8cd a01c 	str.w	sl, [sp, #28]
 8006bd4:	462b      	mov	r3, r5
 8006bd6:	461d      	mov	r5, r3
 8006bd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bdc:	2a39      	cmp	r2, #57	; 0x39
 8006bde:	d108      	bne.n	8006bf2 <_dtoa_r+0x71a>
 8006be0:	9a00      	ldr	r2, [sp, #0]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d1f7      	bne.n	8006bd6 <_dtoa_r+0x6fe>
 8006be6:	9a07      	ldr	r2, [sp, #28]
 8006be8:	9900      	ldr	r1, [sp, #0]
 8006bea:	3201      	adds	r2, #1
 8006bec:	9207      	str	r2, [sp, #28]
 8006bee:	2230      	movs	r2, #48	; 0x30
 8006bf0:	700a      	strb	r2, [r1, #0]
 8006bf2:	781a      	ldrb	r2, [r3, #0]
 8006bf4:	3201      	adds	r2, #1
 8006bf6:	701a      	strb	r2, [r3, #0]
 8006bf8:	e78c      	b.n	8006b14 <_dtoa_r+0x63c>
 8006bfa:	4b7f      	ldr	r3, [pc, #508]	; (8006df8 <_dtoa_r+0x920>)
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f7f9 fd1b 	bl	8000638 <__aeabi_dmul>
 8006c02:	2200      	movs	r2, #0
 8006c04:	2300      	movs	r3, #0
 8006c06:	4606      	mov	r6, r0
 8006c08:	460f      	mov	r7, r1
 8006c0a:	f7f9 ff7d 	bl	8000b08 <__aeabi_dcmpeq>
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	d09b      	beq.n	8006b4a <_dtoa_r+0x672>
 8006c12:	e7cd      	b.n	8006bb0 <_dtoa_r+0x6d8>
 8006c14:	9a08      	ldr	r2, [sp, #32]
 8006c16:	2a00      	cmp	r2, #0
 8006c18:	f000 80c4 	beq.w	8006da4 <_dtoa_r+0x8cc>
 8006c1c:	9a05      	ldr	r2, [sp, #20]
 8006c1e:	2a01      	cmp	r2, #1
 8006c20:	f300 80a8 	bgt.w	8006d74 <_dtoa_r+0x89c>
 8006c24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006c26:	2a00      	cmp	r2, #0
 8006c28:	f000 80a0 	beq.w	8006d6c <_dtoa_r+0x894>
 8006c2c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006c30:	9e06      	ldr	r6, [sp, #24]
 8006c32:	4645      	mov	r5, r8
 8006c34:	9a04      	ldr	r2, [sp, #16]
 8006c36:	2101      	movs	r1, #1
 8006c38:	441a      	add	r2, r3
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	4498      	add	r8, r3
 8006c3e:	9204      	str	r2, [sp, #16]
 8006c40:	f000 fb50 	bl	80072e4 <__i2b>
 8006c44:	4607      	mov	r7, r0
 8006c46:	2d00      	cmp	r5, #0
 8006c48:	dd0b      	ble.n	8006c62 <_dtoa_r+0x78a>
 8006c4a:	9b04      	ldr	r3, [sp, #16]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	dd08      	ble.n	8006c62 <_dtoa_r+0x78a>
 8006c50:	42ab      	cmp	r3, r5
 8006c52:	9a04      	ldr	r2, [sp, #16]
 8006c54:	bfa8      	it	ge
 8006c56:	462b      	movge	r3, r5
 8006c58:	eba8 0803 	sub.w	r8, r8, r3
 8006c5c:	1aed      	subs	r5, r5, r3
 8006c5e:	1ad3      	subs	r3, r2, r3
 8006c60:	9304      	str	r3, [sp, #16]
 8006c62:	9b06      	ldr	r3, [sp, #24]
 8006c64:	b1fb      	cbz	r3, 8006ca6 <_dtoa_r+0x7ce>
 8006c66:	9b08      	ldr	r3, [sp, #32]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f000 809f 	beq.w	8006dac <_dtoa_r+0x8d4>
 8006c6e:	2e00      	cmp	r6, #0
 8006c70:	dd11      	ble.n	8006c96 <_dtoa_r+0x7be>
 8006c72:	4639      	mov	r1, r7
 8006c74:	4632      	mov	r2, r6
 8006c76:	4620      	mov	r0, r4
 8006c78:	f000 fbf0 	bl	800745c <__pow5mult>
 8006c7c:	465a      	mov	r2, fp
 8006c7e:	4601      	mov	r1, r0
 8006c80:	4607      	mov	r7, r0
 8006c82:	4620      	mov	r0, r4
 8006c84:	f000 fb44 	bl	8007310 <__multiply>
 8006c88:	4659      	mov	r1, fp
 8006c8a:	9007      	str	r0, [sp, #28]
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	f000 fa6d 	bl	800716c <_Bfree>
 8006c92:	9b07      	ldr	r3, [sp, #28]
 8006c94:	469b      	mov	fp, r3
 8006c96:	9b06      	ldr	r3, [sp, #24]
 8006c98:	1b9a      	subs	r2, r3, r6
 8006c9a:	d004      	beq.n	8006ca6 <_dtoa_r+0x7ce>
 8006c9c:	4659      	mov	r1, fp
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	f000 fbdc 	bl	800745c <__pow5mult>
 8006ca4:	4683      	mov	fp, r0
 8006ca6:	2101      	movs	r1, #1
 8006ca8:	4620      	mov	r0, r4
 8006caa:	f000 fb1b 	bl	80072e4 <__i2b>
 8006cae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	4606      	mov	r6, r0
 8006cb4:	dd7c      	ble.n	8006db0 <_dtoa_r+0x8d8>
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	4601      	mov	r1, r0
 8006cba:	4620      	mov	r0, r4
 8006cbc:	f000 fbce 	bl	800745c <__pow5mult>
 8006cc0:	9b05      	ldr	r3, [sp, #20]
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	4606      	mov	r6, r0
 8006cc6:	dd76      	ble.n	8006db6 <_dtoa_r+0x8de>
 8006cc8:	2300      	movs	r3, #0
 8006cca:	9306      	str	r3, [sp, #24]
 8006ccc:	6933      	ldr	r3, [r6, #16]
 8006cce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006cd2:	6918      	ldr	r0, [r3, #16]
 8006cd4:	f000 fab6 	bl	8007244 <__hi0bits>
 8006cd8:	f1c0 0020 	rsb	r0, r0, #32
 8006cdc:	9b04      	ldr	r3, [sp, #16]
 8006cde:	4418      	add	r0, r3
 8006ce0:	f010 001f 	ands.w	r0, r0, #31
 8006ce4:	f000 8086 	beq.w	8006df4 <_dtoa_r+0x91c>
 8006ce8:	f1c0 0320 	rsb	r3, r0, #32
 8006cec:	2b04      	cmp	r3, #4
 8006cee:	dd7f      	ble.n	8006df0 <_dtoa_r+0x918>
 8006cf0:	f1c0 001c 	rsb	r0, r0, #28
 8006cf4:	9b04      	ldr	r3, [sp, #16]
 8006cf6:	4403      	add	r3, r0
 8006cf8:	4480      	add	r8, r0
 8006cfa:	4405      	add	r5, r0
 8006cfc:	9304      	str	r3, [sp, #16]
 8006cfe:	f1b8 0f00 	cmp.w	r8, #0
 8006d02:	dd05      	ble.n	8006d10 <_dtoa_r+0x838>
 8006d04:	4659      	mov	r1, fp
 8006d06:	4642      	mov	r2, r8
 8006d08:	4620      	mov	r0, r4
 8006d0a:	f000 fc01 	bl	8007510 <__lshift>
 8006d0e:	4683      	mov	fp, r0
 8006d10:	9b04      	ldr	r3, [sp, #16]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	dd05      	ble.n	8006d22 <_dtoa_r+0x84a>
 8006d16:	4631      	mov	r1, r6
 8006d18:	461a      	mov	r2, r3
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	f000 fbf8 	bl	8007510 <__lshift>
 8006d20:	4606      	mov	r6, r0
 8006d22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d069      	beq.n	8006dfc <_dtoa_r+0x924>
 8006d28:	4631      	mov	r1, r6
 8006d2a:	4658      	mov	r0, fp
 8006d2c:	f000 fc5c 	bl	80075e8 <__mcmp>
 8006d30:	2800      	cmp	r0, #0
 8006d32:	da63      	bge.n	8006dfc <_dtoa_r+0x924>
 8006d34:	2300      	movs	r3, #0
 8006d36:	4659      	mov	r1, fp
 8006d38:	220a      	movs	r2, #10
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	f000 fa38 	bl	80071b0 <__multadd>
 8006d40:	9b08      	ldr	r3, [sp, #32]
 8006d42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d46:	4683      	mov	fp, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f000 818f 	beq.w	800706c <_dtoa_r+0xb94>
 8006d4e:	4639      	mov	r1, r7
 8006d50:	2300      	movs	r3, #0
 8006d52:	220a      	movs	r2, #10
 8006d54:	4620      	mov	r0, r4
 8006d56:	f000 fa2b 	bl	80071b0 <__multadd>
 8006d5a:	f1b9 0f00 	cmp.w	r9, #0
 8006d5e:	4607      	mov	r7, r0
 8006d60:	f300 808e 	bgt.w	8006e80 <_dtoa_r+0x9a8>
 8006d64:	9b05      	ldr	r3, [sp, #20]
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	dc50      	bgt.n	8006e0c <_dtoa_r+0x934>
 8006d6a:	e089      	b.n	8006e80 <_dtoa_r+0x9a8>
 8006d6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d72:	e75d      	b.n	8006c30 <_dtoa_r+0x758>
 8006d74:	9b01      	ldr	r3, [sp, #4]
 8006d76:	1e5e      	subs	r6, r3, #1
 8006d78:	9b06      	ldr	r3, [sp, #24]
 8006d7a:	42b3      	cmp	r3, r6
 8006d7c:	bfbf      	itttt	lt
 8006d7e:	9b06      	ldrlt	r3, [sp, #24]
 8006d80:	9606      	strlt	r6, [sp, #24]
 8006d82:	1af2      	sublt	r2, r6, r3
 8006d84:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006d86:	bfb6      	itet	lt
 8006d88:	189b      	addlt	r3, r3, r2
 8006d8a:	1b9e      	subge	r6, r3, r6
 8006d8c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006d8e:	9b01      	ldr	r3, [sp, #4]
 8006d90:	bfb8      	it	lt
 8006d92:	2600      	movlt	r6, #0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	bfb5      	itete	lt
 8006d98:	eba8 0503 	sublt.w	r5, r8, r3
 8006d9c:	9b01      	ldrge	r3, [sp, #4]
 8006d9e:	2300      	movlt	r3, #0
 8006da0:	4645      	movge	r5, r8
 8006da2:	e747      	b.n	8006c34 <_dtoa_r+0x75c>
 8006da4:	9e06      	ldr	r6, [sp, #24]
 8006da6:	9f08      	ldr	r7, [sp, #32]
 8006da8:	4645      	mov	r5, r8
 8006daa:	e74c      	b.n	8006c46 <_dtoa_r+0x76e>
 8006dac:	9a06      	ldr	r2, [sp, #24]
 8006dae:	e775      	b.n	8006c9c <_dtoa_r+0x7c4>
 8006db0:	9b05      	ldr	r3, [sp, #20]
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	dc18      	bgt.n	8006de8 <_dtoa_r+0x910>
 8006db6:	9b02      	ldr	r3, [sp, #8]
 8006db8:	b9b3      	cbnz	r3, 8006de8 <_dtoa_r+0x910>
 8006dba:	9b03      	ldr	r3, [sp, #12]
 8006dbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006dc0:	b9a3      	cbnz	r3, 8006dec <_dtoa_r+0x914>
 8006dc2:	9b03      	ldr	r3, [sp, #12]
 8006dc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006dc8:	0d1b      	lsrs	r3, r3, #20
 8006dca:	051b      	lsls	r3, r3, #20
 8006dcc:	b12b      	cbz	r3, 8006dda <_dtoa_r+0x902>
 8006dce:	9b04      	ldr	r3, [sp, #16]
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	9304      	str	r3, [sp, #16]
 8006dd4:	f108 0801 	add.w	r8, r8, #1
 8006dd8:	2301      	movs	r3, #1
 8006dda:	9306      	str	r3, [sp, #24]
 8006ddc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f47f af74 	bne.w	8006ccc <_dtoa_r+0x7f4>
 8006de4:	2001      	movs	r0, #1
 8006de6:	e779      	b.n	8006cdc <_dtoa_r+0x804>
 8006de8:	2300      	movs	r3, #0
 8006dea:	e7f6      	b.n	8006dda <_dtoa_r+0x902>
 8006dec:	9b02      	ldr	r3, [sp, #8]
 8006dee:	e7f4      	b.n	8006dda <_dtoa_r+0x902>
 8006df0:	d085      	beq.n	8006cfe <_dtoa_r+0x826>
 8006df2:	4618      	mov	r0, r3
 8006df4:	301c      	adds	r0, #28
 8006df6:	e77d      	b.n	8006cf4 <_dtoa_r+0x81c>
 8006df8:	40240000 	.word	0x40240000
 8006dfc:	9b01      	ldr	r3, [sp, #4]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	dc38      	bgt.n	8006e74 <_dtoa_r+0x99c>
 8006e02:	9b05      	ldr	r3, [sp, #20]
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	dd35      	ble.n	8006e74 <_dtoa_r+0x99c>
 8006e08:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006e0c:	f1b9 0f00 	cmp.w	r9, #0
 8006e10:	d10d      	bne.n	8006e2e <_dtoa_r+0x956>
 8006e12:	4631      	mov	r1, r6
 8006e14:	464b      	mov	r3, r9
 8006e16:	2205      	movs	r2, #5
 8006e18:	4620      	mov	r0, r4
 8006e1a:	f000 f9c9 	bl	80071b0 <__multadd>
 8006e1e:	4601      	mov	r1, r0
 8006e20:	4606      	mov	r6, r0
 8006e22:	4658      	mov	r0, fp
 8006e24:	f000 fbe0 	bl	80075e8 <__mcmp>
 8006e28:	2800      	cmp	r0, #0
 8006e2a:	f73f adbd 	bgt.w	80069a8 <_dtoa_r+0x4d0>
 8006e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e30:	9d00      	ldr	r5, [sp, #0]
 8006e32:	ea6f 0a03 	mvn.w	sl, r3
 8006e36:	f04f 0800 	mov.w	r8, #0
 8006e3a:	4631      	mov	r1, r6
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	f000 f995 	bl	800716c <_Bfree>
 8006e42:	2f00      	cmp	r7, #0
 8006e44:	f43f aeb4 	beq.w	8006bb0 <_dtoa_r+0x6d8>
 8006e48:	f1b8 0f00 	cmp.w	r8, #0
 8006e4c:	d005      	beq.n	8006e5a <_dtoa_r+0x982>
 8006e4e:	45b8      	cmp	r8, r7
 8006e50:	d003      	beq.n	8006e5a <_dtoa_r+0x982>
 8006e52:	4641      	mov	r1, r8
 8006e54:	4620      	mov	r0, r4
 8006e56:	f000 f989 	bl	800716c <_Bfree>
 8006e5a:	4639      	mov	r1, r7
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	f000 f985 	bl	800716c <_Bfree>
 8006e62:	e6a5      	b.n	8006bb0 <_dtoa_r+0x6d8>
 8006e64:	2600      	movs	r6, #0
 8006e66:	4637      	mov	r7, r6
 8006e68:	e7e1      	b.n	8006e2e <_dtoa_r+0x956>
 8006e6a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006e6c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006e70:	4637      	mov	r7, r6
 8006e72:	e599      	b.n	80069a8 <_dtoa_r+0x4d0>
 8006e74:	9b08      	ldr	r3, [sp, #32]
 8006e76:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f000 80fd 	beq.w	800707a <_dtoa_r+0xba2>
 8006e80:	2d00      	cmp	r5, #0
 8006e82:	dd05      	ble.n	8006e90 <_dtoa_r+0x9b8>
 8006e84:	4639      	mov	r1, r7
 8006e86:	462a      	mov	r2, r5
 8006e88:	4620      	mov	r0, r4
 8006e8a:	f000 fb41 	bl	8007510 <__lshift>
 8006e8e:	4607      	mov	r7, r0
 8006e90:	9b06      	ldr	r3, [sp, #24]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d05c      	beq.n	8006f50 <_dtoa_r+0xa78>
 8006e96:	6879      	ldr	r1, [r7, #4]
 8006e98:	4620      	mov	r0, r4
 8006e9a:	f000 f927 	bl	80070ec <_Balloc>
 8006e9e:	4605      	mov	r5, r0
 8006ea0:	b928      	cbnz	r0, 8006eae <_dtoa_r+0x9d6>
 8006ea2:	4b80      	ldr	r3, [pc, #512]	; (80070a4 <_dtoa_r+0xbcc>)
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006eaa:	f7ff bb2e 	b.w	800650a <_dtoa_r+0x32>
 8006eae:	693a      	ldr	r2, [r7, #16]
 8006eb0:	3202      	adds	r2, #2
 8006eb2:	0092      	lsls	r2, r2, #2
 8006eb4:	f107 010c 	add.w	r1, r7, #12
 8006eb8:	300c      	adds	r0, #12
 8006eba:	f000 f8fd 	bl	80070b8 <memcpy>
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	f000 fb24 	bl	8007510 <__lshift>
 8006ec8:	9b00      	ldr	r3, [sp, #0]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	9301      	str	r3, [sp, #4]
 8006ece:	9b00      	ldr	r3, [sp, #0]
 8006ed0:	444b      	add	r3, r9
 8006ed2:	9307      	str	r3, [sp, #28]
 8006ed4:	9b02      	ldr	r3, [sp, #8]
 8006ed6:	f003 0301 	and.w	r3, r3, #1
 8006eda:	46b8      	mov	r8, r7
 8006edc:	9306      	str	r3, [sp, #24]
 8006ede:	4607      	mov	r7, r0
 8006ee0:	9b01      	ldr	r3, [sp, #4]
 8006ee2:	4631      	mov	r1, r6
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	4658      	mov	r0, fp
 8006ee8:	9302      	str	r3, [sp, #8]
 8006eea:	f7ff fa69 	bl	80063c0 <quorem>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	3330      	adds	r3, #48	; 0x30
 8006ef2:	9004      	str	r0, [sp, #16]
 8006ef4:	4641      	mov	r1, r8
 8006ef6:	4658      	mov	r0, fp
 8006ef8:	9308      	str	r3, [sp, #32]
 8006efa:	f000 fb75 	bl	80075e8 <__mcmp>
 8006efe:	463a      	mov	r2, r7
 8006f00:	4681      	mov	r9, r0
 8006f02:	4631      	mov	r1, r6
 8006f04:	4620      	mov	r0, r4
 8006f06:	f000 fb8b 	bl	8007620 <__mdiff>
 8006f0a:	68c2      	ldr	r2, [r0, #12]
 8006f0c:	9b08      	ldr	r3, [sp, #32]
 8006f0e:	4605      	mov	r5, r0
 8006f10:	bb02      	cbnz	r2, 8006f54 <_dtoa_r+0xa7c>
 8006f12:	4601      	mov	r1, r0
 8006f14:	4658      	mov	r0, fp
 8006f16:	f000 fb67 	bl	80075e8 <__mcmp>
 8006f1a:	9b08      	ldr	r3, [sp, #32]
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	4629      	mov	r1, r5
 8006f20:	4620      	mov	r0, r4
 8006f22:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006f26:	f000 f921 	bl	800716c <_Bfree>
 8006f2a:	9b05      	ldr	r3, [sp, #20]
 8006f2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f2e:	9d01      	ldr	r5, [sp, #4]
 8006f30:	ea43 0102 	orr.w	r1, r3, r2
 8006f34:	9b06      	ldr	r3, [sp, #24]
 8006f36:	430b      	orrs	r3, r1
 8006f38:	9b08      	ldr	r3, [sp, #32]
 8006f3a:	d10d      	bne.n	8006f58 <_dtoa_r+0xa80>
 8006f3c:	2b39      	cmp	r3, #57	; 0x39
 8006f3e:	d029      	beq.n	8006f94 <_dtoa_r+0xabc>
 8006f40:	f1b9 0f00 	cmp.w	r9, #0
 8006f44:	dd01      	ble.n	8006f4a <_dtoa_r+0xa72>
 8006f46:	9b04      	ldr	r3, [sp, #16]
 8006f48:	3331      	adds	r3, #49	; 0x31
 8006f4a:	9a02      	ldr	r2, [sp, #8]
 8006f4c:	7013      	strb	r3, [r2, #0]
 8006f4e:	e774      	b.n	8006e3a <_dtoa_r+0x962>
 8006f50:	4638      	mov	r0, r7
 8006f52:	e7b9      	b.n	8006ec8 <_dtoa_r+0x9f0>
 8006f54:	2201      	movs	r2, #1
 8006f56:	e7e2      	b.n	8006f1e <_dtoa_r+0xa46>
 8006f58:	f1b9 0f00 	cmp.w	r9, #0
 8006f5c:	db06      	blt.n	8006f6c <_dtoa_r+0xa94>
 8006f5e:	9905      	ldr	r1, [sp, #20]
 8006f60:	ea41 0909 	orr.w	r9, r1, r9
 8006f64:	9906      	ldr	r1, [sp, #24]
 8006f66:	ea59 0101 	orrs.w	r1, r9, r1
 8006f6a:	d120      	bne.n	8006fae <_dtoa_r+0xad6>
 8006f6c:	2a00      	cmp	r2, #0
 8006f6e:	ddec      	ble.n	8006f4a <_dtoa_r+0xa72>
 8006f70:	4659      	mov	r1, fp
 8006f72:	2201      	movs	r2, #1
 8006f74:	4620      	mov	r0, r4
 8006f76:	9301      	str	r3, [sp, #4]
 8006f78:	f000 faca 	bl	8007510 <__lshift>
 8006f7c:	4631      	mov	r1, r6
 8006f7e:	4683      	mov	fp, r0
 8006f80:	f000 fb32 	bl	80075e8 <__mcmp>
 8006f84:	2800      	cmp	r0, #0
 8006f86:	9b01      	ldr	r3, [sp, #4]
 8006f88:	dc02      	bgt.n	8006f90 <_dtoa_r+0xab8>
 8006f8a:	d1de      	bne.n	8006f4a <_dtoa_r+0xa72>
 8006f8c:	07da      	lsls	r2, r3, #31
 8006f8e:	d5dc      	bpl.n	8006f4a <_dtoa_r+0xa72>
 8006f90:	2b39      	cmp	r3, #57	; 0x39
 8006f92:	d1d8      	bne.n	8006f46 <_dtoa_r+0xa6e>
 8006f94:	9a02      	ldr	r2, [sp, #8]
 8006f96:	2339      	movs	r3, #57	; 0x39
 8006f98:	7013      	strb	r3, [r2, #0]
 8006f9a:	462b      	mov	r3, r5
 8006f9c:	461d      	mov	r5, r3
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006fa4:	2a39      	cmp	r2, #57	; 0x39
 8006fa6:	d050      	beq.n	800704a <_dtoa_r+0xb72>
 8006fa8:	3201      	adds	r2, #1
 8006faa:	701a      	strb	r2, [r3, #0]
 8006fac:	e745      	b.n	8006e3a <_dtoa_r+0x962>
 8006fae:	2a00      	cmp	r2, #0
 8006fb0:	dd03      	ble.n	8006fba <_dtoa_r+0xae2>
 8006fb2:	2b39      	cmp	r3, #57	; 0x39
 8006fb4:	d0ee      	beq.n	8006f94 <_dtoa_r+0xabc>
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	e7c7      	b.n	8006f4a <_dtoa_r+0xa72>
 8006fba:	9a01      	ldr	r2, [sp, #4]
 8006fbc:	9907      	ldr	r1, [sp, #28]
 8006fbe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006fc2:	428a      	cmp	r2, r1
 8006fc4:	d02a      	beq.n	800701c <_dtoa_r+0xb44>
 8006fc6:	4659      	mov	r1, fp
 8006fc8:	2300      	movs	r3, #0
 8006fca:	220a      	movs	r2, #10
 8006fcc:	4620      	mov	r0, r4
 8006fce:	f000 f8ef 	bl	80071b0 <__multadd>
 8006fd2:	45b8      	cmp	r8, r7
 8006fd4:	4683      	mov	fp, r0
 8006fd6:	f04f 0300 	mov.w	r3, #0
 8006fda:	f04f 020a 	mov.w	r2, #10
 8006fde:	4641      	mov	r1, r8
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	d107      	bne.n	8006ff4 <_dtoa_r+0xb1c>
 8006fe4:	f000 f8e4 	bl	80071b0 <__multadd>
 8006fe8:	4680      	mov	r8, r0
 8006fea:	4607      	mov	r7, r0
 8006fec:	9b01      	ldr	r3, [sp, #4]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	9301      	str	r3, [sp, #4]
 8006ff2:	e775      	b.n	8006ee0 <_dtoa_r+0xa08>
 8006ff4:	f000 f8dc 	bl	80071b0 <__multadd>
 8006ff8:	4639      	mov	r1, r7
 8006ffa:	4680      	mov	r8, r0
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	220a      	movs	r2, #10
 8007000:	4620      	mov	r0, r4
 8007002:	f000 f8d5 	bl	80071b0 <__multadd>
 8007006:	4607      	mov	r7, r0
 8007008:	e7f0      	b.n	8006fec <_dtoa_r+0xb14>
 800700a:	f1b9 0f00 	cmp.w	r9, #0
 800700e:	9a00      	ldr	r2, [sp, #0]
 8007010:	bfcc      	ite	gt
 8007012:	464d      	movgt	r5, r9
 8007014:	2501      	movle	r5, #1
 8007016:	4415      	add	r5, r2
 8007018:	f04f 0800 	mov.w	r8, #0
 800701c:	4659      	mov	r1, fp
 800701e:	2201      	movs	r2, #1
 8007020:	4620      	mov	r0, r4
 8007022:	9301      	str	r3, [sp, #4]
 8007024:	f000 fa74 	bl	8007510 <__lshift>
 8007028:	4631      	mov	r1, r6
 800702a:	4683      	mov	fp, r0
 800702c:	f000 fadc 	bl	80075e8 <__mcmp>
 8007030:	2800      	cmp	r0, #0
 8007032:	dcb2      	bgt.n	8006f9a <_dtoa_r+0xac2>
 8007034:	d102      	bne.n	800703c <_dtoa_r+0xb64>
 8007036:	9b01      	ldr	r3, [sp, #4]
 8007038:	07db      	lsls	r3, r3, #31
 800703a:	d4ae      	bmi.n	8006f9a <_dtoa_r+0xac2>
 800703c:	462b      	mov	r3, r5
 800703e:	461d      	mov	r5, r3
 8007040:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007044:	2a30      	cmp	r2, #48	; 0x30
 8007046:	d0fa      	beq.n	800703e <_dtoa_r+0xb66>
 8007048:	e6f7      	b.n	8006e3a <_dtoa_r+0x962>
 800704a:	9a00      	ldr	r2, [sp, #0]
 800704c:	429a      	cmp	r2, r3
 800704e:	d1a5      	bne.n	8006f9c <_dtoa_r+0xac4>
 8007050:	f10a 0a01 	add.w	sl, sl, #1
 8007054:	2331      	movs	r3, #49	; 0x31
 8007056:	e779      	b.n	8006f4c <_dtoa_r+0xa74>
 8007058:	4b13      	ldr	r3, [pc, #76]	; (80070a8 <_dtoa_r+0xbd0>)
 800705a:	f7ff baaf 	b.w	80065bc <_dtoa_r+0xe4>
 800705e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007060:	2b00      	cmp	r3, #0
 8007062:	f47f aa86 	bne.w	8006572 <_dtoa_r+0x9a>
 8007066:	4b11      	ldr	r3, [pc, #68]	; (80070ac <_dtoa_r+0xbd4>)
 8007068:	f7ff baa8 	b.w	80065bc <_dtoa_r+0xe4>
 800706c:	f1b9 0f00 	cmp.w	r9, #0
 8007070:	dc03      	bgt.n	800707a <_dtoa_r+0xba2>
 8007072:	9b05      	ldr	r3, [sp, #20]
 8007074:	2b02      	cmp	r3, #2
 8007076:	f73f aec9 	bgt.w	8006e0c <_dtoa_r+0x934>
 800707a:	9d00      	ldr	r5, [sp, #0]
 800707c:	4631      	mov	r1, r6
 800707e:	4658      	mov	r0, fp
 8007080:	f7ff f99e 	bl	80063c0 <quorem>
 8007084:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007088:	f805 3b01 	strb.w	r3, [r5], #1
 800708c:	9a00      	ldr	r2, [sp, #0]
 800708e:	1aaa      	subs	r2, r5, r2
 8007090:	4591      	cmp	r9, r2
 8007092:	ddba      	ble.n	800700a <_dtoa_r+0xb32>
 8007094:	4659      	mov	r1, fp
 8007096:	2300      	movs	r3, #0
 8007098:	220a      	movs	r2, #10
 800709a:	4620      	mov	r0, r4
 800709c:	f000 f888 	bl	80071b0 <__multadd>
 80070a0:	4683      	mov	fp, r0
 80070a2:	e7eb      	b.n	800707c <_dtoa_r+0xba4>
 80070a4:	080083fb 	.word	0x080083fb
 80070a8:	08008354 	.word	0x08008354
 80070ac:	08008378 	.word	0x08008378

080070b0 <_localeconv_r>:
 80070b0:	4800      	ldr	r0, [pc, #0]	; (80070b4 <_localeconv_r+0x4>)
 80070b2:	4770      	bx	lr
 80070b4:	20000160 	.word	0x20000160

080070b8 <memcpy>:
 80070b8:	440a      	add	r2, r1
 80070ba:	4291      	cmp	r1, r2
 80070bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80070c0:	d100      	bne.n	80070c4 <memcpy+0xc>
 80070c2:	4770      	bx	lr
 80070c4:	b510      	push	{r4, lr}
 80070c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070ce:	4291      	cmp	r1, r2
 80070d0:	d1f9      	bne.n	80070c6 <memcpy+0xe>
 80070d2:	bd10      	pop	{r4, pc}

080070d4 <__malloc_lock>:
 80070d4:	4801      	ldr	r0, [pc, #4]	; (80070dc <__malloc_lock+0x8>)
 80070d6:	f7fa bda2 	b.w	8001c1e <__retarget_lock_acquire_recursive>
 80070da:	bf00      	nop
 80070dc:	20000204 	.word	0x20000204

080070e0 <__malloc_unlock>:
 80070e0:	4801      	ldr	r0, [pc, #4]	; (80070e8 <__malloc_unlock+0x8>)
 80070e2:	f7fa bdb0 	b.w	8001c46 <__retarget_lock_release_recursive>
 80070e6:	bf00      	nop
 80070e8:	20000204 	.word	0x20000204

080070ec <_Balloc>:
 80070ec:	b570      	push	{r4, r5, r6, lr}
 80070ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80070f0:	4604      	mov	r4, r0
 80070f2:	460d      	mov	r5, r1
 80070f4:	b976      	cbnz	r6, 8007114 <_Balloc+0x28>
 80070f6:	2010      	movs	r0, #16
 80070f8:	f7fe fc2e 	bl	8005958 <malloc>
 80070fc:	4602      	mov	r2, r0
 80070fe:	6260      	str	r0, [r4, #36]	; 0x24
 8007100:	b920      	cbnz	r0, 800710c <_Balloc+0x20>
 8007102:	4b18      	ldr	r3, [pc, #96]	; (8007164 <_Balloc+0x78>)
 8007104:	4818      	ldr	r0, [pc, #96]	; (8007168 <_Balloc+0x7c>)
 8007106:	2166      	movs	r1, #102	; 0x66
 8007108:	f000 fb7e 	bl	8007808 <__assert_func>
 800710c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007110:	6006      	str	r6, [r0, #0]
 8007112:	60c6      	str	r6, [r0, #12]
 8007114:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007116:	68f3      	ldr	r3, [r6, #12]
 8007118:	b183      	cbz	r3, 800713c <_Balloc+0x50>
 800711a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007122:	b9b8      	cbnz	r0, 8007154 <_Balloc+0x68>
 8007124:	2101      	movs	r1, #1
 8007126:	fa01 f605 	lsl.w	r6, r1, r5
 800712a:	1d72      	adds	r2, r6, #5
 800712c:	0092      	lsls	r2, r2, #2
 800712e:	4620      	mov	r0, r4
 8007130:	f000 fb5a 	bl	80077e8 <_calloc_r>
 8007134:	b160      	cbz	r0, 8007150 <_Balloc+0x64>
 8007136:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800713a:	e00e      	b.n	800715a <_Balloc+0x6e>
 800713c:	2221      	movs	r2, #33	; 0x21
 800713e:	2104      	movs	r1, #4
 8007140:	4620      	mov	r0, r4
 8007142:	f000 fb51 	bl	80077e8 <_calloc_r>
 8007146:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007148:	60f0      	str	r0, [r6, #12]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1e4      	bne.n	800711a <_Balloc+0x2e>
 8007150:	2000      	movs	r0, #0
 8007152:	bd70      	pop	{r4, r5, r6, pc}
 8007154:	6802      	ldr	r2, [r0, #0]
 8007156:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800715a:	2300      	movs	r3, #0
 800715c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007160:	e7f7      	b.n	8007152 <_Balloc+0x66>
 8007162:	bf00      	nop
 8007164:	08008385 	.word	0x08008385
 8007168:	0800840c 	.word	0x0800840c

0800716c <_Bfree>:
 800716c:	b570      	push	{r4, r5, r6, lr}
 800716e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007170:	4605      	mov	r5, r0
 8007172:	460c      	mov	r4, r1
 8007174:	b976      	cbnz	r6, 8007194 <_Bfree+0x28>
 8007176:	2010      	movs	r0, #16
 8007178:	f7fe fbee 	bl	8005958 <malloc>
 800717c:	4602      	mov	r2, r0
 800717e:	6268      	str	r0, [r5, #36]	; 0x24
 8007180:	b920      	cbnz	r0, 800718c <_Bfree+0x20>
 8007182:	4b09      	ldr	r3, [pc, #36]	; (80071a8 <_Bfree+0x3c>)
 8007184:	4809      	ldr	r0, [pc, #36]	; (80071ac <_Bfree+0x40>)
 8007186:	218a      	movs	r1, #138	; 0x8a
 8007188:	f000 fb3e 	bl	8007808 <__assert_func>
 800718c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007190:	6006      	str	r6, [r0, #0]
 8007192:	60c6      	str	r6, [r0, #12]
 8007194:	b13c      	cbz	r4, 80071a6 <_Bfree+0x3a>
 8007196:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007198:	6862      	ldr	r2, [r4, #4]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071a0:	6021      	str	r1, [r4, #0]
 80071a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80071a6:	bd70      	pop	{r4, r5, r6, pc}
 80071a8:	08008385 	.word	0x08008385
 80071ac:	0800840c 	.word	0x0800840c

080071b0 <__multadd>:
 80071b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071b4:	690e      	ldr	r6, [r1, #16]
 80071b6:	4607      	mov	r7, r0
 80071b8:	4698      	mov	r8, r3
 80071ba:	460c      	mov	r4, r1
 80071bc:	f101 0014 	add.w	r0, r1, #20
 80071c0:	2300      	movs	r3, #0
 80071c2:	6805      	ldr	r5, [r0, #0]
 80071c4:	b2a9      	uxth	r1, r5
 80071c6:	fb02 8101 	mla	r1, r2, r1, r8
 80071ca:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80071ce:	0c2d      	lsrs	r5, r5, #16
 80071d0:	fb02 c505 	mla	r5, r2, r5, ip
 80071d4:	b289      	uxth	r1, r1
 80071d6:	3301      	adds	r3, #1
 80071d8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80071dc:	429e      	cmp	r6, r3
 80071de:	f840 1b04 	str.w	r1, [r0], #4
 80071e2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80071e6:	dcec      	bgt.n	80071c2 <__multadd+0x12>
 80071e8:	f1b8 0f00 	cmp.w	r8, #0
 80071ec:	d022      	beq.n	8007234 <__multadd+0x84>
 80071ee:	68a3      	ldr	r3, [r4, #8]
 80071f0:	42b3      	cmp	r3, r6
 80071f2:	dc19      	bgt.n	8007228 <__multadd+0x78>
 80071f4:	6861      	ldr	r1, [r4, #4]
 80071f6:	4638      	mov	r0, r7
 80071f8:	3101      	adds	r1, #1
 80071fa:	f7ff ff77 	bl	80070ec <_Balloc>
 80071fe:	4605      	mov	r5, r0
 8007200:	b928      	cbnz	r0, 800720e <__multadd+0x5e>
 8007202:	4602      	mov	r2, r0
 8007204:	4b0d      	ldr	r3, [pc, #52]	; (800723c <__multadd+0x8c>)
 8007206:	480e      	ldr	r0, [pc, #56]	; (8007240 <__multadd+0x90>)
 8007208:	21b5      	movs	r1, #181	; 0xb5
 800720a:	f000 fafd 	bl	8007808 <__assert_func>
 800720e:	6922      	ldr	r2, [r4, #16]
 8007210:	3202      	adds	r2, #2
 8007212:	f104 010c 	add.w	r1, r4, #12
 8007216:	0092      	lsls	r2, r2, #2
 8007218:	300c      	adds	r0, #12
 800721a:	f7ff ff4d 	bl	80070b8 <memcpy>
 800721e:	4621      	mov	r1, r4
 8007220:	4638      	mov	r0, r7
 8007222:	f7ff ffa3 	bl	800716c <_Bfree>
 8007226:	462c      	mov	r4, r5
 8007228:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800722c:	3601      	adds	r6, #1
 800722e:	f8c3 8014 	str.w	r8, [r3, #20]
 8007232:	6126      	str	r6, [r4, #16]
 8007234:	4620      	mov	r0, r4
 8007236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800723a:	bf00      	nop
 800723c:	080083fb 	.word	0x080083fb
 8007240:	0800840c 	.word	0x0800840c

08007244 <__hi0bits>:
 8007244:	0c03      	lsrs	r3, r0, #16
 8007246:	041b      	lsls	r3, r3, #16
 8007248:	b9d3      	cbnz	r3, 8007280 <__hi0bits+0x3c>
 800724a:	0400      	lsls	r0, r0, #16
 800724c:	2310      	movs	r3, #16
 800724e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007252:	bf04      	itt	eq
 8007254:	0200      	lsleq	r0, r0, #8
 8007256:	3308      	addeq	r3, #8
 8007258:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800725c:	bf04      	itt	eq
 800725e:	0100      	lsleq	r0, r0, #4
 8007260:	3304      	addeq	r3, #4
 8007262:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007266:	bf04      	itt	eq
 8007268:	0080      	lsleq	r0, r0, #2
 800726a:	3302      	addeq	r3, #2
 800726c:	2800      	cmp	r0, #0
 800726e:	db05      	blt.n	800727c <__hi0bits+0x38>
 8007270:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007274:	f103 0301 	add.w	r3, r3, #1
 8007278:	bf08      	it	eq
 800727a:	2320      	moveq	r3, #32
 800727c:	4618      	mov	r0, r3
 800727e:	4770      	bx	lr
 8007280:	2300      	movs	r3, #0
 8007282:	e7e4      	b.n	800724e <__hi0bits+0xa>

08007284 <__lo0bits>:
 8007284:	6803      	ldr	r3, [r0, #0]
 8007286:	f013 0207 	ands.w	r2, r3, #7
 800728a:	4601      	mov	r1, r0
 800728c:	d00b      	beq.n	80072a6 <__lo0bits+0x22>
 800728e:	07da      	lsls	r2, r3, #31
 8007290:	d424      	bmi.n	80072dc <__lo0bits+0x58>
 8007292:	0798      	lsls	r0, r3, #30
 8007294:	bf49      	itett	mi
 8007296:	085b      	lsrmi	r3, r3, #1
 8007298:	089b      	lsrpl	r3, r3, #2
 800729a:	2001      	movmi	r0, #1
 800729c:	600b      	strmi	r3, [r1, #0]
 800729e:	bf5c      	itt	pl
 80072a0:	600b      	strpl	r3, [r1, #0]
 80072a2:	2002      	movpl	r0, #2
 80072a4:	4770      	bx	lr
 80072a6:	b298      	uxth	r0, r3
 80072a8:	b9b0      	cbnz	r0, 80072d8 <__lo0bits+0x54>
 80072aa:	0c1b      	lsrs	r3, r3, #16
 80072ac:	2010      	movs	r0, #16
 80072ae:	f013 0fff 	tst.w	r3, #255	; 0xff
 80072b2:	bf04      	itt	eq
 80072b4:	0a1b      	lsreq	r3, r3, #8
 80072b6:	3008      	addeq	r0, #8
 80072b8:	071a      	lsls	r2, r3, #28
 80072ba:	bf04      	itt	eq
 80072bc:	091b      	lsreq	r3, r3, #4
 80072be:	3004      	addeq	r0, #4
 80072c0:	079a      	lsls	r2, r3, #30
 80072c2:	bf04      	itt	eq
 80072c4:	089b      	lsreq	r3, r3, #2
 80072c6:	3002      	addeq	r0, #2
 80072c8:	07da      	lsls	r2, r3, #31
 80072ca:	d403      	bmi.n	80072d4 <__lo0bits+0x50>
 80072cc:	085b      	lsrs	r3, r3, #1
 80072ce:	f100 0001 	add.w	r0, r0, #1
 80072d2:	d005      	beq.n	80072e0 <__lo0bits+0x5c>
 80072d4:	600b      	str	r3, [r1, #0]
 80072d6:	4770      	bx	lr
 80072d8:	4610      	mov	r0, r2
 80072da:	e7e8      	b.n	80072ae <__lo0bits+0x2a>
 80072dc:	2000      	movs	r0, #0
 80072de:	4770      	bx	lr
 80072e0:	2020      	movs	r0, #32
 80072e2:	4770      	bx	lr

080072e4 <__i2b>:
 80072e4:	b510      	push	{r4, lr}
 80072e6:	460c      	mov	r4, r1
 80072e8:	2101      	movs	r1, #1
 80072ea:	f7ff feff 	bl	80070ec <_Balloc>
 80072ee:	4602      	mov	r2, r0
 80072f0:	b928      	cbnz	r0, 80072fe <__i2b+0x1a>
 80072f2:	4b05      	ldr	r3, [pc, #20]	; (8007308 <__i2b+0x24>)
 80072f4:	4805      	ldr	r0, [pc, #20]	; (800730c <__i2b+0x28>)
 80072f6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80072fa:	f000 fa85 	bl	8007808 <__assert_func>
 80072fe:	2301      	movs	r3, #1
 8007300:	6144      	str	r4, [r0, #20]
 8007302:	6103      	str	r3, [r0, #16]
 8007304:	bd10      	pop	{r4, pc}
 8007306:	bf00      	nop
 8007308:	080083fb 	.word	0x080083fb
 800730c:	0800840c 	.word	0x0800840c

08007310 <__multiply>:
 8007310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007314:	4614      	mov	r4, r2
 8007316:	690a      	ldr	r2, [r1, #16]
 8007318:	6923      	ldr	r3, [r4, #16]
 800731a:	429a      	cmp	r2, r3
 800731c:	bfb8      	it	lt
 800731e:	460b      	movlt	r3, r1
 8007320:	460d      	mov	r5, r1
 8007322:	bfbc      	itt	lt
 8007324:	4625      	movlt	r5, r4
 8007326:	461c      	movlt	r4, r3
 8007328:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800732c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007330:	68ab      	ldr	r3, [r5, #8]
 8007332:	6869      	ldr	r1, [r5, #4]
 8007334:	eb0a 0709 	add.w	r7, sl, r9
 8007338:	42bb      	cmp	r3, r7
 800733a:	b085      	sub	sp, #20
 800733c:	bfb8      	it	lt
 800733e:	3101      	addlt	r1, #1
 8007340:	f7ff fed4 	bl	80070ec <_Balloc>
 8007344:	b930      	cbnz	r0, 8007354 <__multiply+0x44>
 8007346:	4602      	mov	r2, r0
 8007348:	4b42      	ldr	r3, [pc, #264]	; (8007454 <__multiply+0x144>)
 800734a:	4843      	ldr	r0, [pc, #268]	; (8007458 <__multiply+0x148>)
 800734c:	f240 115d 	movw	r1, #349	; 0x15d
 8007350:	f000 fa5a 	bl	8007808 <__assert_func>
 8007354:	f100 0614 	add.w	r6, r0, #20
 8007358:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800735c:	4633      	mov	r3, r6
 800735e:	2200      	movs	r2, #0
 8007360:	4543      	cmp	r3, r8
 8007362:	d31e      	bcc.n	80073a2 <__multiply+0x92>
 8007364:	f105 0c14 	add.w	ip, r5, #20
 8007368:	f104 0314 	add.w	r3, r4, #20
 800736c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007370:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007374:	9202      	str	r2, [sp, #8]
 8007376:	ebac 0205 	sub.w	r2, ip, r5
 800737a:	3a15      	subs	r2, #21
 800737c:	f022 0203 	bic.w	r2, r2, #3
 8007380:	3204      	adds	r2, #4
 8007382:	f105 0115 	add.w	r1, r5, #21
 8007386:	458c      	cmp	ip, r1
 8007388:	bf38      	it	cc
 800738a:	2204      	movcc	r2, #4
 800738c:	9201      	str	r2, [sp, #4]
 800738e:	9a02      	ldr	r2, [sp, #8]
 8007390:	9303      	str	r3, [sp, #12]
 8007392:	429a      	cmp	r2, r3
 8007394:	d808      	bhi.n	80073a8 <__multiply+0x98>
 8007396:	2f00      	cmp	r7, #0
 8007398:	dc55      	bgt.n	8007446 <__multiply+0x136>
 800739a:	6107      	str	r7, [r0, #16]
 800739c:	b005      	add	sp, #20
 800739e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a2:	f843 2b04 	str.w	r2, [r3], #4
 80073a6:	e7db      	b.n	8007360 <__multiply+0x50>
 80073a8:	f8b3 a000 	ldrh.w	sl, [r3]
 80073ac:	f1ba 0f00 	cmp.w	sl, #0
 80073b0:	d020      	beq.n	80073f4 <__multiply+0xe4>
 80073b2:	f105 0e14 	add.w	lr, r5, #20
 80073b6:	46b1      	mov	r9, r6
 80073b8:	2200      	movs	r2, #0
 80073ba:	f85e 4b04 	ldr.w	r4, [lr], #4
 80073be:	f8d9 b000 	ldr.w	fp, [r9]
 80073c2:	b2a1      	uxth	r1, r4
 80073c4:	fa1f fb8b 	uxth.w	fp, fp
 80073c8:	fb0a b101 	mla	r1, sl, r1, fp
 80073cc:	4411      	add	r1, r2
 80073ce:	f8d9 2000 	ldr.w	r2, [r9]
 80073d2:	0c24      	lsrs	r4, r4, #16
 80073d4:	0c12      	lsrs	r2, r2, #16
 80073d6:	fb0a 2404 	mla	r4, sl, r4, r2
 80073da:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80073de:	b289      	uxth	r1, r1
 80073e0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80073e4:	45f4      	cmp	ip, lr
 80073e6:	f849 1b04 	str.w	r1, [r9], #4
 80073ea:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80073ee:	d8e4      	bhi.n	80073ba <__multiply+0xaa>
 80073f0:	9901      	ldr	r1, [sp, #4]
 80073f2:	5072      	str	r2, [r6, r1]
 80073f4:	9a03      	ldr	r2, [sp, #12]
 80073f6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80073fa:	3304      	adds	r3, #4
 80073fc:	f1b9 0f00 	cmp.w	r9, #0
 8007400:	d01f      	beq.n	8007442 <__multiply+0x132>
 8007402:	6834      	ldr	r4, [r6, #0]
 8007404:	f105 0114 	add.w	r1, r5, #20
 8007408:	46b6      	mov	lr, r6
 800740a:	f04f 0a00 	mov.w	sl, #0
 800740e:	880a      	ldrh	r2, [r1, #0]
 8007410:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007414:	fb09 b202 	mla	r2, r9, r2, fp
 8007418:	4492      	add	sl, r2
 800741a:	b2a4      	uxth	r4, r4
 800741c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007420:	f84e 4b04 	str.w	r4, [lr], #4
 8007424:	f851 4b04 	ldr.w	r4, [r1], #4
 8007428:	f8be 2000 	ldrh.w	r2, [lr]
 800742c:	0c24      	lsrs	r4, r4, #16
 800742e:	fb09 2404 	mla	r4, r9, r4, r2
 8007432:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007436:	458c      	cmp	ip, r1
 8007438:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800743c:	d8e7      	bhi.n	800740e <__multiply+0xfe>
 800743e:	9a01      	ldr	r2, [sp, #4]
 8007440:	50b4      	str	r4, [r6, r2]
 8007442:	3604      	adds	r6, #4
 8007444:	e7a3      	b.n	800738e <__multiply+0x7e>
 8007446:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1a5      	bne.n	800739a <__multiply+0x8a>
 800744e:	3f01      	subs	r7, #1
 8007450:	e7a1      	b.n	8007396 <__multiply+0x86>
 8007452:	bf00      	nop
 8007454:	080083fb 	.word	0x080083fb
 8007458:	0800840c 	.word	0x0800840c

0800745c <__pow5mult>:
 800745c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007460:	4615      	mov	r5, r2
 8007462:	f012 0203 	ands.w	r2, r2, #3
 8007466:	4606      	mov	r6, r0
 8007468:	460f      	mov	r7, r1
 800746a:	d007      	beq.n	800747c <__pow5mult+0x20>
 800746c:	4c25      	ldr	r4, [pc, #148]	; (8007504 <__pow5mult+0xa8>)
 800746e:	3a01      	subs	r2, #1
 8007470:	2300      	movs	r3, #0
 8007472:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007476:	f7ff fe9b 	bl	80071b0 <__multadd>
 800747a:	4607      	mov	r7, r0
 800747c:	10ad      	asrs	r5, r5, #2
 800747e:	d03d      	beq.n	80074fc <__pow5mult+0xa0>
 8007480:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007482:	b97c      	cbnz	r4, 80074a4 <__pow5mult+0x48>
 8007484:	2010      	movs	r0, #16
 8007486:	f7fe fa67 	bl	8005958 <malloc>
 800748a:	4602      	mov	r2, r0
 800748c:	6270      	str	r0, [r6, #36]	; 0x24
 800748e:	b928      	cbnz	r0, 800749c <__pow5mult+0x40>
 8007490:	4b1d      	ldr	r3, [pc, #116]	; (8007508 <__pow5mult+0xac>)
 8007492:	481e      	ldr	r0, [pc, #120]	; (800750c <__pow5mult+0xb0>)
 8007494:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007498:	f000 f9b6 	bl	8007808 <__assert_func>
 800749c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074a0:	6004      	str	r4, [r0, #0]
 80074a2:	60c4      	str	r4, [r0, #12]
 80074a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80074a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80074ac:	b94c      	cbnz	r4, 80074c2 <__pow5mult+0x66>
 80074ae:	f240 2171 	movw	r1, #625	; 0x271
 80074b2:	4630      	mov	r0, r6
 80074b4:	f7ff ff16 	bl	80072e4 <__i2b>
 80074b8:	2300      	movs	r3, #0
 80074ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80074be:	4604      	mov	r4, r0
 80074c0:	6003      	str	r3, [r0, #0]
 80074c2:	f04f 0900 	mov.w	r9, #0
 80074c6:	07eb      	lsls	r3, r5, #31
 80074c8:	d50a      	bpl.n	80074e0 <__pow5mult+0x84>
 80074ca:	4639      	mov	r1, r7
 80074cc:	4622      	mov	r2, r4
 80074ce:	4630      	mov	r0, r6
 80074d0:	f7ff ff1e 	bl	8007310 <__multiply>
 80074d4:	4639      	mov	r1, r7
 80074d6:	4680      	mov	r8, r0
 80074d8:	4630      	mov	r0, r6
 80074da:	f7ff fe47 	bl	800716c <_Bfree>
 80074de:	4647      	mov	r7, r8
 80074e0:	106d      	asrs	r5, r5, #1
 80074e2:	d00b      	beq.n	80074fc <__pow5mult+0xa0>
 80074e4:	6820      	ldr	r0, [r4, #0]
 80074e6:	b938      	cbnz	r0, 80074f8 <__pow5mult+0x9c>
 80074e8:	4622      	mov	r2, r4
 80074ea:	4621      	mov	r1, r4
 80074ec:	4630      	mov	r0, r6
 80074ee:	f7ff ff0f 	bl	8007310 <__multiply>
 80074f2:	6020      	str	r0, [r4, #0]
 80074f4:	f8c0 9000 	str.w	r9, [r0]
 80074f8:	4604      	mov	r4, r0
 80074fa:	e7e4      	b.n	80074c6 <__pow5mult+0x6a>
 80074fc:	4638      	mov	r0, r7
 80074fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007502:	bf00      	nop
 8007504:	08008560 	.word	0x08008560
 8007508:	08008385 	.word	0x08008385
 800750c:	0800840c 	.word	0x0800840c

08007510 <__lshift>:
 8007510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007514:	460c      	mov	r4, r1
 8007516:	6849      	ldr	r1, [r1, #4]
 8007518:	6923      	ldr	r3, [r4, #16]
 800751a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800751e:	68a3      	ldr	r3, [r4, #8]
 8007520:	4607      	mov	r7, r0
 8007522:	4691      	mov	r9, r2
 8007524:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007528:	f108 0601 	add.w	r6, r8, #1
 800752c:	42b3      	cmp	r3, r6
 800752e:	db0b      	blt.n	8007548 <__lshift+0x38>
 8007530:	4638      	mov	r0, r7
 8007532:	f7ff fddb 	bl	80070ec <_Balloc>
 8007536:	4605      	mov	r5, r0
 8007538:	b948      	cbnz	r0, 800754e <__lshift+0x3e>
 800753a:	4602      	mov	r2, r0
 800753c:	4b28      	ldr	r3, [pc, #160]	; (80075e0 <__lshift+0xd0>)
 800753e:	4829      	ldr	r0, [pc, #164]	; (80075e4 <__lshift+0xd4>)
 8007540:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007544:	f000 f960 	bl	8007808 <__assert_func>
 8007548:	3101      	adds	r1, #1
 800754a:	005b      	lsls	r3, r3, #1
 800754c:	e7ee      	b.n	800752c <__lshift+0x1c>
 800754e:	2300      	movs	r3, #0
 8007550:	f100 0114 	add.w	r1, r0, #20
 8007554:	f100 0210 	add.w	r2, r0, #16
 8007558:	4618      	mov	r0, r3
 800755a:	4553      	cmp	r3, sl
 800755c:	db33      	blt.n	80075c6 <__lshift+0xb6>
 800755e:	6920      	ldr	r0, [r4, #16]
 8007560:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007564:	f104 0314 	add.w	r3, r4, #20
 8007568:	f019 091f 	ands.w	r9, r9, #31
 800756c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007570:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007574:	d02b      	beq.n	80075ce <__lshift+0xbe>
 8007576:	f1c9 0e20 	rsb	lr, r9, #32
 800757a:	468a      	mov	sl, r1
 800757c:	2200      	movs	r2, #0
 800757e:	6818      	ldr	r0, [r3, #0]
 8007580:	fa00 f009 	lsl.w	r0, r0, r9
 8007584:	4302      	orrs	r2, r0
 8007586:	f84a 2b04 	str.w	r2, [sl], #4
 800758a:	f853 2b04 	ldr.w	r2, [r3], #4
 800758e:	459c      	cmp	ip, r3
 8007590:	fa22 f20e 	lsr.w	r2, r2, lr
 8007594:	d8f3      	bhi.n	800757e <__lshift+0x6e>
 8007596:	ebac 0304 	sub.w	r3, ip, r4
 800759a:	3b15      	subs	r3, #21
 800759c:	f023 0303 	bic.w	r3, r3, #3
 80075a0:	3304      	adds	r3, #4
 80075a2:	f104 0015 	add.w	r0, r4, #21
 80075a6:	4584      	cmp	ip, r0
 80075a8:	bf38      	it	cc
 80075aa:	2304      	movcc	r3, #4
 80075ac:	50ca      	str	r2, [r1, r3]
 80075ae:	b10a      	cbz	r2, 80075b4 <__lshift+0xa4>
 80075b0:	f108 0602 	add.w	r6, r8, #2
 80075b4:	3e01      	subs	r6, #1
 80075b6:	4638      	mov	r0, r7
 80075b8:	612e      	str	r6, [r5, #16]
 80075ba:	4621      	mov	r1, r4
 80075bc:	f7ff fdd6 	bl	800716c <_Bfree>
 80075c0:	4628      	mov	r0, r5
 80075c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80075ca:	3301      	adds	r3, #1
 80075cc:	e7c5      	b.n	800755a <__lshift+0x4a>
 80075ce:	3904      	subs	r1, #4
 80075d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80075d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80075d8:	459c      	cmp	ip, r3
 80075da:	d8f9      	bhi.n	80075d0 <__lshift+0xc0>
 80075dc:	e7ea      	b.n	80075b4 <__lshift+0xa4>
 80075de:	bf00      	nop
 80075e0:	080083fb 	.word	0x080083fb
 80075e4:	0800840c 	.word	0x0800840c

080075e8 <__mcmp>:
 80075e8:	b530      	push	{r4, r5, lr}
 80075ea:	6902      	ldr	r2, [r0, #16]
 80075ec:	690c      	ldr	r4, [r1, #16]
 80075ee:	1b12      	subs	r2, r2, r4
 80075f0:	d10e      	bne.n	8007610 <__mcmp+0x28>
 80075f2:	f100 0314 	add.w	r3, r0, #20
 80075f6:	3114      	adds	r1, #20
 80075f8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80075fc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007600:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007604:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007608:	42a5      	cmp	r5, r4
 800760a:	d003      	beq.n	8007614 <__mcmp+0x2c>
 800760c:	d305      	bcc.n	800761a <__mcmp+0x32>
 800760e:	2201      	movs	r2, #1
 8007610:	4610      	mov	r0, r2
 8007612:	bd30      	pop	{r4, r5, pc}
 8007614:	4283      	cmp	r3, r0
 8007616:	d3f3      	bcc.n	8007600 <__mcmp+0x18>
 8007618:	e7fa      	b.n	8007610 <__mcmp+0x28>
 800761a:	f04f 32ff 	mov.w	r2, #4294967295
 800761e:	e7f7      	b.n	8007610 <__mcmp+0x28>

08007620 <__mdiff>:
 8007620:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007624:	460c      	mov	r4, r1
 8007626:	4606      	mov	r6, r0
 8007628:	4611      	mov	r1, r2
 800762a:	4620      	mov	r0, r4
 800762c:	4617      	mov	r7, r2
 800762e:	f7ff ffdb 	bl	80075e8 <__mcmp>
 8007632:	1e05      	subs	r5, r0, #0
 8007634:	d110      	bne.n	8007658 <__mdiff+0x38>
 8007636:	4629      	mov	r1, r5
 8007638:	4630      	mov	r0, r6
 800763a:	f7ff fd57 	bl	80070ec <_Balloc>
 800763e:	b930      	cbnz	r0, 800764e <__mdiff+0x2e>
 8007640:	4b39      	ldr	r3, [pc, #228]	; (8007728 <__mdiff+0x108>)
 8007642:	4602      	mov	r2, r0
 8007644:	f240 2132 	movw	r1, #562	; 0x232
 8007648:	4838      	ldr	r0, [pc, #224]	; (800772c <__mdiff+0x10c>)
 800764a:	f000 f8dd 	bl	8007808 <__assert_func>
 800764e:	2301      	movs	r3, #1
 8007650:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007654:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007658:	bfa4      	itt	ge
 800765a:	463b      	movge	r3, r7
 800765c:	4627      	movge	r7, r4
 800765e:	4630      	mov	r0, r6
 8007660:	6879      	ldr	r1, [r7, #4]
 8007662:	bfa6      	itte	ge
 8007664:	461c      	movge	r4, r3
 8007666:	2500      	movge	r5, #0
 8007668:	2501      	movlt	r5, #1
 800766a:	f7ff fd3f 	bl	80070ec <_Balloc>
 800766e:	b920      	cbnz	r0, 800767a <__mdiff+0x5a>
 8007670:	4b2d      	ldr	r3, [pc, #180]	; (8007728 <__mdiff+0x108>)
 8007672:	4602      	mov	r2, r0
 8007674:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007678:	e7e6      	b.n	8007648 <__mdiff+0x28>
 800767a:	693e      	ldr	r6, [r7, #16]
 800767c:	60c5      	str	r5, [r0, #12]
 800767e:	6925      	ldr	r5, [r4, #16]
 8007680:	f107 0114 	add.w	r1, r7, #20
 8007684:	f104 0914 	add.w	r9, r4, #20
 8007688:	f100 0e14 	add.w	lr, r0, #20
 800768c:	f107 0210 	add.w	r2, r7, #16
 8007690:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007694:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8007698:	46f2      	mov	sl, lr
 800769a:	2700      	movs	r7, #0
 800769c:	f859 3b04 	ldr.w	r3, [r9], #4
 80076a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80076a4:	fa1f f883 	uxth.w	r8, r3
 80076a8:	fa17 f78b 	uxtah	r7, r7, fp
 80076ac:	0c1b      	lsrs	r3, r3, #16
 80076ae:	eba7 0808 	sub.w	r8, r7, r8
 80076b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80076b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80076ba:	fa1f f888 	uxth.w	r8, r8
 80076be:	141f      	asrs	r7, r3, #16
 80076c0:	454d      	cmp	r5, r9
 80076c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80076c6:	f84a 3b04 	str.w	r3, [sl], #4
 80076ca:	d8e7      	bhi.n	800769c <__mdiff+0x7c>
 80076cc:	1b2b      	subs	r3, r5, r4
 80076ce:	3b15      	subs	r3, #21
 80076d0:	f023 0303 	bic.w	r3, r3, #3
 80076d4:	3304      	adds	r3, #4
 80076d6:	3415      	adds	r4, #21
 80076d8:	42a5      	cmp	r5, r4
 80076da:	bf38      	it	cc
 80076dc:	2304      	movcc	r3, #4
 80076de:	4419      	add	r1, r3
 80076e0:	4473      	add	r3, lr
 80076e2:	469e      	mov	lr, r3
 80076e4:	460d      	mov	r5, r1
 80076e6:	4565      	cmp	r5, ip
 80076e8:	d30e      	bcc.n	8007708 <__mdiff+0xe8>
 80076ea:	f10c 0203 	add.w	r2, ip, #3
 80076ee:	1a52      	subs	r2, r2, r1
 80076f0:	f022 0203 	bic.w	r2, r2, #3
 80076f4:	3903      	subs	r1, #3
 80076f6:	458c      	cmp	ip, r1
 80076f8:	bf38      	it	cc
 80076fa:	2200      	movcc	r2, #0
 80076fc:	441a      	add	r2, r3
 80076fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007702:	b17b      	cbz	r3, 8007724 <__mdiff+0x104>
 8007704:	6106      	str	r6, [r0, #16]
 8007706:	e7a5      	b.n	8007654 <__mdiff+0x34>
 8007708:	f855 8b04 	ldr.w	r8, [r5], #4
 800770c:	fa17 f488 	uxtah	r4, r7, r8
 8007710:	1422      	asrs	r2, r4, #16
 8007712:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8007716:	b2a4      	uxth	r4, r4
 8007718:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800771c:	f84e 4b04 	str.w	r4, [lr], #4
 8007720:	1417      	asrs	r7, r2, #16
 8007722:	e7e0      	b.n	80076e6 <__mdiff+0xc6>
 8007724:	3e01      	subs	r6, #1
 8007726:	e7ea      	b.n	80076fe <__mdiff+0xde>
 8007728:	080083fb 	.word	0x080083fb
 800772c:	0800840c 	.word	0x0800840c

08007730 <__d2b>:
 8007730:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007734:	4689      	mov	r9, r1
 8007736:	2101      	movs	r1, #1
 8007738:	ec57 6b10 	vmov	r6, r7, d0
 800773c:	4690      	mov	r8, r2
 800773e:	f7ff fcd5 	bl	80070ec <_Balloc>
 8007742:	4604      	mov	r4, r0
 8007744:	b930      	cbnz	r0, 8007754 <__d2b+0x24>
 8007746:	4602      	mov	r2, r0
 8007748:	4b25      	ldr	r3, [pc, #148]	; (80077e0 <__d2b+0xb0>)
 800774a:	4826      	ldr	r0, [pc, #152]	; (80077e4 <__d2b+0xb4>)
 800774c:	f240 310a 	movw	r1, #778	; 0x30a
 8007750:	f000 f85a 	bl	8007808 <__assert_func>
 8007754:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007758:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800775c:	bb35      	cbnz	r5, 80077ac <__d2b+0x7c>
 800775e:	2e00      	cmp	r6, #0
 8007760:	9301      	str	r3, [sp, #4]
 8007762:	d028      	beq.n	80077b6 <__d2b+0x86>
 8007764:	4668      	mov	r0, sp
 8007766:	9600      	str	r6, [sp, #0]
 8007768:	f7ff fd8c 	bl	8007284 <__lo0bits>
 800776c:	9900      	ldr	r1, [sp, #0]
 800776e:	b300      	cbz	r0, 80077b2 <__d2b+0x82>
 8007770:	9a01      	ldr	r2, [sp, #4]
 8007772:	f1c0 0320 	rsb	r3, r0, #32
 8007776:	fa02 f303 	lsl.w	r3, r2, r3
 800777a:	430b      	orrs	r3, r1
 800777c:	40c2      	lsrs	r2, r0
 800777e:	6163      	str	r3, [r4, #20]
 8007780:	9201      	str	r2, [sp, #4]
 8007782:	9b01      	ldr	r3, [sp, #4]
 8007784:	61a3      	str	r3, [r4, #24]
 8007786:	2b00      	cmp	r3, #0
 8007788:	bf14      	ite	ne
 800778a:	2202      	movne	r2, #2
 800778c:	2201      	moveq	r2, #1
 800778e:	6122      	str	r2, [r4, #16]
 8007790:	b1d5      	cbz	r5, 80077c8 <__d2b+0x98>
 8007792:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007796:	4405      	add	r5, r0
 8007798:	f8c9 5000 	str.w	r5, [r9]
 800779c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80077a0:	f8c8 0000 	str.w	r0, [r8]
 80077a4:	4620      	mov	r0, r4
 80077a6:	b003      	add	sp, #12
 80077a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077b0:	e7d5      	b.n	800775e <__d2b+0x2e>
 80077b2:	6161      	str	r1, [r4, #20]
 80077b4:	e7e5      	b.n	8007782 <__d2b+0x52>
 80077b6:	a801      	add	r0, sp, #4
 80077b8:	f7ff fd64 	bl	8007284 <__lo0bits>
 80077bc:	9b01      	ldr	r3, [sp, #4]
 80077be:	6163      	str	r3, [r4, #20]
 80077c0:	2201      	movs	r2, #1
 80077c2:	6122      	str	r2, [r4, #16]
 80077c4:	3020      	adds	r0, #32
 80077c6:	e7e3      	b.n	8007790 <__d2b+0x60>
 80077c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80077cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80077d0:	f8c9 0000 	str.w	r0, [r9]
 80077d4:	6918      	ldr	r0, [r3, #16]
 80077d6:	f7ff fd35 	bl	8007244 <__hi0bits>
 80077da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80077de:	e7df      	b.n	80077a0 <__d2b+0x70>
 80077e0:	080083fb 	.word	0x080083fb
 80077e4:	0800840c 	.word	0x0800840c

080077e8 <_calloc_r>:
 80077e8:	b513      	push	{r0, r1, r4, lr}
 80077ea:	434a      	muls	r2, r1
 80077ec:	4611      	mov	r1, r2
 80077ee:	9201      	str	r2, [sp, #4]
 80077f0:	f7fe f912 	bl	8005a18 <_malloc_r>
 80077f4:	4604      	mov	r4, r0
 80077f6:	b118      	cbz	r0, 8007800 <_calloc_r+0x18>
 80077f8:	9a01      	ldr	r2, [sp, #4]
 80077fa:	2100      	movs	r1, #0
 80077fc:	f7fe f8b4 	bl	8005968 <memset>
 8007800:	4620      	mov	r0, r4
 8007802:	b002      	add	sp, #8
 8007804:	bd10      	pop	{r4, pc}
	...

08007808 <__assert_func>:
 8007808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800780a:	4614      	mov	r4, r2
 800780c:	461a      	mov	r2, r3
 800780e:	4b09      	ldr	r3, [pc, #36]	; (8007834 <__assert_func+0x2c>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4605      	mov	r5, r0
 8007814:	68d8      	ldr	r0, [r3, #12]
 8007816:	b14c      	cbz	r4, 800782c <__assert_func+0x24>
 8007818:	4b07      	ldr	r3, [pc, #28]	; (8007838 <__assert_func+0x30>)
 800781a:	9100      	str	r1, [sp, #0]
 800781c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007820:	4906      	ldr	r1, [pc, #24]	; (800783c <__assert_func+0x34>)
 8007822:	462b      	mov	r3, r5
 8007824:	f000 f80e 	bl	8007844 <fiprintf>
 8007828:	f000 fa58 	bl	8007cdc <abort>
 800782c:	4b04      	ldr	r3, [pc, #16]	; (8007840 <__assert_func+0x38>)
 800782e:	461c      	mov	r4, r3
 8007830:	e7f3      	b.n	800781a <__assert_func+0x12>
 8007832:	bf00      	nop
 8007834:	2000000c 	.word	0x2000000c
 8007838:	0800856c 	.word	0x0800856c
 800783c:	08008579 	.word	0x08008579
 8007840:	080085a7 	.word	0x080085a7

08007844 <fiprintf>:
 8007844:	b40e      	push	{r1, r2, r3}
 8007846:	b503      	push	{r0, r1, lr}
 8007848:	4601      	mov	r1, r0
 800784a:	ab03      	add	r3, sp, #12
 800784c:	4805      	ldr	r0, [pc, #20]	; (8007864 <fiprintf+0x20>)
 800784e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007852:	6800      	ldr	r0, [r0, #0]
 8007854:	9301      	str	r3, [sp, #4]
 8007856:	f000 f843 	bl	80078e0 <_vfiprintf_r>
 800785a:	b002      	add	sp, #8
 800785c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007860:	b003      	add	sp, #12
 8007862:	4770      	bx	lr
 8007864:	2000000c 	.word	0x2000000c

08007868 <__ascii_mbtowc>:
 8007868:	b082      	sub	sp, #8
 800786a:	b901      	cbnz	r1, 800786e <__ascii_mbtowc+0x6>
 800786c:	a901      	add	r1, sp, #4
 800786e:	b142      	cbz	r2, 8007882 <__ascii_mbtowc+0x1a>
 8007870:	b14b      	cbz	r3, 8007886 <__ascii_mbtowc+0x1e>
 8007872:	7813      	ldrb	r3, [r2, #0]
 8007874:	600b      	str	r3, [r1, #0]
 8007876:	7812      	ldrb	r2, [r2, #0]
 8007878:	1e10      	subs	r0, r2, #0
 800787a:	bf18      	it	ne
 800787c:	2001      	movne	r0, #1
 800787e:	b002      	add	sp, #8
 8007880:	4770      	bx	lr
 8007882:	4610      	mov	r0, r2
 8007884:	e7fb      	b.n	800787e <__ascii_mbtowc+0x16>
 8007886:	f06f 0001 	mvn.w	r0, #1
 800788a:	e7f8      	b.n	800787e <__ascii_mbtowc+0x16>

0800788c <__sfputc_r>:
 800788c:	6893      	ldr	r3, [r2, #8]
 800788e:	3b01      	subs	r3, #1
 8007890:	2b00      	cmp	r3, #0
 8007892:	b410      	push	{r4}
 8007894:	6093      	str	r3, [r2, #8]
 8007896:	da08      	bge.n	80078aa <__sfputc_r+0x1e>
 8007898:	6994      	ldr	r4, [r2, #24]
 800789a:	42a3      	cmp	r3, r4
 800789c:	db01      	blt.n	80078a2 <__sfputc_r+0x16>
 800789e:	290a      	cmp	r1, #10
 80078a0:	d103      	bne.n	80078aa <__sfputc_r+0x1e>
 80078a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078a6:	f000 b94b 	b.w	8007b40 <__swbuf_r>
 80078aa:	6813      	ldr	r3, [r2, #0]
 80078ac:	1c58      	adds	r0, r3, #1
 80078ae:	6010      	str	r0, [r2, #0]
 80078b0:	7019      	strb	r1, [r3, #0]
 80078b2:	4608      	mov	r0, r1
 80078b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078b8:	4770      	bx	lr

080078ba <__sfputs_r>:
 80078ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078bc:	4606      	mov	r6, r0
 80078be:	460f      	mov	r7, r1
 80078c0:	4614      	mov	r4, r2
 80078c2:	18d5      	adds	r5, r2, r3
 80078c4:	42ac      	cmp	r4, r5
 80078c6:	d101      	bne.n	80078cc <__sfputs_r+0x12>
 80078c8:	2000      	movs	r0, #0
 80078ca:	e007      	b.n	80078dc <__sfputs_r+0x22>
 80078cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078d0:	463a      	mov	r2, r7
 80078d2:	4630      	mov	r0, r6
 80078d4:	f7ff ffda 	bl	800788c <__sfputc_r>
 80078d8:	1c43      	adds	r3, r0, #1
 80078da:	d1f3      	bne.n	80078c4 <__sfputs_r+0xa>
 80078dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080078e0 <_vfiprintf_r>:
 80078e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e4:	460d      	mov	r5, r1
 80078e6:	b09d      	sub	sp, #116	; 0x74
 80078e8:	4614      	mov	r4, r2
 80078ea:	4698      	mov	r8, r3
 80078ec:	4606      	mov	r6, r0
 80078ee:	b118      	cbz	r0, 80078f8 <_vfiprintf_r+0x18>
 80078f0:	6983      	ldr	r3, [r0, #24]
 80078f2:	b90b      	cbnz	r3, 80078f8 <_vfiprintf_r+0x18>
 80078f4:	f000 fb14 	bl	8007f20 <__sinit>
 80078f8:	4b89      	ldr	r3, [pc, #548]	; (8007b20 <_vfiprintf_r+0x240>)
 80078fa:	429d      	cmp	r5, r3
 80078fc:	d11b      	bne.n	8007936 <_vfiprintf_r+0x56>
 80078fe:	6875      	ldr	r5, [r6, #4]
 8007900:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007902:	07d9      	lsls	r1, r3, #31
 8007904:	d405      	bmi.n	8007912 <_vfiprintf_r+0x32>
 8007906:	89ab      	ldrh	r3, [r5, #12]
 8007908:	059a      	lsls	r2, r3, #22
 800790a:	d402      	bmi.n	8007912 <_vfiprintf_r+0x32>
 800790c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800790e:	f7fa f986 	bl	8001c1e <__retarget_lock_acquire_recursive>
 8007912:	89ab      	ldrh	r3, [r5, #12]
 8007914:	071b      	lsls	r3, r3, #28
 8007916:	d501      	bpl.n	800791c <_vfiprintf_r+0x3c>
 8007918:	692b      	ldr	r3, [r5, #16]
 800791a:	b9eb      	cbnz	r3, 8007958 <_vfiprintf_r+0x78>
 800791c:	4629      	mov	r1, r5
 800791e:	4630      	mov	r0, r6
 8007920:	f000 f96e 	bl	8007c00 <__swsetup_r>
 8007924:	b1c0      	cbz	r0, 8007958 <_vfiprintf_r+0x78>
 8007926:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007928:	07dc      	lsls	r4, r3, #31
 800792a:	d50e      	bpl.n	800794a <_vfiprintf_r+0x6a>
 800792c:	f04f 30ff 	mov.w	r0, #4294967295
 8007930:	b01d      	add	sp, #116	; 0x74
 8007932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007936:	4b7b      	ldr	r3, [pc, #492]	; (8007b24 <_vfiprintf_r+0x244>)
 8007938:	429d      	cmp	r5, r3
 800793a:	d101      	bne.n	8007940 <_vfiprintf_r+0x60>
 800793c:	68b5      	ldr	r5, [r6, #8]
 800793e:	e7df      	b.n	8007900 <_vfiprintf_r+0x20>
 8007940:	4b79      	ldr	r3, [pc, #484]	; (8007b28 <_vfiprintf_r+0x248>)
 8007942:	429d      	cmp	r5, r3
 8007944:	bf08      	it	eq
 8007946:	68f5      	ldreq	r5, [r6, #12]
 8007948:	e7da      	b.n	8007900 <_vfiprintf_r+0x20>
 800794a:	89ab      	ldrh	r3, [r5, #12]
 800794c:	0598      	lsls	r0, r3, #22
 800794e:	d4ed      	bmi.n	800792c <_vfiprintf_r+0x4c>
 8007950:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007952:	f7fa f978 	bl	8001c46 <__retarget_lock_release_recursive>
 8007956:	e7e9      	b.n	800792c <_vfiprintf_r+0x4c>
 8007958:	2300      	movs	r3, #0
 800795a:	9309      	str	r3, [sp, #36]	; 0x24
 800795c:	2320      	movs	r3, #32
 800795e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007962:	f8cd 800c 	str.w	r8, [sp, #12]
 8007966:	2330      	movs	r3, #48	; 0x30
 8007968:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007b2c <_vfiprintf_r+0x24c>
 800796c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007970:	f04f 0901 	mov.w	r9, #1
 8007974:	4623      	mov	r3, r4
 8007976:	469a      	mov	sl, r3
 8007978:	f813 2b01 	ldrb.w	r2, [r3], #1
 800797c:	b10a      	cbz	r2, 8007982 <_vfiprintf_r+0xa2>
 800797e:	2a25      	cmp	r2, #37	; 0x25
 8007980:	d1f9      	bne.n	8007976 <_vfiprintf_r+0x96>
 8007982:	ebba 0b04 	subs.w	fp, sl, r4
 8007986:	d00b      	beq.n	80079a0 <_vfiprintf_r+0xc0>
 8007988:	465b      	mov	r3, fp
 800798a:	4622      	mov	r2, r4
 800798c:	4629      	mov	r1, r5
 800798e:	4630      	mov	r0, r6
 8007990:	f7ff ff93 	bl	80078ba <__sfputs_r>
 8007994:	3001      	adds	r0, #1
 8007996:	f000 80aa 	beq.w	8007aee <_vfiprintf_r+0x20e>
 800799a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800799c:	445a      	add	r2, fp
 800799e:	9209      	str	r2, [sp, #36]	; 0x24
 80079a0:	f89a 3000 	ldrb.w	r3, [sl]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f000 80a2 	beq.w	8007aee <_vfiprintf_r+0x20e>
 80079aa:	2300      	movs	r3, #0
 80079ac:	f04f 32ff 	mov.w	r2, #4294967295
 80079b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079b4:	f10a 0a01 	add.w	sl, sl, #1
 80079b8:	9304      	str	r3, [sp, #16]
 80079ba:	9307      	str	r3, [sp, #28]
 80079bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079c0:	931a      	str	r3, [sp, #104]	; 0x68
 80079c2:	4654      	mov	r4, sl
 80079c4:	2205      	movs	r2, #5
 80079c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079ca:	4858      	ldr	r0, [pc, #352]	; (8007b2c <_vfiprintf_r+0x24c>)
 80079cc:	f7f8 fc28 	bl	8000220 <memchr>
 80079d0:	9a04      	ldr	r2, [sp, #16]
 80079d2:	b9d8      	cbnz	r0, 8007a0c <_vfiprintf_r+0x12c>
 80079d4:	06d1      	lsls	r1, r2, #27
 80079d6:	bf44      	itt	mi
 80079d8:	2320      	movmi	r3, #32
 80079da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079de:	0713      	lsls	r3, r2, #28
 80079e0:	bf44      	itt	mi
 80079e2:	232b      	movmi	r3, #43	; 0x2b
 80079e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079e8:	f89a 3000 	ldrb.w	r3, [sl]
 80079ec:	2b2a      	cmp	r3, #42	; 0x2a
 80079ee:	d015      	beq.n	8007a1c <_vfiprintf_r+0x13c>
 80079f0:	9a07      	ldr	r2, [sp, #28]
 80079f2:	4654      	mov	r4, sl
 80079f4:	2000      	movs	r0, #0
 80079f6:	f04f 0c0a 	mov.w	ip, #10
 80079fa:	4621      	mov	r1, r4
 80079fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a00:	3b30      	subs	r3, #48	; 0x30
 8007a02:	2b09      	cmp	r3, #9
 8007a04:	d94e      	bls.n	8007aa4 <_vfiprintf_r+0x1c4>
 8007a06:	b1b0      	cbz	r0, 8007a36 <_vfiprintf_r+0x156>
 8007a08:	9207      	str	r2, [sp, #28]
 8007a0a:	e014      	b.n	8007a36 <_vfiprintf_r+0x156>
 8007a0c:	eba0 0308 	sub.w	r3, r0, r8
 8007a10:	fa09 f303 	lsl.w	r3, r9, r3
 8007a14:	4313      	orrs	r3, r2
 8007a16:	9304      	str	r3, [sp, #16]
 8007a18:	46a2      	mov	sl, r4
 8007a1a:	e7d2      	b.n	80079c2 <_vfiprintf_r+0xe2>
 8007a1c:	9b03      	ldr	r3, [sp, #12]
 8007a1e:	1d19      	adds	r1, r3, #4
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	9103      	str	r1, [sp, #12]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	bfbb      	ittet	lt
 8007a28:	425b      	neglt	r3, r3
 8007a2a:	f042 0202 	orrlt.w	r2, r2, #2
 8007a2e:	9307      	strge	r3, [sp, #28]
 8007a30:	9307      	strlt	r3, [sp, #28]
 8007a32:	bfb8      	it	lt
 8007a34:	9204      	strlt	r2, [sp, #16]
 8007a36:	7823      	ldrb	r3, [r4, #0]
 8007a38:	2b2e      	cmp	r3, #46	; 0x2e
 8007a3a:	d10c      	bne.n	8007a56 <_vfiprintf_r+0x176>
 8007a3c:	7863      	ldrb	r3, [r4, #1]
 8007a3e:	2b2a      	cmp	r3, #42	; 0x2a
 8007a40:	d135      	bne.n	8007aae <_vfiprintf_r+0x1ce>
 8007a42:	9b03      	ldr	r3, [sp, #12]
 8007a44:	1d1a      	adds	r2, r3, #4
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	9203      	str	r2, [sp, #12]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	bfb8      	it	lt
 8007a4e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a52:	3402      	adds	r4, #2
 8007a54:	9305      	str	r3, [sp, #20]
 8007a56:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007b3c <_vfiprintf_r+0x25c>
 8007a5a:	7821      	ldrb	r1, [r4, #0]
 8007a5c:	2203      	movs	r2, #3
 8007a5e:	4650      	mov	r0, sl
 8007a60:	f7f8 fbde 	bl	8000220 <memchr>
 8007a64:	b140      	cbz	r0, 8007a78 <_vfiprintf_r+0x198>
 8007a66:	2340      	movs	r3, #64	; 0x40
 8007a68:	eba0 000a 	sub.w	r0, r0, sl
 8007a6c:	fa03 f000 	lsl.w	r0, r3, r0
 8007a70:	9b04      	ldr	r3, [sp, #16]
 8007a72:	4303      	orrs	r3, r0
 8007a74:	3401      	adds	r4, #1
 8007a76:	9304      	str	r3, [sp, #16]
 8007a78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a7c:	482c      	ldr	r0, [pc, #176]	; (8007b30 <_vfiprintf_r+0x250>)
 8007a7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a82:	2206      	movs	r2, #6
 8007a84:	f7f8 fbcc 	bl	8000220 <memchr>
 8007a88:	2800      	cmp	r0, #0
 8007a8a:	d03f      	beq.n	8007b0c <_vfiprintf_r+0x22c>
 8007a8c:	4b29      	ldr	r3, [pc, #164]	; (8007b34 <_vfiprintf_r+0x254>)
 8007a8e:	bb1b      	cbnz	r3, 8007ad8 <_vfiprintf_r+0x1f8>
 8007a90:	9b03      	ldr	r3, [sp, #12]
 8007a92:	3307      	adds	r3, #7
 8007a94:	f023 0307 	bic.w	r3, r3, #7
 8007a98:	3308      	adds	r3, #8
 8007a9a:	9303      	str	r3, [sp, #12]
 8007a9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a9e:	443b      	add	r3, r7
 8007aa0:	9309      	str	r3, [sp, #36]	; 0x24
 8007aa2:	e767      	b.n	8007974 <_vfiprintf_r+0x94>
 8007aa4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007aa8:	460c      	mov	r4, r1
 8007aaa:	2001      	movs	r0, #1
 8007aac:	e7a5      	b.n	80079fa <_vfiprintf_r+0x11a>
 8007aae:	2300      	movs	r3, #0
 8007ab0:	3401      	adds	r4, #1
 8007ab2:	9305      	str	r3, [sp, #20]
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	f04f 0c0a 	mov.w	ip, #10
 8007aba:	4620      	mov	r0, r4
 8007abc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ac0:	3a30      	subs	r2, #48	; 0x30
 8007ac2:	2a09      	cmp	r2, #9
 8007ac4:	d903      	bls.n	8007ace <_vfiprintf_r+0x1ee>
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d0c5      	beq.n	8007a56 <_vfiprintf_r+0x176>
 8007aca:	9105      	str	r1, [sp, #20]
 8007acc:	e7c3      	b.n	8007a56 <_vfiprintf_r+0x176>
 8007ace:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ad2:	4604      	mov	r4, r0
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e7f0      	b.n	8007aba <_vfiprintf_r+0x1da>
 8007ad8:	ab03      	add	r3, sp, #12
 8007ada:	9300      	str	r3, [sp, #0]
 8007adc:	462a      	mov	r2, r5
 8007ade:	4b16      	ldr	r3, [pc, #88]	; (8007b38 <_vfiprintf_r+0x258>)
 8007ae0:	a904      	add	r1, sp, #16
 8007ae2:	4630      	mov	r0, r6
 8007ae4:	f7fe f892 	bl	8005c0c <_printf_float>
 8007ae8:	4607      	mov	r7, r0
 8007aea:	1c78      	adds	r0, r7, #1
 8007aec:	d1d6      	bne.n	8007a9c <_vfiprintf_r+0x1bc>
 8007aee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007af0:	07d9      	lsls	r1, r3, #31
 8007af2:	d405      	bmi.n	8007b00 <_vfiprintf_r+0x220>
 8007af4:	89ab      	ldrh	r3, [r5, #12]
 8007af6:	059a      	lsls	r2, r3, #22
 8007af8:	d402      	bmi.n	8007b00 <_vfiprintf_r+0x220>
 8007afa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007afc:	f7fa f8a3 	bl	8001c46 <__retarget_lock_release_recursive>
 8007b00:	89ab      	ldrh	r3, [r5, #12]
 8007b02:	065b      	lsls	r3, r3, #25
 8007b04:	f53f af12 	bmi.w	800792c <_vfiprintf_r+0x4c>
 8007b08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b0a:	e711      	b.n	8007930 <_vfiprintf_r+0x50>
 8007b0c:	ab03      	add	r3, sp, #12
 8007b0e:	9300      	str	r3, [sp, #0]
 8007b10:	462a      	mov	r2, r5
 8007b12:	4b09      	ldr	r3, [pc, #36]	; (8007b38 <_vfiprintf_r+0x258>)
 8007b14:	a904      	add	r1, sp, #16
 8007b16:	4630      	mov	r0, r6
 8007b18:	f7fe fb1c 	bl	8006154 <_printf_i>
 8007b1c:	e7e4      	b.n	8007ae8 <_vfiprintf_r+0x208>
 8007b1e:	bf00      	nop
 8007b20:	080086e4 	.word	0x080086e4
 8007b24:	08008704 	.word	0x08008704
 8007b28:	080086c4 	.word	0x080086c4
 8007b2c:	080085b2 	.word	0x080085b2
 8007b30:	080085bc 	.word	0x080085bc
 8007b34:	08005c0d 	.word	0x08005c0d
 8007b38:	080078bb 	.word	0x080078bb
 8007b3c:	080085b8 	.word	0x080085b8

08007b40 <__swbuf_r>:
 8007b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b42:	460e      	mov	r6, r1
 8007b44:	4614      	mov	r4, r2
 8007b46:	4605      	mov	r5, r0
 8007b48:	b118      	cbz	r0, 8007b52 <__swbuf_r+0x12>
 8007b4a:	6983      	ldr	r3, [r0, #24]
 8007b4c:	b90b      	cbnz	r3, 8007b52 <__swbuf_r+0x12>
 8007b4e:	f000 f9e7 	bl	8007f20 <__sinit>
 8007b52:	4b21      	ldr	r3, [pc, #132]	; (8007bd8 <__swbuf_r+0x98>)
 8007b54:	429c      	cmp	r4, r3
 8007b56:	d12b      	bne.n	8007bb0 <__swbuf_r+0x70>
 8007b58:	686c      	ldr	r4, [r5, #4]
 8007b5a:	69a3      	ldr	r3, [r4, #24]
 8007b5c:	60a3      	str	r3, [r4, #8]
 8007b5e:	89a3      	ldrh	r3, [r4, #12]
 8007b60:	071a      	lsls	r2, r3, #28
 8007b62:	d52f      	bpl.n	8007bc4 <__swbuf_r+0x84>
 8007b64:	6923      	ldr	r3, [r4, #16]
 8007b66:	b36b      	cbz	r3, 8007bc4 <__swbuf_r+0x84>
 8007b68:	6923      	ldr	r3, [r4, #16]
 8007b6a:	6820      	ldr	r0, [r4, #0]
 8007b6c:	1ac0      	subs	r0, r0, r3
 8007b6e:	6963      	ldr	r3, [r4, #20]
 8007b70:	b2f6      	uxtb	r6, r6
 8007b72:	4283      	cmp	r3, r0
 8007b74:	4637      	mov	r7, r6
 8007b76:	dc04      	bgt.n	8007b82 <__swbuf_r+0x42>
 8007b78:	4621      	mov	r1, r4
 8007b7a:	4628      	mov	r0, r5
 8007b7c:	f000 f93c 	bl	8007df8 <_fflush_r>
 8007b80:	bb30      	cbnz	r0, 8007bd0 <__swbuf_r+0x90>
 8007b82:	68a3      	ldr	r3, [r4, #8]
 8007b84:	3b01      	subs	r3, #1
 8007b86:	60a3      	str	r3, [r4, #8]
 8007b88:	6823      	ldr	r3, [r4, #0]
 8007b8a:	1c5a      	adds	r2, r3, #1
 8007b8c:	6022      	str	r2, [r4, #0]
 8007b8e:	701e      	strb	r6, [r3, #0]
 8007b90:	6963      	ldr	r3, [r4, #20]
 8007b92:	3001      	adds	r0, #1
 8007b94:	4283      	cmp	r3, r0
 8007b96:	d004      	beq.n	8007ba2 <__swbuf_r+0x62>
 8007b98:	89a3      	ldrh	r3, [r4, #12]
 8007b9a:	07db      	lsls	r3, r3, #31
 8007b9c:	d506      	bpl.n	8007bac <__swbuf_r+0x6c>
 8007b9e:	2e0a      	cmp	r6, #10
 8007ba0:	d104      	bne.n	8007bac <__swbuf_r+0x6c>
 8007ba2:	4621      	mov	r1, r4
 8007ba4:	4628      	mov	r0, r5
 8007ba6:	f000 f927 	bl	8007df8 <_fflush_r>
 8007baa:	b988      	cbnz	r0, 8007bd0 <__swbuf_r+0x90>
 8007bac:	4638      	mov	r0, r7
 8007bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bb0:	4b0a      	ldr	r3, [pc, #40]	; (8007bdc <__swbuf_r+0x9c>)
 8007bb2:	429c      	cmp	r4, r3
 8007bb4:	d101      	bne.n	8007bba <__swbuf_r+0x7a>
 8007bb6:	68ac      	ldr	r4, [r5, #8]
 8007bb8:	e7cf      	b.n	8007b5a <__swbuf_r+0x1a>
 8007bba:	4b09      	ldr	r3, [pc, #36]	; (8007be0 <__swbuf_r+0xa0>)
 8007bbc:	429c      	cmp	r4, r3
 8007bbe:	bf08      	it	eq
 8007bc0:	68ec      	ldreq	r4, [r5, #12]
 8007bc2:	e7ca      	b.n	8007b5a <__swbuf_r+0x1a>
 8007bc4:	4621      	mov	r1, r4
 8007bc6:	4628      	mov	r0, r5
 8007bc8:	f000 f81a 	bl	8007c00 <__swsetup_r>
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	d0cb      	beq.n	8007b68 <__swbuf_r+0x28>
 8007bd0:	f04f 37ff 	mov.w	r7, #4294967295
 8007bd4:	e7ea      	b.n	8007bac <__swbuf_r+0x6c>
 8007bd6:	bf00      	nop
 8007bd8:	080086e4 	.word	0x080086e4
 8007bdc:	08008704 	.word	0x08008704
 8007be0:	080086c4 	.word	0x080086c4

08007be4 <__ascii_wctomb>:
 8007be4:	b149      	cbz	r1, 8007bfa <__ascii_wctomb+0x16>
 8007be6:	2aff      	cmp	r2, #255	; 0xff
 8007be8:	bf85      	ittet	hi
 8007bea:	238a      	movhi	r3, #138	; 0x8a
 8007bec:	6003      	strhi	r3, [r0, #0]
 8007bee:	700a      	strbls	r2, [r1, #0]
 8007bf0:	f04f 30ff 	movhi.w	r0, #4294967295
 8007bf4:	bf98      	it	ls
 8007bf6:	2001      	movls	r0, #1
 8007bf8:	4770      	bx	lr
 8007bfa:	4608      	mov	r0, r1
 8007bfc:	4770      	bx	lr
	...

08007c00 <__swsetup_r>:
 8007c00:	4b32      	ldr	r3, [pc, #200]	; (8007ccc <__swsetup_r+0xcc>)
 8007c02:	b570      	push	{r4, r5, r6, lr}
 8007c04:	681d      	ldr	r5, [r3, #0]
 8007c06:	4606      	mov	r6, r0
 8007c08:	460c      	mov	r4, r1
 8007c0a:	b125      	cbz	r5, 8007c16 <__swsetup_r+0x16>
 8007c0c:	69ab      	ldr	r3, [r5, #24]
 8007c0e:	b913      	cbnz	r3, 8007c16 <__swsetup_r+0x16>
 8007c10:	4628      	mov	r0, r5
 8007c12:	f000 f985 	bl	8007f20 <__sinit>
 8007c16:	4b2e      	ldr	r3, [pc, #184]	; (8007cd0 <__swsetup_r+0xd0>)
 8007c18:	429c      	cmp	r4, r3
 8007c1a:	d10f      	bne.n	8007c3c <__swsetup_r+0x3c>
 8007c1c:	686c      	ldr	r4, [r5, #4]
 8007c1e:	89a3      	ldrh	r3, [r4, #12]
 8007c20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c24:	0719      	lsls	r1, r3, #28
 8007c26:	d42c      	bmi.n	8007c82 <__swsetup_r+0x82>
 8007c28:	06dd      	lsls	r5, r3, #27
 8007c2a:	d411      	bmi.n	8007c50 <__swsetup_r+0x50>
 8007c2c:	2309      	movs	r3, #9
 8007c2e:	6033      	str	r3, [r6, #0]
 8007c30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007c34:	81a3      	strh	r3, [r4, #12]
 8007c36:	f04f 30ff 	mov.w	r0, #4294967295
 8007c3a:	e03e      	b.n	8007cba <__swsetup_r+0xba>
 8007c3c:	4b25      	ldr	r3, [pc, #148]	; (8007cd4 <__swsetup_r+0xd4>)
 8007c3e:	429c      	cmp	r4, r3
 8007c40:	d101      	bne.n	8007c46 <__swsetup_r+0x46>
 8007c42:	68ac      	ldr	r4, [r5, #8]
 8007c44:	e7eb      	b.n	8007c1e <__swsetup_r+0x1e>
 8007c46:	4b24      	ldr	r3, [pc, #144]	; (8007cd8 <__swsetup_r+0xd8>)
 8007c48:	429c      	cmp	r4, r3
 8007c4a:	bf08      	it	eq
 8007c4c:	68ec      	ldreq	r4, [r5, #12]
 8007c4e:	e7e6      	b.n	8007c1e <__swsetup_r+0x1e>
 8007c50:	0758      	lsls	r0, r3, #29
 8007c52:	d512      	bpl.n	8007c7a <__swsetup_r+0x7a>
 8007c54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c56:	b141      	cbz	r1, 8007c6a <__swsetup_r+0x6a>
 8007c58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c5c:	4299      	cmp	r1, r3
 8007c5e:	d002      	beq.n	8007c66 <__swsetup_r+0x66>
 8007c60:	4630      	mov	r0, r6
 8007c62:	f7fd fe89 	bl	8005978 <_free_r>
 8007c66:	2300      	movs	r3, #0
 8007c68:	6363      	str	r3, [r4, #52]	; 0x34
 8007c6a:	89a3      	ldrh	r3, [r4, #12]
 8007c6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c70:	81a3      	strh	r3, [r4, #12]
 8007c72:	2300      	movs	r3, #0
 8007c74:	6063      	str	r3, [r4, #4]
 8007c76:	6923      	ldr	r3, [r4, #16]
 8007c78:	6023      	str	r3, [r4, #0]
 8007c7a:	89a3      	ldrh	r3, [r4, #12]
 8007c7c:	f043 0308 	orr.w	r3, r3, #8
 8007c80:	81a3      	strh	r3, [r4, #12]
 8007c82:	6923      	ldr	r3, [r4, #16]
 8007c84:	b94b      	cbnz	r3, 8007c9a <__swsetup_r+0x9a>
 8007c86:	89a3      	ldrh	r3, [r4, #12]
 8007c88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c90:	d003      	beq.n	8007c9a <__swsetup_r+0x9a>
 8007c92:	4621      	mov	r1, r4
 8007c94:	4630      	mov	r0, r6
 8007c96:	f000 fa05 	bl	80080a4 <__smakebuf_r>
 8007c9a:	89a0      	ldrh	r0, [r4, #12]
 8007c9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ca0:	f010 0301 	ands.w	r3, r0, #1
 8007ca4:	d00a      	beq.n	8007cbc <__swsetup_r+0xbc>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	60a3      	str	r3, [r4, #8]
 8007caa:	6963      	ldr	r3, [r4, #20]
 8007cac:	425b      	negs	r3, r3
 8007cae:	61a3      	str	r3, [r4, #24]
 8007cb0:	6923      	ldr	r3, [r4, #16]
 8007cb2:	b943      	cbnz	r3, 8007cc6 <__swsetup_r+0xc6>
 8007cb4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007cb8:	d1ba      	bne.n	8007c30 <__swsetup_r+0x30>
 8007cba:	bd70      	pop	{r4, r5, r6, pc}
 8007cbc:	0781      	lsls	r1, r0, #30
 8007cbe:	bf58      	it	pl
 8007cc0:	6963      	ldrpl	r3, [r4, #20]
 8007cc2:	60a3      	str	r3, [r4, #8]
 8007cc4:	e7f4      	b.n	8007cb0 <__swsetup_r+0xb0>
 8007cc6:	2000      	movs	r0, #0
 8007cc8:	e7f7      	b.n	8007cba <__swsetup_r+0xba>
 8007cca:	bf00      	nop
 8007ccc:	2000000c 	.word	0x2000000c
 8007cd0:	080086e4 	.word	0x080086e4
 8007cd4:	08008704 	.word	0x08008704
 8007cd8:	080086c4 	.word	0x080086c4

08007cdc <abort>:
 8007cdc:	b508      	push	{r3, lr}
 8007cde:	2006      	movs	r0, #6
 8007ce0:	f000 fa48 	bl	8008174 <raise>
 8007ce4:	2001      	movs	r0, #1
 8007ce6:	f7f9 fc41 	bl	800156c <_exit>
	...

08007cec <__sflush_r>:
 8007cec:	898a      	ldrh	r2, [r1, #12]
 8007cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cf2:	4605      	mov	r5, r0
 8007cf4:	0710      	lsls	r0, r2, #28
 8007cf6:	460c      	mov	r4, r1
 8007cf8:	d458      	bmi.n	8007dac <__sflush_r+0xc0>
 8007cfa:	684b      	ldr	r3, [r1, #4]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	dc05      	bgt.n	8007d0c <__sflush_r+0x20>
 8007d00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	dc02      	bgt.n	8007d0c <__sflush_r+0x20>
 8007d06:	2000      	movs	r0, #0
 8007d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d0e:	2e00      	cmp	r6, #0
 8007d10:	d0f9      	beq.n	8007d06 <__sflush_r+0x1a>
 8007d12:	2300      	movs	r3, #0
 8007d14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d18:	682f      	ldr	r7, [r5, #0]
 8007d1a:	602b      	str	r3, [r5, #0]
 8007d1c:	d032      	beq.n	8007d84 <__sflush_r+0x98>
 8007d1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d20:	89a3      	ldrh	r3, [r4, #12]
 8007d22:	075a      	lsls	r2, r3, #29
 8007d24:	d505      	bpl.n	8007d32 <__sflush_r+0x46>
 8007d26:	6863      	ldr	r3, [r4, #4]
 8007d28:	1ac0      	subs	r0, r0, r3
 8007d2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d2c:	b10b      	cbz	r3, 8007d32 <__sflush_r+0x46>
 8007d2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d30:	1ac0      	subs	r0, r0, r3
 8007d32:	2300      	movs	r3, #0
 8007d34:	4602      	mov	r2, r0
 8007d36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d38:	6a21      	ldr	r1, [r4, #32]
 8007d3a:	4628      	mov	r0, r5
 8007d3c:	47b0      	blx	r6
 8007d3e:	1c43      	adds	r3, r0, #1
 8007d40:	89a3      	ldrh	r3, [r4, #12]
 8007d42:	d106      	bne.n	8007d52 <__sflush_r+0x66>
 8007d44:	6829      	ldr	r1, [r5, #0]
 8007d46:	291d      	cmp	r1, #29
 8007d48:	d82c      	bhi.n	8007da4 <__sflush_r+0xb8>
 8007d4a:	4a2a      	ldr	r2, [pc, #168]	; (8007df4 <__sflush_r+0x108>)
 8007d4c:	40ca      	lsrs	r2, r1
 8007d4e:	07d6      	lsls	r6, r2, #31
 8007d50:	d528      	bpl.n	8007da4 <__sflush_r+0xb8>
 8007d52:	2200      	movs	r2, #0
 8007d54:	6062      	str	r2, [r4, #4]
 8007d56:	04d9      	lsls	r1, r3, #19
 8007d58:	6922      	ldr	r2, [r4, #16]
 8007d5a:	6022      	str	r2, [r4, #0]
 8007d5c:	d504      	bpl.n	8007d68 <__sflush_r+0x7c>
 8007d5e:	1c42      	adds	r2, r0, #1
 8007d60:	d101      	bne.n	8007d66 <__sflush_r+0x7a>
 8007d62:	682b      	ldr	r3, [r5, #0]
 8007d64:	b903      	cbnz	r3, 8007d68 <__sflush_r+0x7c>
 8007d66:	6560      	str	r0, [r4, #84]	; 0x54
 8007d68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d6a:	602f      	str	r7, [r5, #0]
 8007d6c:	2900      	cmp	r1, #0
 8007d6e:	d0ca      	beq.n	8007d06 <__sflush_r+0x1a>
 8007d70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d74:	4299      	cmp	r1, r3
 8007d76:	d002      	beq.n	8007d7e <__sflush_r+0x92>
 8007d78:	4628      	mov	r0, r5
 8007d7a:	f7fd fdfd 	bl	8005978 <_free_r>
 8007d7e:	2000      	movs	r0, #0
 8007d80:	6360      	str	r0, [r4, #52]	; 0x34
 8007d82:	e7c1      	b.n	8007d08 <__sflush_r+0x1c>
 8007d84:	6a21      	ldr	r1, [r4, #32]
 8007d86:	2301      	movs	r3, #1
 8007d88:	4628      	mov	r0, r5
 8007d8a:	47b0      	blx	r6
 8007d8c:	1c41      	adds	r1, r0, #1
 8007d8e:	d1c7      	bne.n	8007d20 <__sflush_r+0x34>
 8007d90:	682b      	ldr	r3, [r5, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d0c4      	beq.n	8007d20 <__sflush_r+0x34>
 8007d96:	2b1d      	cmp	r3, #29
 8007d98:	d001      	beq.n	8007d9e <__sflush_r+0xb2>
 8007d9a:	2b16      	cmp	r3, #22
 8007d9c:	d101      	bne.n	8007da2 <__sflush_r+0xb6>
 8007d9e:	602f      	str	r7, [r5, #0]
 8007da0:	e7b1      	b.n	8007d06 <__sflush_r+0x1a>
 8007da2:	89a3      	ldrh	r3, [r4, #12]
 8007da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007da8:	81a3      	strh	r3, [r4, #12]
 8007daa:	e7ad      	b.n	8007d08 <__sflush_r+0x1c>
 8007dac:	690f      	ldr	r7, [r1, #16]
 8007dae:	2f00      	cmp	r7, #0
 8007db0:	d0a9      	beq.n	8007d06 <__sflush_r+0x1a>
 8007db2:	0793      	lsls	r3, r2, #30
 8007db4:	680e      	ldr	r6, [r1, #0]
 8007db6:	bf08      	it	eq
 8007db8:	694b      	ldreq	r3, [r1, #20]
 8007dba:	600f      	str	r7, [r1, #0]
 8007dbc:	bf18      	it	ne
 8007dbe:	2300      	movne	r3, #0
 8007dc0:	eba6 0807 	sub.w	r8, r6, r7
 8007dc4:	608b      	str	r3, [r1, #8]
 8007dc6:	f1b8 0f00 	cmp.w	r8, #0
 8007dca:	dd9c      	ble.n	8007d06 <__sflush_r+0x1a>
 8007dcc:	6a21      	ldr	r1, [r4, #32]
 8007dce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007dd0:	4643      	mov	r3, r8
 8007dd2:	463a      	mov	r2, r7
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	47b0      	blx	r6
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	dc06      	bgt.n	8007dea <__sflush_r+0xfe>
 8007ddc:	89a3      	ldrh	r3, [r4, #12]
 8007dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007de2:	81a3      	strh	r3, [r4, #12]
 8007de4:	f04f 30ff 	mov.w	r0, #4294967295
 8007de8:	e78e      	b.n	8007d08 <__sflush_r+0x1c>
 8007dea:	4407      	add	r7, r0
 8007dec:	eba8 0800 	sub.w	r8, r8, r0
 8007df0:	e7e9      	b.n	8007dc6 <__sflush_r+0xda>
 8007df2:	bf00      	nop
 8007df4:	20400001 	.word	0x20400001

08007df8 <_fflush_r>:
 8007df8:	b538      	push	{r3, r4, r5, lr}
 8007dfa:	690b      	ldr	r3, [r1, #16]
 8007dfc:	4605      	mov	r5, r0
 8007dfe:	460c      	mov	r4, r1
 8007e00:	b913      	cbnz	r3, 8007e08 <_fflush_r+0x10>
 8007e02:	2500      	movs	r5, #0
 8007e04:	4628      	mov	r0, r5
 8007e06:	bd38      	pop	{r3, r4, r5, pc}
 8007e08:	b118      	cbz	r0, 8007e12 <_fflush_r+0x1a>
 8007e0a:	6983      	ldr	r3, [r0, #24]
 8007e0c:	b90b      	cbnz	r3, 8007e12 <_fflush_r+0x1a>
 8007e0e:	f000 f887 	bl	8007f20 <__sinit>
 8007e12:	4b14      	ldr	r3, [pc, #80]	; (8007e64 <_fflush_r+0x6c>)
 8007e14:	429c      	cmp	r4, r3
 8007e16:	d11b      	bne.n	8007e50 <_fflush_r+0x58>
 8007e18:	686c      	ldr	r4, [r5, #4]
 8007e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d0ef      	beq.n	8007e02 <_fflush_r+0xa>
 8007e22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e24:	07d0      	lsls	r0, r2, #31
 8007e26:	d404      	bmi.n	8007e32 <_fflush_r+0x3a>
 8007e28:	0599      	lsls	r1, r3, #22
 8007e2a:	d402      	bmi.n	8007e32 <_fflush_r+0x3a>
 8007e2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e2e:	f7f9 fef6 	bl	8001c1e <__retarget_lock_acquire_recursive>
 8007e32:	4628      	mov	r0, r5
 8007e34:	4621      	mov	r1, r4
 8007e36:	f7ff ff59 	bl	8007cec <__sflush_r>
 8007e3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e3c:	07da      	lsls	r2, r3, #31
 8007e3e:	4605      	mov	r5, r0
 8007e40:	d4e0      	bmi.n	8007e04 <_fflush_r+0xc>
 8007e42:	89a3      	ldrh	r3, [r4, #12]
 8007e44:	059b      	lsls	r3, r3, #22
 8007e46:	d4dd      	bmi.n	8007e04 <_fflush_r+0xc>
 8007e48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e4a:	f7f9 fefc 	bl	8001c46 <__retarget_lock_release_recursive>
 8007e4e:	e7d9      	b.n	8007e04 <_fflush_r+0xc>
 8007e50:	4b05      	ldr	r3, [pc, #20]	; (8007e68 <_fflush_r+0x70>)
 8007e52:	429c      	cmp	r4, r3
 8007e54:	d101      	bne.n	8007e5a <_fflush_r+0x62>
 8007e56:	68ac      	ldr	r4, [r5, #8]
 8007e58:	e7df      	b.n	8007e1a <_fflush_r+0x22>
 8007e5a:	4b04      	ldr	r3, [pc, #16]	; (8007e6c <_fflush_r+0x74>)
 8007e5c:	429c      	cmp	r4, r3
 8007e5e:	bf08      	it	eq
 8007e60:	68ec      	ldreq	r4, [r5, #12]
 8007e62:	e7da      	b.n	8007e1a <_fflush_r+0x22>
 8007e64:	080086e4 	.word	0x080086e4
 8007e68:	08008704 	.word	0x08008704
 8007e6c:	080086c4 	.word	0x080086c4

08007e70 <std>:
 8007e70:	2300      	movs	r3, #0
 8007e72:	b510      	push	{r4, lr}
 8007e74:	4604      	mov	r4, r0
 8007e76:	e9c0 3300 	strd	r3, r3, [r0]
 8007e7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e7e:	6083      	str	r3, [r0, #8]
 8007e80:	8181      	strh	r1, [r0, #12]
 8007e82:	6643      	str	r3, [r0, #100]	; 0x64
 8007e84:	81c2      	strh	r2, [r0, #14]
 8007e86:	6183      	str	r3, [r0, #24]
 8007e88:	4619      	mov	r1, r3
 8007e8a:	2208      	movs	r2, #8
 8007e8c:	305c      	adds	r0, #92	; 0x5c
 8007e8e:	f7fd fd6b 	bl	8005968 <memset>
 8007e92:	4b05      	ldr	r3, [pc, #20]	; (8007ea8 <std+0x38>)
 8007e94:	6263      	str	r3, [r4, #36]	; 0x24
 8007e96:	4b05      	ldr	r3, [pc, #20]	; (8007eac <std+0x3c>)
 8007e98:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e9a:	4b05      	ldr	r3, [pc, #20]	; (8007eb0 <std+0x40>)
 8007e9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e9e:	4b05      	ldr	r3, [pc, #20]	; (8007eb4 <std+0x44>)
 8007ea0:	6224      	str	r4, [r4, #32]
 8007ea2:	6323      	str	r3, [r4, #48]	; 0x30
 8007ea4:	bd10      	pop	{r4, pc}
 8007ea6:	bf00      	nop
 8007ea8:	080081ad 	.word	0x080081ad
 8007eac:	080081cf 	.word	0x080081cf
 8007eb0:	08008207 	.word	0x08008207
 8007eb4:	0800822b 	.word	0x0800822b

08007eb8 <_cleanup_r>:
 8007eb8:	4901      	ldr	r1, [pc, #4]	; (8007ec0 <_cleanup_r+0x8>)
 8007eba:	f000 b8af 	b.w	800801c <_fwalk_reent>
 8007ebe:	bf00      	nop
 8007ec0:	08007df9 	.word	0x08007df9

08007ec4 <__sfmoreglue>:
 8007ec4:	b570      	push	{r4, r5, r6, lr}
 8007ec6:	1e4a      	subs	r2, r1, #1
 8007ec8:	2568      	movs	r5, #104	; 0x68
 8007eca:	4355      	muls	r5, r2
 8007ecc:	460e      	mov	r6, r1
 8007ece:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007ed2:	f7fd fda1 	bl	8005a18 <_malloc_r>
 8007ed6:	4604      	mov	r4, r0
 8007ed8:	b140      	cbz	r0, 8007eec <__sfmoreglue+0x28>
 8007eda:	2100      	movs	r1, #0
 8007edc:	e9c0 1600 	strd	r1, r6, [r0]
 8007ee0:	300c      	adds	r0, #12
 8007ee2:	60a0      	str	r0, [r4, #8]
 8007ee4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ee8:	f7fd fd3e 	bl	8005968 <memset>
 8007eec:	4620      	mov	r0, r4
 8007eee:	bd70      	pop	{r4, r5, r6, pc}

08007ef0 <__sfp_lock_acquire>:
 8007ef0:	4801      	ldr	r0, [pc, #4]	; (8007ef8 <__sfp_lock_acquire+0x8>)
 8007ef2:	f7f9 be94 	b.w	8001c1e <__retarget_lock_acquire_recursive>
 8007ef6:	bf00      	nop
 8007ef8:	20000200 	.word	0x20000200

08007efc <__sfp_lock_release>:
 8007efc:	4801      	ldr	r0, [pc, #4]	; (8007f04 <__sfp_lock_release+0x8>)
 8007efe:	f7f9 bea2 	b.w	8001c46 <__retarget_lock_release_recursive>
 8007f02:	bf00      	nop
 8007f04:	20000200 	.word	0x20000200

08007f08 <__sinit_lock_acquire>:
 8007f08:	4801      	ldr	r0, [pc, #4]	; (8007f10 <__sinit_lock_acquire+0x8>)
 8007f0a:	f7f9 be88 	b.w	8001c1e <__retarget_lock_acquire_recursive>
 8007f0e:	bf00      	nop
 8007f10:	200001fc 	.word	0x200001fc

08007f14 <__sinit_lock_release>:
 8007f14:	4801      	ldr	r0, [pc, #4]	; (8007f1c <__sinit_lock_release+0x8>)
 8007f16:	f7f9 be96 	b.w	8001c46 <__retarget_lock_release_recursive>
 8007f1a:	bf00      	nop
 8007f1c:	200001fc 	.word	0x200001fc

08007f20 <__sinit>:
 8007f20:	b510      	push	{r4, lr}
 8007f22:	4604      	mov	r4, r0
 8007f24:	f7ff fff0 	bl	8007f08 <__sinit_lock_acquire>
 8007f28:	69a3      	ldr	r3, [r4, #24]
 8007f2a:	b11b      	cbz	r3, 8007f34 <__sinit+0x14>
 8007f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f30:	f7ff bff0 	b.w	8007f14 <__sinit_lock_release>
 8007f34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007f38:	6523      	str	r3, [r4, #80]	; 0x50
 8007f3a:	4b13      	ldr	r3, [pc, #76]	; (8007f88 <__sinit+0x68>)
 8007f3c:	4a13      	ldr	r2, [pc, #76]	; (8007f8c <__sinit+0x6c>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	62a2      	str	r2, [r4, #40]	; 0x28
 8007f42:	42a3      	cmp	r3, r4
 8007f44:	bf04      	itt	eq
 8007f46:	2301      	moveq	r3, #1
 8007f48:	61a3      	streq	r3, [r4, #24]
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	f000 f820 	bl	8007f90 <__sfp>
 8007f50:	6060      	str	r0, [r4, #4]
 8007f52:	4620      	mov	r0, r4
 8007f54:	f000 f81c 	bl	8007f90 <__sfp>
 8007f58:	60a0      	str	r0, [r4, #8]
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	f000 f818 	bl	8007f90 <__sfp>
 8007f60:	2200      	movs	r2, #0
 8007f62:	60e0      	str	r0, [r4, #12]
 8007f64:	2104      	movs	r1, #4
 8007f66:	6860      	ldr	r0, [r4, #4]
 8007f68:	f7ff ff82 	bl	8007e70 <std>
 8007f6c:	68a0      	ldr	r0, [r4, #8]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	2109      	movs	r1, #9
 8007f72:	f7ff ff7d 	bl	8007e70 <std>
 8007f76:	68e0      	ldr	r0, [r4, #12]
 8007f78:	2202      	movs	r2, #2
 8007f7a:	2112      	movs	r1, #18
 8007f7c:	f7ff ff78 	bl	8007e70 <std>
 8007f80:	2301      	movs	r3, #1
 8007f82:	61a3      	str	r3, [r4, #24]
 8007f84:	e7d2      	b.n	8007f2c <__sinit+0xc>
 8007f86:	bf00      	nop
 8007f88:	08008340 	.word	0x08008340
 8007f8c:	08007eb9 	.word	0x08007eb9

08007f90 <__sfp>:
 8007f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f92:	4607      	mov	r7, r0
 8007f94:	f7ff ffac 	bl	8007ef0 <__sfp_lock_acquire>
 8007f98:	4b1e      	ldr	r3, [pc, #120]	; (8008014 <__sfp+0x84>)
 8007f9a:	681e      	ldr	r6, [r3, #0]
 8007f9c:	69b3      	ldr	r3, [r6, #24]
 8007f9e:	b913      	cbnz	r3, 8007fa6 <__sfp+0x16>
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	f7ff ffbd 	bl	8007f20 <__sinit>
 8007fa6:	3648      	adds	r6, #72	; 0x48
 8007fa8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007fac:	3b01      	subs	r3, #1
 8007fae:	d503      	bpl.n	8007fb8 <__sfp+0x28>
 8007fb0:	6833      	ldr	r3, [r6, #0]
 8007fb2:	b30b      	cbz	r3, 8007ff8 <__sfp+0x68>
 8007fb4:	6836      	ldr	r6, [r6, #0]
 8007fb6:	e7f7      	b.n	8007fa8 <__sfp+0x18>
 8007fb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007fbc:	b9d5      	cbnz	r5, 8007ff4 <__sfp+0x64>
 8007fbe:	4b16      	ldr	r3, [pc, #88]	; (8008018 <__sfp+0x88>)
 8007fc0:	60e3      	str	r3, [r4, #12]
 8007fc2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007fc6:	6665      	str	r5, [r4, #100]	; 0x64
 8007fc8:	f7f9 fe03 	bl	8001bd2 <__retarget_lock_init_recursive>
 8007fcc:	f7ff ff96 	bl	8007efc <__sfp_lock_release>
 8007fd0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007fd4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007fd8:	6025      	str	r5, [r4, #0]
 8007fda:	61a5      	str	r5, [r4, #24]
 8007fdc:	2208      	movs	r2, #8
 8007fde:	4629      	mov	r1, r5
 8007fe0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007fe4:	f7fd fcc0 	bl	8005968 <memset>
 8007fe8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007fec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ff0:	4620      	mov	r0, r4
 8007ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ff4:	3468      	adds	r4, #104	; 0x68
 8007ff6:	e7d9      	b.n	8007fac <__sfp+0x1c>
 8007ff8:	2104      	movs	r1, #4
 8007ffa:	4638      	mov	r0, r7
 8007ffc:	f7ff ff62 	bl	8007ec4 <__sfmoreglue>
 8008000:	4604      	mov	r4, r0
 8008002:	6030      	str	r0, [r6, #0]
 8008004:	2800      	cmp	r0, #0
 8008006:	d1d5      	bne.n	8007fb4 <__sfp+0x24>
 8008008:	f7ff ff78 	bl	8007efc <__sfp_lock_release>
 800800c:	230c      	movs	r3, #12
 800800e:	603b      	str	r3, [r7, #0]
 8008010:	e7ee      	b.n	8007ff0 <__sfp+0x60>
 8008012:	bf00      	nop
 8008014:	08008340 	.word	0x08008340
 8008018:	ffff0001 	.word	0xffff0001

0800801c <_fwalk_reent>:
 800801c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008020:	4606      	mov	r6, r0
 8008022:	4688      	mov	r8, r1
 8008024:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008028:	2700      	movs	r7, #0
 800802a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800802e:	f1b9 0901 	subs.w	r9, r9, #1
 8008032:	d505      	bpl.n	8008040 <_fwalk_reent+0x24>
 8008034:	6824      	ldr	r4, [r4, #0]
 8008036:	2c00      	cmp	r4, #0
 8008038:	d1f7      	bne.n	800802a <_fwalk_reent+0xe>
 800803a:	4638      	mov	r0, r7
 800803c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008040:	89ab      	ldrh	r3, [r5, #12]
 8008042:	2b01      	cmp	r3, #1
 8008044:	d907      	bls.n	8008056 <_fwalk_reent+0x3a>
 8008046:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800804a:	3301      	adds	r3, #1
 800804c:	d003      	beq.n	8008056 <_fwalk_reent+0x3a>
 800804e:	4629      	mov	r1, r5
 8008050:	4630      	mov	r0, r6
 8008052:	47c0      	blx	r8
 8008054:	4307      	orrs	r7, r0
 8008056:	3568      	adds	r5, #104	; 0x68
 8008058:	e7e9      	b.n	800802e <_fwalk_reent+0x12>

0800805a <__swhatbuf_r>:
 800805a:	b570      	push	{r4, r5, r6, lr}
 800805c:	460e      	mov	r6, r1
 800805e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008062:	2900      	cmp	r1, #0
 8008064:	b096      	sub	sp, #88	; 0x58
 8008066:	4614      	mov	r4, r2
 8008068:	461d      	mov	r5, r3
 800806a:	da07      	bge.n	800807c <__swhatbuf_r+0x22>
 800806c:	2300      	movs	r3, #0
 800806e:	602b      	str	r3, [r5, #0]
 8008070:	89b3      	ldrh	r3, [r6, #12]
 8008072:	061a      	lsls	r2, r3, #24
 8008074:	d410      	bmi.n	8008098 <__swhatbuf_r+0x3e>
 8008076:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800807a:	e00e      	b.n	800809a <__swhatbuf_r+0x40>
 800807c:	466a      	mov	r2, sp
 800807e:	f000 f8fb 	bl	8008278 <_fstat_r>
 8008082:	2800      	cmp	r0, #0
 8008084:	dbf2      	blt.n	800806c <__swhatbuf_r+0x12>
 8008086:	9a01      	ldr	r2, [sp, #4]
 8008088:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800808c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008090:	425a      	negs	r2, r3
 8008092:	415a      	adcs	r2, r3
 8008094:	602a      	str	r2, [r5, #0]
 8008096:	e7ee      	b.n	8008076 <__swhatbuf_r+0x1c>
 8008098:	2340      	movs	r3, #64	; 0x40
 800809a:	2000      	movs	r0, #0
 800809c:	6023      	str	r3, [r4, #0]
 800809e:	b016      	add	sp, #88	; 0x58
 80080a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080080a4 <__smakebuf_r>:
 80080a4:	898b      	ldrh	r3, [r1, #12]
 80080a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80080a8:	079d      	lsls	r5, r3, #30
 80080aa:	4606      	mov	r6, r0
 80080ac:	460c      	mov	r4, r1
 80080ae:	d507      	bpl.n	80080c0 <__smakebuf_r+0x1c>
 80080b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80080b4:	6023      	str	r3, [r4, #0]
 80080b6:	6123      	str	r3, [r4, #16]
 80080b8:	2301      	movs	r3, #1
 80080ba:	6163      	str	r3, [r4, #20]
 80080bc:	b002      	add	sp, #8
 80080be:	bd70      	pop	{r4, r5, r6, pc}
 80080c0:	ab01      	add	r3, sp, #4
 80080c2:	466a      	mov	r2, sp
 80080c4:	f7ff ffc9 	bl	800805a <__swhatbuf_r>
 80080c8:	9900      	ldr	r1, [sp, #0]
 80080ca:	4605      	mov	r5, r0
 80080cc:	4630      	mov	r0, r6
 80080ce:	f7fd fca3 	bl	8005a18 <_malloc_r>
 80080d2:	b948      	cbnz	r0, 80080e8 <__smakebuf_r+0x44>
 80080d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080d8:	059a      	lsls	r2, r3, #22
 80080da:	d4ef      	bmi.n	80080bc <__smakebuf_r+0x18>
 80080dc:	f023 0303 	bic.w	r3, r3, #3
 80080e0:	f043 0302 	orr.w	r3, r3, #2
 80080e4:	81a3      	strh	r3, [r4, #12]
 80080e6:	e7e3      	b.n	80080b0 <__smakebuf_r+0xc>
 80080e8:	4b0d      	ldr	r3, [pc, #52]	; (8008120 <__smakebuf_r+0x7c>)
 80080ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80080ec:	89a3      	ldrh	r3, [r4, #12]
 80080ee:	6020      	str	r0, [r4, #0]
 80080f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080f4:	81a3      	strh	r3, [r4, #12]
 80080f6:	9b00      	ldr	r3, [sp, #0]
 80080f8:	6163      	str	r3, [r4, #20]
 80080fa:	9b01      	ldr	r3, [sp, #4]
 80080fc:	6120      	str	r0, [r4, #16]
 80080fe:	b15b      	cbz	r3, 8008118 <__smakebuf_r+0x74>
 8008100:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008104:	4630      	mov	r0, r6
 8008106:	f000 f8c9 	bl	800829c <_isatty_r>
 800810a:	b128      	cbz	r0, 8008118 <__smakebuf_r+0x74>
 800810c:	89a3      	ldrh	r3, [r4, #12]
 800810e:	f023 0303 	bic.w	r3, r3, #3
 8008112:	f043 0301 	orr.w	r3, r3, #1
 8008116:	81a3      	strh	r3, [r4, #12]
 8008118:	89a0      	ldrh	r0, [r4, #12]
 800811a:	4305      	orrs	r5, r0
 800811c:	81a5      	strh	r5, [r4, #12]
 800811e:	e7cd      	b.n	80080bc <__smakebuf_r+0x18>
 8008120:	08007eb9 	.word	0x08007eb9

08008124 <_raise_r>:
 8008124:	291f      	cmp	r1, #31
 8008126:	b538      	push	{r3, r4, r5, lr}
 8008128:	4604      	mov	r4, r0
 800812a:	460d      	mov	r5, r1
 800812c:	d904      	bls.n	8008138 <_raise_r+0x14>
 800812e:	2316      	movs	r3, #22
 8008130:	6003      	str	r3, [r0, #0]
 8008132:	f04f 30ff 	mov.w	r0, #4294967295
 8008136:	bd38      	pop	{r3, r4, r5, pc}
 8008138:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800813a:	b112      	cbz	r2, 8008142 <_raise_r+0x1e>
 800813c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008140:	b94b      	cbnz	r3, 8008156 <_raise_r+0x32>
 8008142:	4620      	mov	r0, r4
 8008144:	f000 f830 	bl	80081a8 <_getpid_r>
 8008148:	462a      	mov	r2, r5
 800814a:	4601      	mov	r1, r0
 800814c:	4620      	mov	r0, r4
 800814e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008152:	f000 b817 	b.w	8008184 <_kill_r>
 8008156:	2b01      	cmp	r3, #1
 8008158:	d00a      	beq.n	8008170 <_raise_r+0x4c>
 800815a:	1c59      	adds	r1, r3, #1
 800815c:	d103      	bne.n	8008166 <_raise_r+0x42>
 800815e:	2316      	movs	r3, #22
 8008160:	6003      	str	r3, [r0, #0]
 8008162:	2001      	movs	r0, #1
 8008164:	e7e7      	b.n	8008136 <_raise_r+0x12>
 8008166:	2400      	movs	r4, #0
 8008168:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800816c:	4628      	mov	r0, r5
 800816e:	4798      	blx	r3
 8008170:	2000      	movs	r0, #0
 8008172:	e7e0      	b.n	8008136 <_raise_r+0x12>

08008174 <raise>:
 8008174:	4b02      	ldr	r3, [pc, #8]	; (8008180 <raise+0xc>)
 8008176:	4601      	mov	r1, r0
 8008178:	6818      	ldr	r0, [r3, #0]
 800817a:	f7ff bfd3 	b.w	8008124 <_raise_r>
 800817e:	bf00      	nop
 8008180:	2000000c 	.word	0x2000000c

08008184 <_kill_r>:
 8008184:	b538      	push	{r3, r4, r5, lr}
 8008186:	4d07      	ldr	r5, [pc, #28]	; (80081a4 <_kill_r+0x20>)
 8008188:	2300      	movs	r3, #0
 800818a:	4604      	mov	r4, r0
 800818c:	4608      	mov	r0, r1
 800818e:	4611      	mov	r1, r2
 8008190:	602b      	str	r3, [r5, #0]
 8008192:	f7f9 f9db 	bl	800154c <_kill>
 8008196:	1c43      	adds	r3, r0, #1
 8008198:	d102      	bne.n	80081a0 <_kill_r+0x1c>
 800819a:	682b      	ldr	r3, [r5, #0]
 800819c:	b103      	cbz	r3, 80081a0 <_kill_r+0x1c>
 800819e:	6023      	str	r3, [r4, #0]
 80081a0:	bd38      	pop	{r3, r4, r5, pc}
 80081a2:	bf00      	nop
 80081a4:	200005b8 	.word	0x200005b8

080081a8 <_getpid_r>:
 80081a8:	f7f9 b9c8 	b.w	800153c <_getpid>

080081ac <__sread>:
 80081ac:	b510      	push	{r4, lr}
 80081ae:	460c      	mov	r4, r1
 80081b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081b4:	f000 f894 	bl	80082e0 <_read_r>
 80081b8:	2800      	cmp	r0, #0
 80081ba:	bfab      	itete	ge
 80081bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80081be:	89a3      	ldrhlt	r3, [r4, #12]
 80081c0:	181b      	addge	r3, r3, r0
 80081c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80081c6:	bfac      	ite	ge
 80081c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80081ca:	81a3      	strhlt	r3, [r4, #12]
 80081cc:	bd10      	pop	{r4, pc}

080081ce <__swrite>:
 80081ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081d2:	461f      	mov	r7, r3
 80081d4:	898b      	ldrh	r3, [r1, #12]
 80081d6:	05db      	lsls	r3, r3, #23
 80081d8:	4605      	mov	r5, r0
 80081da:	460c      	mov	r4, r1
 80081dc:	4616      	mov	r6, r2
 80081de:	d505      	bpl.n	80081ec <__swrite+0x1e>
 80081e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081e4:	2302      	movs	r3, #2
 80081e6:	2200      	movs	r2, #0
 80081e8:	f000 f868 	bl	80082bc <_lseek_r>
 80081ec:	89a3      	ldrh	r3, [r4, #12]
 80081ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081f6:	81a3      	strh	r3, [r4, #12]
 80081f8:	4632      	mov	r2, r6
 80081fa:	463b      	mov	r3, r7
 80081fc:	4628      	mov	r0, r5
 80081fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008202:	f000 b817 	b.w	8008234 <_write_r>

08008206 <__sseek>:
 8008206:	b510      	push	{r4, lr}
 8008208:	460c      	mov	r4, r1
 800820a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800820e:	f000 f855 	bl	80082bc <_lseek_r>
 8008212:	1c43      	adds	r3, r0, #1
 8008214:	89a3      	ldrh	r3, [r4, #12]
 8008216:	bf15      	itete	ne
 8008218:	6560      	strne	r0, [r4, #84]	; 0x54
 800821a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800821e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008222:	81a3      	strheq	r3, [r4, #12]
 8008224:	bf18      	it	ne
 8008226:	81a3      	strhne	r3, [r4, #12]
 8008228:	bd10      	pop	{r4, pc}

0800822a <__sclose>:
 800822a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800822e:	f000 b813 	b.w	8008258 <_close_r>
	...

08008234 <_write_r>:
 8008234:	b538      	push	{r3, r4, r5, lr}
 8008236:	4d07      	ldr	r5, [pc, #28]	; (8008254 <_write_r+0x20>)
 8008238:	4604      	mov	r4, r0
 800823a:	4608      	mov	r0, r1
 800823c:	4611      	mov	r1, r2
 800823e:	2200      	movs	r2, #0
 8008240:	602a      	str	r2, [r5, #0]
 8008242:	461a      	mov	r2, r3
 8008244:	f7f9 f9b9 	bl	80015ba <_write>
 8008248:	1c43      	adds	r3, r0, #1
 800824a:	d102      	bne.n	8008252 <_write_r+0x1e>
 800824c:	682b      	ldr	r3, [r5, #0]
 800824e:	b103      	cbz	r3, 8008252 <_write_r+0x1e>
 8008250:	6023      	str	r3, [r4, #0]
 8008252:	bd38      	pop	{r3, r4, r5, pc}
 8008254:	200005b8 	.word	0x200005b8

08008258 <_close_r>:
 8008258:	b538      	push	{r3, r4, r5, lr}
 800825a:	4d06      	ldr	r5, [pc, #24]	; (8008274 <_close_r+0x1c>)
 800825c:	2300      	movs	r3, #0
 800825e:	4604      	mov	r4, r0
 8008260:	4608      	mov	r0, r1
 8008262:	602b      	str	r3, [r5, #0]
 8008264:	f7f9 f9c5 	bl	80015f2 <_close>
 8008268:	1c43      	adds	r3, r0, #1
 800826a:	d102      	bne.n	8008272 <_close_r+0x1a>
 800826c:	682b      	ldr	r3, [r5, #0]
 800826e:	b103      	cbz	r3, 8008272 <_close_r+0x1a>
 8008270:	6023      	str	r3, [r4, #0]
 8008272:	bd38      	pop	{r3, r4, r5, pc}
 8008274:	200005b8 	.word	0x200005b8

08008278 <_fstat_r>:
 8008278:	b538      	push	{r3, r4, r5, lr}
 800827a:	4d07      	ldr	r5, [pc, #28]	; (8008298 <_fstat_r+0x20>)
 800827c:	2300      	movs	r3, #0
 800827e:	4604      	mov	r4, r0
 8008280:	4608      	mov	r0, r1
 8008282:	4611      	mov	r1, r2
 8008284:	602b      	str	r3, [r5, #0]
 8008286:	f7f9 f9c0 	bl	800160a <_fstat>
 800828a:	1c43      	adds	r3, r0, #1
 800828c:	d102      	bne.n	8008294 <_fstat_r+0x1c>
 800828e:	682b      	ldr	r3, [r5, #0]
 8008290:	b103      	cbz	r3, 8008294 <_fstat_r+0x1c>
 8008292:	6023      	str	r3, [r4, #0]
 8008294:	bd38      	pop	{r3, r4, r5, pc}
 8008296:	bf00      	nop
 8008298:	200005b8 	.word	0x200005b8

0800829c <_isatty_r>:
 800829c:	b538      	push	{r3, r4, r5, lr}
 800829e:	4d06      	ldr	r5, [pc, #24]	; (80082b8 <_isatty_r+0x1c>)
 80082a0:	2300      	movs	r3, #0
 80082a2:	4604      	mov	r4, r0
 80082a4:	4608      	mov	r0, r1
 80082a6:	602b      	str	r3, [r5, #0]
 80082a8:	f7f9 f9bf 	bl	800162a <_isatty>
 80082ac:	1c43      	adds	r3, r0, #1
 80082ae:	d102      	bne.n	80082b6 <_isatty_r+0x1a>
 80082b0:	682b      	ldr	r3, [r5, #0]
 80082b2:	b103      	cbz	r3, 80082b6 <_isatty_r+0x1a>
 80082b4:	6023      	str	r3, [r4, #0]
 80082b6:	bd38      	pop	{r3, r4, r5, pc}
 80082b8:	200005b8 	.word	0x200005b8

080082bc <_lseek_r>:
 80082bc:	b538      	push	{r3, r4, r5, lr}
 80082be:	4d07      	ldr	r5, [pc, #28]	; (80082dc <_lseek_r+0x20>)
 80082c0:	4604      	mov	r4, r0
 80082c2:	4608      	mov	r0, r1
 80082c4:	4611      	mov	r1, r2
 80082c6:	2200      	movs	r2, #0
 80082c8:	602a      	str	r2, [r5, #0]
 80082ca:	461a      	mov	r2, r3
 80082cc:	f7f9 f9b8 	bl	8001640 <_lseek>
 80082d0:	1c43      	adds	r3, r0, #1
 80082d2:	d102      	bne.n	80082da <_lseek_r+0x1e>
 80082d4:	682b      	ldr	r3, [r5, #0]
 80082d6:	b103      	cbz	r3, 80082da <_lseek_r+0x1e>
 80082d8:	6023      	str	r3, [r4, #0]
 80082da:	bd38      	pop	{r3, r4, r5, pc}
 80082dc:	200005b8 	.word	0x200005b8

080082e0 <_read_r>:
 80082e0:	b538      	push	{r3, r4, r5, lr}
 80082e2:	4d07      	ldr	r5, [pc, #28]	; (8008300 <_read_r+0x20>)
 80082e4:	4604      	mov	r4, r0
 80082e6:	4608      	mov	r0, r1
 80082e8:	4611      	mov	r1, r2
 80082ea:	2200      	movs	r2, #0
 80082ec:	602a      	str	r2, [r5, #0]
 80082ee:	461a      	mov	r2, r3
 80082f0:	f7f9 f946 	bl	8001580 <_read>
 80082f4:	1c43      	adds	r3, r0, #1
 80082f6:	d102      	bne.n	80082fe <_read_r+0x1e>
 80082f8:	682b      	ldr	r3, [r5, #0]
 80082fa:	b103      	cbz	r3, 80082fe <_read_r+0x1e>
 80082fc:	6023      	str	r3, [r4, #0]
 80082fe:	bd38      	pop	{r3, r4, r5, pc}
 8008300:	200005b8 	.word	0x200005b8

08008304 <_init>:
 8008304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008306:	bf00      	nop
 8008308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800830a:	bc08      	pop	{r3}
 800830c:	469e      	mov	lr, r3
 800830e:	4770      	bx	lr

08008310 <_fini>:
 8008310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008312:	bf00      	nop
 8008314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008316:	bc08      	pop	{r3}
 8008318:	469e      	mov	lr, r3
 800831a:	4770      	bx	lr
