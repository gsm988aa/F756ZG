
f756zg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000970c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  080098e0  080098e0  000198e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ce4  08009ce4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009ce4  08009ce4  00019ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009cec  08009cec  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cec  08009cec  00019cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009cf0  08009cf0  00019cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009cf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008364  200001dc  08009ed0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008540  08009ed0  00028540  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000146dd  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f4d  00000000  00000000  000348e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  00037838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f50  00000000  00000000  000388d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028d4e  00000000  00000000  00039820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146af  00000000  00000000  0006256e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa134  00000000  00000000  00076c1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00170d51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052ec  00000000  00000000  00170da4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080098c4 	.word	0x080098c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	080098c4 	.word	0x080098c4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ef2:	4b21      	ldr	r3, [pc, #132]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000ef4:	4a21      	ldr	r2, [pc, #132]	; (8000f7c <MX_ADC1_Init+0x9c>)
 8000ef6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000ef8:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000efa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000efe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f00:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f06:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f0c:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f12:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f1a:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f20:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f22:	4a17      	ldr	r2, [pc, #92]	; (8000f80 <MX_ADC1_Init+0xa0>)
 8000f24:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f40:	480d      	ldr	r0, [pc, #52]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f42:	f002 f99d 	bl	8003280 <HAL_ADC_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f4c:	f001 fc90 	bl	8002870 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f54:	2301      	movs	r3, #1
 8000f56:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000f58:	2307      	movs	r3, #7
 8000f5a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4805      	ldr	r0, [pc, #20]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f62:	f002 f9d1 	bl	8003308 <HAL_ADC_ConfigChannel>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f6c:	f001 fc80 	bl	8002870 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f70:	bf00      	nop
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000210 	.word	0x20000210
 8000f7c:	40012000 	.word	0x40012000
 8000f80:	0f000001 	.word	0x0f000001

08000f84 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a2d      	ldr	r2, [pc, #180]	; (8001058 <HAL_ADC_MspInit+0xd4>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d153      	bne.n	800104e <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fa6:	4b2d      	ldr	r3, [pc, #180]	; (800105c <HAL_ADC_MspInit+0xd8>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	4a2c      	ldr	r2, [pc, #176]	; (800105c <HAL_ADC_MspInit+0xd8>)
 8000fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb2:	4b2a      	ldr	r3, [pc, #168]	; (800105c <HAL_ADC_MspInit+0xd8>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	4b27      	ldr	r3, [pc, #156]	; (800105c <HAL_ADC_MspInit+0xd8>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a26      	ldr	r2, [pc, #152]	; (800105c <HAL_ADC_MspInit+0xd8>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b24      	ldr	r3, [pc, #144]	; (800105c <HAL_ADC_MspInit+0xd8>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = vector_Pin;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(vector_GPIO_Port, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	481d      	ldr	r0, [pc, #116]	; (8001060 <HAL_ADC_MspInit+0xdc>)
 8000fea:	f002 ffcd 	bl	8003f88 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000fee:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8000ff0:	4a1d      	ldr	r2, [pc, #116]	; (8001068 <HAL_ADC_MspInit+0xe4>)
 8000ff2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ffa:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001000:	4b18      	ldr	r3, [pc, #96]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001006:	4b17      	ldr	r3, [pc, #92]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8001008:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800100c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8001010:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001014:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001016:	4b13      	ldr	r3, [pc, #76]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8001018:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800101c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8001020:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001024:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8001028:	2200      	movs	r2, #0
 800102a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800102c:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 800102e:	2200      	movs	r2, #0
 8001030:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001032:	480c      	ldr	r0, [pc, #48]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8001034:	f002 fcbe 	bl	80039b4 <HAL_DMA_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 800103e:	f001 fc17 	bl	8002870 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a07      	ldr	r2, [pc, #28]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8001046:	639a      	str	r2, [r3, #56]	; 0x38
 8001048:	4a06      	ldr	r2, [pc, #24]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800104e:	bf00      	nop
 8001050:	3728      	adds	r7, #40	; 0x28
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40012000 	.word	0x40012000
 800105c:	40023800 	.word	0x40023800
 8001060:	40020000 	.word	0x40020000
 8001064:	20000258 	.word	0x20000258
 8001068:	40026410 	.word	0x40026410

0800106c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001072:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <MX_DMA_Init+0x38>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a0b      	ldr	r2, [pc, #44]	; (80010a4 <MX_DMA_Init+0x38>)
 8001078:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MX_DMA_Init+0x38>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2100      	movs	r1, #0
 800108e:	2038      	movs	r0, #56	; 0x38
 8001090:	f002 fc59 	bl	8003946 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001094:	2038      	movs	r0, #56	; 0x38
 8001096:	f002 fc72 	bl	800397e <HAL_NVIC_EnableIRQ>

}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800

080010a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010be:	4b70      	ldr	r3, [pc, #448]	; (8001280 <MX_GPIO_Init+0x1d8>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a6f      	ldr	r2, [pc, #444]	; (8001280 <MX_GPIO_Init+0x1d8>)
 80010c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b6d      	ldr	r3, [pc, #436]	; (8001280 <MX_GPIO_Init+0x1d8>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	4b6a      	ldr	r3, [pc, #424]	; (8001280 <MX_GPIO_Init+0x1d8>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a69      	ldr	r2, [pc, #420]	; (8001280 <MX_GPIO_Init+0x1d8>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b67      	ldr	r3, [pc, #412]	; (8001280 <MX_GPIO_Init+0x1d8>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ee:	4b64      	ldr	r3, [pc, #400]	; (8001280 <MX_GPIO_Init+0x1d8>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a63      	ldr	r2, [pc, #396]	; (8001280 <MX_GPIO_Init+0x1d8>)
 80010f4:	f043 0302 	orr.w	r3, r3, #2
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b61      	ldr	r3, [pc, #388]	; (8001280 <MX_GPIO_Init+0x1d8>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001106:	4b5e      	ldr	r3, [pc, #376]	; (8001280 <MX_GPIO_Init+0x1d8>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a5d      	ldr	r2, [pc, #372]	; (8001280 <MX_GPIO_Init+0x1d8>)
 800110c:	f043 0308 	orr.w	r3, r3, #8
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b5b      	ldr	r3, [pc, #364]	; (8001280 <MX_GPIO_Init+0x1d8>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0308 	and.w	r3, r3, #8
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800111e:	4b58      	ldr	r3, [pc, #352]	; (8001280 <MX_GPIO_Init+0x1d8>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a57      	ldr	r2, [pc, #348]	; (8001280 <MX_GPIO_Init+0x1d8>)
 8001124:	f043 0310 	orr.w	r3, r3, #16
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b55      	ldr	r3, [pc, #340]	; (8001280 <MX_GPIO_Init+0x1d8>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0310 	and.w	r3, r3, #16
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, car1_Pin|car2_Pin|knife1_Pin|knife2_Pin
 8001136:	2200      	movs	r2, #0
 8001138:	f640 41e6 	movw	r1, #3302	; 0xce6
 800113c:	4851      	ldr	r0, [pc, #324]	; (8001284 <MX_GPIO_Init+0x1dc>)
 800113e:	f003 f8e7 	bl	8004310 <HAL_GPIO_WritePin>
                          |fenzha_Pin|hezha_Pin|backup_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001148:	484f      	ldr	r0, [pc, #316]	; (8001288 <MX_GPIO_Init+0x1e0>)
 800114a:	f003 f8e1 	bl	8004310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(chuneng_GPIO_Port, chuneng_Pin, GPIO_PIN_SET);
 800114e:	2201      	movs	r2, #1
 8001150:	2110      	movs	r1, #16
 8001152:	484c      	ldr	r0, [pc, #304]	; (8001284 <MX_GPIO_Init+0x1dc>)
 8001154:	f003 f8dc 	bl	8004310 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = car1_Pin|car2_Pin|knife1_Pin|knife2_Pin
 8001158:	f640 43e6 	movw	r3, #3302	; 0xce6
 800115c:	617b      	str	r3, [r7, #20]
                          |fenzha_Pin|hezha_Pin|backup_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115e:	2301      	movs	r3, #1
 8001160:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	4844      	ldr	r0, [pc, #272]	; (8001284 <MX_GPIO_Init+0x1dc>)
 8001172:	f002 ff09 	bl	8003f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD12 PD13
                           PD14 PD15 PD4 PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12|GPIO_PIN_13
 8001176:	f24f 3330 	movw	r3, #62256	; 0xf330
 800117a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117c:	2300      	movs	r3, #0
 800117e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001180:	2301      	movs	r3, #1
 8001182:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4619      	mov	r1, r3
 800118a:	4840      	ldr	r0, [pc, #256]	; (800128c <MX_GPIO_Init+0x1e4>)
 800118c:	f002 fefc 	bl	8003f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD1 PD2
                           PD3 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_1|GPIO_PIN_2
 8001190:	f640 43ce 	movw	r3, #3278	; 0xcce
 8001194:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001196:	4b3e      	ldr	r3, [pc, #248]	; (8001290 <MX_GPIO_Init+0x1e8>)
 8001198:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800119a:	2301      	movs	r3, #1
 800119c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	4839      	ldr	r0, [pc, #228]	; (800128c <MX_GPIO_Init+0x1e4>)
 80011a6:	f002 feef 	bl	8003f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b0:	2301      	movs	r3, #1
 80011b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	4831      	ldr	r0, [pc, #196]	; (8001288 <MX_GPIO_Init+0x1e0>)
 80011c4:	f002 fee0 	bl	8003f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = chuneng_Pin;
 80011c8:	2310      	movs	r3, #16
 80011ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d4:	2303      	movs	r3, #3
 80011d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(chuneng_GPIO_Port, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	4829      	ldr	r0, [pc, #164]	; (8001284 <MX_GPIO_Init+0x1dc>)
 80011e0:	f002 fed2 	bl	8003f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = onekey_1_Pin|onekey_2_Pin;
 80011e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	4822      	ldr	r0, [pc, #136]	; (8001284 <MX_GPIO_Init+0x1dc>)
 80011fa:	f002 fec5 	bl	8003f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011fe:	2301      	movs	r3, #1
 8001200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001202:	4b23      	ldr	r3, [pc, #140]	; (8001290 <MX_GPIO_Init+0x1e8>)
 8001204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001206:	2301      	movs	r3, #1
 8001208:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	4820      	ldr	r0, [pc, #128]	; (8001294 <MX_GPIO_Init+0x1ec>)
 8001212:	f002 feb9 	bl	8003f88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2102      	movs	r1, #2
 800121a:	2006      	movs	r0, #6
 800121c:	f002 fb93 	bl	8003946 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001220:	2006      	movs	r0, #6
 8001222:	f002 fbac 	bl	800397e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2102      	movs	r1, #2
 800122a:	2007      	movs	r0, #7
 800122c:	f002 fb8b 	bl	8003946 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001230:	2007      	movs	r0, #7
 8001232:	f002 fba4 	bl	800397e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2102      	movs	r1, #2
 800123a:	2008      	movs	r0, #8
 800123c:	f002 fb83 	bl	8003946 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001240:	2008      	movs	r0, #8
 8001242:	f002 fb9c 	bl	800397e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2102      	movs	r1, #2
 800124a:	2009      	movs	r0, #9
 800124c:	f002 fb7b 	bl	8003946 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001250:	2009      	movs	r0, #9
 8001252:	f002 fb94 	bl	800397e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8001256:	2200      	movs	r2, #0
 8001258:	2102      	movs	r1, #2
 800125a:	2017      	movs	r0, #23
 800125c:	f002 fb73 	bl	8003946 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001260:	2017      	movs	r0, #23
 8001262:	f002 fb8c 	bl	800397e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8001266:	2200      	movs	r2, #0
 8001268:	2102      	movs	r1, #2
 800126a:	2028      	movs	r0, #40	; 0x28
 800126c:	f002 fb6b 	bl	8003946 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001270:	2028      	movs	r0, #40	; 0x28
 8001272:	f002 fb84 	bl	800397e <HAL_NVIC_EnableIRQ>

}
 8001276:	bf00      	nop
 8001278:	3728      	adds	r7, #40	; 0x28
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40023800 	.word	0x40023800
 8001284:	40020400 	.word	0x40020400
 8001288:	40020000 	.word	0x40020000
 800128c:	40020c00 	.word	0x40020c00
 8001290:	10110000 	.word	0x10110000
 8001294:	40021000 	.word	0x40021000

08001298 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80012a0:	1d39      	adds	r1, r7, #4
 80012a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012a6:	2201      	movs	r2, #1
 80012a8:	4803      	ldr	r0, [pc, #12]	; (80012b8 <__io_putchar+0x20>)
 80012aa:	f005 f9c3 	bl	8006634 <HAL_UART_Transmit>
  return ch;
 80012ae:	687b      	ldr	r3, [r7, #4]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200084b4 	.word	0x200084b4

080012bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012c0:	f001 ff5d 	bl	800317e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c4:	f000 f94e 	bl	8001564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012c8:	f7ff feee 	bl	80010a8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80012cc:	f001 fd96 	bl	8002dfc <MX_USART1_UART_Init>
  MX_DMA_Init();
 80012d0:	f7ff fecc 	bl	800106c <MX_DMA_Init>
  MX_ADC1_Init();
 80012d4:	f7ff fe04 	bl	8000ee0 <MX_ADC1_Init>
  MX_TIM3_Init();
 80012d8:	f001 fc46 	bl	8002b68 <MX_TIM3_Init>
  MX_TIM14_Init();
 80012dc:	f001 fcd8 	bl	8002c90 <MX_TIM14_Init>
  MX_TIM6_Init();
 80012e0:	f001 fc9e 	bl	8002c20 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 80012e4:	f001 fdba 	bl	8002e5c <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80012e8:	f000 f9ce 	bl	8001688 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  //  HAL_ADC_Start(&hadc1);//启动ADC装换
  //  HAL_ADC_PollForConversion(&hadc1, 10);
  //PB0    调�??
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); //A03  底盘车电�??????????????????????????????????????  �??????????????????????????????????????个触�??????????????????????????????????????
 80012ec:	2108      	movs	r1, #8
 80012ee:	4898      	ldr	r0, [pc, #608]	; (8001550 <main+0x294>)
 80012f0:	f004 f9a6 	bl	8005640 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 80012f4:	4b96      	ldr	r3, [pc, #600]	; (8001550 <main+0x294>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2200      	movs	r2, #0
 80012fa:	63da      	str	r2, [r3, #60]	; 0x3c
  // HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); //A05 接地�??????????????????????????????????????电机 �??????????????????????????????????????个触�??????????????????????????????????????
  // __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
  // HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //A06 接地�??????????????????????????????????????电机 另一个触�??????????????????????????????????????
  // __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
  //
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); //A07 储能电机
 80012fc:	2201      	movs	r2, #1
 80012fe:	2110      	movs	r1, #16
 8001300:	4894      	ldr	r0, [pc, #592]	; (8001554 <main+0x298>)
 8001302:	f003 f805 	bl	8004310 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); //A09 分闸线圈
 8001306:	2201      	movs	r2, #1
 8001308:	2120      	movs	r1, #32
 800130a:	4892      	ldr	r0, [pc, #584]	; (8001554 <main+0x298>)
 800130c:	f003 f800 	bl	8004310 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); //A10 合闸线圈
 8001310:	2201      	movs	r2, #1
 8001312:	2140      	movs	r1, #64	; 0x40
 8001314:	488f      	ldr	r0, [pc, #572]	; (8001554 <main+0x298>)
 8001316:	f002 fffb 	bl	8004310 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET); //A11 继电器合�??????????????????????????????????????
 800131a:	2201      	movs	r2, #1
 800131c:	2180      	movs	r1, #128	; 0x80
 800131e:	488d      	ldr	r0, [pc, #564]	; (8001554 <main+0x298>)
 8001320:	f002 fff6 	bl	8004310 <HAL_GPIO_WritePin>

  // PB8 PB9 Pullup 平时高电�????????????????? �?????????????????测低电平  Pulldown 平时低电�????????????????? �?????????????????测高电平
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);    //
 8001324:	2201      	movs	r2, #1
 8001326:	2102      	movs	r1, #2
 8001328:	488a      	ldr	r0, [pc, #552]	; (8001554 <main+0x298>)
 800132a:	f002 fff1 	bl	8004310 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);  //
 800132e:	2200      	movs	r2, #0
 8001330:	2104      	movs	r1, #4
 8001332:	4888      	ldr	r0, [pc, #544]	; (8001554 <main+0x298>)
 8001334:	f002 ffec 	bl	8004310 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);   //
 8001338:	2201      	movs	r2, #1
 800133a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800133e:	4885      	ldr	r0, [pc, #532]	; (8001554 <main+0x298>)
 8001340:	f002 ffe6 	bl	8004310 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); //
 8001344:	2200      	movs	r2, #0
 8001346:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800134a:	4882      	ldr	r0, [pc, #520]	; (8001554 <main+0x298>)
 800134c:	f002 ffe0 	bl	8004310 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);   //
 8001350:	2201      	movs	r2, #1
 8001352:	2102      	movs	r1, #2
 8001354:	4880      	ldr	r0, [pc, #512]	; (8001558 <main+0x29c>)
 8001356:	f002 ffdb 	bl	8004310 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);   //
 800135a:	2201      	movs	r2, #1
 800135c:	2104      	movs	r1, #4
 800135e:	487e      	ldr	r0, [pc, #504]	; (8001558 <main+0x29c>)
 8001360:	f002 ffd6 	bl	8004310 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET); //
 8001364:	2200      	movs	r2, #0
 8001366:	2101      	movs	r1, #1
 8001368:	487b      	ldr	r0, [pc, #492]	; (8001558 <main+0x29c>)
 800136a:	f002 ffd1 	bl	8004310 <HAL_GPIO_WritePin>
    //     	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
    //     	 Delay_ms(1000);
    //     statesum = statesum+1;
    //     printf("%d\n",statesum);
    // HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);   //
    pbx[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);   //pwm speed
 800136e:	2101      	movs	r1, #1
 8001370:	4878      	ldr	r0, [pc, #480]	; (8001554 <main+0x298>)
 8001372:	f002 ffb5 	bl	80042e0 <HAL_GPIO_ReadPin>
 8001376:	4603      	mov	r3, r0
 8001378:	461a      	mov	r2, r3
 800137a:	4b78      	ldr	r3, [pc, #480]	; (800155c <main+0x2a0>)
 800137c:	601a      	str	r2, [r3, #0]
    pbx[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);   //PB1 car1
 800137e:	2102      	movs	r1, #2
 8001380:	4874      	ldr	r0, [pc, #464]	; (8001554 <main+0x298>)
 8001382:	f002 ffad 	bl	80042e0 <HAL_GPIO_ReadPin>
 8001386:	4603      	mov	r3, r0
 8001388:	461a      	mov	r2, r3
 800138a:	4b74      	ldr	r3, [pc, #464]	; (800155c <main+0x2a0>)
 800138c:	605a      	str	r2, [r3, #4]
    pbx[2] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);   //PB2 car2
 800138e:	2104      	movs	r1, #4
 8001390:	4870      	ldr	r0, [pc, #448]	; (8001554 <main+0x298>)
 8001392:	f002 ffa5 	bl	80042e0 <HAL_GPIO_ReadPin>
 8001396:	4603      	mov	r3, r0
 8001398:	461a      	mov	r2, r3
 800139a:	4b70      	ldr	r3, [pc, #448]	; (800155c <main+0x2a0>)
 800139c:	609a      	str	r2, [r3, #8]
    pbx[3] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);   //A14合闸按钮                                         重要5    [按钮  外部中断]
 800139e:	2108      	movs	r1, #8
 80013a0:	486c      	ldr	r0, [pc, #432]	; (8001554 <main+0x298>)
 80013a2:	f002 ff9d 	bl	80042e0 <HAL_GPIO_ReadPin>
 80013a6:	4603      	mov	r3, r0
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b6c      	ldr	r3, [pc, #432]	; (800155c <main+0x2a0>)
 80013ac:	60da      	str	r2, [r3, #12]
    pbx[4] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);   //A23底盘车试验位�??????????????????????????????????????                 {状�?�}
 80013ae:	2110      	movs	r1, #16
 80013b0:	4868      	ldr	r0, [pc, #416]	; (8001554 <main+0x298>)
 80013b2:	f002 ff95 	bl	80042e0 <HAL_GPIO_ReadPin>
 80013b6:	4603      	mov	r3, r0
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b68      	ldr	r3, [pc, #416]	; (800155c <main+0x2a0>)
 80013bc:	611a      	str	r2, [r3, #16]
    pbx[5] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);   //A24底盘车工作位�??????????????????????????????????????                 {状�?�}
 80013be:	2120      	movs	r1, #32
 80013c0:	4864      	ldr	r0, [pc, #400]	; (8001554 <main+0x298>)
 80013c2:	f002 ff8d 	bl	80042e0 <HAL_GPIO_ReadPin>
 80013c6:	4603      	mov	r3, r0
 80013c8:	461a      	mov	r2, r3
 80013ca:	4b64      	ldr	r3, [pc, #400]	; (800155c <main+0x2a0>)
 80013cc:	615a      	str	r2, [r3, #20]
    pbx[6] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);   //A25底盘车遥进按钮手�??????????????????????????????????????                                重要6    [按钮  外部中断]
 80013ce:	2140      	movs	r1, #64	; 0x40
 80013d0:	4860      	ldr	r0, [pc, #384]	; (8001554 <main+0x298>)
 80013d2:	f002 ff85 	bl	80042e0 <HAL_GPIO_ReadPin>
 80013d6:	4603      	mov	r3, r0
 80013d8:	461a      	mov	r2, r3
 80013da:	4b60      	ldr	r3, [pc, #384]	; (800155c <main+0x2a0>)
 80013dc:	619a      	str	r2, [r3, #24]
    pbx[7] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);   //A26底盘车遥出按钮手�??????????????????????????????????????                                重要7    [按钮  外部中断]
 80013de:	2180      	movs	r1, #128	; 0x80
 80013e0:	485c      	ldr	r0, [pc, #368]	; (8001554 <main+0x298>)
 80013e2:	f002 ff7d 	bl	80042e0 <HAL_GPIO_ReadPin>
 80013e6:	4603      	mov	r3, r0
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b5c      	ldr	r3, [pc, #368]	; (800155c <main+0x2a0>)
 80013ec:	61da      	str	r2, [r3, #28]
    pbx[8] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);   //A08 储能电机辅助按钮 要和 A27弹簧未储能按钮配�??????????????????????????????????????       重要4   [按钮  外部中断]
 80013ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013f2:	4858      	ldr	r0, [pc, #352]	; (8001554 <main+0x298>)
 80013f4:	f002 ff74 	bl	80042e0 <HAL_GPIO_ReadPin>
 80013f8:	4603      	mov	r3, r0
 80013fa:	461a      	mov	r2, r3
 80013fc:	4b57      	ldr	r3, [pc, #348]	; (800155c <main+0x2a0>)
 80013fe:	621a      	str	r2, [r3, #32]
    pbx[9] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);   //A12 手动分闸按钮  A21 遥控分闸出口                   重要1    [按钮  外部中断]
 8001400:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001404:	4853      	ldr	r0, [pc, #332]	; (8001554 <main+0x298>)
 8001406:	f002 ff6b 	bl	80042e0 <HAL_GPIO_ReadPin>
 800140a:	4603      	mov	r3, r0
 800140c:	461a      	mov	r2, r3
 800140e:	4b53      	ldr	r3, [pc, #332]	; (800155c <main+0x2a0>)
 8001410:	625a      	str	r2, [r3, #36]	; 0x24
    pbx[10] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10); // PB11 knife1
 8001412:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001416:	484f      	ldr	r0, [pc, #316]	; (8001554 <main+0x298>)
 8001418:	f002 ff62 	bl	80042e0 <HAL_GPIO_ReadPin>
 800141c:	4603      	mov	r3, r0
 800141e:	461a      	mov	r2, r3
 8001420:	4b4e      	ldr	r3, [pc, #312]	; (800155c <main+0x2a0>)
 8001422:	629a      	str	r2, [r3, #40]	; 0x28
    pbx[11] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11); // PB12 knife2
 8001424:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001428:	484a      	ldr	r0, [pc, #296]	; (8001554 <main+0x298>)
 800142a:	f002 ff59 	bl	80042e0 <HAL_GPIO_ReadPin>
 800142e:	4603      	mov	r3, r0
 8001430:	461a      	mov	r2, r3
 8001432:	4b4a      	ldr	r3, [pc, #296]	; (800155c <main+0x2a0>)
 8001434:	62da      	str	r2, [r3, #44]	; 0x2c

    pdx[0] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0);   //A08 储能电机辅助按钮 要和 A27弹簧未储能按钮配�??????????????????????????????????????       重要4   [按钮  外部中断]
 8001436:	2101      	movs	r1, #1
 8001438:	4847      	ldr	r0, [pc, #284]	; (8001558 <main+0x29c>)
 800143a:	f002 ff51 	bl	80042e0 <HAL_GPIO_ReadPin>
 800143e:	4603      	mov	r3, r0
 8001440:	461a      	mov	r2, r3
 8001442:	4b47      	ldr	r3, [pc, #284]	; (8001560 <main+0x2a4>)
 8001444:	601a      	str	r2, [r3, #0]
    pdx[1] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);   //A12 手动分闸按钮  A21 遥控分闸出口                   重要1    [按钮  外部中断]
 8001446:	2102      	movs	r1, #2
 8001448:	4843      	ldr	r0, [pc, #268]	; (8001558 <main+0x29c>)
 800144a:	f002 ff49 	bl	80042e0 <HAL_GPIO_ReadPin>
 800144e:	4603      	mov	r3, r0
 8001450:	461a      	mov	r2, r3
 8001452:	4b43      	ldr	r3, [pc, #268]	; (8001560 <main+0x2a4>)
 8001454:	605a      	str	r2, [r3, #4]
    pdx[2] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2);   //A13 保护分闸按钮                                    重要2    [按钮  外部中断]
 8001456:	2104      	movs	r1, #4
 8001458:	483f      	ldr	r0, [pc, #252]	; (8001558 <main+0x29c>)
 800145a:	f002 ff41 	bl	80042e0 <HAL_GPIO_ReadPin>
 800145e:	4603      	mov	r3, r0
 8001460:	461a      	mov	r2, r3
 8001462:	4b3f      	ldr	r3, [pc, #252]	; (8001560 <main+0x2a4>)
 8001464:	609a      	str	r2, [r3, #8]
    pdx[3] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3);   //A14合闸按钮                                         重要5    [按钮  外部中断]
 8001466:	2108      	movs	r1, #8
 8001468:	483b      	ldr	r0, [pc, #236]	; (8001558 <main+0x29c>)
 800146a:	f002 ff39 	bl	80042e0 <HAL_GPIO_ReadPin>
 800146e:	4603      	mov	r3, r0
 8001470:	461a      	mov	r2, r3
 8001472:	4b3b      	ldr	r3, [pc, #236]	; (8001560 <main+0x2a4>)
 8001474:	60da      	str	r2, [r3, #12]
    pdx[4] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4);   //A23底盘车试验位�??????????????????????????????????????                 {状�?�}
 8001476:	2110      	movs	r1, #16
 8001478:	4837      	ldr	r0, [pc, #220]	; (8001558 <main+0x29c>)
 800147a:	f002 ff31 	bl	80042e0 <HAL_GPIO_ReadPin>
 800147e:	4603      	mov	r3, r0
 8001480:	461a      	mov	r2, r3
 8001482:	4b37      	ldr	r3, [pc, #220]	; (8001560 <main+0x2a4>)
 8001484:	611a      	str	r2, [r3, #16]
    pdx[5] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5);   //A24底盘车工作位�??????????????????????????????????????                 {状�?�}
 8001486:	2120      	movs	r1, #32
 8001488:	4833      	ldr	r0, [pc, #204]	; (8001558 <main+0x29c>)
 800148a:	f002 ff29 	bl	80042e0 <HAL_GPIO_ReadPin>
 800148e:	4603      	mov	r3, r0
 8001490:	461a      	mov	r2, r3
 8001492:	4b33      	ldr	r3, [pc, #204]	; (8001560 <main+0x2a4>)
 8001494:	615a      	str	r2, [r3, #20]
    pdx[6] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6);   //A25底盘车遥进按钮手�??????????????????????????????????????                                重要6    [按钮  外部中断]
 8001496:	2140      	movs	r1, #64	; 0x40
 8001498:	482f      	ldr	r0, [pc, #188]	; (8001558 <main+0x29c>)
 800149a:	f002 ff21 	bl	80042e0 <HAL_GPIO_ReadPin>
 800149e:	4603      	mov	r3, r0
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <main+0x2a4>)
 80014a4:	619a      	str	r2, [r3, #24]
    pdx[7] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7);   //A26底盘车遥出按钮手�??????????????????????????????????????                                重要7    [按钮  外部中断]
 80014a6:	2180      	movs	r1, #128	; 0x80
 80014a8:	482b      	ldr	r0, [pc, #172]	; (8001558 <main+0x29c>)
 80014aa:	f002 ff19 	bl	80042e0 <HAL_GPIO_ReadPin>
 80014ae:	4603      	mov	r3, r0
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b2b      	ldr	r3, [pc, #172]	; (8001560 <main+0x2a4>)
 80014b4:	61da      	str	r2, [r3, #28]
    pdx[8] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);   //A27弹簧未储�??????????????????????????????????????                     {状�?�}
 80014b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ba:	4827      	ldr	r0, [pc, #156]	; (8001558 <main+0x29c>)
 80014bc:	f002 ff10 	bl	80042e0 <HAL_GPIO_ReadPin>
 80014c0:	4603      	mov	r3, r0
 80014c2:	461a      	mov	r2, r3
 80014c4:	4b26      	ldr	r3, [pc, #152]	; (8001560 <main+0x2a4>)
 80014c6:	621a      	str	r2, [r3, #32]
    pdx[9] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9);   //A29遥控允许                       {状�?�}
 80014c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014cc:	4822      	ldr	r0, [pc, #136]	; (8001558 <main+0x29c>)
 80014ce:	f002 ff07 	bl	80042e0 <HAL_GPIO_ReadPin>
 80014d2:	4603      	mov	r3, r0
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b22      	ldr	r3, [pc, #136]	; (8001560 <main+0x2a4>)
 80014d8:	625a      	str	r2, [r3, #36]	; 0x24
    pdx[10] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10); //A30接地�??????????????????????????????????????合闸输入按钮                               重要8    [按钮  外部中断]
 80014da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014de:	481e      	ldr	r0, [pc, #120]	; (8001558 <main+0x29c>)
 80014e0:	f002 fefe 	bl	80042e0 <HAL_GPIO_ReadPin>
 80014e4:	4603      	mov	r3, r0
 80014e6:	461a      	mov	r2, r3
 80014e8:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <main+0x2a4>)
 80014ea:	629a      	str	r2, [r3, #40]	; 0x28
    pdx[11] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11); //A31接地�??????????????????????????????????????分闸输入按钮                               重要3    [按钮  外部中断]
 80014ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014f0:	4819      	ldr	r0, [pc, #100]	; (8001558 <main+0x29c>)
 80014f2:	f002 fef5 	bl	80042e0 <HAL_GPIO_ReadPin>
 80014f6:	4603      	mov	r3, r0
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b19      	ldr	r3, [pc, #100]	; (8001560 <main+0x2a4>)
 80014fc:	62da      	str	r2, [r3, #44]	; 0x2c
    pdx[12] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12); //A32接地�??????????????????????????????????????机构合闸位置（信号快)      {状�?�}
 80014fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001502:	4815      	ldr	r0, [pc, #84]	; (8001558 <main+0x29c>)
 8001504:	f002 feec 	bl	80042e0 <HAL_GPIO_ReadPin>
 8001508:	4603      	mov	r3, r0
 800150a:	461a      	mov	r2, r3
 800150c:	4b14      	ldr	r3, [pc, #80]	; (8001560 <main+0x2a4>)
 800150e:	631a      	str	r2, [r3, #48]	; 0x30
    pdx[13] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13); //A33接地�??????????????????????????????????????机构分闸位置（信号快)      {状�?�}
 8001510:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001514:	4810      	ldr	r0, [pc, #64]	; (8001558 <main+0x29c>)
 8001516:	f002 fee3 	bl	80042e0 <HAL_GPIO_ReadPin>
 800151a:	4603      	mov	r3, r0
 800151c:	461a      	mov	r2, r3
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <main+0x2a4>)
 8001520:	635a      	str	r2, [r3, #52]	; 0x34
    pdx[14] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14); //A34接地�??????????????????????????????????????合闸位置   要和A32 配合    {状�?�}
 8001522:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001526:	480c      	ldr	r0, [pc, #48]	; (8001558 <main+0x29c>)
 8001528:	f002 feda 	bl	80042e0 <HAL_GPIO_ReadPin>
 800152c:	4603      	mov	r3, r0
 800152e:	461a      	mov	r2, r3
 8001530:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <main+0x2a4>)
 8001532:	639a      	str	r2, [r3, #56]	; 0x38
    pdx[15] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15); //A35接地�??????????????????????????????????????分闸位置                  {状�?�}
 8001534:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001538:	4807      	ldr	r0, [pc, #28]	; (8001558 <main+0x29c>)
 800153a:	f002 fed1 	bl	80042e0 <HAL_GPIO_ReadPin>
 800153e:	4603      	mov	r3, r0
 8001540:	461a      	mov	r2, r3
 8001542:	4b07      	ldr	r3, [pc, #28]	; (8001560 <main+0x2a4>)
 8001544:	63da      	str	r2, [r3, #60]	; 0x3c

    HAL_Delay(200);
 8001546:	20c8      	movs	r0, #200	; 0xc8
 8001548:	f001 fe76 	bl	8003238 <HAL_Delay>
    pbx[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);   //pwm speed
 800154c:	e70f      	b.n	800136e <main+0xb2>
 800154e:	bf00      	nop
 8001550:	2000834c 	.word	0x2000834c
 8001554:	40020400 	.word	0x40020400
 8001558:	40020c00 	.word	0x40020c00
 800155c:	200002d4 	.word	0x200002d4
 8001560:	20000304 	.word	0x20000304

08001564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b0b4      	sub	sp, #208	; 0xd0
 8001568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800156e:	2230      	movs	r2, #48	; 0x30
 8001570:	2100      	movs	r1, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f005 fcd8 	bl	8006f28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001578:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001588:	f107 0308 	add.w	r3, r7, #8
 800158c:	2284      	movs	r2, #132	; 0x84
 800158e:	2100      	movs	r1, #0
 8001590:	4618      	mov	r0, r3
 8001592:	f005 fcc9 	bl	8006f28 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001596:	4b3a      	ldr	r3, [pc, #232]	; (8001680 <SystemClock_Config+0x11c>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	4a39      	ldr	r2, [pc, #228]	; (8001680 <SystemClock_Config+0x11c>)
 800159c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a0:	6413      	str	r3, [r2, #64]	; 0x40
 80015a2:	4b37      	ldr	r3, [pc, #220]	; (8001680 <SystemClock_Config+0x11c>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015ae:	4b35      	ldr	r3, [pc, #212]	; (8001684 <SystemClock_Config+0x120>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a34      	ldr	r2, [pc, #208]	; (8001684 <SystemClock_Config+0x120>)
 80015b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	4b32      	ldr	r3, [pc, #200]	; (8001684 <SystemClock_Config+0x120>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015c6:	2302      	movs	r3, #2
 80015c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015cc:	2301      	movs	r3, #1
 80015ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015d2:	2310      	movs	r3, #16
 80015d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d8:	2302      	movs	r3, #2
 80015da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015de:	2300      	movs	r3, #0
 80015e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015e4:	2308      	movs	r3, #8
 80015e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 80015ea:	23d8      	movs	r3, #216	; 0xd8
 80015ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015f0:	2302      	movs	r3, #2
 80015f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80015f6:	2302      	movs	r3, #2
 80015f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015fc:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001600:	4618      	mov	r0, r3
 8001602:	f002 ff05 	bl	8004410 <HAL_RCC_OscConfig>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800160c:	f001 f930 	bl	8002870 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001610:	f002 feae 	bl	8004370 <HAL_PWREx_EnableOverDrive>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800161a:	f001 f929 	bl	8002870 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800161e:	230f      	movs	r3, #15
 8001620:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001624:	2302      	movs	r3, #2
 8001626:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800162a:	2300      	movs	r3, #0
 800162c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001630:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001634:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800163c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001640:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001644:	2107      	movs	r1, #7
 8001646:	4618      	mov	r0, r3
 8001648:	f003 f986 	bl	8004958 <HAL_RCC_ClockConfig>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001652:	f001 f90d 	bl	8002870 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2;
 8001656:	23c0      	movs	r3, #192	; 0xc0
 8001658:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800165a:	2300      	movs	r3, #0
 800165c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800165e:	2300      	movs	r3, #0
 8001660:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001662:	f107 0308 	add.w	r3, r7, #8
 8001666:	4618      	mov	r0, r3
 8001668:	f003 fb4c 	bl	8004d04 <HAL_RCCEx_PeriphCLKConfig>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <SystemClock_Config+0x112>
  {
    Error_Handler();
 8001672:	f001 f8fd 	bl	8002870 <Error_Handler>
  }
}
 8001676:	bf00      	nop
 8001678:	37d0      	adds	r7, #208	; 0xd0
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40023800 	.word	0x40023800
 8001684:	40007000 	.word	0x40007000

08001688 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800168c:	2200      	movs	r2, #0
 800168e:	2105      	movs	r1, #5
 8001690:	2036      	movs	r0, #54	; 0x36
 8001692:	f002 f958 	bl	8003946 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001696:	2036      	movs	r0, #54	; 0x36
 8001698:	f002 f971 	bl	800397e <HAL_NVIC_EnableIRQ>
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HAL_GPIO_EXTI_Callback>:
// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); //A09 分闸线圈
// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); //A10 合闸线圈
// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); //A11 继电器合�??????????????????????????????????????

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	80fb      	strh	r3, [r7, #6]
  ///////////////////*************************************************/////////////////////////////////////////

  //PD0 A08 储能电机辅助按钮 要和 A27弹簧未储能按钮配�????????????????????????????????????????       重要4   [按钮  外部中断]
  //已捕获PD0 弹簧未储�????????????????????????????????????????, 则弹簧储�????????????????????????????????????????  �????????????????????????????????????????�???????????????????????????????????????? 捕捉弹簧现在未储能状态PD8 �???????????????????????????????????????? 远控允许PD9
  //0 弹簧储能 tanhuangchuneng
  if (GPIO_Pin == GPIO_PIN_0)
 80016aa:	88fb      	ldrh	r3, [r7, #6]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d162      	bne.n	8001776 <HAL_GPIO_EXTI_Callback+0xd6>
  {
    HAL_Delay(10);
 80016b0:	200a      	movs	r0, #10
 80016b2:	f001 fdc1 	bl	8003238 <HAL_Delay>
    pdx[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 80016b6:	2101      	movs	r1, #1
 80016b8:	48b5      	ldr	r0, [pc, #724]	; (8001990 <HAL_GPIO_EXTI_Callback+0x2f0>)
 80016ba:	f002 fe11 	bl	80042e0 <HAL_GPIO_ReadPin>
 80016be:	4603      	mov	r3, r0
 80016c0:	461a      	mov	r2, r3
 80016c2:	4bb4      	ldr	r3, [pc, #720]	; (8001994 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80016c4:	601a      	str	r2, [r3, #0]
    pbx[4] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 80016c6:	2110      	movs	r1, #16
 80016c8:	48b1      	ldr	r0, [pc, #708]	; (8001990 <HAL_GPIO_EXTI_Callback+0x2f0>)
 80016ca:	f002 fe09 	bl	80042e0 <HAL_GPIO_ReadPin>
 80016ce:	4603      	mov	r3, r0
 80016d0:	461a      	mov	r2, r3
 80016d2:	4bb1      	ldr	r3, [pc, #708]	; (8001998 <HAL_GPIO_EXTI_Callback+0x2f8>)
 80016d4:	611a      	str	r2, [r3, #16]
    pdx[8] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);
 80016d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016da:	48b0      	ldr	r0, [pc, #704]	; (800199c <HAL_GPIO_EXTI_Callback+0x2fc>)
 80016dc:	f002 fe00 	bl	80042e0 <HAL_GPIO_ReadPin>
 80016e0:	4603      	mov	r3, r0
 80016e2:	461a      	mov	r2, r3
 80016e4:	4bab      	ldr	r3, [pc, #684]	; (8001994 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80016e6:	621a      	str	r2, [r3, #32]
    pdx[9] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9);
 80016e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016ec:	48ab      	ldr	r0, [pc, #684]	; (800199c <HAL_GPIO_EXTI_Callback+0x2fc>)
 80016ee:	f002 fdf7 	bl	80042e0 <HAL_GPIO_ReadPin>
 80016f2:	4603      	mov	r3, r0
 80016f4:	461a      	mov	r2, r3
 80016f6:	4ba7      	ldr	r3, [pc, #668]	; (8001994 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80016f8:	625a      	str	r2, [r3, #36]	; 0x24

    if (pdx[8] && (!pdx[9]))
 80016fa:	4ba6      	ldr	r3, [pc, #664]	; (8001994 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d01a      	beq.n	8001738 <HAL_GPIO_EXTI_Callback+0x98>
 8001702:	4ba4      	ldr	r3, [pc, #656]	; (8001994 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001706:	2b00      	cmp	r3, #0
 8001708:	d116      	bne.n	8001738 <HAL_GPIO_EXTI_Callback+0x98>
    {
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800170a:	2200      	movs	r2, #0
 800170c:	2110      	movs	r1, #16
 800170e:	48a0      	ldr	r0, [pc, #640]	; (8001990 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001710:	f002 fdfe 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_Delay(2000);
 8001714:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001718:	f001 fd8e 	bl	8003238 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800171c:	2201      	movs	r2, #1
 800171e:	2110      	movs	r1, #16
 8001720:	489b      	ldr	r0, [pc, #620]	; (8001990 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001722:	f002 fdf5 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_Delay(3000);
 8001726:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800172a:	f001 fd85 	bl	8003238 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_SET);
 800172e:	2201      	movs	r2, #1
 8001730:	2101      	movs	r1, #1
 8001732:	489b      	ldr	r0, [pc, #620]	; (80019a0 <HAL_GPIO_EXTI_Callback+0x300>)
 8001734:	f002 fdec 	bl	8004310 <HAL_GPIO_WritePin>
    }
    if (pdx[8] && pdx[9])
 8001738:	4b96      	ldr	r3, [pc, #600]	; (8001994 <HAL_GPIO_EXTI_Callback+0x2f4>)
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d01a      	beq.n	8001776 <HAL_GPIO_EXTI_Callback+0xd6>
 8001740:	4b94      	ldr	r3, [pc, #592]	; (8001994 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	2b00      	cmp	r3, #0
 8001746:	d016      	beq.n	8001776 <HAL_GPIO_EXTI_Callback+0xd6>
    {
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001748:	2200      	movs	r2, #0
 800174a:	2110      	movs	r1, #16
 800174c:	4890      	ldr	r0, [pc, #576]	; (8001990 <HAL_GPIO_EXTI_Callback+0x2f0>)
 800174e:	f002 fddf 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_Delay(5000);
 8001752:	f241 3088 	movw	r0, #5000	; 0x1388
 8001756:	f001 fd6f 	bl	8003238 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800175a:	2201      	movs	r2, #1
 800175c:	2110      	movs	r1, #16
 800175e:	488c      	ldr	r0, [pc, #560]	; (8001990 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001760:	f002 fdd6 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_Delay(2000);
 8001764:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001768:	f001 fd66 	bl	8003238 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0, GPIO_PIN_SET);
 800176c:	2201      	movs	r2, #1
 800176e:	2101      	movs	r1, #1
 8001770:	488b      	ldr	r0, [pc, #556]	; (80019a0 <HAL_GPIO_EXTI_Callback+0x300>)
 8001772:	f002 fdcd 	bl	8004310 <HAL_GPIO_WritePin>

  //PD1 A12 手动分闸按钮  A21 遥控分闸出口                   重要1    [按钮  外部中断]
  //已捕获PD1 手动分闸,直接分闸 �???????????????????????????????????????? !远控允许PD9必须�?????????????????                                                          ???????????????????????0 �???????????????????????????????????????? 底盘车工作位置PD5
  //由于紧�?�分�???????????????????????????????????????? 不�?�虑以下情况:  �???????????????????????????????????????? PD13 接地�????????????????????????????????????????机构分闸位置（信号快)  �???????????????????????????????????????? PD15 接地�????????????????????????????????????????分闸位置 �???????????????????????????????????????? PD3 合闸按钮必须�????????????????????????????????????????0
  //1 手动分闸 shoudongfenzha
  if (GPIO_Pin == GPIO_PIN_1)
 8001776:	88fb      	ldrh	r3, [r7, #6]
 8001778:	2b02      	cmp	r3, #2
 800177a:	d158      	bne.n	800182e <HAL_GPIO_EXTI_Callback+0x18e>
  {
    pdx[5] = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5);
 800177c:	2120      	movs	r1, #32
 800177e:	4887      	ldr	r0, [pc, #540]	; (800199c <HAL_GPIO_EXTI_Callback+0x2fc>)
 8001780:	f002 fdae 	bl	80042e0 <HAL_GPIO_ReadPin>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	bf0c      	ite	eq
 800178a:	2301      	moveq	r3, #1
 800178c:	2300      	movne	r3, #0
 800178e:	b2db      	uxtb	r3, r3
 8001790:	461a      	mov	r2, r3
 8001792:	4b80      	ldr	r3, [pc, #512]	; (8001994 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001794:	615a      	str	r2, [r3, #20]
    pdx[9] = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9);
 8001796:	f44f 7100 	mov.w	r1, #512	; 0x200
 800179a:	4880      	ldr	r0, [pc, #512]	; (800199c <HAL_GPIO_EXTI_Callback+0x2fc>)
 800179c:	f002 fda0 	bl	80042e0 <HAL_GPIO_ReadPin>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	bf0c      	ite	eq
 80017a6:	2301      	moveq	r3, #1
 80017a8:	2300      	movne	r3, #0
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	461a      	mov	r2, r3
 80017ae:	4b79      	ldr	r3, [pc, #484]	; (8001994 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80017b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (pdx[5] && (!pdx[9]))
 80017b2:	4b78      	ldr	r3, [pc, #480]	; (8001994 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d01a      	beq.n	80017f0 <HAL_GPIO_EXTI_Callback+0x150>
 80017ba:	4b76      	ldr	r3, [pc, #472]	; (8001994 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80017bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d116      	bne.n	80017f0 <HAL_GPIO_EXTI_Callback+0x150>
    {
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80017c2:	2201      	movs	r2, #1
 80017c4:	2120      	movs	r1, #32
 80017c6:	4872      	ldr	r0, [pc, #456]	; (8001990 <HAL_GPIO_EXTI_Callback+0x2f0>)
 80017c8:	f002 fda2 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_Delay(1000);
 80017cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017d0:	f001 fd32 	bl	8003238 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80017d4:	2200      	movs	r2, #0
 80017d6:	2120      	movs	r1, #32
 80017d8:	486d      	ldr	r0, [pc, #436]	; (8001990 <HAL_GPIO_EXTI_Callback+0x2f0>)
 80017da:	f002 fd99 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_Delay(5000);
 80017de:	f241 3088 	movw	r0, #5000	; 0x1388
 80017e2:	f001 fd29 	bl	8003238 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 80017e6:	2201      	movs	r2, #1
 80017e8:	2102      	movs	r1, #2
 80017ea:	486c      	ldr	r0, [pc, #432]	; (800199c <HAL_GPIO_EXTI_Callback+0x2fc>)
 80017ec:	f002 fd90 	bl	8004310 <HAL_GPIO_WritePin>
    }
    if (pdx[5] && pdx[9])
 80017f0:	4b68      	ldr	r3, [pc, #416]	; (8001994 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d01a      	beq.n	800182e <HAL_GPIO_EXTI_Callback+0x18e>
 80017f8:	4b66      	ldr	r3, [pc, #408]	; (8001994 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80017fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d016      	beq.n	800182e <HAL_GPIO_EXTI_Callback+0x18e>
    {
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001800:	2201      	movs	r2, #1
 8001802:	2120      	movs	r1, #32
 8001804:	4862      	ldr	r0, [pc, #392]	; (8001990 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001806:	f002 fd83 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_Delay(1000);
 800180a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800180e:	f001 fd13 	bl	8003238 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001812:	2200      	movs	r2, #0
 8001814:	2120      	movs	r1, #32
 8001816:	485e      	ldr	r0, [pc, #376]	; (8001990 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001818:	f002 fd7a 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_Delay(5000);
 800181c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001820:	f001 fd0a 	bl	8003238 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 8001824:	2201      	movs	r2, #1
 8001826:	2102      	movs	r1, #2
 8001828:	485c      	ldr	r0, [pc, #368]	; (800199c <HAL_GPIO_EXTI_Callback+0x2fc>)
 800182a:	f002 fd71 	bl	8004310 <HAL_GPIO_WritePin>

  //PD2 A13 保护分闸按钮                                    重要2    [按钮  外部中断]
  //已捕获PD1 手动分闸,直接分闸 �???????????????????????????????????????? 远控允许PD9 �???????????????????????????????????????? 底盘车工作位置PD5
  //由于非紧急分�???????????????????????????????????????? 考虑以下情况:  �???????????????????????????????????????? PD13 接地�????????????????????????????????????????机构分闸位置（信号快)  �???????????????????????????????????????? PD15 接地�????????????????????????????????????????分闸位置 �???????????????????????????????????????? PD3 !合闸按钮必须�????????????????????????????????????????0
  //2 保护分闸 baohufenzha
  if (GPIO_Pin == GPIO_PIN_2)
 800182e:	88fb      	ldrh	r3, [r7, #6]
 8001830:	2b04      	cmp	r3, #4
 8001832:	d158      	bne.n	80018e6 <HAL_GPIO_EXTI_Callback+0x246>
  {
    pdx[5] = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5);
 8001834:	2120      	movs	r1, #32
 8001836:	4859      	ldr	r0, [pc, #356]	; (800199c <HAL_GPIO_EXTI_Callback+0x2fc>)
 8001838:	f002 fd52 	bl	80042e0 <HAL_GPIO_ReadPin>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	bf0c      	ite	eq
 8001842:	2301      	moveq	r3, #1
 8001844:	2300      	movne	r3, #0
 8001846:	b2db      	uxtb	r3, r3
 8001848:	461a      	mov	r2, r3
 800184a:	4b52      	ldr	r3, [pc, #328]	; (8001994 <HAL_GPIO_EXTI_Callback+0x2f4>)
 800184c:	615a      	str	r2, [r3, #20]
    pdx[9] = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9);
 800184e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001852:	4852      	ldr	r0, [pc, #328]	; (800199c <HAL_GPIO_EXTI_Callback+0x2fc>)
 8001854:	f002 fd44 	bl	80042e0 <HAL_GPIO_ReadPin>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	bf0c      	ite	eq
 800185e:	2301      	moveq	r3, #1
 8001860:	2300      	movne	r3, #0
 8001862:	b2db      	uxtb	r3, r3
 8001864:	461a      	mov	r2, r3
 8001866:	4b4b      	ldr	r3, [pc, #300]	; (8001994 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001868:	625a      	str	r2, [r3, #36]	; 0x24
    if (pdx[5] && pdx[9])
 800186a:	4b4a      	ldr	r3, [pc, #296]	; (8001994 <HAL_GPIO_EXTI_Callback+0x2f4>)
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d01a      	beq.n	80018a8 <HAL_GPIO_EXTI_Callback+0x208>
 8001872:	4b48      	ldr	r3, [pc, #288]	; (8001994 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001876:	2b00      	cmp	r3, #0
 8001878:	d016      	beq.n	80018a8 <HAL_GPIO_EXTI_Callback+0x208>
    {
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800187a:	2201      	movs	r2, #1
 800187c:	2120      	movs	r1, #32
 800187e:	4844      	ldr	r0, [pc, #272]	; (8001990 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001880:	f002 fd46 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_Delay(1000);
 8001884:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001888:	f001 fcd6 	bl	8003238 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800188c:	2200      	movs	r2, #0
 800188e:	2120      	movs	r1, #32
 8001890:	483f      	ldr	r0, [pc, #252]	; (8001990 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001892:	f002 fd3d 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_Delay(5000);
 8001896:	f241 3088 	movw	r0, #5000	; 0x1388
 800189a:	f001 fccd 	bl	8003238 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 800189e:	2201      	movs	r2, #1
 80018a0:	2104      	movs	r1, #4
 80018a2:	483e      	ldr	r0, [pc, #248]	; (800199c <HAL_GPIO_EXTI_Callback+0x2fc>)
 80018a4:	f002 fd34 	bl	8004310 <HAL_GPIO_WritePin>
    }
    if (pdx[5] && (!pdx[9]))
 80018a8:	4b3a      	ldr	r3, [pc, #232]	; (8001994 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d01a      	beq.n	80018e6 <HAL_GPIO_EXTI_Callback+0x246>
 80018b0:	4b38      	ldr	r3, [pc, #224]	; (8001994 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80018b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d116      	bne.n	80018e6 <HAL_GPIO_EXTI_Callback+0x246>
    {
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80018b8:	2201      	movs	r2, #1
 80018ba:	2120      	movs	r1, #32
 80018bc:	4834      	ldr	r0, [pc, #208]	; (8001990 <HAL_GPIO_EXTI_Callback+0x2f0>)
 80018be:	f002 fd27 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_Delay(1000);
 80018c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018c6:	f001 fcb7 	bl	8003238 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2120      	movs	r1, #32
 80018ce:	4830      	ldr	r0, [pc, #192]	; (8001990 <HAL_GPIO_EXTI_Callback+0x2f0>)
 80018d0:	f002 fd1e 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_Delay(5000);
 80018d4:	f241 3088 	movw	r0, #5000	; 0x1388
 80018d8:	f001 fcae 	bl	8003238 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 80018dc:	2201      	movs	r2, #1
 80018de:	2104      	movs	r1, #4
 80018e0:	482e      	ldr	r0, [pc, #184]	; (800199c <HAL_GPIO_EXTI_Callback+0x2fc>)
 80018e2:	f002 fd15 	bl	8004310 <HAL_GPIO_WritePin>

  //PD3 A14合闸按钮                                         重要5    [按钮  外部中断]
  //已捕获PD3 合闸,直接合闸 �???????????????????????????????????????? 远控允许PD9 �???????????????????????????????????????? 底盘车工作位置PD5 �???????????????????????????????????????? 底盘车在试验位置PD4
  //由于非紧急合�???????????????????????????????????????? 考虑以下情况:      �???????????????????????????????????????? PD15 接地�????????????????????????????????????????分闸位置 �????????????????????????????????????????     �???????????????????????????????????????? PD2 !保护分闸按钮必须�????????????????????????????????????????0 �???????????????????????????????????????? PD8!弹簧未储能必�???????????????????????????????????????? 0
  //3 手动合闸 shoudonghezha
  if (GPIO_Pin == GPIO_PIN_3)
 80018e6:	88fb      	ldrh	r3, [r7, #6]
 80018e8:	2b08      	cmp	r3, #8
 80018ea:	f040 80a5 	bne.w	8001a38 <HAL_GPIO_EXTI_Callback+0x398>
  {
    pdx[4] = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4);
 80018ee:	2110      	movs	r1, #16
 80018f0:	482a      	ldr	r0, [pc, #168]	; (800199c <HAL_GPIO_EXTI_Callback+0x2fc>)
 80018f2:	f002 fcf5 	bl	80042e0 <HAL_GPIO_ReadPin>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	bf0c      	ite	eq
 80018fc:	2301      	moveq	r3, #1
 80018fe:	2300      	movne	r3, #0
 8001900:	b2db      	uxtb	r3, r3
 8001902:	461a      	mov	r2, r3
 8001904:	4b23      	ldr	r3, [pc, #140]	; (8001994 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001906:	611a      	str	r2, [r3, #16]
    pdx[5] = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5);
 8001908:	2120      	movs	r1, #32
 800190a:	4824      	ldr	r0, [pc, #144]	; (800199c <HAL_GPIO_EXTI_Callback+0x2fc>)
 800190c:	f002 fce8 	bl	80042e0 <HAL_GPIO_ReadPin>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	bf0c      	ite	eq
 8001916:	2301      	moveq	r3, #1
 8001918:	2300      	movne	r3, #0
 800191a:	b2db      	uxtb	r3, r3
 800191c:	461a      	mov	r2, r3
 800191e:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001920:	615a      	str	r2, [r3, #20]
    pdx[9] = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9);
 8001922:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001926:	481d      	ldr	r0, [pc, #116]	; (800199c <HAL_GPIO_EXTI_Callback+0x2fc>)
 8001928:	f002 fcda 	bl	80042e0 <HAL_GPIO_ReadPin>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	bf0c      	ite	eq
 8001932:	2301      	moveq	r3, #1
 8001934:	2300      	movne	r3, #0
 8001936:	b2db      	uxtb	r3, r3
 8001938:	461a      	mov	r2, r3
 800193a:	4b16      	ldr	r3, [pc, #88]	; (8001994 <HAL_GPIO_EXTI_Callback+0x2f4>)
 800193c:	625a      	str	r2, [r3, #36]	; 0x24
    pdx[15] = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15);
 800193e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001942:	4816      	ldr	r0, [pc, #88]	; (800199c <HAL_GPIO_EXTI_Callback+0x2fc>)
 8001944:	f002 fccc 	bl	80042e0 <HAL_GPIO_ReadPin>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	bf0c      	ite	eq
 800194e:	2301      	moveq	r3, #1
 8001950:	2300      	movne	r3, #0
 8001952:	b2db      	uxtb	r3, r3
 8001954:	461a      	mov	r2, r3
 8001956:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001958:	63da      	str	r2, [r3, #60]	; 0x3c
    pdx[8] = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);
 800195a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800195e:	480f      	ldr	r0, [pc, #60]	; (800199c <HAL_GPIO_EXTI_Callback+0x2fc>)
 8001960:	f002 fcbe 	bl	80042e0 <HAL_GPIO_ReadPin>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	bf0c      	ite	eq
 800196a:	2301      	moveq	r3, #1
 800196c:	2300      	movne	r3, #0
 800196e:	b2db      	uxtb	r3, r3
 8001970:	461a      	mov	r2, r3
 8001972:	4b08      	ldr	r3, [pc, #32]	; (8001994 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001974:	621a      	str	r2, [r3, #32]
    if ((pdx[5] || pdx[4]) && pdx[15] && (!pdx[8]) && (!pdx[9]))
 8001976:	4b07      	ldr	r3, [pc, #28]	; (8001994 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d103      	bne.n	8001986 <HAL_GPIO_EXTI_Callback+0x2e6>
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d02d      	beq.n	80019e2 <HAL_GPIO_EXTI_Callback+0x342>
 8001986:	4b03      	ldr	r3, [pc, #12]	; (8001994 <HAL_GPIO_EXTI_Callback+0x2f4>)
 8001988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800198a:	2b00      	cmp	r3, #0
 800198c:	d029      	beq.n	80019e2 <HAL_GPIO_EXTI_Callback+0x342>
 800198e:	e009      	b.n	80019a4 <HAL_GPIO_EXTI_Callback+0x304>
 8001990:	40020400 	.word	0x40020400
 8001994:	20000304 	.word	0x20000304
 8001998:	200002d4 	.word	0x200002d4
 800199c:	40020c00 	.word	0x40020c00
 80019a0:	40021000 	.word	0x40021000
 80019a4:	4bb8      	ldr	r3, [pc, #736]	; (8001c88 <HAL_GPIO_EXTI_Callback+0x5e8>)
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d11a      	bne.n	80019e2 <HAL_GPIO_EXTI_Callback+0x342>
 80019ac:	4bb6      	ldr	r3, [pc, #728]	; (8001c88 <HAL_GPIO_EXTI_Callback+0x5e8>)
 80019ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d116      	bne.n	80019e2 <HAL_GPIO_EXTI_Callback+0x342>
    {
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); //A10 合闸线圈
 80019b4:	2201      	movs	r2, #1
 80019b6:	2140      	movs	r1, #64	; 0x40
 80019b8:	48b4      	ldr	r0, [pc, #720]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5ec>)
 80019ba:	f002 fca9 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_Delay(1000);
 80019be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019c2:	f001 fc39 	bl	8003238 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); //A10 合闸线圈
 80019c6:	2200      	movs	r2, #0
 80019c8:	2140      	movs	r1, #64	; 0x40
 80019ca:	48b0      	ldr	r0, [pc, #704]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5ec>)
 80019cc:	f002 fca0 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_Delay(5000);
 80019d0:	f241 3088 	movw	r0, #5000	; 0x1388
 80019d4:	f001 fc30 	bl	8003238 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 80019d8:	2201      	movs	r2, #1
 80019da:	2108      	movs	r1, #8
 80019dc:	48ac      	ldr	r0, [pc, #688]	; (8001c90 <HAL_GPIO_EXTI_Callback+0x5f0>)
 80019de:	f002 fc97 	bl	8004310 <HAL_GPIO_WritePin>
    }
    if ((pdx[5] || pdx[4]) && pdx[15] && (!pdx[8]) && pdx[9])
 80019e2:	4ba9      	ldr	r3, [pc, #676]	; (8001c88 <HAL_GPIO_EXTI_Callback+0x5e8>)
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d103      	bne.n	80019f2 <HAL_GPIO_EXTI_Callback+0x352>
 80019ea:	4ba7      	ldr	r3, [pc, #668]	; (8001c88 <HAL_GPIO_EXTI_Callback+0x5e8>)
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d022      	beq.n	8001a38 <HAL_GPIO_EXTI_Callback+0x398>
 80019f2:	4ba5      	ldr	r3, [pc, #660]	; (8001c88 <HAL_GPIO_EXTI_Callback+0x5e8>)
 80019f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d01e      	beq.n	8001a38 <HAL_GPIO_EXTI_Callback+0x398>
 80019fa:	4ba3      	ldr	r3, [pc, #652]	; (8001c88 <HAL_GPIO_EXTI_Callback+0x5e8>)
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d11a      	bne.n	8001a38 <HAL_GPIO_EXTI_Callback+0x398>
 8001a02:	4ba1      	ldr	r3, [pc, #644]	; (8001c88 <HAL_GPIO_EXTI_Callback+0x5e8>)
 8001a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d016      	beq.n	8001a38 <HAL_GPIO_EXTI_Callback+0x398>
    {
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); //A10 合闸线圈
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	2140      	movs	r1, #64	; 0x40
 8001a0e:	489f      	ldr	r0, [pc, #636]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5ec>)
 8001a10:	f002 fc7e 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_Delay(1000);
 8001a14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a18:	f001 fc0e 	bl	8003238 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); //A10 合闸线圈
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2140      	movs	r1, #64	; 0x40
 8001a20:	489a      	ldr	r0, [pc, #616]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5ec>)
 8001a22:	f002 fc75 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_Delay(5000);
 8001a26:	f241 3088 	movw	r0, #5000	; 0x1388
 8001a2a:	f001 fc05 	bl	8003238 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);
 8001a2e:	2201      	movs	r2, #1
 8001a30:	2108      	movs	r1, #8
 8001a32:	4897      	ldr	r0, [pc, #604]	; (8001c90 <HAL_GPIO_EXTI_Callback+0x5f0>)
 8001a34:	f002 fc6c 	bl	8004310 <HAL_GPIO_WritePin>
  // !远控允许PD9必为0  �???????????????????????????????????????? 底盘车工作位置PD5 �????????????????????????????????????????
  // PB7继电器�?�开关必须使能为1 �????????????????????????????????????????  !PB6 断路器必须不合闸 �????????????????????????????????????????
  //PD13 接地�????????????????????????????????????????机构分闸位置（信号快)  �????????????????????????????????????????
  //PD15 接地�????????????????????????????????????????分闸位置
  // 6 底盘车摇�???????????????? dipancheyaochu
  if (GPIO_Pin == GPIO_PIN_6)
 8001a38:	88fb      	ldrh	r3, [r7, #6]
 8001a3a:	2b40      	cmp	r3, #64	; 0x40
 8001a3c:	f040 8232 	bne.w	8001ea4 <HAL_GPIO_EXTI_Callback+0x804>
  {
    pdx[4] = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4);
 8001a40:	2110      	movs	r1, #16
 8001a42:	4893      	ldr	r0, [pc, #588]	; (8001c90 <HAL_GPIO_EXTI_Callback+0x5f0>)
 8001a44:	f002 fc4c 	bl	80042e0 <HAL_GPIO_ReadPin>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	bf0c      	ite	eq
 8001a4e:	2301      	moveq	r3, #1
 8001a50:	2300      	movne	r3, #0
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	461a      	mov	r2, r3
 8001a56:	4b8c      	ldr	r3, [pc, #560]	; (8001c88 <HAL_GPIO_EXTI_Callback+0x5e8>)
 8001a58:	611a      	str	r2, [r3, #16]
    pdx[5] = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5);
 8001a5a:	2120      	movs	r1, #32
 8001a5c:	488c      	ldr	r0, [pc, #560]	; (8001c90 <HAL_GPIO_EXTI_Callback+0x5f0>)
 8001a5e:	f002 fc3f 	bl	80042e0 <HAL_GPIO_ReadPin>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	bf0c      	ite	eq
 8001a68:	2301      	moveq	r3, #1
 8001a6a:	2300      	movne	r3, #0
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	461a      	mov	r2, r3
 8001a70:	4b85      	ldr	r3, [pc, #532]	; (8001c88 <HAL_GPIO_EXTI_Callback+0x5e8>)
 8001a72:	615a      	str	r2, [r3, #20]
    pdx[9] = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9);
 8001a74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a78:	4885      	ldr	r0, [pc, #532]	; (8001c90 <HAL_GPIO_EXTI_Callback+0x5f0>)
 8001a7a:	f002 fc31 	bl	80042e0 <HAL_GPIO_ReadPin>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	bf0c      	ite	eq
 8001a84:	2301      	moveq	r3, #1
 8001a86:	2300      	movne	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	4b7e      	ldr	r3, [pc, #504]	; (8001c88 <HAL_GPIO_EXTI_Callback+0x5e8>)
 8001a8e:	625a      	str	r2, [r3, #36]	; 0x24
    pdx[15] = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15);
 8001a90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a94:	487e      	ldr	r0, [pc, #504]	; (8001c90 <HAL_GPIO_EXTI_Callback+0x5f0>)
 8001a96:	f002 fc23 	bl	80042e0 <HAL_GPIO_ReadPin>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	bf0c      	ite	eq
 8001aa0:	2301      	moveq	r3, #1
 8001aa2:	2300      	movne	r3, #0
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4b77      	ldr	r3, [pc, #476]	; (8001c88 <HAL_GPIO_EXTI_Callback+0x5e8>)
 8001aaa:	63da      	str	r2, [r3, #60]	; 0x3c

    pbx[7] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
 8001aac:	2180      	movs	r1, #128	; 0x80
 8001aae:	4877      	ldr	r0, [pc, #476]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5ec>)
 8001ab0:	f002 fc16 	bl	80042e0 <HAL_GPIO_ReadPin>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	4b76      	ldr	r3, [pc, #472]	; (8001c94 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8001aba:	61da      	str	r2, [r3, #28]
    pbx[6] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8001abc:	2140      	movs	r1, #64	; 0x40
 8001abe:	4873      	ldr	r0, [pc, #460]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5ec>)
 8001ac0:	f002 fc0e 	bl	80042e0 <HAL_GPIO_ReadPin>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	4b72      	ldr	r3, [pc, #456]	; (8001c94 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8001aca:	619a      	str	r2, [r3, #24]

    //工作位置摇出
    if (pdx[5] && pbx[7] && (!pbx[6]) && pdx[15] && (!pdx[9]))
 8001acc:	4b6e      	ldr	r3, [pc, #440]	; (8001c88 <HAL_GPIO_EXTI_Callback+0x5e8>)
 8001ace:	695b      	ldr	r3, [r3, #20]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d071      	beq.n	8001bb8 <HAL_GPIO_EXTI_Callback+0x518>
 8001ad4:	4b6f      	ldr	r3, [pc, #444]	; (8001c94 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8001ad6:	69db      	ldr	r3, [r3, #28]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d06d      	beq.n	8001bb8 <HAL_GPIO_EXTI_Callback+0x518>
 8001adc:	4b6d      	ldr	r3, [pc, #436]	; (8001c94 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d169      	bne.n	8001bb8 <HAL_GPIO_EXTI_Callback+0x518>
 8001ae4:	4b68      	ldr	r3, [pc, #416]	; (8001c88 <HAL_GPIO_EXTI_Callback+0x5e8>)
 8001ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d065      	beq.n	8001bb8 <HAL_GPIO_EXTI_Callback+0x518>
 8001aec:	4b66      	ldr	r3, [pc, #408]	; (8001c88 <HAL_GPIO_EXTI_Callback+0x5e8>)
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d161      	bne.n	8001bb8 <HAL_GPIO_EXTI_Callback+0x518>
    {
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); //PB0    A03  底盘车电�????????????????????????????????????????  �????????????????????????????????????????个触�????????????????????????????????????????
 8001af4:	2108      	movs	r1, #8
 8001af6:	4868      	ldr	r0, [pc, #416]	; (8001c98 <HAL_GPIO_EXTI_Callback+0x5f8>)
 8001af8:	f003 fda2 	bl	8005640 <HAL_TIM_PWM_Start>
                                                // // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
                                                // // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
      // PB0   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001afc:	4b66      	ldr	r3, [pc, #408]	; (8001c98 <HAL_GPIO_EXTI_Callback+0x5f8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2200      	movs	r2, #0
 8001b02:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      // PB1   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
      HAL_Delay(1);
 8001b04:	2001      	movs	r0, #1
 8001b06:	f001 fb97 	bl	8003238 <HAL_Delay>
      //init motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   //
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	2102      	movs	r1, #2
 8001b0e:	485f      	ldr	r0, [pc, #380]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5ec>)
 8001b10:	f002 fbfe 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); //
 8001b14:	2200      	movs	r2, #0
 8001b16:	2104      	movs	r1, #4
 8001b18:	485c      	ldr	r0, [pc, #368]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5ec>)
 8001b1a:	f002 fbf9 	bl	8004310 <HAL_GPIO_WritePin>

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1000);
 8001b1e:	4b5e      	ldr	r3, [pc, #376]	; (8001c98 <HAL_GPIO_EXTI_Callback+0x5f8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b26:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_Delay(1);
 8001b28:	2001      	movs	r0, #1
 8001b2a:	f001 fb85 	bl	8003238 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8001b2e:	2201      	movs	r2, #1
 8001b30:	2104      	movs	r1, #4
 8001b32:	4856      	ldr	r0, [pc, #344]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5ec>)
 8001b34:	f002 fbec 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	2102      	movs	r1, #2
 8001b3c:	4853      	ldr	r0, [pc, #332]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5ec>)
 8001b3e:	f002 fbe7 	bl	8004310 <HAL_GPIO_WritePin>

      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2104      	movs	r1, #4
 8001b46:	4851      	ldr	r0, [pc, #324]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5ec>)
 8001b48:	f002 fbe2 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_Delay(5000);
 8001b4c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001b50:	f001 fb72 	bl	8003238 <HAL_Delay>
      //init motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   //
 8001b54:	2201      	movs	r2, #1
 8001b56:	2102      	movs	r1, #2
 8001b58:	484c      	ldr	r0, [pc, #304]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5ec>)
 8001b5a:	f002 fbd9 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); //
 8001b5e:	2200      	movs	r2, #0
 8001b60:	2104      	movs	r1, #4
 8001b62:	484a      	ldr	r0, [pc, #296]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5ec>)
 8001b64:	f002 fbd4 	bl	8004310 <HAL_GPIO_WritePin>

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 500);
 8001b68:	4b4b      	ldr	r3, [pc, #300]	; (8001c98 <HAL_GPIO_EXTI_Callback+0x5f8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001b70:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2104      	movs	r1, #4
 8001b76:	4845      	ldr	r0, [pc, #276]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5ec>)
 8001b78:	f002 fbca 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2102      	movs	r1, #2
 8001b80:	4842      	ldr	r0, [pc, #264]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5ec>)
 8001b82:	f002 fbc5 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_Delay(100);
 8001b86:	2064      	movs	r0, #100	; 0x64
 8001b88:	f001 fb56 	bl	8003238 <HAL_Delay>
      //init motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   //
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	2102      	movs	r1, #2
 8001b90:	483e      	ldr	r0, [pc, #248]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5ec>)
 8001b92:	f002 fbbd 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); //
 8001b96:	2200      	movs	r2, #0
 8001b98:	2104      	movs	r1, #4
 8001b9a:	483c      	ldr	r0, [pc, #240]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5ec>)
 8001b9c:	f002 fbb8 	bl	8004310 <HAL_GPIO_WritePin>
      //防抱�????????????????????????????????????????

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001ba0:	4b3d      	ldr	r3, [pc, #244]	; (8001c98 <HAL_GPIO_EXTI_Callback+0x5f8>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8001ba8:	2108      	movs	r1, #8
 8001baa:	483b      	ldr	r0, [pc, #236]	; (8001c98 <HAL_GPIO_EXTI_Callback+0x5f8>)
 8001bac:	f003 fe42 	bl	8005834 <HAL_TIM_PWM_Stop>

      //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      HAL_Delay(3000);
 8001bb0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001bb4:	f001 fb40 	bl	8003238 <HAL_Delay>
    }
    //非工作位�???????????????? 非试验位置摇�????????????????
    if ((!pdx[5]) && (!pdx[4]) && pbx[7] && (!pbx[6]) && pdx[15] && (!pdx[9]))
 8001bb8:	4b33      	ldr	r3, [pc, #204]	; (8001c88 <HAL_GPIO_EXTI_Callback+0x5e8>)
 8001bba:	695b      	ldr	r3, [r3, #20]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f040 8081 	bne.w	8001cc4 <HAL_GPIO_EXTI_Callback+0x624>
 8001bc2:	4b31      	ldr	r3, [pc, #196]	; (8001c88 <HAL_GPIO_EXTI_Callback+0x5e8>)
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d17c      	bne.n	8001cc4 <HAL_GPIO_EXTI_Callback+0x624>
 8001bca:	4b32      	ldr	r3, [pc, #200]	; (8001c94 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d078      	beq.n	8001cc4 <HAL_GPIO_EXTI_Callback+0x624>
 8001bd2:	4b30      	ldr	r3, [pc, #192]	; (8001c94 <HAL_GPIO_EXTI_Callback+0x5f4>)
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d174      	bne.n	8001cc4 <HAL_GPIO_EXTI_Callback+0x624>
 8001bda:	4b2b      	ldr	r3, [pc, #172]	; (8001c88 <HAL_GPIO_EXTI_Callback+0x5e8>)
 8001bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d070      	beq.n	8001cc4 <HAL_GPIO_EXTI_Callback+0x624>
 8001be2:	4b29      	ldr	r3, [pc, #164]	; (8001c88 <HAL_GPIO_EXTI_Callback+0x5e8>)
 8001be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d16c      	bne.n	8001cc4 <HAL_GPIO_EXTI_Callback+0x624>
    {
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); //PB0    A03  底盘车电�????????????????????????????????????????  �????????????????????????????????????????个触�????????????????????????????????????????
 8001bea:	2108      	movs	r1, #8
 8001bec:	482a      	ldr	r0, [pc, #168]	; (8001c98 <HAL_GPIO_EXTI_Callback+0x5f8>)
 8001bee:	f003 fd27 	bl	8005640 <HAL_TIM_PWM_Start>
                                                // // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
                                                // // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
      // PB0   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001bf2:	4b29      	ldr	r3, [pc, #164]	; (8001c98 <HAL_GPIO_EXTI_Callback+0x5f8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      // PB1   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
      HAL_Delay(1);
 8001bfa:	2001      	movs	r0, #1
 8001bfc:	f001 fb1c 	bl	8003238 <HAL_Delay>
      //init motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   //
 8001c00:	2201      	movs	r2, #1
 8001c02:	2102      	movs	r1, #2
 8001c04:	4821      	ldr	r0, [pc, #132]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5ec>)
 8001c06:	f002 fb83 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); //
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2104      	movs	r1, #4
 8001c0e:	481f      	ldr	r0, [pc, #124]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5ec>)
 8001c10:	f002 fb7e 	bl	8004310 <HAL_GPIO_WritePin>

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1000);
 8001c14:	4b20      	ldr	r3, [pc, #128]	; (8001c98 <HAL_GPIO_EXTI_Callback+0x5f8>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c1c:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_Delay(1);
 8001c1e:	2001      	movs	r0, #1
 8001c20:	f001 fb0a 	bl	8003238 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8001c24:	2201      	movs	r2, #1
 8001c26:	2104      	movs	r1, #4
 8001c28:	4818      	ldr	r0, [pc, #96]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5ec>)
 8001c2a:	f002 fb71 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001c2e:	2201      	movs	r2, #1
 8001c30:	2102      	movs	r1, #2
 8001c32:	4816      	ldr	r0, [pc, #88]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5ec>)
 8001c34:	f002 fb6c 	bl	8004310 <HAL_GPIO_WritePin>

      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2104      	movs	r1, #4
 8001c3c:	4813      	ldr	r0, [pc, #76]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5ec>)
 8001c3e:	f002 fb67 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_Delay(5000);
 8001c42:	f241 3088 	movw	r0, #5000	; 0x1388
 8001c46:	f001 faf7 	bl	8003238 <HAL_Delay>
      //init motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   //
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	2102      	movs	r1, #2
 8001c4e:	480f      	ldr	r0, [pc, #60]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5ec>)
 8001c50:	f002 fb5e 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); //
 8001c54:	2200      	movs	r2, #0
 8001c56:	2104      	movs	r1, #4
 8001c58:	480c      	ldr	r0, [pc, #48]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5ec>)
 8001c5a:	f002 fb59 	bl	8004310 <HAL_GPIO_WritePin>

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 500);
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <HAL_GPIO_EXTI_Callback+0x5f8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001c66:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2104      	movs	r1, #4
 8001c6c:	4807      	ldr	r0, [pc, #28]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5ec>)
 8001c6e:	f002 fb4f 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2102      	movs	r1, #2
 8001c76:	4805      	ldr	r0, [pc, #20]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5ec>)
 8001c78:	f002 fb4a 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_Delay(100);
 8001c7c:	2064      	movs	r0, #100	; 0x64
 8001c7e:	f001 fadb 	bl	8003238 <HAL_Delay>
      //init motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   //
 8001c82:	2201      	movs	r2, #1
 8001c84:	2102      	movs	r1, #2
 8001c86:	e009      	b.n	8001c9c <HAL_GPIO_EXTI_Callback+0x5fc>
 8001c88:	20000304 	.word	0x20000304
 8001c8c:	40020400 	.word	0x40020400
 8001c90:	40020c00 	.word	0x40020c00
 8001c94:	200002d4 	.word	0x200002d4
 8001c98:	2000834c 	.word	0x2000834c
 8001c9c:	48b6      	ldr	r0, [pc, #728]	; (8001f78 <HAL_GPIO_EXTI_Callback+0x8d8>)
 8001c9e:	f002 fb37 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); //
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2104      	movs	r1, #4
 8001ca6:	48b4      	ldr	r0, [pc, #720]	; (8001f78 <HAL_GPIO_EXTI_Callback+0x8d8>)
 8001ca8:	f002 fb32 	bl	8004310 <HAL_GPIO_WritePin>
      //防抱�????????????????????????????????????????

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001cac:	4bb3      	ldr	r3, [pc, #716]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x8dc>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8001cb4:	2108      	movs	r1, #8
 8001cb6:	48b1      	ldr	r0, [pc, #708]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x8dc>)
 8001cb8:	f003 fdbc 	bl	8005834 <HAL_TIM_PWM_Stop>

      //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      HAL_Delay(3000);
 8001cbc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001cc0:	f001 faba 	bl	8003238 <HAL_Delay>
    }
    //工作位置摇出(远控允许)
    if (pdx[5] && pbx[7] && (!pbx[6]) && pdx[15] && pdx[9])
 8001cc4:	4bae      	ldr	r3, [pc, #696]	; (8001f80 <HAL_GPIO_EXTI_Callback+0x8e0>)
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d071      	beq.n	8001db0 <HAL_GPIO_EXTI_Callback+0x710>
 8001ccc:	4bad      	ldr	r3, [pc, #692]	; (8001f84 <HAL_GPIO_EXTI_Callback+0x8e4>)
 8001cce:	69db      	ldr	r3, [r3, #28]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d06d      	beq.n	8001db0 <HAL_GPIO_EXTI_Callback+0x710>
 8001cd4:	4bab      	ldr	r3, [pc, #684]	; (8001f84 <HAL_GPIO_EXTI_Callback+0x8e4>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d169      	bne.n	8001db0 <HAL_GPIO_EXTI_Callback+0x710>
 8001cdc:	4ba8      	ldr	r3, [pc, #672]	; (8001f80 <HAL_GPIO_EXTI_Callback+0x8e0>)
 8001cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d065      	beq.n	8001db0 <HAL_GPIO_EXTI_Callback+0x710>
 8001ce4:	4ba6      	ldr	r3, [pc, #664]	; (8001f80 <HAL_GPIO_EXTI_Callback+0x8e0>)
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d061      	beq.n	8001db0 <HAL_GPIO_EXTI_Callback+0x710>
    {
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); //PB0    A03  底盘车电�????????????????????????????????????????  �????????????????????????????????????????个触�????????????????????????????????????????
 8001cec:	2108      	movs	r1, #8
 8001cee:	48a3      	ldr	r0, [pc, #652]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x8dc>)
 8001cf0:	f003 fca6 	bl	8005640 <HAL_TIM_PWM_Start>
                                                // // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
                                                // // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
      // PB0   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001cf4:	4ba1      	ldr	r3, [pc, #644]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x8dc>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      // PB1   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
      HAL_Delay(1);
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	f001 fa9b 	bl	8003238 <HAL_Delay>
      //init motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   //
 8001d02:	2201      	movs	r2, #1
 8001d04:	2102      	movs	r1, #2
 8001d06:	489c      	ldr	r0, [pc, #624]	; (8001f78 <HAL_GPIO_EXTI_Callback+0x8d8>)
 8001d08:	f002 fb02 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); //
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	2104      	movs	r1, #4
 8001d10:	4899      	ldr	r0, [pc, #612]	; (8001f78 <HAL_GPIO_EXTI_Callback+0x8d8>)
 8001d12:	f002 fafd 	bl	8004310 <HAL_GPIO_WritePin>

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1000);
 8001d16:	4b99      	ldr	r3, [pc, #612]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x8dc>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d1e:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_Delay(1);
 8001d20:	2001      	movs	r0, #1
 8001d22:	f001 fa89 	bl	8003238 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8001d26:	2201      	movs	r2, #1
 8001d28:	2104      	movs	r1, #4
 8001d2a:	4893      	ldr	r0, [pc, #588]	; (8001f78 <HAL_GPIO_EXTI_Callback+0x8d8>)
 8001d2c:	f002 faf0 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001d30:	2201      	movs	r2, #1
 8001d32:	2102      	movs	r1, #2
 8001d34:	4890      	ldr	r0, [pc, #576]	; (8001f78 <HAL_GPIO_EXTI_Callback+0x8d8>)
 8001d36:	f002 faeb 	bl	8004310 <HAL_GPIO_WritePin>

      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2104      	movs	r1, #4
 8001d3e:	488e      	ldr	r0, [pc, #568]	; (8001f78 <HAL_GPIO_EXTI_Callback+0x8d8>)
 8001d40:	f002 fae6 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_Delay(5000);
 8001d44:	f241 3088 	movw	r0, #5000	; 0x1388
 8001d48:	f001 fa76 	bl	8003238 <HAL_Delay>
      //init motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   //
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	2102      	movs	r1, #2
 8001d50:	4889      	ldr	r0, [pc, #548]	; (8001f78 <HAL_GPIO_EXTI_Callback+0x8d8>)
 8001d52:	f002 fadd 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); //
 8001d56:	2200      	movs	r2, #0
 8001d58:	2104      	movs	r1, #4
 8001d5a:	4887      	ldr	r0, [pc, #540]	; (8001f78 <HAL_GPIO_EXTI_Callback+0x8d8>)
 8001d5c:	f002 fad8 	bl	8004310 <HAL_GPIO_WritePin>

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 500);
 8001d60:	4b86      	ldr	r3, [pc, #536]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x8dc>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001d68:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2104      	movs	r1, #4
 8001d6e:	4882      	ldr	r0, [pc, #520]	; (8001f78 <HAL_GPIO_EXTI_Callback+0x8d8>)
 8001d70:	f002 face 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001d74:	2200      	movs	r2, #0
 8001d76:	2102      	movs	r1, #2
 8001d78:	487f      	ldr	r0, [pc, #508]	; (8001f78 <HAL_GPIO_EXTI_Callback+0x8d8>)
 8001d7a:	f002 fac9 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_Delay(100);
 8001d7e:	2064      	movs	r0, #100	; 0x64
 8001d80:	f001 fa5a 	bl	8003238 <HAL_Delay>
      //init motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   //
 8001d84:	2201      	movs	r2, #1
 8001d86:	2102      	movs	r1, #2
 8001d88:	487b      	ldr	r0, [pc, #492]	; (8001f78 <HAL_GPIO_EXTI_Callback+0x8d8>)
 8001d8a:	f002 fac1 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); //
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2104      	movs	r1, #4
 8001d92:	4879      	ldr	r0, [pc, #484]	; (8001f78 <HAL_GPIO_EXTI_Callback+0x8d8>)
 8001d94:	f002 fabc 	bl	8004310 <HAL_GPIO_WritePin>
      //防抱�????????????????????????????????????????

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001d98:	4b78      	ldr	r3, [pc, #480]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x8dc>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8001da0:	2108      	movs	r1, #8
 8001da2:	4876      	ldr	r0, [pc, #472]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x8dc>)
 8001da4:	f003 fd46 	bl	8005834 <HAL_TIM_PWM_Stop>

      //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      HAL_Delay(3000);
 8001da8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001dac:	f001 fa44 	bl	8003238 <HAL_Delay>
    }
    //非工作位�???????????????? 非试验位置摇�????????????????(远控允许)
    if ((!pdx[5]) && (!pdx[4]) && pbx[7] && (!pbx[6]) && pdx[15] && pdx[9])
 8001db0:	4b73      	ldr	r3, [pc, #460]	; (8001f80 <HAL_GPIO_EXTI_Callback+0x8e0>)
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d175      	bne.n	8001ea4 <HAL_GPIO_EXTI_Callback+0x804>
 8001db8:	4b71      	ldr	r3, [pc, #452]	; (8001f80 <HAL_GPIO_EXTI_Callback+0x8e0>)
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d171      	bne.n	8001ea4 <HAL_GPIO_EXTI_Callback+0x804>
 8001dc0:	4b70      	ldr	r3, [pc, #448]	; (8001f84 <HAL_GPIO_EXTI_Callback+0x8e4>)
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d06d      	beq.n	8001ea4 <HAL_GPIO_EXTI_Callback+0x804>
 8001dc8:	4b6e      	ldr	r3, [pc, #440]	; (8001f84 <HAL_GPIO_EXTI_Callback+0x8e4>)
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d169      	bne.n	8001ea4 <HAL_GPIO_EXTI_Callback+0x804>
 8001dd0:	4b6b      	ldr	r3, [pc, #428]	; (8001f80 <HAL_GPIO_EXTI_Callback+0x8e0>)
 8001dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d065      	beq.n	8001ea4 <HAL_GPIO_EXTI_Callback+0x804>
 8001dd8:	4b69      	ldr	r3, [pc, #420]	; (8001f80 <HAL_GPIO_EXTI_Callback+0x8e0>)
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d061      	beq.n	8001ea4 <HAL_GPIO_EXTI_Callback+0x804>
    {
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); //PB0    A03  底盘车电�????????????????????????????????????????  �????????????????????????????????????????个触�????????????????????????????????????????
 8001de0:	2108      	movs	r1, #8
 8001de2:	4866      	ldr	r0, [pc, #408]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x8dc>)
 8001de4:	f003 fc2c 	bl	8005640 <HAL_TIM_PWM_Start>
                                                // // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
                                                // // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
      // PB0   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001de8:	4b64      	ldr	r3, [pc, #400]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x8dc>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2200      	movs	r2, #0
 8001dee:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      // PB1   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
      HAL_Delay(1);
 8001df0:	2001      	movs	r0, #1
 8001df2:	f001 fa21 	bl	8003238 <HAL_Delay>
      //init motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   //
 8001df6:	2201      	movs	r2, #1
 8001df8:	2102      	movs	r1, #2
 8001dfa:	485f      	ldr	r0, [pc, #380]	; (8001f78 <HAL_GPIO_EXTI_Callback+0x8d8>)
 8001dfc:	f002 fa88 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); //
 8001e00:	2200      	movs	r2, #0
 8001e02:	2104      	movs	r1, #4
 8001e04:	485c      	ldr	r0, [pc, #368]	; (8001f78 <HAL_GPIO_EXTI_Callback+0x8d8>)
 8001e06:	f002 fa83 	bl	8004310 <HAL_GPIO_WritePin>

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1000);
 8001e0a:	4b5c      	ldr	r3, [pc, #368]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x8dc>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e12:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_Delay(1);
 8001e14:	2001      	movs	r0, #1
 8001e16:	f001 fa0f 	bl	8003238 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	2104      	movs	r1, #4
 8001e1e:	4856      	ldr	r0, [pc, #344]	; (8001f78 <HAL_GPIO_EXTI_Callback+0x8d8>)
 8001e20:	f002 fa76 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001e24:	2201      	movs	r2, #1
 8001e26:	2102      	movs	r1, #2
 8001e28:	4853      	ldr	r0, [pc, #332]	; (8001f78 <HAL_GPIO_EXTI_Callback+0x8d8>)
 8001e2a:	f002 fa71 	bl	8004310 <HAL_GPIO_WritePin>

      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2104      	movs	r1, #4
 8001e32:	4851      	ldr	r0, [pc, #324]	; (8001f78 <HAL_GPIO_EXTI_Callback+0x8d8>)
 8001e34:	f002 fa6c 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_Delay(5000);
 8001e38:	f241 3088 	movw	r0, #5000	; 0x1388
 8001e3c:	f001 f9fc 	bl	8003238 <HAL_Delay>
      //init motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   //
 8001e40:	2201      	movs	r2, #1
 8001e42:	2102      	movs	r1, #2
 8001e44:	484c      	ldr	r0, [pc, #304]	; (8001f78 <HAL_GPIO_EXTI_Callback+0x8d8>)
 8001e46:	f002 fa63 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); //
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2104      	movs	r1, #4
 8001e4e:	484a      	ldr	r0, [pc, #296]	; (8001f78 <HAL_GPIO_EXTI_Callback+0x8d8>)
 8001e50:	f002 fa5e 	bl	8004310 <HAL_GPIO_WritePin>

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 500);
 8001e54:	4b49      	ldr	r3, [pc, #292]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x8dc>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001e5c:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2104      	movs	r1, #4
 8001e62:	4845      	ldr	r0, [pc, #276]	; (8001f78 <HAL_GPIO_EXTI_Callback+0x8d8>)
 8001e64:	f002 fa54 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2102      	movs	r1, #2
 8001e6c:	4842      	ldr	r0, [pc, #264]	; (8001f78 <HAL_GPIO_EXTI_Callback+0x8d8>)
 8001e6e:	f002 fa4f 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_Delay(100);
 8001e72:	2064      	movs	r0, #100	; 0x64
 8001e74:	f001 f9e0 	bl	8003238 <HAL_Delay>
      //init motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   //
 8001e78:	2201      	movs	r2, #1
 8001e7a:	2102      	movs	r1, #2
 8001e7c:	483e      	ldr	r0, [pc, #248]	; (8001f78 <HAL_GPIO_EXTI_Callback+0x8d8>)
 8001e7e:	f002 fa47 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); //
 8001e82:	2200      	movs	r2, #0
 8001e84:	2104      	movs	r1, #4
 8001e86:	483c      	ldr	r0, [pc, #240]	; (8001f78 <HAL_GPIO_EXTI_Callback+0x8d8>)
 8001e88:	f002 fa42 	bl	8004310 <HAL_GPIO_WritePin>
      //防抱�????????????????????????????????????????

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001e8c:	4b3b      	ldr	r3, [pc, #236]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x8dc>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2200      	movs	r2, #0
 8001e92:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8001e94:	2108      	movs	r1, #8
 8001e96:	4839      	ldr	r0, [pc, #228]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x8dc>)
 8001e98:	f003 fccc 	bl	8005834 <HAL_TIM_PWM_Stop>

      //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      HAL_Delay(3000);
 8001e9c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001ea0:	f001 f9ca 	bl	8003238 <HAL_Delay>
  ///////////////////*************************************************/////////////////////////////////////////

  // 7 底盘车摇�???????????????? dipancheyaojin
  //PD7 A25底盘车遥进按钮手�????????????????????????????????????????                                重要6    [按钮  外部中断]
  //已捕获PD7 底盘车手动驶�????????????????????????????????????????
  if (GPIO_Pin == GPIO_PIN_7)
 8001ea4:	88fb      	ldrh	r3, [r7, #6]
 8001ea6:	2b80      	cmp	r3, #128	; 0x80
 8001ea8:	f040 8142 	bne.w	8002130 <HAL_GPIO_EXTI_Callback+0xa90>
  {
    pdx[4] = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4);
 8001eac:	2110      	movs	r1, #16
 8001eae:	4836      	ldr	r0, [pc, #216]	; (8001f88 <HAL_GPIO_EXTI_Callback+0x8e8>)
 8001eb0:	f002 fa16 	bl	80042e0 <HAL_GPIO_ReadPin>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	bf0c      	ite	eq
 8001eba:	2301      	moveq	r3, #1
 8001ebc:	2300      	movne	r3, #0
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4b2f      	ldr	r3, [pc, #188]	; (8001f80 <HAL_GPIO_EXTI_Callback+0x8e0>)
 8001ec4:	611a      	str	r2, [r3, #16]
    pdx[5] = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5);
 8001ec6:	2120      	movs	r1, #32
 8001ec8:	482f      	ldr	r0, [pc, #188]	; (8001f88 <HAL_GPIO_EXTI_Callback+0x8e8>)
 8001eca:	f002 fa09 	bl	80042e0 <HAL_GPIO_ReadPin>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	bf0c      	ite	eq
 8001ed4:	2301      	moveq	r3, #1
 8001ed6:	2300      	movne	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	461a      	mov	r2, r3
 8001edc:	4b28      	ldr	r3, [pc, #160]	; (8001f80 <HAL_GPIO_EXTI_Callback+0x8e0>)
 8001ede:	615a      	str	r2, [r3, #20]
    pdx[9] = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9);
 8001ee0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ee4:	4828      	ldr	r0, [pc, #160]	; (8001f88 <HAL_GPIO_EXTI_Callback+0x8e8>)
 8001ee6:	f002 f9fb 	bl	80042e0 <HAL_GPIO_ReadPin>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	bf0c      	ite	eq
 8001ef0:	2301      	moveq	r3, #1
 8001ef2:	2300      	movne	r3, #0
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	4b21      	ldr	r3, [pc, #132]	; (8001f80 <HAL_GPIO_EXTI_Callback+0x8e0>)
 8001efa:	625a      	str	r2, [r3, #36]	; 0x24

    pdx[15] = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15);
 8001efc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f00:	4821      	ldr	r0, [pc, #132]	; (8001f88 <HAL_GPIO_EXTI_Callback+0x8e8>)
 8001f02:	f002 f9ed 	bl	80042e0 <HAL_GPIO_ReadPin>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	bf0c      	ite	eq
 8001f0c:	2301      	moveq	r3, #1
 8001f0e:	2300      	movne	r3, #0
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	461a      	mov	r2, r3
 8001f14:	4b1a      	ldr	r3, [pc, #104]	; (8001f80 <HAL_GPIO_EXTI_Callback+0x8e0>)
 8001f16:	63da      	str	r2, [r3, #60]	; 0x3c

    pbx[7] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
 8001f18:	2180      	movs	r1, #128	; 0x80
 8001f1a:	4817      	ldr	r0, [pc, #92]	; (8001f78 <HAL_GPIO_EXTI_Callback+0x8d8>)
 8001f1c:	f002 f9e0 	bl	80042e0 <HAL_GPIO_ReadPin>
 8001f20:	4603      	mov	r3, r0
 8001f22:	461a      	mov	r2, r3
 8001f24:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <HAL_GPIO_EXTI_Callback+0x8e4>)
 8001f26:	61da      	str	r2, [r3, #28]
    pbx[6] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8001f28:	2140      	movs	r1, #64	; 0x40
 8001f2a:	4813      	ldr	r0, [pc, #76]	; (8001f78 <HAL_GPIO_EXTI_Callback+0x8d8>)
 8001f2c:	f002 f9d8 	bl	80042e0 <HAL_GPIO_ReadPin>
 8001f30:	4603      	mov	r3, r0
 8001f32:	461a      	mov	r2, r3
 8001f34:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <HAL_GPIO_EXTI_Callback+0x8e4>)
 8001f36:	619a      	str	r2, [r3, #24]
    if (pdx[5] && pbx[7] && (!pbx[6]) && pdx[15] && (!pdx[9]))
 8001f38:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <HAL_GPIO_EXTI_Callback+0x8e0>)
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d07c      	beq.n	800203a <HAL_GPIO_EXTI_Callback+0x99a>
 8001f40:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <HAL_GPIO_EXTI_Callback+0x8e4>)
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d078      	beq.n	800203a <HAL_GPIO_EXTI_Callback+0x99a>
 8001f48:	4b0e      	ldr	r3, [pc, #56]	; (8001f84 <HAL_GPIO_EXTI_Callback+0x8e4>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d174      	bne.n	800203a <HAL_GPIO_EXTI_Callback+0x99a>
 8001f50:	4b0b      	ldr	r3, [pc, #44]	; (8001f80 <HAL_GPIO_EXTI_Callback+0x8e0>)
 8001f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d070      	beq.n	800203a <HAL_GPIO_EXTI_Callback+0x99a>
 8001f58:	4b09      	ldr	r3, [pc, #36]	; (8001f80 <HAL_GPIO_EXTI_Callback+0x8e0>)
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d16c      	bne.n	800203a <HAL_GPIO_EXTI_Callback+0x99a>
    {
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); //PB0    A03  底盘车电�????????????????????????????????????????  �????????????????????????????????????????个触�????????????????????????????????????????
 8001f60:	2108      	movs	r1, #8
 8001f62:	4806      	ldr	r0, [pc, #24]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x8dc>)
 8001f64:	f003 fb6c 	bl	8005640 <HAL_TIM_PWM_Start>
                                                // // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
                                                // // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
      // PB0   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001f68:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <HAL_GPIO_EXTI_Callback+0x8dc>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      // PB1   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
      HAL_Delay(1);
 8001f70:	2001      	movs	r0, #1
 8001f72:	f001 f961 	bl	8003238 <HAL_Delay>
 8001f76:	e009      	b.n	8001f8c <HAL_GPIO_EXTI_Callback+0x8ec>
 8001f78:	40020400 	.word	0x40020400
 8001f7c:	2000834c 	.word	0x2000834c
 8001f80:	20000304 	.word	0x20000304
 8001f84:	200002d4 	.word	0x200002d4
 8001f88:	40020c00 	.word	0x40020c00
      //init motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   //
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	2102      	movs	r1, #2
 8001f90:	48bf      	ldr	r0, [pc, #764]	; (8002290 <HAL_GPIO_EXTI_Callback+0xbf0>)
 8001f92:	f002 f9bd 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); //
 8001f96:	2200      	movs	r2, #0
 8001f98:	2104      	movs	r1, #4
 8001f9a:	48bd      	ldr	r0, [pc, #756]	; (8002290 <HAL_GPIO_EXTI_Callback+0xbf0>)
 8001f9c:	f002 f9b8 	bl	8004310 <HAL_GPIO_WritePin>

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1000);
 8001fa0:	4bbc      	ldr	r3, [pc, #752]	; (8002294 <HAL_GPIO_EXTI_Callback+0xbf4>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fa8:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_Delay(1);
 8001faa:	2001      	movs	r0, #1
 8001fac:	f001 f944 	bl	8003238 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2104      	movs	r1, #4
 8001fb4:	48b6      	ldr	r0, [pc, #728]	; (8002290 <HAL_GPIO_EXTI_Callback+0xbf0>)
 8001fb6:	f002 f9ab 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	2102      	movs	r1, #2
 8001fbe:	48b4      	ldr	r0, [pc, #720]	; (8002290 <HAL_GPIO_EXTI_Callback+0xbf0>)
 8001fc0:	f002 f9a6 	bl	8004310 <HAL_GPIO_WritePin>

      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2104      	movs	r1, #4
 8001fc8:	48b1      	ldr	r0, [pc, #708]	; (8002290 <HAL_GPIO_EXTI_Callback+0xbf0>)
 8001fca:	f002 f9a1 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_Delay(5000);
 8001fce:	f241 3088 	movw	r0, #5000	; 0x1388
 8001fd2:	f001 f931 	bl	8003238 <HAL_Delay>
      //init motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   //
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	2102      	movs	r1, #2
 8001fda:	48ad      	ldr	r0, [pc, #692]	; (8002290 <HAL_GPIO_EXTI_Callback+0xbf0>)
 8001fdc:	f002 f998 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); //
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	2104      	movs	r1, #4
 8001fe4:	48aa      	ldr	r0, [pc, #680]	; (8002290 <HAL_GPIO_EXTI_Callback+0xbf0>)
 8001fe6:	f002 f993 	bl	8004310 <HAL_GPIO_WritePin>

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 500);
 8001fea:	4baa      	ldr	r3, [pc, #680]	; (8002294 <HAL_GPIO_EXTI_Callback+0xbf4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ff2:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	2104      	movs	r1, #4
 8001ff8:	48a5      	ldr	r0, [pc, #660]	; (8002290 <HAL_GPIO_EXTI_Callback+0xbf0>)
 8001ffa:	f002 f989 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001ffe:	2201      	movs	r2, #1
 8002000:	2102      	movs	r1, #2
 8002002:	48a3      	ldr	r0, [pc, #652]	; (8002290 <HAL_GPIO_EXTI_Callback+0xbf0>)
 8002004:	f002 f984 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_Delay(100);
 8002008:	2064      	movs	r0, #100	; 0x64
 800200a:	f001 f915 	bl	8003238 <HAL_Delay>
      //init motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   //
 800200e:	2201      	movs	r2, #1
 8002010:	2102      	movs	r1, #2
 8002012:	489f      	ldr	r0, [pc, #636]	; (8002290 <HAL_GPIO_EXTI_Callback+0xbf0>)
 8002014:	f002 f97c 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); //
 8002018:	2200      	movs	r2, #0
 800201a:	2104      	movs	r1, #4
 800201c:	489c      	ldr	r0, [pc, #624]	; (8002290 <HAL_GPIO_EXTI_Callback+0xbf0>)
 800201e:	f002 f977 	bl	8004310 <HAL_GPIO_WritePin>
      //防抱�????????????????????????????????????????

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8002022:	4b9c      	ldr	r3, [pc, #624]	; (8002294 <HAL_GPIO_EXTI_Callback+0xbf4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2200      	movs	r2, #0
 8002028:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 800202a:	2108      	movs	r1, #8
 800202c:	4899      	ldr	r0, [pc, #612]	; (8002294 <HAL_GPIO_EXTI_Callback+0xbf4>)
 800202e:	f003 fc01 	bl	8005834 <HAL_TIM_PWM_Stop>

      //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      HAL_Delay(3000);
 8002032:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002036:	f001 f8ff 	bl	8003238 <HAL_Delay>
    }
    if (pdx[5] && pbx[7] && (!pbx[6]) && pdx[15] && pdx[9])
 800203a:	4b97      	ldr	r3, [pc, #604]	; (8002298 <HAL_GPIO_EXTI_Callback+0xbf8>)
 800203c:	695b      	ldr	r3, [r3, #20]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d071      	beq.n	8002126 <HAL_GPIO_EXTI_Callback+0xa86>
 8002042:	4b96      	ldr	r3, [pc, #600]	; (800229c <HAL_GPIO_EXTI_Callback+0xbfc>)
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d06d      	beq.n	8002126 <HAL_GPIO_EXTI_Callback+0xa86>
 800204a:	4b94      	ldr	r3, [pc, #592]	; (800229c <HAL_GPIO_EXTI_Callback+0xbfc>)
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d169      	bne.n	8002126 <HAL_GPIO_EXTI_Callback+0xa86>
 8002052:	4b91      	ldr	r3, [pc, #580]	; (8002298 <HAL_GPIO_EXTI_Callback+0xbf8>)
 8002054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002056:	2b00      	cmp	r3, #0
 8002058:	d065      	beq.n	8002126 <HAL_GPIO_EXTI_Callback+0xa86>
 800205a:	4b8f      	ldr	r3, [pc, #572]	; (8002298 <HAL_GPIO_EXTI_Callback+0xbf8>)
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	2b00      	cmp	r3, #0
 8002060:	d061      	beq.n	8002126 <HAL_GPIO_EXTI_Callback+0xa86>
    {
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); //PB0    A03  底盘车电�????????????????????????????????????????  �????????????????????????????????????????个触�????????????????????????????????????????
 8002062:	2108      	movs	r1, #8
 8002064:	488b      	ldr	r0, [pc, #556]	; (8002294 <HAL_GPIO_EXTI_Callback+0xbf4>)
 8002066:	f003 faeb 	bl	8005640 <HAL_TIM_PWM_Start>
                                                // // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
                                                // // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
      // PB0   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 800206a:	4b8a      	ldr	r3, [pc, #552]	; (8002294 <HAL_GPIO_EXTI_Callback+0xbf4>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2200      	movs	r2, #0
 8002070:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      // PB1   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
      HAL_Delay(1);
 8002072:	2001      	movs	r0, #1
 8002074:	f001 f8e0 	bl	8003238 <HAL_Delay>
      //init motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   //
 8002078:	2201      	movs	r2, #1
 800207a:	2102      	movs	r1, #2
 800207c:	4884      	ldr	r0, [pc, #528]	; (8002290 <HAL_GPIO_EXTI_Callback+0xbf0>)
 800207e:	f002 f947 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); //
 8002082:	2200      	movs	r2, #0
 8002084:	2104      	movs	r1, #4
 8002086:	4882      	ldr	r0, [pc, #520]	; (8002290 <HAL_GPIO_EXTI_Callback+0xbf0>)
 8002088:	f002 f942 	bl	8004310 <HAL_GPIO_WritePin>

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1000);
 800208c:	4b81      	ldr	r3, [pc, #516]	; (8002294 <HAL_GPIO_EXTI_Callback+0xbf4>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002094:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_Delay(1);
 8002096:	2001      	movs	r0, #1
 8002098:	f001 f8ce 	bl	8003238 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 800209c:	2200      	movs	r2, #0
 800209e:	2104      	movs	r1, #4
 80020a0:	487b      	ldr	r0, [pc, #492]	; (8002290 <HAL_GPIO_EXTI_Callback+0xbf0>)
 80020a2:	f002 f935 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80020a6:	2200      	movs	r2, #0
 80020a8:	2102      	movs	r1, #2
 80020aa:	4879      	ldr	r0, [pc, #484]	; (8002290 <HAL_GPIO_EXTI_Callback+0xbf0>)
 80020ac:	f002 f930 	bl	8004310 <HAL_GPIO_WritePin>

      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80020b0:	2200      	movs	r2, #0
 80020b2:	2104      	movs	r1, #4
 80020b4:	4876      	ldr	r0, [pc, #472]	; (8002290 <HAL_GPIO_EXTI_Callback+0xbf0>)
 80020b6:	f002 f92b 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_Delay(5000);
 80020ba:	f241 3088 	movw	r0, #5000	; 0x1388
 80020be:	f001 f8bb 	bl	8003238 <HAL_Delay>
      //init motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   //
 80020c2:	2201      	movs	r2, #1
 80020c4:	2102      	movs	r1, #2
 80020c6:	4872      	ldr	r0, [pc, #456]	; (8002290 <HAL_GPIO_EXTI_Callback+0xbf0>)
 80020c8:	f002 f922 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); //
 80020cc:	2200      	movs	r2, #0
 80020ce:	2104      	movs	r1, #4
 80020d0:	486f      	ldr	r0, [pc, #444]	; (8002290 <HAL_GPIO_EXTI_Callback+0xbf0>)
 80020d2:	f002 f91d 	bl	8004310 <HAL_GPIO_WritePin>

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 500);
 80020d6:	4b6f      	ldr	r3, [pc, #444]	; (8002294 <HAL_GPIO_EXTI_Callback+0xbf4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80020de:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80020e0:	2201      	movs	r2, #1
 80020e2:	2104      	movs	r1, #4
 80020e4:	486a      	ldr	r0, [pc, #424]	; (8002290 <HAL_GPIO_EXTI_Callback+0xbf0>)
 80020e6:	f002 f913 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80020ea:	2201      	movs	r2, #1
 80020ec:	2102      	movs	r1, #2
 80020ee:	4868      	ldr	r0, [pc, #416]	; (8002290 <HAL_GPIO_EXTI_Callback+0xbf0>)
 80020f0:	f002 f90e 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_Delay(100);
 80020f4:	2064      	movs	r0, #100	; 0x64
 80020f6:	f001 f89f 	bl	8003238 <HAL_Delay>
      //init motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);   //
 80020fa:	2201      	movs	r2, #1
 80020fc:	2102      	movs	r1, #2
 80020fe:	4864      	ldr	r0, [pc, #400]	; (8002290 <HAL_GPIO_EXTI_Callback+0xbf0>)
 8002100:	f002 f906 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET); //
 8002104:	2200      	movs	r2, #0
 8002106:	2104      	movs	r1, #4
 8002108:	4861      	ldr	r0, [pc, #388]	; (8002290 <HAL_GPIO_EXTI_Callback+0xbf0>)
 800210a:	f002 f901 	bl	8004310 <HAL_GPIO_WritePin>
      //防抱�????????????????????????????????????????

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 800210e:	4b61      	ldr	r3, [pc, #388]	; (8002294 <HAL_GPIO_EXTI_Callback+0xbf4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2200      	movs	r2, #0
 8002114:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8002116:	2108      	movs	r1, #8
 8002118:	485e      	ldr	r0, [pc, #376]	; (8002294 <HAL_GPIO_EXTI_Callback+0xbf4>)
 800211a:	f003 fb8b 	bl	8005834 <HAL_TIM_PWM_Stop>

      //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      HAL_Delay(3000);
 800211e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002122:	f001 f889 	bl	8003238 <HAL_Delay>
    }
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8002126:	2201      	movs	r2, #1
 8002128:	2140      	movs	r1, #64	; 0x40
 800212a:	485d      	ldr	r0, [pc, #372]	; (80022a0 <HAL_GPIO_EXTI_Callback+0xc00>)
 800212c:	f002 f8f0 	bl	8004310 <HAL_GPIO_WritePin>

  //PD10 A30接地�????????????????????????????????????????合闸输入按钮                               重要8    [按钮  外部中断]
  //PB7继电器�?�开关必须使�????????????????????????????????????????
  //已捕获PD10 接地�????????????????????????????????????????手动合闸  接地�????????????????????????????????????????电机反转PB8 = 1 , PB9 = 0 �???????????????????????????????????????? !远控允许PD9必为0  �???????????????????????????????????????? 底盘车试验位置PD4 �???????????????????????????????????????? PB7继电器�?�开关必须使能为1 �????????????????????????????????????????  !PB6 断路器必须分�???????????????????????????????????????? �???????????????????????????????????????? PD13 接地�????????????????????????????????????????机构分闸位置（信号快)  �???????????????????????????????????????? PD15 接地�????????????????????????????????????????分闸位置
  // 10 接地�????????????????合闸 jiedidaohezha
  if (GPIO_Pin == GPIO_PIN_10)
 8002130:	88fb      	ldrh	r3, [r7, #6]
 8002132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002136:	f040 824a 	bne.w	80025ce <HAL_GPIO_EXTI_Callback+0xf2e>
  {
    pdx[4] = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4);
 800213a:	2110      	movs	r1, #16
 800213c:	4858      	ldr	r0, [pc, #352]	; (80022a0 <HAL_GPIO_EXTI_Callback+0xc00>)
 800213e:	f002 f8cf 	bl	80042e0 <HAL_GPIO_ReadPin>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	bf0c      	ite	eq
 8002148:	2301      	moveq	r3, #1
 800214a:	2300      	movne	r3, #0
 800214c:	b2db      	uxtb	r3, r3
 800214e:	461a      	mov	r2, r3
 8002150:	4b51      	ldr	r3, [pc, #324]	; (8002298 <HAL_GPIO_EXTI_Callback+0xbf8>)
 8002152:	611a      	str	r2, [r3, #16]
    pdx[9] = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9);
 8002154:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002158:	4851      	ldr	r0, [pc, #324]	; (80022a0 <HAL_GPIO_EXTI_Callback+0xc00>)
 800215a:	f002 f8c1 	bl	80042e0 <HAL_GPIO_ReadPin>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	bf0c      	ite	eq
 8002164:	2301      	moveq	r3, #1
 8002166:	2300      	movne	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	461a      	mov	r2, r3
 800216c:	4b4a      	ldr	r3, [pc, #296]	; (8002298 <HAL_GPIO_EXTI_Callback+0xbf8>)
 800216e:	625a      	str	r2, [r3, #36]	; 0x24

    pdx[15] = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15);
 8002170:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002174:	484a      	ldr	r0, [pc, #296]	; (80022a0 <HAL_GPIO_EXTI_Callback+0xc00>)
 8002176:	f002 f8b3 	bl	80042e0 <HAL_GPIO_ReadPin>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	bf0c      	ite	eq
 8002180:	2301      	moveq	r3, #1
 8002182:	2300      	movne	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	461a      	mov	r2, r3
 8002188:	4b43      	ldr	r3, [pc, #268]	; (8002298 <HAL_GPIO_EXTI_Callback+0xbf8>)
 800218a:	63da      	str	r2, [r3, #60]	; 0x3c

    pbx[7] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
 800218c:	2180      	movs	r1, #128	; 0x80
 800218e:	4840      	ldr	r0, [pc, #256]	; (8002290 <HAL_GPIO_EXTI_Callback+0xbf0>)
 8002190:	f002 f8a6 	bl	80042e0 <HAL_GPIO_ReadPin>
 8002194:	4603      	mov	r3, r0
 8002196:	461a      	mov	r2, r3
 8002198:	4b40      	ldr	r3, [pc, #256]	; (800229c <HAL_GPIO_EXTI_Callback+0xbfc>)
 800219a:	61da      	str	r2, [r3, #28]
    pbx[6] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 800219c:	2140      	movs	r1, #64	; 0x40
 800219e:	483c      	ldr	r0, [pc, #240]	; (8002290 <HAL_GPIO_EXTI_Callback+0xbf0>)
 80021a0:	f002 f89e 	bl	80042e0 <HAL_GPIO_ReadPin>
 80021a4:	4603      	mov	r3, r0
 80021a6:	461a      	mov	r2, r3
 80021a8:	4b3c      	ldr	r3, [pc, #240]	; (800229c <HAL_GPIO_EXTI_Callback+0xbfc>)
 80021aa:	619a      	str	r2, [r3, #24]
    if (pdx[4] && pbx[7] && (!pbx[6]) && pdx[15] && (!pdx[9]))
 80021ac:	4b3a      	ldr	r3, [pc, #232]	; (8002298 <HAL_GPIO_EXTI_Callback+0xbf8>)
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f000 8083 	beq.w	80022bc <HAL_GPIO_EXTI_Callback+0xc1c>
 80021b6:	4b39      	ldr	r3, [pc, #228]	; (800229c <HAL_GPIO_EXTI_Callback+0xbfc>)
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d07e      	beq.n	80022bc <HAL_GPIO_EXTI_Callback+0xc1c>
 80021be:	4b37      	ldr	r3, [pc, #220]	; (800229c <HAL_GPIO_EXTI_Callback+0xbfc>)
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d17a      	bne.n	80022bc <HAL_GPIO_EXTI_Callback+0xc1c>
 80021c6:	4b34      	ldr	r3, [pc, #208]	; (8002298 <HAL_GPIO_EXTI_Callback+0xbf8>)
 80021c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d076      	beq.n	80022bc <HAL_GPIO_EXTI_Callback+0xc1c>
 80021ce:	4b32      	ldr	r3, [pc, #200]	; (8002298 <HAL_GPIO_EXTI_Callback+0xbf8>)
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d172      	bne.n	80022bc <HAL_GPIO_EXTI_Callback+0xc1c>
    {
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); //PB0    A03  底盘车电�????????????????????????????????????????  �????????????????????????????????????????个触�????????????????????????????????????????
 80021d6:	2108      	movs	r1, #8
 80021d8:	482e      	ldr	r0, [pc, #184]	; (8002294 <HAL_GPIO_EXTI_Callback+0xbf4>)
 80021da:	f003 fa31 	bl	8005640 <HAL_TIM_PWM_Start>
                                                // // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
                                                // // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
      // PB0   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 80021de:	4b2d      	ldr	r3, [pc, #180]	; (8002294 <HAL_GPIO_EXTI_Callback+0xbf4>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2200      	movs	r2, #0
 80021e4:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      // PB1   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
      HAL_Delay(1);
 80021e6:	2001      	movs	r0, #1
 80021e8:	f001 f826 	bl	8003238 <HAL_Delay>
      //init motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);   //
 80021ec:	2201      	movs	r2, #1
 80021ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021f2:	4827      	ldr	r0, [pc, #156]	; (8002290 <HAL_GPIO_EXTI_Callback+0xbf0>)
 80021f4:	f002 f88c 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); //
 80021f8:	2200      	movs	r2, #0
 80021fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021fe:	4824      	ldr	r0, [pc, #144]	; (8002290 <HAL_GPIO_EXTI_Callback+0xbf0>)
 8002200:	f002 f886 	bl	8004310 <HAL_GPIO_WritePin>

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1000);
 8002204:	4b23      	ldr	r3, [pc, #140]	; (8002294 <HAL_GPIO_EXTI_Callback+0xbf4>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800220c:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_Delay(1);
 800220e:	2001      	movs	r0, #1
 8002210:	f001 f812 	bl	8003238 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8002214:	2200      	movs	r2, #0
 8002216:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800221a:	481d      	ldr	r0, [pc, #116]	; (8002290 <HAL_GPIO_EXTI_Callback+0xbf0>)
 800221c:	f002 f878 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8002220:	2200      	movs	r2, #0
 8002222:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002226:	481a      	ldr	r0, [pc, #104]	; (8002290 <HAL_GPIO_EXTI_Callback+0xbf0>)
 8002228:	f002 f872 	bl	8004310 <HAL_GPIO_WritePin>

      HAL_Delay(5000);
 800222c:	f241 3088 	movw	r0, #5000	; 0x1388
 8002230:	f001 f802 	bl	8003238 <HAL_Delay>
      //init motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);   //
 8002234:	2201      	movs	r2, #1
 8002236:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800223a:	4815      	ldr	r0, [pc, #84]	; (8002290 <HAL_GPIO_EXTI_Callback+0xbf0>)
 800223c:	f002 f868 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); //
 8002240:	2200      	movs	r2, #0
 8002242:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002246:	4812      	ldr	r0, [pc, #72]	; (8002290 <HAL_GPIO_EXTI_Callback+0xbf0>)
 8002248:	f002 f862 	bl	8004310 <HAL_GPIO_WritePin>

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 500);
 800224c:	4b11      	ldr	r3, [pc, #68]	; (8002294 <HAL_GPIO_EXTI_Callback+0xbf4>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002254:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8002256:	2201      	movs	r2, #1
 8002258:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800225c:	480c      	ldr	r0, [pc, #48]	; (8002290 <HAL_GPIO_EXTI_Callback+0xbf0>)
 800225e:	f002 f857 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8002262:	2201      	movs	r2, #1
 8002264:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002268:	4809      	ldr	r0, [pc, #36]	; (8002290 <HAL_GPIO_EXTI_Callback+0xbf0>)
 800226a:	f002 f851 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_Delay(100);
 800226e:	2064      	movs	r0, #100	; 0x64
 8002270:	f000 ffe2 	bl	8003238 <HAL_Delay>
      //init motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);   //
 8002274:	2201      	movs	r2, #1
 8002276:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800227a:	4805      	ldr	r0, [pc, #20]	; (8002290 <HAL_GPIO_EXTI_Callback+0xbf0>)
 800227c:	f002 f848 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); //
 8002280:	2200      	movs	r2, #0
 8002282:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002286:	4802      	ldr	r0, [pc, #8]	; (8002290 <HAL_GPIO_EXTI_Callback+0xbf0>)
 8002288:	f002 f842 	bl	8004310 <HAL_GPIO_WritePin>
 800228c:	e00a      	b.n	80022a4 <HAL_GPIO_EXTI_Callback+0xc04>
 800228e:	bf00      	nop
 8002290:	40020400 	.word	0x40020400
 8002294:	2000834c 	.word	0x2000834c
 8002298:	20000304 	.word	0x20000304
 800229c:	200002d4 	.word	0x200002d4
 80022a0:	40020c00 	.word	0x40020c00
      //防抱�????????????????????????????????????????

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 80022a4:	4bbf      	ldr	r3, [pc, #764]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xf04>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2200      	movs	r2, #0
 80022aa:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 80022ac:	2108      	movs	r1, #8
 80022ae:	48bd      	ldr	r0, [pc, #756]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xf04>)
 80022b0:	f003 fac0 	bl	8005834 <HAL_TIM_PWM_Stop>

      //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      HAL_Delay(3000);
 80022b4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80022b8:	f000 ffbe 	bl	8003238 <HAL_Delay>
    }
    if (((!pdx[4]) || (!pdx[5])) && pbx[7] && (!pbx[6]) && pdx[15] && (!pdx[9]))
 80022bc:	4bba      	ldr	r3, [pc, #744]	; (80025a8 <HAL_GPIO_EXTI_Callback+0xf08>)
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <HAL_GPIO_EXTI_Callback+0xc2c>
 80022c4:	4bb8      	ldr	r3, [pc, #736]	; (80025a8 <HAL_GPIO_EXTI_Callback+0xf08>)
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d176      	bne.n	80023ba <HAL_GPIO_EXTI_Callback+0xd1a>
 80022cc:	4bb7      	ldr	r3, [pc, #732]	; (80025ac <HAL_GPIO_EXTI_Callback+0xf0c>)
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d072      	beq.n	80023ba <HAL_GPIO_EXTI_Callback+0xd1a>
 80022d4:	4bb5      	ldr	r3, [pc, #724]	; (80025ac <HAL_GPIO_EXTI_Callback+0xf0c>)
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d16e      	bne.n	80023ba <HAL_GPIO_EXTI_Callback+0xd1a>
 80022dc:	4bb2      	ldr	r3, [pc, #712]	; (80025a8 <HAL_GPIO_EXTI_Callback+0xf08>)
 80022de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d06a      	beq.n	80023ba <HAL_GPIO_EXTI_Callback+0xd1a>
 80022e4:	4bb0      	ldr	r3, [pc, #704]	; (80025a8 <HAL_GPIO_EXTI_Callback+0xf08>)
 80022e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d166      	bne.n	80023ba <HAL_GPIO_EXTI_Callback+0xd1a>
    {
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); //PB0    A03  底盘车电�????????????????????????????????????????  �????????????????????????????????????????个触�????????????????????????????????????????
 80022ec:	2108      	movs	r1, #8
 80022ee:	48ad      	ldr	r0, [pc, #692]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xf04>)
 80022f0:	f003 f9a6 	bl	8005640 <HAL_TIM_PWM_Start>
                                                // // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
                                                // // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
      // PB0   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 80022f4:	4bab      	ldr	r3, [pc, #684]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xf04>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2200      	movs	r2, #0
 80022fa:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      // PB1   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
      HAL_Delay(1);
 80022fc:	2001      	movs	r0, #1
 80022fe:	f000 ff9b 	bl	8003238 <HAL_Delay>
      //init motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);   //
 8002302:	2201      	movs	r2, #1
 8002304:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002308:	48a9      	ldr	r0, [pc, #676]	; (80025b0 <HAL_GPIO_EXTI_Callback+0xf10>)
 800230a:	f002 f801 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); //
 800230e:	2200      	movs	r2, #0
 8002310:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002314:	48a6      	ldr	r0, [pc, #664]	; (80025b0 <HAL_GPIO_EXTI_Callback+0xf10>)
 8002316:	f001 fffb 	bl	8004310 <HAL_GPIO_WritePin>

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1000);
 800231a:	4ba2      	ldr	r3, [pc, #648]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xf04>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002322:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_Delay(1);
 8002324:	2001      	movs	r0, #1
 8002326:	f000 ff87 	bl	8003238 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 800232a:	2200      	movs	r2, #0
 800232c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002330:	489f      	ldr	r0, [pc, #636]	; (80025b0 <HAL_GPIO_EXTI_Callback+0xf10>)
 8002332:	f001 ffed 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8002336:	2200      	movs	r2, #0
 8002338:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800233c:	489c      	ldr	r0, [pc, #624]	; (80025b0 <HAL_GPIO_EXTI_Callback+0xf10>)
 800233e:	f001 ffe7 	bl	8004310 <HAL_GPIO_WritePin>

      HAL_Delay(5000);
 8002342:	f241 3088 	movw	r0, #5000	; 0x1388
 8002346:	f000 ff77 	bl	8003238 <HAL_Delay>
      //init motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);   //
 800234a:	2201      	movs	r2, #1
 800234c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002350:	4897      	ldr	r0, [pc, #604]	; (80025b0 <HAL_GPIO_EXTI_Callback+0xf10>)
 8002352:	f001 ffdd 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); //
 8002356:	2200      	movs	r2, #0
 8002358:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800235c:	4894      	ldr	r0, [pc, #592]	; (80025b0 <HAL_GPIO_EXTI_Callback+0xf10>)
 800235e:	f001 ffd7 	bl	8004310 <HAL_GPIO_WritePin>

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 500);
 8002362:	4b90      	ldr	r3, [pc, #576]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xf04>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800236a:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800236c:	2201      	movs	r2, #1
 800236e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002372:	488f      	ldr	r0, [pc, #572]	; (80025b0 <HAL_GPIO_EXTI_Callback+0xf10>)
 8002374:	f001 ffcc 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8002378:	2201      	movs	r2, #1
 800237a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800237e:	488c      	ldr	r0, [pc, #560]	; (80025b0 <HAL_GPIO_EXTI_Callback+0xf10>)
 8002380:	f001 ffc6 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_Delay(100);
 8002384:	2064      	movs	r0, #100	; 0x64
 8002386:	f000 ff57 	bl	8003238 <HAL_Delay>
      //init motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);   //
 800238a:	2201      	movs	r2, #1
 800238c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002390:	4887      	ldr	r0, [pc, #540]	; (80025b0 <HAL_GPIO_EXTI_Callback+0xf10>)
 8002392:	f001 ffbd 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); //
 8002396:	2200      	movs	r2, #0
 8002398:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800239c:	4884      	ldr	r0, [pc, #528]	; (80025b0 <HAL_GPIO_EXTI_Callback+0xf10>)
 800239e:	f001 ffb7 	bl	8004310 <HAL_GPIO_WritePin>
      //防抱�????????????????????????????????????????

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 80023a2:	4b80      	ldr	r3, [pc, #512]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xf04>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2200      	movs	r2, #0
 80023a8:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 80023aa:	2108      	movs	r1, #8
 80023ac:	487d      	ldr	r0, [pc, #500]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xf04>)
 80023ae:	f003 fa41 	bl	8005834 <HAL_TIM_PWM_Stop>

      //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      HAL_Delay(3000);
 80023b2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80023b6:	f000 ff3f 	bl	8003238 <HAL_Delay>
    }
    if (pdx[4] && pbx[7] && (!pbx[6]) && pdx[15] && pdx[9])
 80023ba:	4b7b      	ldr	r3, [pc, #492]	; (80025a8 <HAL_GPIO_EXTI_Callback+0xf08>)
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d076      	beq.n	80024b0 <HAL_GPIO_EXTI_Callback+0xe10>
 80023c2:	4b7a      	ldr	r3, [pc, #488]	; (80025ac <HAL_GPIO_EXTI_Callback+0xf0c>)
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d072      	beq.n	80024b0 <HAL_GPIO_EXTI_Callback+0xe10>
 80023ca:	4b78      	ldr	r3, [pc, #480]	; (80025ac <HAL_GPIO_EXTI_Callback+0xf0c>)
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d16e      	bne.n	80024b0 <HAL_GPIO_EXTI_Callback+0xe10>
 80023d2:	4b75      	ldr	r3, [pc, #468]	; (80025a8 <HAL_GPIO_EXTI_Callback+0xf08>)
 80023d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d06a      	beq.n	80024b0 <HAL_GPIO_EXTI_Callback+0xe10>
 80023da:	4b73      	ldr	r3, [pc, #460]	; (80025a8 <HAL_GPIO_EXTI_Callback+0xf08>)
 80023dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d066      	beq.n	80024b0 <HAL_GPIO_EXTI_Callback+0xe10>
    {
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); //PB0    A03  底盘车电�????????????????????????????????????????  �????????????????????????????????????????个触�????????????????????????????????????????
 80023e2:	2108      	movs	r1, #8
 80023e4:	486f      	ldr	r0, [pc, #444]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xf04>)
 80023e6:	f003 f92b 	bl	8005640 <HAL_TIM_PWM_Start>
                                                // // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
                                                // // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
      // PB0   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 80023ea:	4b6e      	ldr	r3, [pc, #440]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xf04>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2200      	movs	r2, #0
 80023f0:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      // PB1   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
      HAL_Delay(1);
 80023f2:	2001      	movs	r0, #1
 80023f4:	f000 ff20 	bl	8003238 <HAL_Delay>
      //init motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);   //
 80023f8:	2201      	movs	r2, #1
 80023fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023fe:	486c      	ldr	r0, [pc, #432]	; (80025b0 <HAL_GPIO_EXTI_Callback+0xf10>)
 8002400:	f001 ff86 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); //
 8002404:	2200      	movs	r2, #0
 8002406:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800240a:	4869      	ldr	r0, [pc, #420]	; (80025b0 <HAL_GPIO_EXTI_Callback+0xf10>)
 800240c:	f001 ff80 	bl	8004310 <HAL_GPIO_WritePin>

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1000);
 8002410:	4b64      	ldr	r3, [pc, #400]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xf04>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002418:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_Delay(1);
 800241a:	2001      	movs	r0, #1
 800241c:	f000 ff0c 	bl	8003238 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8002420:	2200      	movs	r2, #0
 8002422:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002426:	4862      	ldr	r0, [pc, #392]	; (80025b0 <HAL_GPIO_EXTI_Callback+0xf10>)
 8002428:	f001 ff72 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 800242c:	2200      	movs	r2, #0
 800242e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002432:	485f      	ldr	r0, [pc, #380]	; (80025b0 <HAL_GPIO_EXTI_Callback+0xf10>)
 8002434:	f001 ff6c 	bl	8004310 <HAL_GPIO_WritePin>

      HAL_Delay(5000);
 8002438:	f241 3088 	movw	r0, #5000	; 0x1388
 800243c:	f000 fefc 	bl	8003238 <HAL_Delay>
      //init motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);   //
 8002440:	2201      	movs	r2, #1
 8002442:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002446:	485a      	ldr	r0, [pc, #360]	; (80025b0 <HAL_GPIO_EXTI_Callback+0xf10>)
 8002448:	f001 ff62 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); //
 800244c:	2200      	movs	r2, #0
 800244e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002452:	4857      	ldr	r0, [pc, #348]	; (80025b0 <HAL_GPIO_EXTI_Callback+0xf10>)
 8002454:	f001 ff5c 	bl	8004310 <HAL_GPIO_WritePin>

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 500);
 8002458:	4b52      	ldr	r3, [pc, #328]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xf04>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002460:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8002462:	2201      	movs	r2, #1
 8002464:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002468:	4851      	ldr	r0, [pc, #324]	; (80025b0 <HAL_GPIO_EXTI_Callback+0xf10>)
 800246a:	f001 ff51 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 800246e:	2201      	movs	r2, #1
 8002470:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002474:	484e      	ldr	r0, [pc, #312]	; (80025b0 <HAL_GPIO_EXTI_Callback+0xf10>)
 8002476:	f001 ff4b 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_Delay(100);
 800247a:	2064      	movs	r0, #100	; 0x64
 800247c:	f000 fedc 	bl	8003238 <HAL_Delay>
      //init motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);   //
 8002480:	2201      	movs	r2, #1
 8002482:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002486:	484a      	ldr	r0, [pc, #296]	; (80025b0 <HAL_GPIO_EXTI_Callback+0xf10>)
 8002488:	f001 ff42 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); //
 800248c:	2200      	movs	r2, #0
 800248e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002492:	4847      	ldr	r0, [pc, #284]	; (80025b0 <HAL_GPIO_EXTI_Callback+0xf10>)
 8002494:	f001 ff3c 	bl	8004310 <HAL_GPIO_WritePin>
      //防抱�????????????????????????????????????????

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8002498:	4b42      	ldr	r3, [pc, #264]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xf04>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2200      	movs	r2, #0
 800249e:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 80024a0:	2108      	movs	r1, #8
 80024a2:	4840      	ldr	r0, [pc, #256]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xf04>)
 80024a4:	f003 f9c6 	bl	8005834 <HAL_TIM_PWM_Stop>

      //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      HAL_Delay(3000);
 80024a8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80024ac:	f000 fec4 	bl	8003238 <HAL_Delay>
    }
    if (((!pdx[4]) || (!pdx[5])) && pbx[7] && (!pbx[6]) && pdx[15] && pdx[9])
 80024b0:	4b3d      	ldr	r3, [pc, #244]	; (80025a8 <HAL_GPIO_EXTI_Callback+0xf08>)
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d004      	beq.n	80024c2 <HAL_GPIO_EXTI_Callback+0xe22>
 80024b8:	4b3b      	ldr	r3, [pc, #236]	; (80025a8 <HAL_GPIO_EXTI_Callback+0xf08>)
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f040 8080 	bne.w	80025c2 <HAL_GPIO_EXTI_Callback+0xf22>
 80024c2:	4b3a      	ldr	r3, [pc, #232]	; (80025ac <HAL_GPIO_EXTI_Callback+0xf0c>)
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d07b      	beq.n	80025c2 <HAL_GPIO_EXTI_Callback+0xf22>
 80024ca:	4b38      	ldr	r3, [pc, #224]	; (80025ac <HAL_GPIO_EXTI_Callback+0xf0c>)
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d177      	bne.n	80025c2 <HAL_GPIO_EXTI_Callback+0xf22>
 80024d2:	4b35      	ldr	r3, [pc, #212]	; (80025a8 <HAL_GPIO_EXTI_Callback+0xf08>)
 80024d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d073      	beq.n	80025c2 <HAL_GPIO_EXTI_Callback+0xf22>
 80024da:	4b33      	ldr	r3, [pc, #204]	; (80025a8 <HAL_GPIO_EXTI_Callback+0xf08>)
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d06f      	beq.n	80025c2 <HAL_GPIO_EXTI_Callback+0xf22>
    {
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); //PB0    A03  底盘车电�????????????????????????????????????????  �????????????????????????????????????????个触�????????????????????????????????????????
 80024e2:	2108      	movs	r1, #8
 80024e4:	482f      	ldr	r0, [pc, #188]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xf04>)
 80024e6:	f003 f8ab 	bl	8005640 <HAL_TIM_PWM_Start>
                                                // // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
                                                // // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
      // PB0   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 80024ea:	4b2e      	ldr	r3, [pc, #184]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xf04>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2200      	movs	r2, #0
 80024f0:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      // PB1   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
      HAL_Delay(1);
 80024f2:	2001      	movs	r0, #1
 80024f4:	f000 fea0 	bl	8003238 <HAL_Delay>
      //init motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);   //
 80024f8:	2201      	movs	r2, #1
 80024fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024fe:	482c      	ldr	r0, [pc, #176]	; (80025b0 <HAL_GPIO_EXTI_Callback+0xf10>)
 8002500:	f001 ff06 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); //
 8002504:	2200      	movs	r2, #0
 8002506:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800250a:	4829      	ldr	r0, [pc, #164]	; (80025b0 <HAL_GPIO_EXTI_Callback+0xf10>)
 800250c:	f001 ff00 	bl	8004310 <HAL_GPIO_WritePin>

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1000);
 8002510:	4b24      	ldr	r3, [pc, #144]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xf04>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002518:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_Delay(1);
 800251a:	2001      	movs	r0, #1
 800251c:	f000 fe8c 	bl	8003238 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8002520:	2200      	movs	r2, #0
 8002522:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002526:	4822      	ldr	r0, [pc, #136]	; (80025b0 <HAL_GPIO_EXTI_Callback+0xf10>)
 8002528:	f001 fef2 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 800252c:	2200      	movs	r2, #0
 800252e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002532:	481f      	ldr	r0, [pc, #124]	; (80025b0 <HAL_GPIO_EXTI_Callback+0xf10>)
 8002534:	f001 feec 	bl	8004310 <HAL_GPIO_WritePin>

      HAL_Delay(5000);
 8002538:	f241 3088 	movw	r0, #5000	; 0x1388
 800253c:	f000 fe7c 	bl	8003238 <HAL_Delay>
      //init motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);   //
 8002540:	2201      	movs	r2, #1
 8002542:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002546:	481a      	ldr	r0, [pc, #104]	; (80025b0 <HAL_GPIO_EXTI_Callback+0xf10>)
 8002548:	f001 fee2 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); //
 800254c:	2200      	movs	r2, #0
 800254e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002552:	4817      	ldr	r0, [pc, #92]	; (80025b0 <HAL_GPIO_EXTI_Callback+0xf10>)
 8002554:	f001 fedc 	bl	8004310 <HAL_GPIO_WritePin>

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 500);
 8002558:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xf04>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002560:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8002562:	2201      	movs	r2, #1
 8002564:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002568:	4811      	ldr	r0, [pc, #68]	; (80025b0 <HAL_GPIO_EXTI_Callback+0xf10>)
 800256a:	f001 fed1 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 800256e:	2201      	movs	r2, #1
 8002570:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002574:	480e      	ldr	r0, [pc, #56]	; (80025b0 <HAL_GPIO_EXTI_Callback+0xf10>)
 8002576:	f001 fecb 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_Delay(100);
 800257a:	2064      	movs	r0, #100	; 0x64
 800257c:	f000 fe5c 	bl	8003238 <HAL_Delay>
      //init motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);   //
 8002580:	2201      	movs	r2, #1
 8002582:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002586:	480a      	ldr	r0, [pc, #40]	; (80025b0 <HAL_GPIO_EXTI_Callback+0xf10>)
 8002588:	f001 fec2 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); //
 800258c:	2200      	movs	r2, #0
 800258e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002592:	4807      	ldr	r0, [pc, #28]	; (80025b0 <HAL_GPIO_EXTI_Callback+0xf10>)
 8002594:	f001 febc 	bl	8004310 <HAL_GPIO_WritePin>
      //防抱�????????????????????????????????????????

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8002598:	4b02      	ldr	r3, [pc, #8]	; (80025a4 <HAL_GPIO_EXTI_Callback+0xf04>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2200      	movs	r2, #0
 800259e:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 80025a0:	2108      	movs	r1, #8
 80025a2:	e007      	b.n	80025b4 <HAL_GPIO_EXTI_Callback+0xf14>
 80025a4:	2000834c 	.word	0x2000834c
 80025a8:	20000304 	.word	0x20000304
 80025ac:	200002d4 	.word	0x200002d4
 80025b0:	40020400 	.word	0x40020400
 80025b4:	48a8      	ldr	r0, [pc, #672]	; (8002858 <HAL_GPIO_EXTI_Callback+0x11b8>)
 80025b6:	f003 f93d 	bl	8005834 <HAL_TIM_PWM_Stop>

      //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      HAL_Delay(3000);
 80025ba:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80025be:	f000 fe3b 	bl	8003238 <HAL_Delay>
    }
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 80025c2:	2201      	movs	r2, #1
 80025c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025c8:	48a4      	ldr	r0, [pc, #656]	; (800285c <HAL_GPIO_EXTI_Callback+0x11bc>)
 80025ca:	f001 fea1 	bl	8004310 <HAL_GPIO_WritePin>
  ///////////////////**************************  11  *******************/////////////////////////////////////////
  ///////////////////*************************************************/////////////////////////////////////////

  //   PD11 A31接地�????????????????????????????????????????分闸输入按钮                               重要3    [按钮  外部中断]
  //    11 接地�????????????????分闸 jiedidaofenzha
  if (GPIO_Pin == GPIO_PIN_11)
 80025ce:	88fb      	ldrh	r3, [r7, #6]
 80025d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025d4:	f040 8135 	bne.w	8002842 <HAL_GPIO_EXTI_Callback+0x11a2>
  {
    //PB7继电器�?�开关必须使�????????????????????????????????????????
    //已捕获PD10 接地�????????????????????????????????????????手动合闸  接地�????????????????????????????????????????电机反转PB8 = 1 , PB9 = 0 �???????????????????????????????????????? !远控允许PD9必为0  �???????????????????????????????????????? 底盘车试验位置PD4 �???????????????????????????????????????? PB7继电器�?�开关必须使能为1 �????????????????????????????????????????  !PB6 断路器必须分�???????????????????????????????????????? �???????????????????????????????????????? PD12 接地�????????????????????????????????????????机构合闸位置（信号快)  �???????????????????????????????????????? PD14 接地�????????????????????????????????????????合闸位置
    pdx[4] = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4);
 80025d8:	2110      	movs	r1, #16
 80025da:	48a0      	ldr	r0, [pc, #640]	; (800285c <HAL_GPIO_EXTI_Callback+0x11bc>)
 80025dc:	f001 fe80 	bl	80042e0 <HAL_GPIO_ReadPin>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	bf0c      	ite	eq
 80025e6:	2301      	moveq	r3, #1
 80025e8:	2300      	movne	r3, #0
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	461a      	mov	r2, r3
 80025ee:	4b9c      	ldr	r3, [pc, #624]	; (8002860 <HAL_GPIO_EXTI_Callback+0x11c0>)
 80025f0:	611a      	str	r2, [r3, #16]
    pdx[9] = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9);
 80025f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025f6:	4899      	ldr	r0, [pc, #612]	; (800285c <HAL_GPIO_EXTI_Callback+0x11bc>)
 80025f8:	f001 fe72 	bl	80042e0 <HAL_GPIO_ReadPin>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	bf0c      	ite	eq
 8002602:	2301      	moveq	r3, #1
 8002604:	2300      	movne	r3, #0
 8002606:	b2db      	uxtb	r3, r3
 8002608:	461a      	mov	r2, r3
 800260a:	4b95      	ldr	r3, [pc, #596]	; (8002860 <HAL_GPIO_EXTI_Callback+0x11c0>)
 800260c:	625a      	str	r2, [r3, #36]	; 0x24

    pdx[14] = !HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14);
 800260e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002612:	4892      	ldr	r0, [pc, #584]	; (800285c <HAL_GPIO_EXTI_Callback+0x11bc>)
 8002614:	f001 fe64 	bl	80042e0 <HAL_GPIO_ReadPin>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	bf0c      	ite	eq
 800261e:	2301      	moveq	r3, #1
 8002620:	2300      	movne	r3, #0
 8002622:	b2db      	uxtb	r3, r3
 8002624:	461a      	mov	r2, r3
 8002626:	4b8e      	ldr	r3, [pc, #568]	; (8002860 <HAL_GPIO_EXTI_Callback+0x11c0>)
 8002628:	639a      	str	r2, [r3, #56]	; 0x38

    pbx[7] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
 800262a:	2180      	movs	r1, #128	; 0x80
 800262c:	488d      	ldr	r0, [pc, #564]	; (8002864 <HAL_GPIO_EXTI_Callback+0x11c4>)
 800262e:	f001 fe57 	bl	80042e0 <HAL_GPIO_ReadPin>
 8002632:	4603      	mov	r3, r0
 8002634:	461a      	mov	r2, r3
 8002636:	4b8c      	ldr	r3, [pc, #560]	; (8002868 <HAL_GPIO_EXTI_Callback+0x11c8>)
 8002638:	61da      	str	r2, [r3, #28]
    pbx[6] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 800263a:	2140      	movs	r1, #64	; 0x40
 800263c:	4889      	ldr	r0, [pc, #548]	; (8002864 <HAL_GPIO_EXTI_Callback+0x11c4>)
 800263e:	f001 fe4f 	bl	80042e0 <HAL_GPIO_ReadPin>
 8002642:	4603      	mov	r3, r0
 8002644:	461a      	mov	r2, r3
 8002646:	4b88      	ldr	r3, [pc, #544]	; (8002868 <HAL_GPIO_EXTI_Callback+0x11c8>)
 8002648:	619a      	str	r2, [r3, #24]

    if (pdx[4] && pbx[7] && (!pbx[6]) && pdx[14] && (!pdx[9]))
 800264a:	4b85      	ldr	r3, [pc, #532]	; (8002860 <HAL_GPIO_EXTI_Callback+0x11c0>)
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d076      	beq.n	8002740 <HAL_GPIO_EXTI_Callback+0x10a0>
 8002652:	4b85      	ldr	r3, [pc, #532]	; (8002868 <HAL_GPIO_EXTI_Callback+0x11c8>)
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d072      	beq.n	8002740 <HAL_GPIO_EXTI_Callback+0x10a0>
 800265a:	4b83      	ldr	r3, [pc, #524]	; (8002868 <HAL_GPIO_EXTI_Callback+0x11c8>)
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d16e      	bne.n	8002740 <HAL_GPIO_EXTI_Callback+0x10a0>
 8002662:	4b7f      	ldr	r3, [pc, #508]	; (8002860 <HAL_GPIO_EXTI_Callback+0x11c0>)
 8002664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002666:	2b00      	cmp	r3, #0
 8002668:	d06a      	beq.n	8002740 <HAL_GPIO_EXTI_Callback+0x10a0>
 800266a:	4b7d      	ldr	r3, [pc, #500]	; (8002860 <HAL_GPIO_EXTI_Callback+0x11c0>)
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266e:	2b00      	cmp	r3, #0
 8002670:	d166      	bne.n	8002740 <HAL_GPIO_EXTI_Callback+0x10a0>
    {
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); //PB0    A03  底盘车电�????????????????????????????????????????  �????????????????????????????????????????个触�????????????????????????????????????????
 8002672:	2108      	movs	r1, #8
 8002674:	4878      	ldr	r0, [pc, #480]	; (8002858 <HAL_GPIO_EXTI_Callback+0x11b8>)
 8002676:	f002 ffe3 	bl	8005640 <HAL_TIM_PWM_Start>
                                                // // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
                                                // // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
      // PB0   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 800267a:	4b77      	ldr	r3, [pc, #476]	; (8002858 <HAL_GPIO_EXTI_Callback+0x11b8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2200      	movs	r2, #0
 8002680:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      // PB1   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
      HAL_Delay(1);
 8002682:	2001      	movs	r0, #1
 8002684:	f000 fdd8 	bl	8003238 <HAL_Delay>
      //init motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);   //
 8002688:	2201      	movs	r2, #1
 800268a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800268e:	4875      	ldr	r0, [pc, #468]	; (8002864 <HAL_GPIO_EXTI_Callback+0x11c4>)
 8002690:	f001 fe3e 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); //
 8002694:	2200      	movs	r2, #0
 8002696:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800269a:	4872      	ldr	r0, [pc, #456]	; (8002864 <HAL_GPIO_EXTI_Callback+0x11c4>)
 800269c:	f001 fe38 	bl	8004310 <HAL_GPIO_WritePin>

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1000);
 80026a0:	4b6d      	ldr	r3, [pc, #436]	; (8002858 <HAL_GPIO_EXTI_Callback+0x11b8>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026a8:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_Delay(1);
 80026aa:	2001      	movs	r0, #1
 80026ac:	f000 fdc4 	bl	8003238 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80026b0:	2201      	movs	r2, #1
 80026b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026b6:	486b      	ldr	r0, [pc, #428]	; (8002864 <HAL_GPIO_EXTI_Callback+0x11c4>)
 80026b8:	f001 fe2a 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80026bc:	2201      	movs	r2, #1
 80026be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026c2:	4868      	ldr	r0, [pc, #416]	; (8002864 <HAL_GPIO_EXTI_Callback+0x11c4>)
 80026c4:	f001 fe24 	bl	8004310 <HAL_GPIO_WritePin>

      HAL_Delay(5000);
 80026c8:	f241 3088 	movw	r0, #5000	; 0x1388
 80026cc:	f000 fdb4 	bl	8003238 <HAL_Delay>
      //init motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);   //
 80026d0:	2201      	movs	r2, #1
 80026d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026d6:	4863      	ldr	r0, [pc, #396]	; (8002864 <HAL_GPIO_EXTI_Callback+0x11c4>)
 80026d8:	f001 fe1a 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); //
 80026dc:	2200      	movs	r2, #0
 80026de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026e2:	4860      	ldr	r0, [pc, #384]	; (8002864 <HAL_GPIO_EXTI_Callback+0x11c4>)
 80026e4:	f001 fe14 	bl	8004310 <HAL_GPIO_WritePin>

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 500);
 80026e8:	4b5b      	ldr	r3, [pc, #364]	; (8002858 <HAL_GPIO_EXTI_Callback+0x11b8>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80026f0:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80026f2:	2200      	movs	r2, #0
 80026f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026f8:	485a      	ldr	r0, [pc, #360]	; (8002864 <HAL_GPIO_EXTI_Callback+0x11c4>)
 80026fa:	f001 fe09 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 80026fe:	2200      	movs	r2, #0
 8002700:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002704:	4857      	ldr	r0, [pc, #348]	; (8002864 <HAL_GPIO_EXTI_Callback+0x11c4>)
 8002706:	f001 fe03 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_Delay(100);
 800270a:	2064      	movs	r0, #100	; 0x64
 800270c:	f000 fd94 	bl	8003238 <HAL_Delay>
      //init motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);   //
 8002710:	2201      	movs	r2, #1
 8002712:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002716:	4853      	ldr	r0, [pc, #332]	; (8002864 <HAL_GPIO_EXTI_Callback+0x11c4>)
 8002718:	f001 fdfa 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); //
 800271c:	2200      	movs	r2, #0
 800271e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002722:	4850      	ldr	r0, [pc, #320]	; (8002864 <HAL_GPIO_EXTI_Callback+0x11c4>)
 8002724:	f001 fdf4 	bl	8004310 <HAL_GPIO_WritePin>
      //防抱�????????????????????????????????????????

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8002728:	4b4b      	ldr	r3, [pc, #300]	; (8002858 <HAL_GPIO_EXTI_Callback+0x11b8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2200      	movs	r2, #0
 800272e:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8002730:	2108      	movs	r1, #8
 8002732:	4849      	ldr	r0, [pc, #292]	; (8002858 <HAL_GPIO_EXTI_Callback+0x11b8>)
 8002734:	f003 f87e 	bl	8005834 <HAL_TIM_PWM_Stop>

      //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      HAL_Delay(3000);
 8002738:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800273c:	f000 fd7c 	bl	8003238 <HAL_Delay>
    }
    if (pdx[4] && pbx[7] && (!pbx[6]) && pdx[14] && pdx[9])
 8002740:	4b47      	ldr	r3, [pc, #284]	; (8002860 <HAL_GPIO_EXTI_Callback+0x11c0>)
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d076      	beq.n	8002836 <HAL_GPIO_EXTI_Callback+0x1196>
 8002748:	4b47      	ldr	r3, [pc, #284]	; (8002868 <HAL_GPIO_EXTI_Callback+0x11c8>)
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d072      	beq.n	8002836 <HAL_GPIO_EXTI_Callback+0x1196>
 8002750:	4b45      	ldr	r3, [pc, #276]	; (8002868 <HAL_GPIO_EXTI_Callback+0x11c8>)
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d16e      	bne.n	8002836 <HAL_GPIO_EXTI_Callback+0x1196>
 8002758:	4b41      	ldr	r3, [pc, #260]	; (8002860 <HAL_GPIO_EXTI_Callback+0x11c0>)
 800275a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275c:	2b00      	cmp	r3, #0
 800275e:	d06a      	beq.n	8002836 <HAL_GPIO_EXTI_Callback+0x1196>
 8002760:	4b3f      	ldr	r3, [pc, #252]	; (8002860 <HAL_GPIO_EXTI_Callback+0x11c0>)
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	2b00      	cmp	r3, #0
 8002766:	d066      	beq.n	8002836 <HAL_GPIO_EXTI_Callback+0x1196>
    {
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); //PB0    A03  底盘车电�????????????????????????????????????????  �????????????????????????????????????????个触�????????????????????????????????????????
 8002768:	2108      	movs	r1, #8
 800276a:	483b      	ldr	r0, [pc, #236]	; (8002858 <HAL_GPIO_EXTI_Callback+0x11b8>)
 800276c:	f002 ff68 	bl	8005640 <HAL_TIM_PWM_Start>
                                                // // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
                                                // // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
      // PB0   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8002770:	4b39      	ldr	r3, [pc, #228]	; (8002858 <HAL_GPIO_EXTI_Callback+0x11b8>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2200      	movs	r2, #0
 8002776:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      // PB1   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
      HAL_Delay(1);
 8002778:	2001      	movs	r0, #1
 800277a:	f000 fd5d 	bl	8003238 <HAL_Delay>
      //init motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);   //
 800277e:	2201      	movs	r2, #1
 8002780:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002784:	4837      	ldr	r0, [pc, #220]	; (8002864 <HAL_GPIO_EXTI_Callback+0x11c4>)
 8002786:	f001 fdc3 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); //
 800278a:	2200      	movs	r2, #0
 800278c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002790:	4834      	ldr	r0, [pc, #208]	; (8002864 <HAL_GPIO_EXTI_Callback+0x11c4>)
 8002792:	f001 fdbd 	bl	8004310 <HAL_GPIO_WritePin>

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1000);
 8002796:	4b30      	ldr	r3, [pc, #192]	; (8002858 <HAL_GPIO_EXTI_Callback+0x11b8>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800279e:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_Delay(1);
 80027a0:	2001      	movs	r0, #1
 80027a2:	f000 fd49 	bl	8003238 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80027a6:	2201      	movs	r2, #1
 80027a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027ac:	482d      	ldr	r0, [pc, #180]	; (8002864 <HAL_GPIO_EXTI_Callback+0x11c4>)
 80027ae:	f001 fdaf 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80027b2:	2201      	movs	r2, #1
 80027b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027b8:	482a      	ldr	r0, [pc, #168]	; (8002864 <HAL_GPIO_EXTI_Callback+0x11c4>)
 80027ba:	f001 fda9 	bl	8004310 <HAL_GPIO_WritePin>

      HAL_Delay(5000);
 80027be:	f241 3088 	movw	r0, #5000	; 0x1388
 80027c2:	f000 fd39 	bl	8003238 <HAL_Delay>
      //init motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);   //
 80027c6:	2201      	movs	r2, #1
 80027c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027cc:	4825      	ldr	r0, [pc, #148]	; (8002864 <HAL_GPIO_EXTI_Callback+0x11c4>)
 80027ce:	f001 fd9f 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); //
 80027d2:	2200      	movs	r2, #0
 80027d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027d8:	4822      	ldr	r0, [pc, #136]	; (8002864 <HAL_GPIO_EXTI_Callback+0x11c4>)
 80027da:	f001 fd99 	bl	8004310 <HAL_GPIO_WritePin>

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 500);
 80027de:	4b1e      	ldr	r3, [pc, #120]	; (8002858 <HAL_GPIO_EXTI_Callback+0x11b8>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80027e6:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80027e8:	2200      	movs	r2, #0
 80027ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027ee:	481d      	ldr	r0, [pc, #116]	; (8002864 <HAL_GPIO_EXTI_Callback+0x11c4>)
 80027f0:	f001 fd8e 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 80027f4:	2200      	movs	r2, #0
 80027f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80027fa:	481a      	ldr	r0, [pc, #104]	; (8002864 <HAL_GPIO_EXTI_Callback+0x11c4>)
 80027fc:	f001 fd88 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_Delay(100);
 8002800:	2064      	movs	r0, #100	; 0x64
 8002802:	f000 fd19 	bl	8003238 <HAL_Delay>
      //init motor
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);   //
 8002806:	2201      	movs	r2, #1
 8002808:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800280c:	4815      	ldr	r0, [pc, #84]	; (8002864 <HAL_GPIO_EXTI_Callback+0x11c4>)
 800280e:	f001 fd7f 	bl	8004310 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET); //
 8002812:	2200      	movs	r2, #0
 8002814:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002818:	4812      	ldr	r0, [pc, #72]	; (8002864 <HAL_GPIO_EXTI_Callback+0x11c4>)
 800281a:	f001 fd79 	bl	8004310 <HAL_GPIO_WritePin>
      //防抱�????????????????????????????????????????

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 800281e:	4b0e      	ldr	r3, [pc, #56]	; (8002858 <HAL_GPIO_EXTI_Callback+0x11b8>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2200      	movs	r2, #0
 8002824:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8002826:	2108      	movs	r1, #8
 8002828:	480b      	ldr	r0, [pc, #44]	; (8002858 <HAL_GPIO_EXTI_Callback+0x11b8>)
 800282a:	f003 f803 	bl	8005834 <HAL_TIM_PWM_Stop>

      //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      HAL_Delay(3000);
 800282e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002832:	f000 fd01 	bl	8003238 <HAL_Delay>
    }
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8002836:	2201      	movs	r2, #1
 8002838:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800283c:	4807      	ldr	r0, [pc, #28]	; (800285c <HAL_GPIO_EXTI_Callback+0x11bc>)
 800283e:	f001 fd67 	bl	8004310 <HAL_GPIO_WritePin>
  }
  HAL_Delay(100);
 8002842:	2064      	movs	r0, #100	; 0x64
 8002844:	f000 fcf8 	bl	8003238 <HAL_Delay>
  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002848:	4a08      	ldr	r2, [pc, #32]	; (800286c <HAL_GPIO_EXTI_Callback+0x11cc>)
 800284a:	88fb      	ldrh	r3, [r7, #6]
 800284c:	6153      	str	r3, [r2, #20]
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	2000834c 	.word	0x2000834c
 800285c:	40020c00 	.word	0x40020c00
 8002860:	20000304 	.word	0x20000304
 8002864:	40020400 	.word	0x40020400
 8002868:	200002d4 	.word	0x200002d4
 800286c:	40013c00 	.word	0x40013c00

08002870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002874:	b672      	cpsid	i
}
 8002876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002878:	e7fe      	b.n	8002878 <Error_Handler+0x8>
	...

0800287c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002882:	4b0f      	ldr	r3, [pc, #60]	; (80028c0 <HAL_MspInit+0x44>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	4a0e      	ldr	r2, [pc, #56]	; (80028c0 <HAL_MspInit+0x44>)
 8002888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800288c:	6413      	str	r3, [r2, #64]	; 0x40
 800288e:	4b0c      	ldr	r3, [pc, #48]	; (80028c0 <HAL_MspInit+0x44>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002896:	607b      	str	r3, [r7, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800289a:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <HAL_MspInit+0x44>)
 800289c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289e:	4a08      	ldr	r2, [pc, #32]	; (80028c0 <HAL_MspInit+0x44>)
 80028a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028a4:	6453      	str	r3, [r2, #68]	; 0x44
 80028a6:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <HAL_MspInit+0x44>)
 80028a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ae:	603b      	str	r3, [r7, #0]
 80028b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40023800 	.word	0x40023800

080028c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028c8:	e7fe      	b.n	80028c8 <NMI_Handler+0x4>

080028ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ca:	b480      	push	{r7}
 80028cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028ce:	e7fe      	b.n	80028ce <HardFault_Handler+0x4>

080028d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028d4:	e7fe      	b.n	80028d4 <MemManage_Handler+0x4>

080028d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028d6:	b480      	push	{r7}
 80028d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028da:	e7fe      	b.n	80028da <BusFault_Handler+0x4>

080028dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028e0:	e7fe      	b.n	80028e0 <UsageFault_Handler+0x4>

080028e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028e2:	b480      	push	{r7}
 80028e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028e6:	bf00      	nop
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028f4:	bf00      	nop
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028fe:	b480      	push	{r7}
 8002900:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002902:	bf00      	nop
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002910:	f000 fc72 	bl	80031f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002914:	bf00      	nop
 8002916:	bd80      	pop	{r7, pc}

08002918 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800291c:	2001      	movs	r0, #1
 800291e:	f001 fd11 	bl	8004344 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002922:	bf00      	nop
 8002924:	bd80      	pop	{r7, pc}

08002926 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800292a:	2002      	movs	r0, #2
 800292c:	f001 fd0a 	bl	8004344 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002930:	bf00      	nop
 8002932:	bd80      	pop	{r7, pc}

08002934 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002938:	2004      	movs	r0, #4
 800293a:	f001 fd03 	bl	8004344 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}

08002942 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002946:	2008      	movs	r0, #8
 8002948:	f001 fcfc 	bl	8004344 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800294c:	bf00      	nop
 800294e:	bd80      	pop	{r7, pc}

08002950 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002954:	2040      	movs	r0, #64	; 0x40
 8002956:	f001 fcf5 	bl	8004344 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800295a:	2080      	movs	r0, #128	; 0x80
 800295c:	f001 fcf2 	bl	8004344 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002960:	bf00      	nop
 8002962:	bd80      	pop	{r7, pc}

08002964 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002968:	4802      	ldr	r0, [pc, #8]	; (8002974 <TIM3_IRQHandler+0x10>)
 800296a:	f002 ffe3 	bl	8005934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	2000834c 	.word	0x2000834c

08002978 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800297c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002980:	f001 fce0 	bl	8004344 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002984:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002988:	f001 fcdc 	bl	8004344 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800298c:	bf00      	nop
 800298e:	bd80      	pop	{r7, pc}

08002990 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002994:	4802      	ldr	r0, [pc, #8]	; (80029a0 <TIM6_DAC_IRQHandler+0x10>)
 8002996:	f002 ffcd 	bl	8005934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20008398 	.word	0x20008398

080029a4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80029a8:	4802      	ldr	r0, [pc, #8]	; (80029b4 <DMA2_Stream0_IRQHandler+0x10>)
 80029aa:	f001 f8b1 	bl	8003b10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000258 	.word	0x20000258

080029b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
	return 1;
 80029bc:	2301      	movs	r3, #1
}
 80029be:	4618      	mov	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <_kill>:

int _kill(int pid, int sig)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80029d2:	f004 fa77 	bl	8006ec4 <__errno>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2216      	movs	r2, #22
 80029da:	601a      	str	r2, [r3, #0]
	return -1;
 80029dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <_exit>:

void _exit (int status)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80029f0:	f04f 31ff 	mov.w	r1, #4294967295
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff ffe7 	bl	80029c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80029fa:	e7fe      	b.n	80029fa <_exit+0x12>

080029fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	e00a      	b.n	8002a24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a0e:	f3af 8000 	nop.w
 8002a12:	4601      	mov	r1, r0
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	60ba      	str	r2, [r7, #8]
 8002a1a:	b2ca      	uxtb	r2, r1
 8002a1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	3301      	adds	r3, #1
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	dbf0      	blt.n	8002a0e <_read+0x12>
	}

return len;
 8002a2c:	687b      	ldr	r3, [r7, #4]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b086      	sub	sp, #24
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]
 8002a46:	e009      	b.n	8002a5c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	60ba      	str	r2, [r7, #8]
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7fe fc21 	bl	8001298 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	dbf1      	blt.n	8002a48 <_write+0x12>
	}
	return len;
 8002a64:	687b      	ldr	r3, [r7, #4]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <_close>:

int _close(int file)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
	return -1;
 8002a76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a96:	605a      	str	r2, [r3, #4]
	return 0;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <_isatty>:

int _isatty(int file)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
	return 1;
 8002aae:	2301      	movs	r3, #1
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
	return 0;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
	...

08002ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ae0:	4a14      	ldr	r2, [pc, #80]	; (8002b34 <_sbrk+0x5c>)
 8002ae2:	4b15      	ldr	r3, [pc, #84]	; (8002b38 <_sbrk+0x60>)
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002aec:	4b13      	ldr	r3, [pc, #76]	; (8002b3c <_sbrk+0x64>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d102      	bne.n	8002afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002af4:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <_sbrk+0x64>)
 8002af6:	4a12      	ldr	r2, [pc, #72]	; (8002b40 <_sbrk+0x68>)
 8002af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002afa:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <_sbrk+0x64>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4413      	add	r3, r2
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d207      	bcs.n	8002b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b08:	f004 f9dc 	bl	8006ec4 <__errno>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	220c      	movs	r2, #12
 8002b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b12:	f04f 33ff 	mov.w	r3, #4294967295
 8002b16:	e009      	b.n	8002b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b18:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <_sbrk+0x64>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b1e:	4b07      	ldr	r3, [pc, #28]	; (8002b3c <_sbrk+0x64>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4413      	add	r3, r2
 8002b26:	4a05      	ldr	r2, [pc, #20]	; (8002b3c <_sbrk+0x64>)
 8002b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	20050000 	.word	0x20050000
 8002b38:	00000400 	.word	0x00000400
 8002b3c:	200001f8 	.word	0x200001f8
 8002b40:	20008540 	.word	0x20008540

08002b44 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b48:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <SystemInit+0x20>)
 8002b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4e:	4a05      	ldr	r2, [pc, #20]	; (8002b64 <SystemInit+0x20>)
 8002b50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b58:	bf00      	nop
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <MX_TIM3_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim14;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b08a      	sub	sp, #40	; 0x28
 8002b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b6e:	f107 031c 	add.w	r3, r7, #28
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	605a      	str	r2, [r3, #4]
 8002b78:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b7a:	463b      	mov	r3, r7
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	605a      	str	r2, [r3, #4]
 8002b82:	609a      	str	r2, [r3, #8]
 8002b84:	60da      	str	r2, [r3, #12]
 8002b86:	611a      	str	r2, [r3, #16]
 8002b88:	615a      	str	r2, [r3, #20]
 8002b8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b8c:	4b22      	ldr	r3, [pc, #136]	; (8002c18 <MX_TIM3_Init+0xb0>)
 8002b8e:	4a23      	ldr	r2, [pc, #140]	; (8002c1c <MX_TIM3_Init+0xb4>)
 8002b90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 215;
 8002b92:	4b21      	ldr	r3, [pc, #132]	; (8002c18 <MX_TIM3_Init+0xb0>)
 8002b94:	22d7      	movs	r2, #215	; 0xd7
 8002b96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b98:	4b1f      	ldr	r3, [pc, #124]	; (8002c18 <MX_TIM3_Init+0xb0>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8002b9e:	4b1e      	ldr	r3, [pc, #120]	; (8002c18 <MX_TIM3_Init+0xb0>)
 8002ba0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002ba4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ba6:	4b1c      	ldr	r3, [pc, #112]	; (8002c18 <MX_TIM3_Init+0xb0>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bac:	4b1a      	ldr	r3, [pc, #104]	; (8002c18 <MX_TIM3_Init+0xb0>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002bb2:	4819      	ldr	r0, [pc, #100]	; (8002c18 <MX_TIM3_Init+0xb0>)
 8002bb4:	f002 fced 	bl	8005592 <HAL_TIM_PWM_Init>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8002bbe:	f7ff fe57 	bl	8002870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bca:	f107 031c 	add.w	r3, r7, #28
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4811      	ldr	r0, [pc, #68]	; (8002c18 <MX_TIM3_Init+0xb0>)
 8002bd2:	f003 fc35 	bl	8006440 <HAL_TIMEx_MasterConfigSynchronization>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002bdc:	f7ff fe48 	bl	8002870 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002be0:	2360      	movs	r3, #96	; 0x60
 8002be2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8002be4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002be8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bea:	2300      	movs	r3, #0
 8002bec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002bf2:	463b      	mov	r3, r7
 8002bf4:	2208      	movs	r2, #8
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4807      	ldr	r0, [pc, #28]	; (8002c18 <MX_TIM3_Init+0xb0>)
 8002bfa:	f002 ffbb 	bl	8005b74 <HAL_TIM_PWM_ConfigChannel>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8002c04:	f7ff fe34 	bl	8002870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002c08:	4803      	ldr	r0, [pc, #12]	; (8002c18 <MX_TIM3_Init+0xb0>)
 8002c0a:	f000 f8bf 	bl	8002d8c <HAL_TIM_MspPostInit>

}
 8002c0e:	bf00      	nop
 8002c10:	3728      	adds	r7, #40	; 0x28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	2000834c 	.word	0x2000834c
 8002c1c:	40000400 	.word	0x40000400

08002c20 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c26:	1d3b      	adds	r3, r7, #4
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002c30:	4b15      	ldr	r3, [pc, #84]	; (8002c88 <MX_TIM6_Init+0x68>)
 8002c32:	4a16      	ldr	r2, [pc, #88]	; (8002c8c <MX_TIM6_Init+0x6c>)
 8002c34:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10800-1;
 8002c36:	4b14      	ldr	r3, [pc, #80]	; (8002c88 <MX_TIM6_Init+0x68>)
 8002c38:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8002c3c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c3e:	4b12      	ldr	r3, [pc, #72]	; (8002c88 <MX_TIM6_Init+0x68>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8002c44:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <MX_TIM6_Init+0x68>)
 8002c46:	f242 720f 	movw	r2, #9999	; 0x270f
 8002c4a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c4c:	4b0e      	ldr	r3, [pc, #56]	; (8002c88 <MX_TIM6_Init+0x68>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002c52:	480d      	ldr	r0, [pc, #52]	; (8002c88 <MX_TIM6_Init+0x68>)
 8002c54:	f002 fc46 	bl	80054e4 <HAL_TIM_Base_Init>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002c5e:	f7ff fe07 	bl	8002870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c62:	2300      	movs	r3, #0
 8002c64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c66:	2300      	movs	r3, #0
 8002c68:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002c6a:	1d3b      	adds	r3, r7, #4
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4806      	ldr	r0, [pc, #24]	; (8002c88 <MX_TIM6_Init+0x68>)
 8002c70:	f003 fbe6 	bl	8006440 <HAL_TIMEx_MasterConfigSynchronization>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002c7a:	f7ff fdf9 	bl	8002870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002c7e:	bf00      	nop
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20008398 	.word	0x20008398
 8002c8c:	40001000 	.word	0x40001000

08002c90 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002c94:	4b0e      	ldr	r3, [pc, #56]	; (8002cd0 <MX_TIM14_Init+0x40>)
 8002c96:	4a0f      	ldr	r2, [pc, #60]	; (8002cd4 <MX_TIM14_Init+0x44>)
 8002c98:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 107;
 8002c9a:	4b0d      	ldr	r3, [pc, #52]	; (8002cd0 <MX_TIM14_Init+0x40>)
 8002c9c:	226b      	movs	r2, #107	; 0x6b
 8002c9e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <MX_TIM14_Init+0x40>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8002ca6:	4b0a      	ldr	r3, [pc, #40]	; (8002cd0 <MX_TIM14_Init+0x40>)
 8002ca8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cac:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cae:	4b08      	ldr	r3, [pc, #32]	; (8002cd0 <MX_TIM14_Init+0x40>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cb4:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <MX_TIM14_Init+0x40>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002cba:	4805      	ldr	r0, [pc, #20]	; (8002cd0 <MX_TIM14_Init+0x40>)
 8002cbc:	f002 fc12 	bl	80054e4 <HAL_TIM_Base_Init>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8002cc6:	f7ff fdd3 	bl	8002870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002cca:	bf00      	nop
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	200083e4 	.word	0x200083e4
 8002cd4:	40002000 	.word	0x40002000

08002cd8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a0d      	ldr	r2, [pc, #52]	; (8002d1c <HAL_TIM_PWM_MspInit+0x44>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d113      	bne.n	8002d12 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cea:	4b0d      	ldr	r3, [pc, #52]	; (8002d20 <HAL_TIM_PWM_MspInit+0x48>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	4a0c      	ldr	r2, [pc, #48]	; (8002d20 <HAL_TIM_PWM_MspInit+0x48>)
 8002cf0:	f043 0302 	orr.w	r3, r3, #2
 8002cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf6:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <HAL_TIM_PWM_MspInit+0x48>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8002d02:	2200      	movs	r2, #0
 8002d04:	2101      	movs	r1, #1
 8002d06:	201d      	movs	r0, #29
 8002d08:	f000 fe1d 	bl	8003946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d0c:	201d      	movs	r0, #29
 8002d0e:	f000 fe36 	bl	800397e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002d12:	bf00      	nop
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40000400 	.word	0x40000400
 8002d20:	40023800 	.word	0x40023800

08002d24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a13      	ldr	r2, [pc, #76]	; (8002d80 <HAL_TIM_Base_MspInit+0x5c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d10c      	bne.n	8002d50 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002d36:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <HAL_TIM_Base_MspInit+0x60>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	4a12      	ldr	r2, [pc, #72]	; (8002d84 <HAL_TIM_Base_MspInit+0x60>)
 8002d3c:	f043 0310 	orr.w	r3, r3, #16
 8002d40:	6413      	str	r3, [r2, #64]	; 0x40
 8002d42:	4b10      	ldr	r3, [pc, #64]	; (8002d84 <HAL_TIM_Base_MspInit+0x60>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f003 0310 	and.w	r3, r3, #16
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8002d4e:	e010      	b.n	8002d72 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM14)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a0c      	ldr	r2, [pc, #48]	; (8002d88 <HAL_TIM_Base_MspInit+0x64>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d10b      	bne.n	8002d72 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002d5a:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <HAL_TIM_Base_MspInit+0x60>)
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	4a09      	ldr	r2, [pc, #36]	; (8002d84 <HAL_TIM_Base_MspInit+0x60>)
 8002d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d64:	6413      	str	r3, [r2, #64]	; 0x40
 8002d66:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <HAL_TIM_Base_MspInit+0x60>)
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	68bb      	ldr	r3, [r7, #8]
}
 8002d72:	bf00      	nop
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40001000 	.word	0x40001000
 8002d84:	40023800 	.word	0x40023800
 8002d88:	40002000 	.word	0x40002000

08002d8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d94:	f107 030c 	add.w	r3, r7, #12
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	605a      	str	r2, [r3, #4]
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	60da      	str	r2, [r3, #12]
 8002da2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a11      	ldr	r2, [pc, #68]	; (8002df0 <HAL_TIM_MspPostInit+0x64>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d11b      	bne.n	8002de6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dae:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <HAL_TIM_MspPostInit+0x68>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	4a10      	ldr	r2, [pc, #64]	; (8002df4 <HAL_TIM_MspPostInit+0x68>)
 8002db4:	f043 0302 	orr.w	r3, r3, #2
 8002db8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dba:	4b0e      	ldr	r3, [pc, #56]	; (8002df4 <HAL_TIM_MspPostInit+0x68>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	60bb      	str	r3, [r7, #8]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dca:	2302      	movs	r3, #2
 8002dcc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dda:	f107 030c 	add.w	r3, r7, #12
 8002dde:	4619      	mov	r1, r3
 8002de0:	4805      	ldr	r0, [pc, #20]	; (8002df8 <HAL_TIM_MspPostInit+0x6c>)
 8002de2:	f001 f8d1 	bl	8003f88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002de6:	bf00      	nop
 8002de8:	3720      	adds	r7, #32
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40000400 	.word	0x40000400
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40020400 	.word	0x40020400

08002dfc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e00:	4b14      	ldr	r3, [pc, #80]	; (8002e54 <MX_USART1_UART_Init+0x58>)
 8002e02:	4a15      	ldr	r2, [pc, #84]	; (8002e58 <MX_USART1_UART_Init+0x5c>)
 8002e04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002e06:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <MX_USART1_UART_Init+0x58>)
 8002e08:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002e0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e0e:	4b11      	ldr	r3, [pc, #68]	; (8002e54 <MX_USART1_UART_Init+0x58>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e14:	4b0f      	ldr	r3, [pc, #60]	; (8002e54 <MX_USART1_UART_Init+0x58>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e1a:	4b0e      	ldr	r3, [pc, #56]	; (8002e54 <MX_USART1_UART_Init+0x58>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e20:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <MX_USART1_UART_Init+0x58>)
 8002e22:	220c      	movs	r2, #12
 8002e24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e26:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <MX_USART1_UART_Init+0x58>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e2c:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <MX_USART1_UART_Init+0x58>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e32:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <MX_USART1_UART_Init+0x58>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e38:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <MX_USART1_UART_Init+0x58>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e3e:	4805      	ldr	r0, [pc, #20]	; (8002e54 <MX_USART1_UART_Init+0x58>)
 8002e40:	f003 fbaa 	bl	8006598 <HAL_UART_Init>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002e4a:	f7ff fd11 	bl	8002870 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e4e:	bf00      	nop
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	20008430 	.word	0x20008430
 8002e58:	40011000 	.word	0x40011000

08002e5c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e60:	4b14      	ldr	r3, [pc, #80]	; (8002eb4 <MX_USART2_UART_Init+0x58>)
 8002e62:	4a15      	ldr	r2, [pc, #84]	; (8002eb8 <MX_USART2_UART_Init+0x5c>)
 8002e64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002e66:	4b13      	ldr	r3, [pc, #76]	; (8002eb4 <MX_USART2_UART_Init+0x58>)
 8002e68:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002e6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002e6e:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <MX_USART2_UART_Init+0x58>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002e74:	4b0f      	ldr	r3, [pc, #60]	; (8002eb4 <MX_USART2_UART_Init+0x58>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002e7a:	4b0e      	ldr	r3, [pc, #56]	; (8002eb4 <MX_USART2_UART_Init+0x58>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002e80:	4b0c      	ldr	r3, [pc, #48]	; (8002eb4 <MX_USART2_UART_Init+0x58>)
 8002e82:	220c      	movs	r2, #12
 8002e84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e86:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <MX_USART2_UART_Init+0x58>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e8c:	4b09      	ldr	r3, [pc, #36]	; (8002eb4 <MX_USART2_UART_Init+0x58>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e92:	4b08      	ldr	r3, [pc, #32]	; (8002eb4 <MX_USART2_UART_Init+0x58>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e98:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <MX_USART2_UART_Init+0x58>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002e9e:	4805      	ldr	r0, [pc, #20]	; (8002eb4 <MX_USART2_UART_Init+0x58>)
 8002ea0:	f003 fb7a 	bl	8006598 <HAL_UART_Init>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002eaa:	f7ff fce1 	bl	8002870 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002eae:	bf00      	nop
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	200084b4 	.word	0x200084b4
 8002eb8:	40004400 	.word	0x40004400

08002ebc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08c      	sub	sp, #48	; 0x30
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec4:	f107 031c 	add.w	r3, r7, #28
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	605a      	str	r2, [r3, #4]
 8002ece:	609a      	str	r2, [r3, #8]
 8002ed0:	60da      	str	r2, [r3, #12]
 8002ed2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a2e      	ldr	r2, [pc, #184]	; (8002f94 <HAL_UART_MspInit+0xd8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d129      	bne.n	8002f32 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ede:	4b2e      	ldr	r3, [pc, #184]	; (8002f98 <HAL_UART_MspInit+0xdc>)
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee2:	4a2d      	ldr	r2, [pc, #180]	; (8002f98 <HAL_UART_MspInit+0xdc>)
 8002ee4:	f043 0310 	orr.w	r3, r3, #16
 8002ee8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eea:	4b2b      	ldr	r3, [pc, #172]	; (8002f98 <HAL_UART_MspInit+0xdc>)
 8002eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eee:	f003 0310 	and.w	r3, r3, #16
 8002ef2:	61bb      	str	r3, [r7, #24]
 8002ef4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef6:	4b28      	ldr	r3, [pc, #160]	; (8002f98 <HAL_UART_MspInit+0xdc>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	4a27      	ldr	r2, [pc, #156]	; (8002f98 <HAL_UART_MspInit+0xdc>)
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	6313      	str	r3, [r2, #48]	; 0x30
 8002f02:	4b25      	ldr	r3, [pc, #148]	; (8002f98 <HAL_UART_MspInit+0xdc>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002f0e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f14:	2302      	movs	r3, #2
 8002f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002f20:	2307      	movs	r3, #7
 8002f22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f24:	f107 031c 	add.w	r3, r7, #28
 8002f28:	4619      	mov	r1, r3
 8002f2a:	481c      	ldr	r0, [pc, #112]	; (8002f9c <HAL_UART_MspInit+0xe0>)
 8002f2c:	f001 f82c 	bl	8003f88 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002f30:	e02c      	b.n	8002f8c <HAL_UART_MspInit+0xd0>
  else if(uartHandle->Instance==USART2)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a1a      	ldr	r2, [pc, #104]	; (8002fa0 <HAL_UART_MspInit+0xe4>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d127      	bne.n	8002f8c <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f3c:	4b16      	ldr	r3, [pc, #88]	; (8002f98 <HAL_UART_MspInit+0xdc>)
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f40:	4a15      	ldr	r2, [pc, #84]	; (8002f98 <HAL_UART_MspInit+0xdc>)
 8002f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f46:	6413      	str	r3, [r2, #64]	; 0x40
 8002f48:	4b13      	ldr	r3, [pc, #76]	; (8002f98 <HAL_UART_MspInit+0xdc>)
 8002f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f50:	613b      	str	r3, [r7, #16]
 8002f52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f54:	4b10      	ldr	r3, [pc, #64]	; (8002f98 <HAL_UART_MspInit+0xdc>)
 8002f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f58:	4a0f      	ldr	r2, [pc, #60]	; (8002f98 <HAL_UART_MspInit+0xdc>)
 8002f5a:	f043 0301 	orr.w	r3, r3, #1
 8002f5e:	6313      	str	r3, [r2, #48]	; 0x30
 8002f60:	4b0d      	ldr	r3, [pc, #52]	; (8002f98 <HAL_UART_MspInit+0xdc>)
 8002f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f6c:	230c      	movs	r3, #12
 8002f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f70:	2302      	movs	r3, #2
 8002f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f74:	2300      	movs	r3, #0
 8002f76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f7c:	2307      	movs	r3, #7
 8002f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f80:	f107 031c 	add.w	r3, r7, #28
 8002f84:	4619      	mov	r1, r3
 8002f86:	4805      	ldr	r0, [pc, #20]	; (8002f9c <HAL_UART_MspInit+0xe0>)
 8002f88:	f000 fffe 	bl	8003f88 <HAL_GPIO_Init>
}
 8002f8c:	bf00      	nop
 8002f8e:	3730      	adds	r7, #48	; 0x30
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40011000 	.word	0x40011000
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	40020000 	.word	0x40020000
 8002fa0:	40004400 	.word	0x40004400

08002fa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002fa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fa8:	480d      	ldr	r0, [pc, #52]	; (8002fe0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002faa:	490e      	ldr	r1, [pc, #56]	; (8002fe4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002fac:	4a0e      	ldr	r2, [pc, #56]	; (8002fe8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fb0:	e002      	b.n	8002fb8 <LoopCopyDataInit>

08002fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fb6:	3304      	adds	r3, #4

08002fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fbc:	d3f9      	bcc.n	8002fb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fbe:	4a0b      	ldr	r2, [pc, #44]	; (8002fec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002fc0:	4c0b      	ldr	r4, [pc, #44]	; (8002ff0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fc4:	e001      	b.n	8002fca <LoopFillZerobss>

08002fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fc8:	3204      	adds	r2, #4

08002fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fcc:	d3fb      	bcc.n	8002fc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002fce:	f7ff fdb9 	bl	8002b44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fd2:	f003 ff7d 	bl	8006ed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fd6:	f7fe f971 	bl	80012bc <main>
  bx  lr    
 8002fda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002fdc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fe4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002fe8:	08009cf4 	.word	0x08009cf4
  ldr r2, =_sbss
 8002fec:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002ff0:	20008540 	.word	0x20008540

08002ff4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ff4:	e7fe      	b.n	8002ff4 <ADC_IRQHandler>

08002ff6 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b082      	sub	sp, #8
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d104      	bne.n	800300e <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003004:	b672      	cpsid	i
}
 8003006:	bf00      	nop
 8003008:	f7ff fc32 	bl	8002870 <Error_Handler>
 800300c:	e7fe      	b.n	800300c <stm32_lock_init+0x16>
  lock->flag = 0;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	701a      	strb	r2, [r3, #0]
  lock->counter = 0;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	705a      	strb	r2, [r3, #1]
}
 800301a:	bf00      	nop
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b084      	sub	sp, #16
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800302a:	f3ef 8310 	mrs	r3, PRIMASK
 800302e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003030:	68bb      	ldr	r3, [r7, #8]
  uint8_t flag = (uint8_t)(__get_PRIMASK() & 0x1); /* PRIMASK.PM */
 8003032:	b2db      	uxtb	r3, r3
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 800303a:	b672      	cpsid	i
}
 800303c:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800303e:	f3bf 8f4f 	dsb	sy
}
 8003042:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003044:	f3bf 8f6f 	isb	sy
}
 8003048:	bf00      	nop
  __disable_irq();
  __DSB();
  __ISB();
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d104      	bne.n	800305a <stm32_lock_acquire+0x38>
  __ASM volatile ("cpsid i" : : : "memory");
 8003050:	b672      	cpsid	i
}
 8003052:	bf00      	nop
 8003054:	f7ff fc0c 	bl	8002870 <Error_Handler>
 8003058:	e7fe      	b.n	8003058 <stm32_lock_acquire+0x36>
  if (lock->counter == 0)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	785b      	ldrb	r3, [r3, #1]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d103      	bne.n	800306a <stm32_lock_acquire+0x48>
  {
    lock->flag = flag;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	7bfa      	ldrb	r2, [r7, #15]
 8003066:	701a      	strb	r2, [r3, #0]
 8003068:	e008      	b.n	800307c <stm32_lock_acquire+0x5a>
  }
  else if (lock->counter == UINT8_MAX)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	785b      	ldrb	r3, [r3, #1]
 800306e:	2bff      	cmp	r3, #255	; 0xff
 8003070:	d104      	bne.n	800307c <stm32_lock_acquire+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 8003072:	b672      	cpsid	i
}
 8003074:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8003076:	f7ff fbfb 	bl	8002870 <Error_Handler>
 800307a:	e7fe      	b.n	800307a <stm32_lock_acquire+0x58>
  }
  lock->counter++;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	785b      	ldrb	r3, [r3, #1]
 8003080:	3301      	adds	r3, #1
 8003082:	b2da      	uxtb	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	705a      	strb	r2, [r3, #1]
}
 8003088:	bf00      	nop
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d104      	bne.n	80030a8 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800309e:	b672      	cpsid	i
}
 80030a0:	bf00      	nop
 80030a2:	f7ff fbe5 	bl	8002870 <Error_Handler>
 80030a6:	e7fe      	b.n	80030a6 <stm32_lock_release+0x16>
  if (lock->counter == 0)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	785b      	ldrb	r3, [r3, #1]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d104      	bne.n	80030ba <stm32_lock_release+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 80030b0:	b672      	cpsid	i
}
 80030b2:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 80030b4:	f7ff fbdc 	bl	8002870 <Error_Handler>
 80030b8:	e7fe      	b.n	80030b8 <stm32_lock_release+0x28>
  }
  lock->counter--;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	785b      	ldrb	r3, [r3, #1]
 80030be:	3b01      	subs	r3, #1
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	705a      	strb	r2, [r3, #1]
  if (lock->counter == 0 && lock->flag == 0)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	785b      	ldrb	r3, [r3, #1]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d105      	bne.n	80030da <stm32_lock_release+0x4a>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <stm32_lock_release+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
 80030d6:	b662      	cpsie	i
}
 80030d8:	bf00      	nop
  {
    __enable_irq();
  }
}
 80030da:	bf00      	nop
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d105      	bne.n	80030fc <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 80030f0:	f003 fee8 	bl	8006ec4 <__errno>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2216      	movs	r2, #22
 80030f8:	601a      	str	r2, [r3, #0]
    return;
 80030fa:	e015      	b.n	8003128 <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 80030fc:	2002      	movs	r0, #2
 80030fe:	f003 ff0b 	bl	8006f18 <malloc>
 8003102:	4603      	mov	r3, r0
 8003104:	461a      	mov	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d005      	beq.n	800311e <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff ff6d 	bl	8002ff6 <stm32_lock_init>
    return;
 800311c:	e004      	b.n	8003128 <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 800311e:	b672      	cpsid	i
}
 8003120:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8003122:	f7ff fba5 	bl	8002870 <Error_Handler>
 8003126:	e7fe      	b.n	8003126 <__retarget_lock_init_recursive+0x44>
}
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b082      	sub	sp, #8
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d104      	bne.n	8003146 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800313c:	b672      	cpsid	i
}
 800313e:	bf00      	nop
 8003140:	f7ff fb96 	bl	8002870 <Error_Handler>
 8003144:	e7fe      	b.n	8003144 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff ff6a 	bl	8003022 <stm32_lock_acquire>
}
 800314e:	bf00      	nop
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b082      	sub	sp, #8
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d104      	bne.n	800316e <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003164:	b672      	cpsid	i
}
 8003166:	bf00      	nop
 8003168:	f7ff fb82 	bl	8002870 <Error_Handler>
 800316c:	e7fe      	b.n	800316c <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff ff8d 	bl	8003090 <stm32_lock_release>
}
 8003176:	bf00      	nop
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003182:	2003      	movs	r0, #3
 8003184:	f000 fbd4 	bl	8003930 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003188:	2000      	movs	r0, #0
 800318a:	f000 f805 	bl	8003198 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800318e:	f7ff fb75 	bl	800287c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031a0:	4b12      	ldr	r3, [pc, #72]	; (80031ec <HAL_InitTick+0x54>)
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	4b12      	ldr	r3, [pc, #72]	; (80031f0 <HAL_InitTick+0x58>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	4619      	mov	r1, r3
 80031aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80031b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 fbef 	bl	800399a <HAL_SYSTICK_Config>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e00e      	b.n	80031e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b0f      	cmp	r3, #15
 80031ca:	d80a      	bhi.n	80031e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031cc:	2200      	movs	r2, #0
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	f04f 30ff 	mov.w	r0, #4294967295
 80031d4:	f000 fbb7 	bl	8003946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031d8:	4a06      	ldr	r2, [pc, #24]	; (80031f4 <HAL_InitTick+0x5c>)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031de:	2300      	movs	r3, #0
 80031e0:	e000      	b.n	80031e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	20000000 	.word	0x20000000
 80031f0:	20000008 	.word	0x20000008
 80031f4:	20000004 	.word	0x20000004

080031f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031fc:	4b06      	ldr	r3, [pc, #24]	; (8003218 <HAL_IncTick+0x20>)
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	461a      	mov	r2, r3
 8003202:	4b06      	ldr	r3, [pc, #24]	; (800321c <HAL_IncTick+0x24>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4413      	add	r3, r2
 8003208:	4a04      	ldr	r2, [pc, #16]	; (800321c <HAL_IncTick+0x24>)
 800320a:	6013      	str	r3, [r2, #0]
}
 800320c:	bf00      	nop
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	20000008 	.word	0x20000008
 800321c:	20008538 	.word	0x20008538

08003220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  return uwTick;
 8003224:	4b03      	ldr	r3, [pc, #12]	; (8003234 <HAL_GetTick+0x14>)
 8003226:	681b      	ldr	r3, [r3, #0]
}
 8003228:	4618      	mov	r0, r3
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	20008538 	.word	0x20008538

08003238 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003240:	f7ff ffee 	bl	8003220 <HAL_GetTick>
 8003244:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003250:	d005      	beq.n	800325e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003252:	4b0a      	ldr	r3, [pc, #40]	; (800327c <HAL_Delay+0x44>)
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	461a      	mov	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4413      	add	r3, r2
 800325c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800325e:	bf00      	nop
 8003260:	f7ff ffde 	bl	8003220 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	429a      	cmp	r2, r3
 800326e:	d8f7      	bhi.n	8003260 <HAL_Delay+0x28>
  {
  }
}
 8003270:	bf00      	nop
 8003272:	bf00      	nop
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	20000008 	.word	0x20000008

08003280 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003288:	2300      	movs	r3, #0
 800328a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e031      	b.n	80032fa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	2b00      	cmp	r3, #0
 800329c:	d109      	bne.n	80032b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7fd fe70 	bl	8000f84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	f003 0310 	and.w	r3, r3, #16
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d116      	bne.n	80032ec <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032c2:	4b10      	ldr	r3, [pc, #64]	; (8003304 <HAL_ADC_Init+0x84>)
 80032c4:	4013      	ands	r3, r2
 80032c6:	f043 0202 	orr.w	r2, r3, #2
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f964 	bl	800359c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	f023 0303 	bic.w	r3, r3, #3
 80032e2:	f043 0201 	orr.w	r2, r3, #1
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	641a      	str	r2, [r3, #64]	; 0x40
 80032ea:	e001      	b.n	80032f0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80032f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	ffffeefd 	.word	0xffffeefd

08003308 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003312:	2300      	movs	r3, #0
 8003314:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800331c:	2b01      	cmp	r3, #1
 800331e:	d101      	bne.n	8003324 <HAL_ADC_ConfigChannel+0x1c>
 8003320:	2302      	movs	r3, #2
 8003322:	e12a      	b.n	800357a <HAL_ADC_ConfigChannel+0x272>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2b09      	cmp	r3, #9
 8003332:	d93a      	bls.n	80033aa <HAL_ADC_ConfigChannel+0xa2>
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800333c:	d035      	beq.n	80033aa <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68d9      	ldr	r1, [r3, #12]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	b29b      	uxth	r3, r3
 800334a:	461a      	mov	r2, r3
 800334c:	4613      	mov	r3, r2
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	4413      	add	r3, r2
 8003352:	3b1e      	subs	r3, #30
 8003354:	2207      	movs	r2, #7
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43da      	mvns	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	400a      	ands	r2, r1
 8003362:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a87      	ldr	r2, [pc, #540]	; (8003588 <HAL_ADC_ConfigChannel+0x280>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d10a      	bne.n	8003384 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68d9      	ldr	r1, [r3, #12]
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	061a      	lsls	r2, r3, #24
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003382:	e035      	b.n	80033f0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68d9      	ldr	r1, [r3, #12]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	689a      	ldr	r2, [r3, #8]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	b29b      	uxth	r3, r3
 8003394:	4618      	mov	r0, r3
 8003396:	4603      	mov	r3, r0
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	4403      	add	r3, r0
 800339c:	3b1e      	subs	r3, #30
 800339e:	409a      	lsls	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033a8:	e022      	b.n	80033f0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6919      	ldr	r1, [r3, #16]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	461a      	mov	r2, r3
 80033b8:	4613      	mov	r3, r2
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	4413      	add	r3, r2
 80033be:	2207      	movs	r2, #7
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	43da      	mvns	r2, r3
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	400a      	ands	r2, r1
 80033cc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6919      	ldr	r1, [r3, #16]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	b29b      	uxth	r3, r3
 80033de:	4618      	mov	r0, r3
 80033e0:	4603      	mov	r3, r0
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	4403      	add	r3, r0
 80033e6:	409a      	lsls	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	430a      	orrs	r2, r1
 80033ee:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b06      	cmp	r3, #6
 80033f6:	d824      	bhi.n	8003442 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	3b05      	subs	r3, #5
 800340a:	221f      	movs	r2, #31
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	43da      	mvns	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	400a      	ands	r2, r1
 8003418:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	b29b      	uxth	r3, r3
 8003426:	4618      	mov	r0, r3
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	3b05      	subs	r3, #5
 8003434:	fa00 f203 	lsl.w	r2, r0, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	635a      	str	r2, [r3, #52]	; 0x34
 8003440:	e04c      	b.n	80034dc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b0c      	cmp	r3, #12
 8003448:	d824      	bhi.n	8003494 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	3b23      	subs	r3, #35	; 0x23
 800345c:	221f      	movs	r2, #31
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	43da      	mvns	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	400a      	ands	r2, r1
 800346a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	b29b      	uxth	r3, r3
 8003478:	4618      	mov	r0, r3
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685a      	ldr	r2, [r3, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	3b23      	subs	r3, #35	; 0x23
 8003486:	fa00 f203 	lsl.w	r2, r0, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	631a      	str	r2, [r3, #48]	; 0x30
 8003492:	e023      	b.n	80034dc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	4613      	mov	r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4413      	add	r3, r2
 80034a4:	3b41      	subs	r3, #65	; 0x41
 80034a6:	221f      	movs	r2, #31
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	43da      	mvns	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	400a      	ands	r2, r1
 80034b4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	4618      	mov	r0, r3
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	4613      	mov	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	3b41      	subs	r3, #65	; 0x41
 80034d0:	fa00 f203 	lsl.w	r2, r0, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a2a      	ldr	r2, [pc, #168]	; (800358c <HAL_ADC_ConfigChannel+0x284>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d10a      	bne.n	80034fc <HAL_ADC_ConfigChannel+0x1f4>
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034ee:	d105      	bne.n	80034fc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80034f0:	4b27      	ldr	r3, [pc, #156]	; (8003590 <HAL_ADC_ConfigChannel+0x288>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	4a26      	ldr	r2, [pc, #152]	; (8003590 <HAL_ADC_ConfigChannel+0x288>)
 80034f6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80034fa:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a22      	ldr	r2, [pc, #136]	; (800358c <HAL_ADC_ConfigChannel+0x284>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d109      	bne.n	800351a <HAL_ADC_ConfigChannel+0x212>
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2b12      	cmp	r3, #18
 800350c:	d105      	bne.n	800351a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800350e:	4b20      	ldr	r3, [pc, #128]	; (8003590 <HAL_ADC_ConfigChannel+0x288>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	4a1f      	ldr	r2, [pc, #124]	; (8003590 <HAL_ADC_ConfigChannel+0x288>)
 8003514:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003518:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a1b      	ldr	r2, [pc, #108]	; (800358c <HAL_ADC_ConfigChannel+0x284>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d125      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x268>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a17      	ldr	r2, [pc, #92]	; (8003588 <HAL_ADC_ConfigChannel+0x280>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d003      	beq.n	8003536 <HAL_ADC_ConfigChannel+0x22e>
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b11      	cmp	r3, #17
 8003534:	d11c      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003536:	4b16      	ldr	r3, [pc, #88]	; (8003590 <HAL_ADC_ConfigChannel+0x288>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	4a15      	ldr	r2, [pc, #84]	; (8003590 <HAL_ADC_ConfigChannel+0x288>)
 800353c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003540:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a10      	ldr	r2, [pc, #64]	; (8003588 <HAL_ADC_ConfigChannel+0x280>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d111      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800354c:	4b11      	ldr	r3, [pc, #68]	; (8003594 <HAL_ADC_ConfigChannel+0x28c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a11      	ldr	r2, [pc, #68]	; (8003598 <HAL_ADC_ConfigChannel+0x290>)
 8003552:	fba2 2303 	umull	r2, r3, r2, r3
 8003556:	0c9a      	lsrs	r2, r3, #18
 8003558:	4613      	mov	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003562:	e002      	b.n	800356a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	3b01      	subs	r3, #1
 8003568:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1f9      	bne.n	8003564 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	10000012 	.word	0x10000012
 800358c:	40012000 	.word	0x40012000
 8003590:	40012300 	.word	0x40012300
 8003594:	20000000 	.word	0x20000000
 8003598:	431bde83 	.word	0x431bde83

0800359c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80035a4:	4b78      	ldr	r3, [pc, #480]	; (8003788 <ADC_Init+0x1ec>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	4a77      	ldr	r2, [pc, #476]	; (8003788 <ADC_Init+0x1ec>)
 80035aa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80035ae:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80035b0:	4b75      	ldr	r3, [pc, #468]	; (8003788 <ADC_Init+0x1ec>)
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	4973      	ldr	r1, [pc, #460]	; (8003788 <ADC_Init+0x1ec>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6859      	ldr	r1, [r3, #4]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	021a      	lsls	r2, r3, #8
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80035f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6859      	ldr	r1, [r3, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003612:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6899      	ldr	r1, [r3, #8]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362a:	4a58      	ldr	r2, [pc, #352]	; (800378c <ADC_Init+0x1f0>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d022      	beq.n	8003676 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689a      	ldr	r2, [r3, #8]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800363e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6899      	ldr	r1, [r3, #8]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003660:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6899      	ldr	r1, [r3, #8]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	609a      	str	r2, [r3, #8]
 8003674:	e00f      	b.n	8003696 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003684:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003694:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689a      	ldr	r2, [r3, #8]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 0202 	bic.w	r2, r2, #2
 80036a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6899      	ldr	r1, [r3, #8]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	005a      	lsls	r2, r3, #1
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d01b      	beq.n	80036fc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80036e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6859      	ldr	r1, [r3, #4]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	3b01      	subs	r3, #1
 80036f0:	035a      	lsls	r2, r3, #13
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	605a      	str	r2, [r3, #4]
 80036fa:	e007      	b.n	800370c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800370a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800371a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	3b01      	subs	r3, #1
 8003728:	051a      	lsls	r2, r3, #20
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	430a      	orrs	r2, r1
 8003730:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003740:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6899      	ldr	r1, [r3, #8]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800374e:	025a      	lsls	r2, r3, #9
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689a      	ldr	r2, [r3, #8]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003766:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6899      	ldr	r1, [r3, #8]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	029a      	lsls	r2, r3, #10
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	430a      	orrs	r2, r1
 800377a:	609a      	str	r2, [r3, #8]
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	40012300 	.word	0x40012300
 800378c:	0f000001 	.word	0x0f000001

08003790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f003 0307 	and.w	r3, r3, #7
 800379e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037a0:	4b0b      	ldr	r3, [pc, #44]	; (80037d0 <__NVIC_SetPriorityGrouping+0x40>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037ac:	4013      	ands	r3, r2
 80037ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80037b8:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <__NVIC_SetPriorityGrouping+0x44>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037be:	4a04      	ldr	r2, [pc, #16]	; (80037d0 <__NVIC_SetPriorityGrouping+0x40>)
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	60d3      	str	r3, [r2, #12]
}
 80037c4:	bf00      	nop
 80037c6:	3714      	adds	r7, #20
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	e000ed00 	.word	0xe000ed00
 80037d4:	05fa0000 	.word	0x05fa0000

080037d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037dc:	4b04      	ldr	r3, [pc, #16]	; (80037f0 <__NVIC_GetPriorityGrouping+0x18>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	0a1b      	lsrs	r3, r3, #8
 80037e2:	f003 0307 	and.w	r3, r3, #7
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	e000ed00 	.word	0xe000ed00

080037f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003802:	2b00      	cmp	r3, #0
 8003804:	db0b      	blt.n	800381e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003806:	79fb      	ldrb	r3, [r7, #7]
 8003808:	f003 021f 	and.w	r2, r3, #31
 800380c:	4907      	ldr	r1, [pc, #28]	; (800382c <__NVIC_EnableIRQ+0x38>)
 800380e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	2001      	movs	r0, #1
 8003816:	fa00 f202 	lsl.w	r2, r0, r2
 800381a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	e000e100 	.word	0xe000e100

08003830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	6039      	str	r1, [r7, #0]
 800383a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800383c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003840:	2b00      	cmp	r3, #0
 8003842:	db0a      	blt.n	800385a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	b2da      	uxtb	r2, r3
 8003848:	490c      	ldr	r1, [pc, #48]	; (800387c <__NVIC_SetPriority+0x4c>)
 800384a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384e:	0112      	lsls	r2, r2, #4
 8003850:	b2d2      	uxtb	r2, r2
 8003852:	440b      	add	r3, r1
 8003854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003858:	e00a      	b.n	8003870 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	b2da      	uxtb	r2, r3
 800385e:	4908      	ldr	r1, [pc, #32]	; (8003880 <__NVIC_SetPriority+0x50>)
 8003860:	79fb      	ldrb	r3, [r7, #7]
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	3b04      	subs	r3, #4
 8003868:	0112      	lsls	r2, r2, #4
 800386a:	b2d2      	uxtb	r2, r2
 800386c:	440b      	add	r3, r1
 800386e:	761a      	strb	r2, [r3, #24]
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	e000e100 	.word	0xe000e100
 8003880:	e000ed00 	.word	0xe000ed00

08003884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003884:	b480      	push	{r7}
 8003886:	b089      	sub	sp, #36	; 0x24
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f1c3 0307 	rsb	r3, r3, #7
 800389e:	2b04      	cmp	r3, #4
 80038a0:	bf28      	it	cs
 80038a2:	2304      	movcs	r3, #4
 80038a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	3304      	adds	r3, #4
 80038aa:	2b06      	cmp	r3, #6
 80038ac:	d902      	bls.n	80038b4 <NVIC_EncodePriority+0x30>
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	3b03      	subs	r3, #3
 80038b2:	e000      	b.n	80038b6 <NVIC_EncodePriority+0x32>
 80038b4:	2300      	movs	r3, #0
 80038b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b8:	f04f 32ff 	mov.w	r2, #4294967295
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	43da      	mvns	r2, r3
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	401a      	ands	r2, r3
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038cc:	f04f 31ff 	mov.w	r1, #4294967295
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	fa01 f303 	lsl.w	r3, r1, r3
 80038d6:	43d9      	mvns	r1, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038dc:	4313      	orrs	r3, r2
         );
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3724      	adds	r7, #36	; 0x24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
	...

080038ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038fc:	d301      	bcc.n	8003902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038fe:	2301      	movs	r3, #1
 8003900:	e00f      	b.n	8003922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003902:	4a0a      	ldr	r2, [pc, #40]	; (800392c <SysTick_Config+0x40>)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3b01      	subs	r3, #1
 8003908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800390a:	210f      	movs	r1, #15
 800390c:	f04f 30ff 	mov.w	r0, #4294967295
 8003910:	f7ff ff8e 	bl	8003830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003914:	4b05      	ldr	r3, [pc, #20]	; (800392c <SysTick_Config+0x40>)
 8003916:	2200      	movs	r2, #0
 8003918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800391a:	4b04      	ldr	r3, [pc, #16]	; (800392c <SysTick_Config+0x40>)
 800391c:	2207      	movs	r2, #7
 800391e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	e000e010 	.word	0xe000e010

08003930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7ff ff29 	bl	8003790 <__NVIC_SetPriorityGrouping>
}
 800393e:	bf00      	nop
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003946:	b580      	push	{r7, lr}
 8003948:	b086      	sub	sp, #24
 800394a:	af00      	add	r7, sp, #0
 800394c:	4603      	mov	r3, r0
 800394e:	60b9      	str	r1, [r7, #8]
 8003950:	607a      	str	r2, [r7, #4]
 8003952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003954:	2300      	movs	r3, #0
 8003956:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003958:	f7ff ff3e 	bl	80037d8 <__NVIC_GetPriorityGrouping>
 800395c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	68b9      	ldr	r1, [r7, #8]
 8003962:	6978      	ldr	r0, [r7, #20]
 8003964:	f7ff ff8e 	bl	8003884 <NVIC_EncodePriority>
 8003968:	4602      	mov	r2, r0
 800396a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800396e:	4611      	mov	r1, r2
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff ff5d 	bl	8003830 <__NVIC_SetPriority>
}
 8003976:	bf00      	nop
 8003978:	3718      	adds	r7, #24
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b082      	sub	sp, #8
 8003982:	af00      	add	r7, sp, #0
 8003984:	4603      	mov	r3, r0
 8003986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff ff31 	bl	80037f4 <__NVIC_EnableIRQ>
}
 8003992:	bf00      	nop
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b082      	sub	sp, #8
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7ff ffa2 	bl	80038ec <SysTick_Config>
 80039a8:	4603      	mov	r3, r0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
	...

080039b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039c0:	f7ff fc2e 	bl	8003220 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e099      	b.n	8003b04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2202      	movs	r2, #2
 80039dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0201 	bic.w	r2, r2, #1
 80039ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039f0:	e00f      	b.n	8003a12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039f2:	f7ff fc15 	bl	8003220 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b05      	cmp	r3, #5
 80039fe:	d908      	bls.n	8003a12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2220      	movs	r2, #32
 8003a04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2203      	movs	r2, #3
 8003a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e078      	b.n	8003b04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1e8      	bne.n	80039f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	4b38      	ldr	r3, [pc, #224]	; (8003b0c <HAL_DMA_Init+0x158>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a1b      	ldr	r3, [r3, #32]
 8003a5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d107      	bne.n	8003a7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a74:	4313      	orrs	r3, r2
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f023 0307 	bic.w	r3, r3, #7
 8003a92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	2b04      	cmp	r3, #4
 8003aa4:	d117      	bne.n	8003ad6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00e      	beq.n	8003ad6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 f9e9 	bl	8003e90 <DMA_CheckFifoParam>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d008      	beq.n	8003ad6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2240      	movs	r2, #64	; 0x40
 8003ac8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e016      	b.n	8003b04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f9a0 	bl	8003e24 <DMA_CalcBaseAndBitshift>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aec:	223f      	movs	r2, #63	; 0x3f
 8003aee:	409a      	lsls	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	f010803f 	.word	0xf010803f

08003b10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003b1c:	4b92      	ldr	r3, [pc, #584]	; (8003d68 <HAL_DMA_IRQHandler+0x258>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a92      	ldr	r2, [pc, #584]	; (8003d6c <HAL_DMA_IRQHandler+0x25c>)
 8003b22:	fba2 2303 	umull	r2, r3, r2, r3
 8003b26:	0a9b      	lsrs	r3, r3, #10
 8003b28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3a:	2208      	movs	r2, #8
 8003b3c:	409a      	lsls	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	4013      	ands	r3, r2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d01a      	beq.n	8003b7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d013      	beq.n	8003b7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0204 	bic.w	r2, r2, #4
 8003b62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b68:	2208      	movs	r2, #8
 8003b6a:	409a      	lsls	r2, r3
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b74:	f043 0201 	orr.w	r2, r3, #1
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b80:	2201      	movs	r2, #1
 8003b82:	409a      	lsls	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4013      	ands	r3, r2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d012      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00b      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	409a      	lsls	r2, r3
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003baa:	f043 0202 	orr.w	r2, r3, #2
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb6:	2204      	movs	r2, #4
 8003bb8:	409a      	lsls	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d012      	beq.n	8003be8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00b      	beq.n	8003be8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd4:	2204      	movs	r2, #4
 8003bd6:	409a      	lsls	r2, r3
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be0:	f043 0204 	orr.w	r2, r3, #4
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bec:	2210      	movs	r2, #16
 8003bee:	409a      	lsls	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d043      	beq.n	8003c80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d03c      	beq.n	8003c80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0a:	2210      	movs	r2, #16
 8003c0c:	409a      	lsls	r2, r3
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d018      	beq.n	8003c52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d108      	bne.n	8003c40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d024      	beq.n	8003c80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	4798      	blx	r3
 8003c3e:	e01f      	b.n	8003c80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d01b      	beq.n	8003c80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	4798      	blx	r3
 8003c50:	e016      	b.n	8003c80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d107      	bne.n	8003c70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0208 	bic.w	r2, r2, #8
 8003c6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c84:	2220      	movs	r2, #32
 8003c86:	409a      	lsls	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 808e 	beq.w	8003dae <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0310 	and.w	r3, r3, #16
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 8086 	beq.w	8003dae <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	409a      	lsls	r2, r3
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b05      	cmp	r3, #5
 8003cb8:	d136      	bne.n	8003d28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0216 	bic.w	r2, r2, #22
 8003cc8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	695a      	ldr	r2, [r3, #20]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cd8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d103      	bne.n	8003cea <HAL_DMA_IRQHandler+0x1da>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d007      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 0208 	bic.w	r2, r2, #8
 8003cf8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cfe:	223f      	movs	r2, #63	; 0x3f
 8003d00:	409a      	lsls	r2, r3
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d07d      	beq.n	8003e1a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	4798      	blx	r3
        }
        return;
 8003d26:	e078      	b.n	8003e1a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d01c      	beq.n	8003d70 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d108      	bne.n	8003d56 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d030      	beq.n	8003dae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	4798      	blx	r3
 8003d54:	e02b      	b.n	8003dae <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d027      	beq.n	8003dae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	4798      	blx	r3
 8003d66:	e022      	b.n	8003dae <HAL_DMA_IRQHandler+0x29e>
 8003d68:	20000000 	.word	0x20000000
 8003d6c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10f      	bne.n	8003d9e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 0210 	bic.w	r2, r2, #16
 8003d8c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d032      	beq.n	8003e1c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d022      	beq.n	8003e08 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2205      	movs	r2, #5
 8003dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 0201 	bic.w	r2, r2, #1
 8003dd8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	60bb      	str	r3, [r7, #8]
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d307      	bcc.n	8003df6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1f2      	bne.n	8003dda <HAL_DMA_IRQHandler+0x2ca>
 8003df4:	e000      	b.n	8003df8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003df6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d005      	beq.n	8003e1c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	4798      	blx	r3
 8003e18:	e000      	b.n	8003e1c <HAL_DMA_IRQHandler+0x30c>
        return;
 8003e1a:	bf00      	nop
    }
  }
}
 8003e1c:	3718      	adds	r7, #24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop

08003e24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	3b10      	subs	r3, #16
 8003e34:	4a13      	ldr	r2, [pc, #76]	; (8003e84 <DMA_CalcBaseAndBitshift+0x60>)
 8003e36:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3a:	091b      	lsrs	r3, r3, #4
 8003e3c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e3e:	4a12      	ldr	r2, [pc, #72]	; (8003e88 <DMA_CalcBaseAndBitshift+0x64>)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4413      	add	r3, r2
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	461a      	mov	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	d908      	bls.n	8003e64 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	461a      	mov	r2, r3
 8003e58:	4b0c      	ldr	r3, [pc, #48]	; (8003e8c <DMA_CalcBaseAndBitshift+0x68>)
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	1d1a      	adds	r2, r3, #4
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	659a      	str	r2, [r3, #88]	; 0x58
 8003e62:	e006      	b.n	8003e72 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	461a      	mov	r2, r3
 8003e6a:	4b08      	ldr	r3, [pc, #32]	; (8003e8c <DMA_CalcBaseAndBitshift+0x68>)
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	aaaaaaab 	.word	0xaaaaaaab
 8003e88:	080098f8 	.word	0x080098f8
 8003e8c:	fffffc00 	.word	0xfffffc00

08003e90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d11f      	bne.n	8003eea <DMA_CheckFifoParam+0x5a>
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	2b03      	cmp	r3, #3
 8003eae:	d856      	bhi.n	8003f5e <DMA_CheckFifoParam+0xce>
 8003eb0:	a201      	add	r2, pc, #4	; (adr r2, 8003eb8 <DMA_CheckFifoParam+0x28>)
 8003eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb6:	bf00      	nop
 8003eb8:	08003ec9 	.word	0x08003ec9
 8003ebc:	08003edb 	.word	0x08003edb
 8003ec0:	08003ec9 	.word	0x08003ec9
 8003ec4:	08003f5f 	.word	0x08003f5f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ecc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d046      	beq.n	8003f62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ed8:	e043      	b.n	8003f62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ede:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ee2:	d140      	bne.n	8003f66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ee8:	e03d      	b.n	8003f66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ef2:	d121      	bne.n	8003f38 <DMA_CheckFifoParam+0xa8>
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2b03      	cmp	r3, #3
 8003ef8:	d837      	bhi.n	8003f6a <DMA_CheckFifoParam+0xda>
 8003efa:	a201      	add	r2, pc, #4	; (adr r2, 8003f00 <DMA_CheckFifoParam+0x70>)
 8003efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f00:	08003f11 	.word	0x08003f11
 8003f04:	08003f17 	.word	0x08003f17
 8003f08:	08003f11 	.word	0x08003f11
 8003f0c:	08003f29 	.word	0x08003f29
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	73fb      	strb	r3, [r7, #15]
      break;
 8003f14:	e030      	b.n	8003f78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d025      	beq.n	8003f6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f26:	e022      	b.n	8003f6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f30:	d11f      	bne.n	8003f72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f36:	e01c      	b.n	8003f72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d903      	bls.n	8003f46 <DMA_CheckFifoParam+0xb6>
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	2b03      	cmp	r3, #3
 8003f42:	d003      	beq.n	8003f4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f44:	e018      	b.n	8003f78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	73fb      	strb	r3, [r7, #15]
      break;
 8003f4a:	e015      	b.n	8003f78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00e      	beq.n	8003f76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f5c:	e00b      	b.n	8003f76 <DMA_CheckFifoParam+0xe6>
      break;
 8003f5e:	bf00      	nop
 8003f60:	e00a      	b.n	8003f78 <DMA_CheckFifoParam+0xe8>
      break;
 8003f62:	bf00      	nop
 8003f64:	e008      	b.n	8003f78 <DMA_CheckFifoParam+0xe8>
      break;
 8003f66:	bf00      	nop
 8003f68:	e006      	b.n	8003f78 <DMA_CheckFifoParam+0xe8>
      break;
 8003f6a:	bf00      	nop
 8003f6c:	e004      	b.n	8003f78 <DMA_CheckFifoParam+0xe8>
      break;
 8003f6e:	bf00      	nop
 8003f70:	e002      	b.n	8003f78 <DMA_CheckFifoParam+0xe8>
      break;   
 8003f72:	bf00      	nop
 8003f74:	e000      	b.n	8003f78 <DMA_CheckFifoParam+0xe8>
      break;
 8003f76:	bf00      	nop
    }
  } 
  
  return status; 
 8003f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop

08003f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b089      	sub	sp, #36	; 0x24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003f92:	2300      	movs	r3, #0
 8003f94:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	61fb      	str	r3, [r7, #28]
 8003fa6:	e175      	b.n	8004294 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003fa8:	2201      	movs	r2, #1
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	f040 8164 	bne.w	800428e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d00b      	beq.n	8003fe6 <HAL_GPIO_Init+0x5e>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d007      	beq.n	8003fe6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fda:	2b11      	cmp	r3, #17
 8003fdc:	d003      	beq.n	8003fe6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	2b12      	cmp	r3, #18
 8003fe4:	d130      	bne.n	8004048 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	2203      	movs	r2, #3
 8003ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff6:	43db      	mvns	r3, r3
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	4313      	orrs	r3, r2
 800400e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800401c:	2201      	movs	r2, #1
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	fa02 f303 	lsl.w	r3, r2, r3
 8004024:	43db      	mvns	r3, r3
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	4013      	ands	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	091b      	lsrs	r3, r3, #4
 8004032:	f003 0201 	and.w	r2, r3, #1
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	fa02 f303 	lsl.w	r3, r2, r3
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	4313      	orrs	r3, r2
 8004040:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	2203      	movs	r2, #3
 8004054:	fa02 f303 	lsl.w	r3, r2, r3
 8004058:	43db      	mvns	r3, r3
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	4013      	ands	r3, r2
 800405e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	4313      	orrs	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	2b02      	cmp	r3, #2
 800407e:	d003      	beq.n	8004088 <HAL_GPIO_Init+0x100>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	2b12      	cmp	r3, #18
 8004086:	d123      	bne.n	80040d0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	08da      	lsrs	r2, r3, #3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3208      	adds	r2, #8
 8004090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	220f      	movs	r2, #15
 80040a0:	fa02 f303 	lsl.w	r3, r2, r3
 80040a4:	43db      	mvns	r3, r3
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	4013      	ands	r3, r2
 80040aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	691a      	ldr	r2, [r3, #16]
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	f003 0307 	and.w	r3, r3, #7
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	fa02 f303 	lsl.w	r3, r2, r3
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	4313      	orrs	r3, r2
 80040c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	08da      	lsrs	r2, r3, #3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	3208      	adds	r2, #8
 80040ca:	69b9      	ldr	r1, [r7, #24]
 80040cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	2203      	movs	r2, #3
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	43db      	mvns	r3, r3
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	4013      	ands	r3, r2
 80040e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f003 0203 	and.w	r2, r3, #3
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	f000 80be 	beq.w	800428e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004112:	4b66      	ldr	r3, [pc, #408]	; (80042ac <HAL_GPIO_Init+0x324>)
 8004114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004116:	4a65      	ldr	r2, [pc, #404]	; (80042ac <HAL_GPIO_Init+0x324>)
 8004118:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800411c:	6453      	str	r3, [r2, #68]	; 0x44
 800411e:	4b63      	ldr	r3, [pc, #396]	; (80042ac <HAL_GPIO_Init+0x324>)
 8004120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800412a:	4a61      	ldr	r2, [pc, #388]	; (80042b0 <HAL_GPIO_Init+0x328>)
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	089b      	lsrs	r3, r3, #2
 8004130:	3302      	adds	r3, #2
 8004132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004136:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	f003 0303 	and.w	r3, r3, #3
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	220f      	movs	r2, #15
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	43db      	mvns	r3, r3
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	4013      	ands	r3, r2
 800414c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a58      	ldr	r2, [pc, #352]	; (80042b4 <HAL_GPIO_Init+0x32c>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d037      	beq.n	80041c6 <HAL_GPIO_Init+0x23e>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a57      	ldr	r2, [pc, #348]	; (80042b8 <HAL_GPIO_Init+0x330>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d031      	beq.n	80041c2 <HAL_GPIO_Init+0x23a>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a56      	ldr	r2, [pc, #344]	; (80042bc <HAL_GPIO_Init+0x334>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d02b      	beq.n	80041be <HAL_GPIO_Init+0x236>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a55      	ldr	r2, [pc, #340]	; (80042c0 <HAL_GPIO_Init+0x338>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d025      	beq.n	80041ba <HAL_GPIO_Init+0x232>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a54      	ldr	r2, [pc, #336]	; (80042c4 <HAL_GPIO_Init+0x33c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d01f      	beq.n	80041b6 <HAL_GPIO_Init+0x22e>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a53      	ldr	r2, [pc, #332]	; (80042c8 <HAL_GPIO_Init+0x340>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d019      	beq.n	80041b2 <HAL_GPIO_Init+0x22a>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a52      	ldr	r2, [pc, #328]	; (80042cc <HAL_GPIO_Init+0x344>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d013      	beq.n	80041ae <HAL_GPIO_Init+0x226>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a51      	ldr	r2, [pc, #324]	; (80042d0 <HAL_GPIO_Init+0x348>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d00d      	beq.n	80041aa <HAL_GPIO_Init+0x222>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a50      	ldr	r2, [pc, #320]	; (80042d4 <HAL_GPIO_Init+0x34c>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d007      	beq.n	80041a6 <HAL_GPIO_Init+0x21e>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a4f      	ldr	r2, [pc, #316]	; (80042d8 <HAL_GPIO_Init+0x350>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d101      	bne.n	80041a2 <HAL_GPIO_Init+0x21a>
 800419e:	2309      	movs	r3, #9
 80041a0:	e012      	b.n	80041c8 <HAL_GPIO_Init+0x240>
 80041a2:	230a      	movs	r3, #10
 80041a4:	e010      	b.n	80041c8 <HAL_GPIO_Init+0x240>
 80041a6:	2308      	movs	r3, #8
 80041a8:	e00e      	b.n	80041c8 <HAL_GPIO_Init+0x240>
 80041aa:	2307      	movs	r3, #7
 80041ac:	e00c      	b.n	80041c8 <HAL_GPIO_Init+0x240>
 80041ae:	2306      	movs	r3, #6
 80041b0:	e00a      	b.n	80041c8 <HAL_GPIO_Init+0x240>
 80041b2:	2305      	movs	r3, #5
 80041b4:	e008      	b.n	80041c8 <HAL_GPIO_Init+0x240>
 80041b6:	2304      	movs	r3, #4
 80041b8:	e006      	b.n	80041c8 <HAL_GPIO_Init+0x240>
 80041ba:	2303      	movs	r3, #3
 80041bc:	e004      	b.n	80041c8 <HAL_GPIO_Init+0x240>
 80041be:	2302      	movs	r3, #2
 80041c0:	e002      	b.n	80041c8 <HAL_GPIO_Init+0x240>
 80041c2:	2301      	movs	r3, #1
 80041c4:	e000      	b.n	80041c8 <HAL_GPIO_Init+0x240>
 80041c6:	2300      	movs	r3, #0
 80041c8:	69fa      	ldr	r2, [r7, #28]
 80041ca:	f002 0203 	and.w	r2, r2, #3
 80041ce:	0092      	lsls	r2, r2, #2
 80041d0:	4093      	lsls	r3, r2
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80041d8:	4935      	ldr	r1, [pc, #212]	; (80042b0 <HAL_GPIO_Init+0x328>)
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	089b      	lsrs	r3, r3, #2
 80041de:	3302      	adds	r3, #2
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041e6:	4b3d      	ldr	r3, [pc, #244]	; (80042dc <HAL_GPIO_Init+0x354>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	43db      	mvns	r3, r3
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	4013      	ands	r3, r2
 80041f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	4313      	orrs	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800420a:	4a34      	ldr	r2, [pc, #208]	; (80042dc <HAL_GPIO_Init+0x354>)
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004210:	4b32      	ldr	r3, [pc, #200]	; (80042dc <HAL_GPIO_Init+0x354>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	43db      	mvns	r3, r3
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	4013      	ands	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d003      	beq.n	8004234 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	4313      	orrs	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004234:	4a29      	ldr	r2, [pc, #164]	; (80042dc <HAL_GPIO_Init+0x354>)
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800423a:	4b28      	ldr	r3, [pc, #160]	; (80042dc <HAL_GPIO_Init+0x354>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	43db      	mvns	r3, r3
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	4013      	ands	r3, r2
 8004248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	4313      	orrs	r3, r2
 800425c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800425e:	4a1f      	ldr	r2, [pc, #124]	; (80042dc <HAL_GPIO_Init+0x354>)
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004264:	4b1d      	ldr	r3, [pc, #116]	; (80042dc <HAL_GPIO_Init+0x354>)
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	43db      	mvns	r3, r3
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	4013      	ands	r3, r2
 8004272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	4313      	orrs	r3, r2
 8004286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004288:	4a14      	ldr	r2, [pc, #80]	; (80042dc <HAL_GPIO_Init+0x354>)
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	3301      	adds	r3, #1
 8004292:	61fb      	str	r3, [r7, #28]
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	2b0f      	cmp	r3, #15
 8004298:	f67f ae86 	bls.w	8003fa8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800429c:	bf00      	nop
 800429e:	bf00      	nop
 80042a0:	3724      	adds	r7, #36	; 0x24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	40023800 	.word	0x40023800
 80042b0:	40013800 	.word	0x40013800
 80042b4:	40020000 	.word	0x40020000
 80042b8:	40020400 	.word	0x40020400
 80042bc:	40020800 	.word	0x40020800
 80042c0:	40020c00 	.word	0x40020c00
 80042c4:	40021000 	.word	0x40021000
 80042c8:	40021400 	.word	0x40021400
 80042cc:	40021800 	.word	0x40021800
 80042d0:	40021c00 	.word	0x40021c00
 80042d4:	40022000 	.word	0x40022000
 80042d8:	40022400 	.word	0x40022400
 80042dc:	40013c00 	.word	0x40013c00

080042e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	460b      	mov	r3, r1
 80042ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	887b      	ldrh	r3, [r7, #2]
 80042f2:	4013      	ands	r3, r2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d002      	beq.n	80042fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80042f8:	2301      	movs	r3, #1
 80042fa:	73fb      	strb	r3, [r7, #15]
 80042fc:	e001      	b.n	8004302 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042fe:	2300      	movs	r3, #0
 8004300:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004302:	7bfb      	ldrb	r3, [r7, #15]
}
 8004304:	4618      	mov	r0, r3
 8004306:	3714      	adds	r7, #20
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	460b      	mov	r3, r1
 800431a:	807b      	strh	r3, [r7, #2]
 800431c:	4613      	mov	r3, r2
 800431e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004320:	787b      	ldrb	r3, [r7, #1]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004326:	887a      	ldrh	r2, [r7, #2]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800432c:	e003      	b.n	8004336 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800432e:	887b      	ldrh	r3, [r7, #2]
 8004330:	041a      	lsls	r2, r3, #16
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	619a      	str	r2, [r3, #24]
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
	...

08004344 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	4603      	mov	r3, r0
 800434c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800434e:	4b07      	ldr	r3, [pc, #28]	; (800436c <HAL_GPIO_EXTI_IRQHandler+0x28>)
 8004350:	695a      	ldr	r2, [r3, #20]
 8004352:	88fb      	ldrh	r3, [r7, #6]
 8004354:	4013      	ands	r3, r2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <HAL_GPIO_EXTI_IRQHandler+0x1e>
  {
  //  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800435a:	88fb      	ldrh	r3, [r7, #6]
 800435c:	4618      	mov	r0, r3
 800435e:	f7fd f99f 	bl	80016a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004362:	bf00      	nop
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	40013c00 	.word	0x40013c00

08004370 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004376:	2300      	movs	r3, #0
 8004378:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800437a:	4b23      	ldr	r3, [pc, #140]	; (8004408 <HAL_PWREx_EnableOverDrive+0x98>)
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	4a22      	ldr	r2, [pc, #136]	; (8004408 <HAL_PWREx_EnableOverDrive+0x98>)
 8004380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004384:	6413      	str	r3, [r2, #64]	; 0x40
 8004386:	4b20      	ldr	r3, [pc, #128]	; (8004408 <HAL_PWREx_EnableOverDrive+0x98>)
 8004388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800438e:	603b      	str	r3, [r7, #0]
 8004390:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004392:	4b1e      	ldr	r3, [pc, #120]	; (800440c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a1d      	ldr	r2, [pc, #116]	; (800440c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800439c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800439e:	f7fe ff3f 	bl	8003220 <HAL_GetTick>
 80043a2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80043a4:	e009      	b.n	80043ba <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80043a6:	f7fe ff3b 	bl	8003220 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043b4:	d901      	bls.n	80043ba <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e022      	b.n	8004400 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80043ba:	4b14      	ldr	r3, [pc, #80]	; (800440c <HAL_PWREx_EnableOverDrive+0x9c>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c6:	d1ee      	bne.n	80043a6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80043c8:	4b10      	ldr	r3, [pc, #64]	; (800440c <HAL_PWREx_EnableOverDrive+0x9c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a0f      	ldr	r2, [pc, #60]	; (800440c <HAL_PWREx_EnableOverDrive+0x9c>)
 80043ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043d4:	f7fe ff24 	bl	8003220 <HAL_GetTick>
 80043d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80043da:	e009      	b.n	80043f0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80043dc:	f7fe ff20 	bl	8003220 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043ea:	d901      	bls.n	80043f0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e007      	b.n	8004400 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80043f0:	4b06      	ldr	r3, [pc, #24]	; (800440c <HAL_PWREx_EnableOverDrive+0x9c>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043fc:	d1ee      	bne.n	80043dc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	40023800 	.word	0x40023800
 800440c:	40007000 	.word	0x40007000

08004410 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004418:	2300      	movs	r3, #0
 800441a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e291      	b.n	800494a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	f000 8087 	beq.w	8004542 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004434:	4b96      	ldr	r3, [pc, #600]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f003 030c 	and.w	r3, r3, #12
 800443c:	2b04      	cmp	r3, #4
 800443e:	d00c      	beq.n	800445a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004440:	4b93      	ldr	r3, [pc, #588]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f003 030c 	and.w	r3, r3, #12
 8004448:	2b08      	cmp	r3, #8
 800444a:	d112      	bne.n	8004472 <HAL_RCC_OscConfig+0x62>
 800444c:	4b90      	ldr	r3, [pc, #576]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004454:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004458:	d10b      	bne.n	8004472 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800445a:	4b8d      	ldr	r3, [pc, #564]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d06c      	beq.n	8004540 <HAL_RCC_OscConfig+0x130>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d168      	bne.n	8004540 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e26b      	b.n	800494a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800447a:	d106      	bne.n	800448a <HAL_RCC_OscConfig+0x7a>
 800447c:	4b84      	ldr	r3, [pc, #528]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a83      	ldr	r2, [pc, #524]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 8004482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004486:	6013      	str	r3, [r2, #0]
 8004488:	e02e      	b.n	80044e8 <HAL_RCC_OscConfig+0xd8>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10c      	bne.n	80044ac <HAL_RCC_OscConfig+0x9c>
 8004492:	4b7f      	ldr	r3, [pc, #508]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a7e      	ldr	r2, [pc, #504]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 8004498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	4b7c      	ldr	r3, [pc, #496]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a7b      	ldr	r2, [pc, #492]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 80044a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044a8:	6013      	str	r3, [r2, #0]
 80044aa:	e01d      	b.n	80044e8 <HAL_RCC_OscConfig+0xd8>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044b4:	d10c      	bne.n	80044d0 <HAL_RCC_OscConfig+0xc0>
 80044b6:	4b76      	ldr	r3, [pc, #472]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a75      	ldr	r2, [pc, #468]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 80044bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	4b73      	ldr	r3, [pc, #460]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a72      	ldr	r2, [pc, #456]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 80044c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	e00b      	b.n	80044e8 <HAL_RCC_OscConfig+0xd8>
 80044d0:	4b6f      	ldr	r3, [pc, #444]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a6e      	ldr	r2, [pc, #440]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 80044d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044da:	6013      	str	r3, [r2, #0]
 80044dc:	4b6c      	ldr	r3, [pc, #432]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a6b      	ldr	r2, [pc, #428]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 80044e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d013      	beq.n	8004518 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f0:	f7fe fe96 	bl	8003220 <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044f8:	f7fe fe92 	bl	8003220 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b64      	cmp	r3, #100	; 0x64
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e21f      	b.n	800494a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800450a:	4b61      	ldr	r3, [pc, #388]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0f0      	beq.n	80044f8 <HAL_RCC_OscConfig+0xe8>
 8004516:	e014      	b.n	8004542 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004518:	f7fe fe82 	bl	8003220 <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800451e:	e008      	b.n	8004532 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004520:	f7fe fe7e 	bl	8003220 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	2b64      	cmp	r3, #100	; 0x64
 800452c:	d901      	bls.n	8004532 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e20b      	b.n	800494a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004532:	4b57      	ldr	r3, [pc, #348]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d1f0      	bne.n	8004520 <HAL_RCC_OscConfig+0x110>
 800453e:	e000      	b.n	8004542 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d069      	beq.n	8004622 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800454e:	4b50      	ldr	r3, [pc, #320]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 030c 	and.w	r3, r3, #12
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00b      	beq.n	8004572 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800455a:	4b4d      	ldr	r3, [pc, #308]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f003 030c 	and.w	r3, r3, #12
 8004562:	2b08      	cmp	r3, #8
 8004564:	d11c      	bne.n	80045a0 <HAL_RCC_OscConfig+0x190>
 8004566:	4b4a      	ldr	r3, [pc, #296]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d116      	bne.n	80045a0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004572:	4b47      	ldr	r3, [pc, #284]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d005      	beq.n	800458a <HAL_RCC_OscConfig+0x17a>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d001      	beq.n	800458a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e1df      	b.n	800494a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800458a:	4b41      	ldr	r3, [pc, #260]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	493d      	ldr	r1, [pc, #244]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 800459a:	4313      	orrs	r3, r2
 800459c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800459e:	e040      	b.n	8004622 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d023      	beq.n	80045f0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045a8:	4b39      	ldr	r3, [pc, #228]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a38      	ldr	r2, [pc, #224]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 80045ae:	f043 0301 	orr.w	r3, r3, #1
 80045b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b4:	f7fe fe34 	bl	8003220 <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045bc:	f7fe fe30 	bl	8003220 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e1bd      	b.n	800494a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ce:	4b30      	ldr	r3, [pc, #192]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d0f0      	beq.n	80045bc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045da:	4b2d      	ldr	r3, [pc, #180]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	4929      	ldr	r1, [pc, #164]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	600b      	str	r3, [r1, #0]
 80045ee:	e018      	b.n	8004622 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045f0:	4b27      	ldr	r3, [pc, #156]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a26      	ldr	r2, [pc, #152]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 80045f6:	f023 0301 	bic.w	r3, r3, #1
 80045fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fc:	f7fe fe10 	bl	8003220 <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004604:	f7fe fe0c 	bl	8003220 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e199      	b.n	800494a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004616:	4b1e      	ldr	r3, [pc, #120]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1f0      	bne.n	8004604 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0308 	and.w	r3, r3, #8
 800462a:	2b00      	cmp	r3, #0
 800462c:	d038      	beq.n	80046a0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d019      	beq.n	800466a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004636:	4b16      	ldr	r3, [pc, #88]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 8004638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800463a:	4a15      	ldr	r2, [pc, #84]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 800463c:	f043 0301 	orr.w	r3, r3, #1
 8004640:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004642:	f7fe fded 	bl	8003220 <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004648:	e008      	b.n	800465c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800464a:	f7fe fde9 	bl	8003220 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e176      	b.n	800494a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800465c:	4b0c      	ldr	r3, [pc, #48]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 800465e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0f0      	beq.n	800464a <HAL_RCC_OscConfig+0x23a>
 8004668:	e01a      	b.n	80046a0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800466a:	4b09      	ldr	r3, [pc, #36]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 800466c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800466e:	4a08      	ldr	r2, [pc, #32]	; (8004690 <HAL_RCC_OscConfig+0x280>)
 8004670:	f023 0301 	bic.w	r3, r3, #1
 8004674:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004676:	f7fe fdd3 	bl	8003220 <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800467c:	e00a      	b.n	8004694 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800467e:	f7fe fdcf 	bl	8003220 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d903      	bls.n	8004694 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e15c      	b.n	800494a <HAL_RCC_OscConfig+0x53a>
 8004690:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004694:	4b91      	ldr	r3, [pc, #580]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 8004696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1ee      	bne.n	800467e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0304 	and.w	r3, r3, #4
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 80a4 	beq.w	80047f6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046ae:	4b8b      	ldr	r3, [pc, #556]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 80046b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10d      	bne.n	80046d6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ba:	4b88      	ldr	r3, [pc, #544]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	4a87      	ldr	r2, [pc, #540]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 80046c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c4:	6413      	str	r3, [r2, #64]	; 0x40
 80046c6:	4b85      	ldr	r3, [pc, #532]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ce:	60bb      	str	r3, [r7, #8]
 80046d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046d2:	2301      	movs	r3, #1
 80046d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046d6:	4b82      	ldr	r3, [pc, #520]	; (80048e0 <HAL_RCC_OscConfig+0x4d0>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d118      	bne.n	8004714 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80046e2:	4b7f      	ldr	r3, [pc, #508]	; (80048e0 <HAL_RCC_OscConfig+0x4d0>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a7e      	ldr	r2, [pc, #504]	; (80048e0 <HAL_RCC_OscConfig+0x4d0>)
 80046e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ee:	f7fe fd97 	bl	8003220 <HAL_GetTick>
 80046f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046f4:	e008      	b.n	8004708 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f6:	f7fe fd93 	bl	8003220 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	2b64      	cmp	r3, #100	; 0x64
 8004702:	d901      	bls.n	8004708 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e120      	b.n	800494a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004708:	4b75      	ldr	r3, [pc, #468]	; (80048e0 <HAL_RCC_OscConfig+0x4d0>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004710:	2b00      	cmp	r3, #0
 8004712:	d0f0      	beq.n	80046f6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d106      	bne.n	800472a <HAL_RCC_OscConfig+0x31a>
 800471c:	4b6f      	ldr	r3, [pc, #444]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 800471e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004720:	4a6e      	ldr	r2, [pc, #440]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 8004722:	f043 0301 	orr.w	r3, r3, #1
 8004726:	6713      	str	r3, [r2, #112]	; 0x70
 8004728:	e02d      	b.n	8004786 <HAL_RCC_OscConfig+0x376>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10c      	bne.n	800474c <HAL_RCC_OscConfig+0x33c>
 8004732:	4b6a      	ldr	r3, [pc, #424]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 8004734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004736:	4a69      	ldr	r2, [pc, #420]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 8004738:	f023 0301 	bic.w	r3, r3, #1
 800473c:	6713      	str	r3, [r2, #112]	; 0x70
 800473e:	4b67      	ldr	r3, [pc, #412]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 8004740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004742:	4a66      	ldr	r2, [pc, #408]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 8004744:	f023 0304 	bic.w	r3, r3, #4
 8004748:	6713      	str	r3, [r2, #112]	; 0x70
 800474a:	e01c      	b.n	8004786 <HAL_RCC_OscConfig+0x376>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	2b05      	cmp	r3, #5
 8004752:	d10c      	bne.n	800476e <HAL_RCC_OscConfig+0x35e>
 8004754:	4b61      	ldr	r3, [pc, #388]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 8004756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004758:	4a60      	ldr	r2, [pc, #384]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 800475a:	f043 0304 	orr.w	r3, r3, #4
 800475e:	6713      	str	r3, [r2, #112]	; 0x70
 8004760:	4b5e      	ldr	r3, [pc, #376]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 8004762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004764:	4a5d      	ldr	r2, [pc, #372]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 8004766:	f043 0301 	orr.w	r3, r3, #1
 800476a:	6713      	str	r3, [r2, #112]	; 0x70
 800476c:	e00b      	b.n	8004786 <HAL_RCC_OscConfig+0x376>
 800476e:	4b5b      	ldr	r3, [pc, #364]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 8004770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004772:	4a5a      	ldr	r2, [pc, #360]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 8004774:	f023 0301 	bic.w	r3, r3, #1
 8004778:	6713      	str	r3, [r2, #112]	; 0x70
 800477a:	4b58      	ldr	r3, [pc, #352]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 800477c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477e:	4a57      	ldr	r2, [pc, #348]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 8004780:	f023 0304 	bic.w	r3, r3, #4
 8004784:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d015      	beq.n	80047ba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800478e:	f7fe fd47 	bl	8003220 <HAL_GetTick>
 8004792:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004794:	e00a      	b.n	80047ac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004796:	f7fe fd43 	bl	8003220 <HAL_GetTick>
 800479a:	4602      	mov	r2, r0
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d901      	bls.n	80047ac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e0ce      	b.n	800494a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ac:	4b4b      	ldr	r3, [pc, #300]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 80047ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0ee      	beq.n	8004796 <HAL_RCC_OscConfig+0x386>
 80047b8:	e014      	b.n	80047e4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ba:	f7fe fd31 	bl	8003220 <HAL_GetTick>
 80047be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047c0:	e00a      	b.n	80047d8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c2:	f7fe fd2d 	bl	8003220 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d901      	bls.n	80047d8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e0b8      	b.n	800494a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047d8:	4b40      	ldr	r3, [pc, #256]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 80047da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1ee      	bne.n	80047c2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047e4:	7dfb      	ldrb	r3, [r7, #23]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d105      	bne.n	80047f6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047ea:	4b3c      	ldr	r3, [pc, #240]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	4a3b      	ldr	r2, [pc, #236]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 80047f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f000 80a4 	beq.w	8004948 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004800:	4b36      	ldr	r3, [pc, #216]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f003 030c 	and.w	r3, r3, #12
 8004808:	2b08      	cmp	r3, #8
 800480a:	d06b      	beq.n	80048e4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	2b02      	cmp	r3, #2
 8004812:	d149      	bne.n	80048a8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004814:	4b31      	ldr	r3, [pc, #196]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a30      	ldr	r2, [pc, #192]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 800481a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800481e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004820:	f7fe fcfe 	bl	8003220 <HAL_GetTick>
 8004824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004826:	e008      	b.n	800483a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004828:	f7fe fcfa 	bl	8003220 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e087      	b.n	800494a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800483a:	4b28      	ldr	r3, [pc, #160]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1f0      	bne.n	8004828 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	69da      	ldr	r2, [r3, #28]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	431a      	orrs	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	019b      	lsls	r3, r3, #6
 8004856:	431a      	orrs	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485c:	085b      	lsrs	r3, r3, #1
 800485e:	3b01      	subs	r3, #1
 8004860:	041b      	lsls	r3, r3, #16
 8004862:	431a      	orrs	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004868:	061b      	lsls	r3, r3, #24
 800486a:	4313      	orrs	r3, r2
 800486c:	4a1b      	ldr	r2, [pc, #108]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 800486e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004872:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004874:	4b19      	ldr	r3, [pc, #100]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a18      	ldr	r2, [pc, #96]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 800487a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800487e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004880:	f7fe fcce 	bl	8003220 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004886:	e008      	b.n	800489a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004888:	f7fe fcca 	bl	8003220 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b02      	cmp	r3, #2
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e057      	b.n	800494a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800489a:	4b10      	ldr	r3, [pc, #64]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0f0      	beq.n	8004888 <HAL_RCC_OscConfig+0x478>
 80048a6:	e04f      	b.n	8004948 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048a8:	4b0c      	ldr	r3, [pc, #48]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a0b      	ldr	r2, [pc, #44]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 80048ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b4:	f7fe fcb4 	bl	8003220 <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048bc:	f7fe fcb0 	bl	8003220 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e03d      	b.n	800494a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ce:	4b03      	ldr	r3, [pc, #12]	; (80048dc <HAL_RCC_OscConfig+0x4cc>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1f0      	bne.n	80048bc <HAL_RCC_OscConfig+0x4ac>
 80048da:	e035      	b.n	8004948 <HAL_RCC_OscConfig+0x538>
 80048dc:	40023800 	.word	0x40023800
 80048e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80048e4:	4b1b      	ldr	r3, [pc, #108]	; (8004954 <HAL_RCC_OscConfig+0x544>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d028      	beq.n	8004944 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d121      	bne.n	8004944 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800490a:	429a      	cmp	r2, r3
 800490c:	d11a      	bne.n	8004944 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004914:	4013      	ands	r3, r2
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800491a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800491c:	4293      	cmp	r3, r2
 800491e:	d111      	bne.n	8004944 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492a:	085b      	lsrs	r3, r3, #1
 800492c:	3b01      	subs	r3, #1
 800492e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004930:	429a      	cmp	r2, r3
 8004932:	d107      	bne.n	8004944 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004940:	429a      	cmp	r2, r3
 8004942:	d001      	beq.n	8004948 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e000      	b.n	800494a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3718      	adds	r7, #24
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	40023800 	.word	0x40023800

08004958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004962:	2300      	movs	r3, #0
 8004964:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e0d0      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004970:	4b6a      	ldr	r3, [pc, #424]	; (8004b1c <HAL_RCC_ClockConfig+0x1c4>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 030f 	and.w	r3, r3, #15
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	429a      	cmp	r2, r3
 800497c:	d910      	bls.n	80049a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800497e:	4b67      	ldr	r3, [pc, #412]	; (8004b1c <HAL_RCC_ClockConfig+0x1c4>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f023 020f 	bic.w	r2, r3, #15
 8004986:	4965      	ldr	r1, [pc, #404]	; (8004b1c <HAL_RCC_ClockConfig+0x1c4>)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	4313      	orrs	r3, r2
 800498c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800498e:	4b63      	ldr	r3, [pc, #396]	; (8004b1c <HAL_RCC_ClockConfig+0x1c4>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	429a      	cmp	r2, r3
 800499a:	d001      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e0b8      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d020      	beq.n	80049ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0304 	and.w	r3, r3, #4
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d005      	beq.n	80049c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049b8:	4b59      	ldr	r3, [pc, #356]	; (8004b20 <HAL_RCC_ClockConfig+0x1c8>)
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	4a58      	ldr	r2, [pc, #352]	; (8004b20 <HAL_RCC_ClockConfig+0x1c8>)
 80049be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0308 	and.w	r3, r3, #8
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d005      	beq.n	80049dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049d0:	4b53      	ldr	r3, [pc, #332]	; (8004b20 <HAL_RCC_ClockConfig+0x1c8>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	4a52      	ldr	r2, [pc, #328]	; (8004b20 <HAL_RCC_ClockConfig+0x1c8>)
 80049d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049dc:	4b50      	ldr	r3, [pc, #320]	; (8004b20 <HAL_RCC_ClockConfig+0x1c8>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	494d      	ldr	r1, [pc, #308]	; (8004b20 <HAL_RCC_ClockConfig+0x1c8>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d040      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d107      	bne.n	8004a12 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a02:	4b47      	ldr	r3, [pc, #284]	; (8004b20 <HAL_RCC_ClockConfig+0x1c8>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d115      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e07f      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d107      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a1a:	4b41      	ldr	r3, [pc, #260]	; (8004b20 <HAL_RCC_ClockConfig+0x1c8>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d109      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e073      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a2a:	4b3d      	ldr	r3, [pc, #244]	; (8004b20 <HAL_RCC_ClockConfig+0x1c8>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e06b      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a3a:	4b39      	ldr	r3, [pc, #228]	; (8004b20 <HAL_RCC_ClockConfig+0x1c8>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f023 0203 	bic.w	r2, r3, #3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	4936      	ldr	r1, [pc, #216]	; (8004b20 <HAL_RCC_ClockConfig+0x1c8>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a4c:	f7fe fbe8 	bl	8003220 <HAL_GetTick>
 8004a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a52:	e00a      	b.n	8004a6a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a54:	f7fe fbe4 	bl	8003220 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d901      	bls.n	8004a6a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e053      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a6a:	4b2d      	ldr	r3, [pc, #180]	; (8004b20 <HAL_RCC_ClockConfig+0x1c8>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 020c 	and.w	r2, r3, #12
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d1eb      	bne.n	8004a54 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a7c:	4b27      	ldr	r3, [pc, #156]	; (8004b1c <HAL_RCC_ClockConfig+0x1c4>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 030f 	and.w	r3, r3, #15
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d210      	bcs.n	8004aac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a8a:	4b24      	ldr	r3, [pc, #144]	; (8004b1c <HAL_RCC_ClockConfig+0x1c4>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f023 020f 	bic.w	r2, r3, #15
 8004a92:	4922      	ldr	r1, [pc, #136]	; (8004b1c <HAL_RCC_ClockConfig+0x1c4>)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a9a:	4b20      	ldr	r3, [pc, #128]	; (8004b1c <HAL_RCC_ClockConfig+0x1c4>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d001      	beq.n	8004aac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e032      	b.n	8004b12 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0304 	and.w	r3, r3, #4
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d008      	beq.n	8004aca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ab8:	4b19      	ldr	r3, [pc, #100]	; (8004b20 <HAL_RCC_ClockConfig+0x1c8>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	4916      	ldr	r1, [pc, #88]	; (8004b20 <HAL_RCC_ClockConfig+0x1c8>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0308 	and.w	r3, r3, #8
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d009      	beq.n	8004aea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004ad6:	4b12      	ldr	r3, [pc, #72]	; (8004b20 <HAL_RCC_ClockConfig+0x1c8>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	490e      	ldr	r1, [pc, #56]	; (8004b20 <HAL_RCC_ClockConfig+0x1c8>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004aea:	f000 f821 	bl	8004b30 <HAL_RCC_GetSysClockFreq>
 8004aee:	4602      	mov	r2, r0
 8004af0:	4b0b      	ldr	r3, [pc, #44]	; (8004b20 <HAL_RCC_ClockConfig+0x1c8>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	091b      	lsrs	r3, r3, #4
 8004af6:	f003 030f 	and.w	r3, r3, #15
 8004afa:	490a      	ldr	r1, [pc, #40]	; (8004b24 <HAL_RCC_ClockConfig+0x1cc>)
 8004afc:	5ccb      	ldrb	r3, [r1, r3]
 8004afe:	fa22 f303 	lsr.w	r3, r2, r3
 8004b02:	4a09      	ldr	r2, [pc, #36]	; (8004b28 <HAL_RCC_ClockConfig+0x1d0>)
 8004b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b06:	4b09      	ldr	r3, [pc, #36]	; (8004b2c <HAL_RCC_ClockConfig+0x1d4>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7fe fb44 	bl	8003198 <HAL_InitTick>

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	40023c00 	.word	0x40023c00
 8004b20:	40023800 	.word	0x40023800
 8004b24:	080098e0 	.word	0x080098e0
 8004b28:	20000000 	.word	0x20000000
 8004b2c:	20000004 	.word	0x20000004

08004b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b30:	b5b0      	push	{r4, r5, r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004b36:	2100      	movs	r1, #0
 8004b38:	6079      	str	r1, [r7, #4]
 8004b3a:	2100      	movs	r1, #0
 8004b3c:	60f9      	str	r1, [r7, #12]
 8004b3e:	2100      	movs	r1, #0
 8004b40:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004b42:	2100      	movs	r1, #0
 8004b44:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b46:	4952      	ldr	r1, [pc, #328]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x160>)
 8004b48:	6889      	ldr	r1, [r1, #8]
 8004b4a:	f001 010c 	and.w	r1, r1, #12
 8004b4e:	2908      	cmp	r1, #8
 8004b50:	d00d      	beq.n	8004b6e <HAL_RCC_GetSysClockFreq+0x3e>
 8004b52:	2908      	cmp	r1, #8
 8004b54:	f200 8094 	bhi.w	8004c80 <HAL_RCC_GetSysClockFreq+0x150>
 8004b58:	2900      	cmp	r1, #0
 8004b5a:	d002      	beq.n	8004b62 <HAL_RCC_GetSysClockFreq+0x32>
 8004b5c:	2904      	cmp	r1, #4
 8004b5e:	d003      	beq.n	8004b68 <HAL_RCC_GetSysClockFreq+0x38>
 8004b60:	e08e      	b.n	8004c80 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b62:	4b4c      	ldr	r3, [pc, #304]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x164>)
 8004b64:	60bb      	str	r3, [r7, #8]
      break;
 8004b66:	e08e      	b.n	8004c86 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b68:	4b4b      	ldr	r3, [pc, #300]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x168>)
 8004b6a:	60bb      	str	r3, [r7, #8]
      break;
 8004b6c:	e08b      	b.n	8004c86 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b6e:	4948      	ldr	r1, [pc, #288]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x160>)
 8004b70:	6849      	ldr	r1, [r1, #4]
 8004b72:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004b76:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004b78:	4945      	ldr	r1, [pc, #276]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x160>)
 8004b7a:	6849      	ldr	r1, [r1, #4]
 8004b7c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004b80:	2900      	cmp	r1, #0
 8004b82:	d024      	beq.n	8004bce <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b84:	4942      	ldr	r1, [pc, #264]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x160>)
 8004b86:	6849      	ldr	r1, [r1, #4]
 8004b88:	0989      	lsrs	r1, r1, #6
 8004b8a:	4608      	mov	r0, r1
 8004b8c:	f04f 0100 	mov.w	r1, #0
 8004b90:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004b94:	f04f 0500 	mov.w	r5, #0
 8004b98:	ea00 0204 	and.w	r2, r0, r4
 8004b9c:	ea01 0305 	and.w	r3, r1, r5
 8004ba0:	493d      	ldr	r1, [pc, #244]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x168>)
 8004ba2:	fb01 f003 	mul.w	r0, r1, r3
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	fb01 f102 	mul.w	r1, r1, r2
 8004bac:	1844      	adds	r4, r0, r1
 8004bae:	493a      	ldr	r1, [pc, #232]	; (8004c98 <HAL_RCC_GetSysClockFreq+0x168>)
 8004bb0:	fba2 0101 	umull	r0, r1, r2, r1
 8004bb4:	1863      	adds	r3, r4, r1
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	461a      	mov	r2, r3
 8004bbc:	f04f 0300 	mov.w	r3, #0
 8004bc0:	f7fc f812 	bl	8000be8 <__aeabi_uldivmod>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	4613      	mov	r3, r2
 8004bca:	60fb      	str	r3, [r7, #12]
 8004bcc:	e04a      	b.n	8004c64 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bce:	4b30      	ldr	r3, [pc, #192]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x160>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	099b      	lsrs	r3, r3, #6
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	f04f 0300 	mov.w	r3, #0
 8004bda:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004bde:	f04f 0100 	mov.w	r1, #0
 8004be2:	ea02 0400 	and.w	r4, r2, r0
 8004be6:	ea03 0501 	and.w	r5, r3, r1
 8004bea:	4620      	mov	r0, r4
 8004bec:	4629      	mov	r1, r5
 8004bee:	f04f 0200 	mov.w	r2, #0
 8004bf2:	f04f 0300 	mov.w	r3, #0
 8004bf6:	014b      	lsls	r3, r1, #5
 8004bf8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004bfc:	0142      	lsls	r2, r0, #5
 8004bfe:	4610      	mov	r0, r2
 8004c00:	4619      	mov	r1, r3
 8004c02:	1b00      	subs	r0, r0, r4
 8004c04:	eb61 0105 	sbc.w	r1, r1, r5
 8004c08:	f04f 0200 	mov.w	r2, #0
 8004c0c:	f04f 0300 	mov.w	r3, #0
 8004c10:	018b      	lsls	r3, r1, #6
 8004c12:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004c16:	0182      	lsls	r2, r0, #6
 8004c18:	1a12      	subs	r2, r2, r0
 8004c1a:	eb63 0301 	sbc.w	r3, r3, r1
 8004c1e:	f04f 0000 	mov.w	r0, #0
 8004c22:	f04f 0100 	mov.w	r1, #0
 8004c26:	00d9      	lsls	r1, r3, #3
 8004c28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c2c:	00d0      	lsls	r0, r2, #3
 8004c2e:	4602      	mov	r2, r0
 8004c30:	460b      	mov	r3, r1
 8004c32:	1912      	adds	r2, r2, r4
 8004c34:	eb45 0303 	adc.w	r3, r5, r3
 8004c38:	f04f 0000 	mov.w	r0, #0
 8004c3c:	f04f 0100 	mov.w	r1, #0
 8004c40:	0299      	lsls	r1, r3, #10
 8004c42:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004c46:	0290      	lsls	r0, r2, #10
 8004c48:	4602      	mov	r2, r0
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	4619      	mov	r1, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	461a      	mov	r2, r3
 8004c54:	f04f 0300 	mov.w	r3, #0
 8004c58:	f7fb ffc6 	bl	8000be8 <__aeabi_uldivmod>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	460b      	mov	r3, r1
 8004c60:	4613      	mov	r3, r2
 8004c62:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004c64:	4b0a      	ldr	r3, [pc, #40]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x160>)
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	0c1b      	lsrs	r3, r3, #16
 8004c6a:	f003 0303 	and.w	r3, r3, #3
 8004c6e:	3301      	adds	r3, #1
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c7c:	60bb      	str	r3, [r7, #8]
      break;
 8004c7e:	e002      	b.n	8004c86 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c80:	4b04      	ldr	r3, [pc, #16]	; (8004c94 <HAL_RCC_GetSysClockFreq+0x164>)
 8004c82:	60bb      	str	r3, [r7, #8]
      break;
 8004c84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c86:	68bb      	ldr	r3, [r7, #8]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bdb0      	pop	{r4, r5, r7, pc}
 8004c90:	40023800 	.word	0x40023800
 8004c94:	00f42400 	.word	0x00f42400
 8004c98:	017d7840 	.word	0x017d7840

08004c9c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ca0:	4b03      	ldr	r3, [pc, #12]	; (8004cb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	20000000 	.word	0x20000000

08004cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004cb8:	f7ff fff0 	bl	8004c9c <HAL_RCC_GetHCLKFreq>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	4b05      	ldr	r3, [pc, #20]	; (8004cd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	0a9b      	lsrs	r3, r3, #10
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	4903      	ldr	r1, [pc, #12]	; (8004cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cca:	5ccb      	ldrb	r3, [r1, r3]
 8004ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	080098f0 	.word	0x080098f0

08004cdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ce0:	f7ff ffdc 	bl	8004c9c <HAL_RCC_GetHCLKFreq>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	4b05      	ldr	r3, [pc, #20]	; (8004cfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	0b5b      	lsrs	r3, r3, #13
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	4903      	ldr	r1, [pc, #12]	; (8004d00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cf2:	5ccb      	ldrb	r3, [r1, r3]
 8004cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	40023800 	.word	0x40023800
 8004d00:	080098f0 	.word	0x080098f0

08004d04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b088      	sub	sp, #32
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004d10:	2300      	movs	r3, #0
 8004d12:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004d14:	2300      	movs	r3, #0
 8004d16:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0301 	and.w	r3, r3, #1
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d012      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004d2c:	4b69      	ldr	r3, [pc, #420]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	4a68      	ldr	r2, [pc, #416]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d32:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004d36:	6093      	str	r3, [r2, #8]
 8004d38:	4b66      	ldr	r3, [pc, #408]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d40:	4964      	ldr	r1, [pc, #400]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d017      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d5e:	4b5d      	ldr	r3, [pc, #372]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d6c:	4959      	ldr	r1, [pc, #356]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d7c:	d101      	bne.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d017      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d9a:	4b4e      	ldr	r3, [pc, #312]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004da0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da8:	494a      	ldr	r1, [pc, #296]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004db8:	d101      	bne.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0320 	and.w	r3, r3, #32
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	f000 808b 	beq.w	8004efe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004de8:	4b3a      	ldr	r3, [pc, #232]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dec:	4a39      	ldr	r2, [pc, #228]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004df2:	6413      	str	r3, [r2, #64]	; 0x40
 8004df4:	4b37      	ldr	r3, [pc, #220]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dfc:	60bb      	str	r3, [r7, #8]
 8004dfe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e00:	4b35      	ldr	r3, [pc, #212]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a34      	ldr	r2, [pc, #208]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e0c:	f7fe fa08 	bl	8003220 <HAL_GetTick>
 8004e10:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e12:	e008      	b.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e14:	f7fe fa04 	bl	8003220 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b64      	cmp	r3, #100	; 0x64
 8004e20:	d901      	bls.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e357      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e26:	4b2c      	ldr	r3, [pc, #176]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0f0      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e32:	4b28      	ldr	r3, [pc, #160]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e3a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d035      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d02e      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e50:	4b20      	ldr	r3, [pc, #128]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e58:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e5a:	4b1e      	ldr	r3, [pc, #120]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e5e:	4a1d      	ldr	r2, [pc, #116]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e64:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e66:	4b1b      	ldr	r3, [pc, #108]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6a:	4a1a      	ldr	r2, [pc, #104]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e70:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004e72:	4a18      	ldr	r2, [pc, #96]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e78:	4b16      	ldr	r3, [pc, #88]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d114      	bne.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e84:	f7fe f9cc 	bl	8003220 <HAL_GetTick>
 8004e88:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e8a:	e00a      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e8c:	f7fe f9c8 	bl	8003220 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e319      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ea2:	4b0c      	ldr	r3, [pc, #48]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d0ee      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eba:	d111      	bne.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004ebc:	4b05      	ldr	r3, [pc, #20]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ec8:	4b04      	ldr	r3, [pc, #16]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004eca:	400b      	ands	r3, r1
 8004ecc:	4901      	ldr	r1, [pc, #4]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	608b      	str	r3, [r1, #8]
 8004ed2:	e00b      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004ed4:	40023800 	.word	0x40023800
 8004ed8:	40007000 	.word	0x40007000
 8004edc:	0ffffcff 	.word	0x0ffffcff
 8004ee0:	4bb1      	ldr	r3, [pc, #708]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	4ab0      	ldr	r2, [pc, #704]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ee6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004eea:	6093      	str	r3, [r2, #8]
 8004eec:	4bae      	ldr	r3, [pc, #696]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004eee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ef8:	49ab      	ldr	r1, [pc, #684]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0310 	and.w	r3, r3, #16
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d010      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f0a:	4ba7      	ldr	r3, [pc, #668]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f10:	4aa5      	ldr	r2, [pc, #660]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004f1a:	4ba3      	ldr	r3, [pc, #652]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f1c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f24:	49a0      	ldr	r1, [pc, #640]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00a      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f38:	4b9b      	ldr	r3, [pc, #620]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f46:	4998      	ldr	r1, [pc, #608]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00a      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f5a:	4b93      	ldr	r3, [pc, #588]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f68:	498f      	ldr	r1, [pc, #572]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00a      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f7c:	4b8a      	ldr	r3, [pc, #552]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f8a:	4987      	ldr	r1, [pc, #540]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00a      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f9e:	4b82      	ldr	r3, [pc, #520]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fac:	497e      	ldr	r1, [pc, #504]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00a      	beq.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fc0:	4b79      	ldr	r3, [pc, #484]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc6:	f023 0203 	bic.w	r2, r3, #3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fce:	4976      	ldr	r1, [pc, #472]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00a      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fe2:	4b71      	ldr	r3, [pc, #452]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe8:	f023 020c 	bic.w	r2, r3, #12
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ff0:	496d      	ldr	r1, [pc, #436]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00a      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005004:	4b68      	ldr	r3, [pc, #416]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005012:	4965      	ldr	r1, [pc, #404]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005014:	4313      	orrs	r3, r2
 8005016:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00a      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005026:	4b60      	ldr	r3, [pc, #384]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005034:	495c      	ldr	r1, [pc, #368]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005036:	4313      	orrs	r3, r2
 8005038:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00a      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005048:	4b57      	ldr	r3, [pc, #348]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800504a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800504e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005056:	4954      	ldr	r1, [pc, #336]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005058:	4313      	orrs	r3, r2
 800505a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00a      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800506a:	4b4f      	ldr	r3, [pc, #316]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800506c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005070:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005078:	494b      	ldr	r1, [pc, #300]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800507a:	4313      	orrs	r3, r2
 800507c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00a      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800508c:	4b46      	ldr	r3, [pc, #280]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800508e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005092:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800509a:	4943      	ldr	r1, [pc, #268]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800509c:	4313      	orrs	r3, r2
 800509e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00a      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80050ae:	4b3e      	ldr	r3, [pc, #248]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050bc:	493a      	ldr	r1, [pc, #232]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00a      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80050d0:	4b35      	ldr	r3, [pc, #212]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050de:	4932      	ldr	r1, [pc, #200]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d011      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80050f2:	4b2d      	ldr	r3, [pc, #180]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80050f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005100:	4929      	ldr	r1, [pc, #164]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005102:	4313      	orrs	r3, r2
 8005104:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800510c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005110:	d101      	bne.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005112:	2301      	movs	r3, #1
 8005114:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0308 	and.w	r3, r3, #8
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005122:	2301      	movs	r3, #1
 8005124:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005132:	4b1d      	ldr	r3, [pc, #116]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005138:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005140:	4919      	ldr	r1, [pc, #100]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005142:	4313      	orrs	r3, r2
 8005144:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00b      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005154:	4b14      	ldr	r3, [pc, #80]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800515a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005164:	4910      	ldr	r1, [pc, #64]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005166:	4313      	orrs	r3, r2
 8005168:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d006      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800517a:	2b00      	cmp	r3, #0
 800517c:	f000 80d9 	beq.w	8005332 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005180:	4b09      	ldr	r3, [pc, #36]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a08      	ldr	r2, [pc, #32]	; (80051a8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8005186:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800518a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800518c:	f7fe f848 	bl	8003220 <HAL_GetTick>
 8005190:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005192:	e00b      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005194:	f7fe f844 	bl	8003220 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b64      	cmp	r3, #100	; 0x64
 80051a0:	d904      	bls.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e197      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80051a6:	bf00      	nop
 80051a8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051ac:	4b6c      	ldr	r3, [pc, #432]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1ed      	bne.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0301 	and.w	r3, r3, #1
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d021      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d11d      	bne.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80051cc:	4b64      	ldr	r3, [pc, #400]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051d2:	0c1b      	lsrs	r3, r3, #16
 80051d4:	f003 0303 	and.w	r3, r3, #3
 80051d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80051da:	4b61      	ldr	r3, [pc, #388]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051e0:	0e1b      	lsrs	r3, r3, #24
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	019a      	lsls	r2, r3, #6
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	041b      	lsls	r3, r3, #16
 80051f2:	431a      	orrs	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	061b      	lsls	r3, r3, #24
 80051f8:	431a      	orrs	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	071b      	lsls	r3, r3, #28
 8005200:	4957      	ldr	r1, [pc, #348]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005202:	4313      	orrs	r3, r2
 8005204:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005210:	2b00      	cmp	r3, #0
 8005212:	d004      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005218:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800521c:	d00a      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005226:	2b00      	cmp	r3, #0
 8005228:	d02e      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005232:	d129      	bne.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005234:	4b4a      	ldr	r3, [pc, #296]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800523a:	0c1b      	lsrs	r3, r3, #16
 800523c:	f003 0303 	and.w	r3, r3, #3
 8005240:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005242:	4b47      	ldr	r3, [pc, #284]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005248:	0f1b      	lsrs	r3, r3, #28
 800524a:	f003 0307 	and.w	r3, r3, #7
 800524e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	019a      	lsls	r2, r3, #6
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	041b      	lsls	r3, r3, #16
 800525a:	431a      	orrs	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	061b      	lsls	r3, r3, #24
 8005262:	431a      	orrs	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	071b      	lsls	r3, r3, #28
 8005268:	493d      	ldr	r1, [pc, #244]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800526a:	4313      	orrs	r3, r2
 800526c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005270:	4b3b      	ldr	r3, [pc, #236]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005272:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005276:	f023 021f 	bic.w	r2, r3, #31
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	3b01      	subs	r3, #1
 8005280:	4937      	ldr	r1, [pc, #220]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005282:	4313      	orrs	r3, r2
 8005284:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d01d      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005294:	4b32      	ldr	r3, [pc, #200]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800529a:	0e1b      	lsrs	r3, r3, #24
 800529c:	f003 030f 	and.w	r3, r3, #15
 80052a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80052a2:	4b2f      	ldr	r3, [pc, #188]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052a8:	0f1b      	lsrs	r3, r3, #28
 80052aa:	f003 0307 	and.w	r3, r3, #7
 80052ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	019a      	lsls	r2, r3, #6
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	041b      	lsls	r3, r3, #16
 80052bc:	431a      	orrs	r2, r3
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	061b      	lsls	r3, r3, #24
 80052c2:	431a      	orrs	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	071b      	lsls	r3, r3, #28
 80052c8:	4925      	ldr	r1, [pc, #148]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d011      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	019a      	lsls	r2, r3, #6
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	041b      	lsls	r3, r3, #16
 80052e8:	431a      	orrs	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	061b      	lsls	r3, r3, #24
 80052f0:	431a      	orrs	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	071b      	lsls	r3, r3, #28
 80052f8:	4919      	ldr	r1, [pc, #100]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005300:	4b17      	ldr	r3, [pc, #92]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a16      	ldr	r2, [pc, #88]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005306:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800530a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800530c:	f7fd ff88 	bl	8003220 <HAL_GetTick>
 8005310:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005312:	e008      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005314:	f7fd ff84 	bl	8003220 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b64      	cmp	r3, #100	; 0x64
 8005320:	d901      	bls.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e0d7      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005326:	4b0e      	ldr	r3, [pc, #56]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d0f0      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	2b01      	cmp	r3, #1
 8005336:	f040 80cd 	bne.w	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800533a:	4b09      	ldr	r3, [pc, #36]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a08      	ldr	r2, [pc, #32]	; (8005360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005344:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005346:	f7fd ff6b 	bl	8003220 <HAL_GetTick>
 800534a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800534c:	e00a      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800534e:	f7fd ff67 	bl	8003220 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	2b64      	cmp	r3, #100	; 0x64
 800535a:	d903      	bls.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e0ba      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005360:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005364:	4b5e      	ldr	r3, [pc, #376]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800536c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005370:	d0ed      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005382:	2b00      	cmp	r3, #0
 8005384:	d009      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800538e:	2b00      	cmp	r3, #0
 8005390:	d02e      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005396:	2b00      	cmp	r3, #0
 8005398:	d12a      	bne.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800539a:	4b51      	ldr	r3, [pc, #324]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800539c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a0:	0c1b      	lsrs	r3, r3, #16
 80053a2:	f003 0303 	and.w	r3, r3, #3
 80053a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80053a8:	4b4d      	ldr	r3, [pc, #308]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ae:	0f1b      	lsrs	r3, r3, #28
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	019a      	lsls	r2, r3, #6
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	041b      	lsls	r3, r3, #16
 80053c0:	431a      	orrs	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	061b      	lsls	r3, r3, #24
 80053c8:	431a      	orrs	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	071b      	lsls	r3, r3, #28
 80053ce:	4944      	ldr	r1, [pc, #272]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80053d6:	4b42      	ldr	r3, [pc, #264]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e4:	3b01      	subs	r3, #1
 80053e6:	021b      	lsls	r3, r3, #8
 80053e8:	493d      	ldr	r1, [pc, #244]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d022      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005400:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005404:	d11d      	bne.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005406:	4b36      	ldr	r3, [pc, #216]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540c:	0e1b      	lsrs	r3, r3, #24
 800540e:	f003 030f 	and.w	r3, r3, #15
 8005412:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005414:	4b32      	ldr	r3, [pc, #200]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800541a:	0f1b      	lsrs	r3, r3, #28
 800541c:	f003 0307 	and.w	r3, r3, #7
 8005420:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	019a      	lsls	r2, r3, #6
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a1b      	ldr	r3, [r3, #32]
 800542c:	041b      	lsls	r3, r3, #16
 800542e:	431a      	orrs	r2, r3
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	061b      	lsls	r3, r3, #24
 8005434:	431a      	orrs	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	071b      	lsls	r3, r3, #28
 800543a:	4929      	ldr	r1, [pc, #164]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800543c:	4313      	orrs	r3, r2
 800543e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0308 	and.w	r3, r3, #8
 800544a:	2b00      	cmp	r3, #0
 800544c:	d028      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800544e:	4b24      	ldr	r3, [pc, #144]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005454:	0e1b      	lsrs	r3, r3, #24
 8005456:	f003 030f 	and.w	r3, r3, #15
 800545a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800545c:	4b20      	ldr	r3, [pc, #128]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800545e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005462:	0c1b      	lsrs	r3, r3, #16
 8005464:	f003 0303 	and.w	r3, r3, #3
 8005468:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	019a      	lsls	r2, r3, #6
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	041b      	lsls	r3, r3, #16
 8005474:	431a      	orrs	r2, r3
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	061b      	lsls	r3, r3, #24
 800547a:	431a      	orrs	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	071b      	lsls	r3, r3, #28
 8005482:	4917      	ldr	r1, [pc, #92]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005484:	4313      	orrs	r3, r2
 8005486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800548a:	4b15      	ldr	r3, [pc, #84]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800548c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005490:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005498:	4911      	ldr	r1, [pc, #68]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800549a:	4313      	orrs	r3, r2
 800549c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80054a0:	4b0f      	ldr	r3, [pc, #60]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a0e      	ldr	r2, [pc, #56]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054ac:	f7fd feb8 	bl	8003220 <HAL_GetTick>
 80054b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054b2:	e008      	b.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80054b4:	f7fd feb4 	bl	8003220 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b64      	cmp	r3, #100	; 0x64
 80054c0:	d901      	bls.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e007      	b.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054c6:	4b06      	ldr	r3, [pc, #24]	; (80054e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054d2:	d1ef      	bne.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3720      	adds	r7, #32
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	40023800 	.word	0x40023800

080054e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e049      	b.n	800558a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d106      	bne.n	8005510 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7fd fc0a 	bl	8002d24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	3304      	adds	r3, #4
 8005520:	4619      	mov	r1, r3
 8005522:	4610      	mov	r0, r2
 8005524:	f000 fc68 	bl	8005df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005592:	b580      	push	{r7, lr}
 8005594:	b082      	sub	sp, #8
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e049      	b.n	8005638 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d106      	bne.n	80055be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f7fd fb8d 	bl	8002cd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2202      	movs	r2, #2
 80055c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	3304      	adds	r3, #4
 80055ce:	4619      	mov	r1, r3
 80055d0:	4610      	mov	r0, r2
 80055d2:	f000 fc11 	bl	8005df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3708      	adds	r7, #8
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d109      	bne.n	8005664 <HAL_TIM_PWM_Start+0x24>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b01      	cmp	r3, #1
 800565a:	bf14      	ite	ne
 800565c:	2301      	movne	r3, #1
 800565e:	2300      	moveq	r3, #0
 8005660:	b2db      	uxtb	r3, r3
 8005662:	e03c      	b.n	80056de <HAL_TIM_PWM_Start+0x9e>
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	2b04      	cmp	r3, #4
 8005668:	d109      	bne.n	800567e <HAL_TIM_PWM_Start+0x3e>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b01      	cmp	r3, #1
 8005674:	bf14      	ite	ne
 8005676:	2301      	movne	r3, #1
 8005678:	2300      	moveq	r3, #0
 800567a:	b2db      	uxtb	r3, r3
 800567c:	e02f      	b.n	80056de <HAL_TIM_PWM_Start+0x9e>
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b08      	cmp	r3, #8
 8005682:	d109      	bne.n	8005698 <HAL_TIM_PWM_Start+0x58>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b01      	cmp	r3, #1
 800568e:	bf14      	ite	ne
 8005690:	2301      	movne	r3, #1
 8005692:	2300      	moveq	r3, #0
 8005694:	b2db      	uxtb	r3, r3
 8005696:	e022      	b.n	80056de <HAL_TIM_PWM_Start+0x9e>
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	2b0c      	cmp	r3, #12
 800569c:	d109      	bne.n	80056b2 <HAL_TIM_PWM_Start+0x72>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	bf14      	ite	ne
 80056aa:	2301      	movne	r3, #1
 80056ac:	2300      	moveq	r3, #0
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	e015      	b.n	80056de <HAL_TIM_PWM_Start+0x9e>
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	2b10      	cmp	r3, #16
 80056b6:	d109      	bne.n	80056cc <HAL_TIM_PWM_Start+0x8c>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	bf14      	ite	ne
 80056c4:	2301      	movne	r3, #1
 80056c6:	2300      	moveq	r3, #0
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	e008      	b.n	80056de <HAL_TIM_PWM_Start+0x9e>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	bf14      	ite	ne
 80056d8:	2301      	movne	r3, #1
 80056da:	2300      	moveq	r3, #0
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d001      	beq.n	80056e6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e092      	b.n	800580c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d104      	bne.n	80056f6 <HAL_TIM_PWM_Start+0xb6>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2202      	movs	r2, #2
 80056f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056f4:	e023      	b.n	800573e <HAL_TIM_PWM_Start+0xfe>
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	2b04      	cmp	r3, #4
 80056fa:	d104      	bne.n	8005706 <HAL_TIM_PWM_Start+0xc6>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005704:	e01b      	b.n	800573e <HAL_TIM_PWM_Start+0xfe>
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	2b08      	cmp	r3, #8
 800570a:	d104      	bne.n	8005716 <HAL_TIM_PWM_Start+0xd6>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2202      	movs	r2, #2
 8005710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005714:	e013      	b.n	800573e <HAL_TIM_PWM_Start+0xfe>
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b0c      	cmp	r3, #12
 800571a:	d104      	bne.n	8005726 <HAL_TIM_PWM_Start+0xe6>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2202      	movs	r2, #2
 8005720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005724:	e00b      	b.n	800573e <HAL_TIM_PWM_Start+0xfe>
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	2b10      	cmp	r3, #16
 800572a:	d104      	bne.n	8005736 <HAL_TIM_PWM_Start+0xf6>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2202      	movs	r2, #2
 8005730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005734:	e003      	b.n	800573e <HAL_TIM_PWM_Start+0xfe>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2202      	movs	r2, #2
 800573a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2201      	movs	r2, #1
 8005744:	6839      	ldr	r1, [r7, #0]
 8005746:	4618      	mov	r0, r3
 8005748:	f000 fe54 	bl	80063f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a30      	ldr	r2, [pc, #192]	; (8005814 <HAL_TIM_PWM_Start+0x1d4>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d004      	beq.n	8005760 <HAL_TIM_PWM_Start+0x120>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a2f      	ldr	r2, [pc, #188]	; (8005818 <HAL_TIM_PWM_Start+0x1d8>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d101      	bne.n	8005764 <HAL_TIM_PWM_Start+0x124>
 8005760:	2301      	movs	r3, #1
 8005762:	e000      	b.n	8005766 <HAL_TIM_PWM_Start+0x126>
 8005764:	2300      	movs	r3, #0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d007      	beq.n	800577a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005778:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a25      	ldr	r2, [pc, #148]	; (8005814 <HAL_TIM_PWM_Start+0x1d4>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d022      	beq.n	80057ca <HAL_TIM_PWM_Start+0x18a>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800578c:	d01d      	beq.n	80057ca <HAL_TIM_PWM_Start+0x18a>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a22      	ldr	r2, [pc, #136]	; (800581c <HAL_TIM_PWM_Start+0x1dc>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d018      	beq.n	80057ca <HAL_TIM_PWM_Start+0x18a>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a20      	ldr	r2, [pc, #128]	; (8005820 <HAL_TIM_PWM_Start+0x1e0>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d013      	beq.n	80057ca <HAL_TIM_PWM_Start+0x18a>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a1f      	ldr	r2, [pc, #124]	; (8005824 <HAL_TIM_PWM_Start+0x1e4>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d00e      	beq.n	80057ca <HAL_TIM_PWM_Start+0x18a>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a19      	ldr	r2, [pc, #100]	; (8005818 <HAL_TIM_PWM_Start+0x1d8>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d009      	beq.n	80057ca <HAL_TIM_PWM_Start+0x18a>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a1b      	ldr	r2, [pc, #108]	; (8005828 <HAL_TIM_PWM_Start+0x1e8>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d004      	beq.n	80057ca <HAL_TIM_PWM_Start+0x18a>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a19      	ldr	r2, [pc, #100]	; (800582c <HAL_TIM_PWM_Start+0x1ec>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d115      	bne.n	80057f6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	4b17      	ldr	r3, [pc, #92]	; (8005830 <HAL_TIM_PWM_Start+0x1f0>)
 80057d2:	4013      	ands	r3, r2
 80057d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2b06      	cmp	r3, #6
 80057da:	d015      	beq.n	8005808 <HAL_TIM_PWM_Start+0x1c8>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057e2:	d011      	beq.n	8005808 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f042 0201 	orr.w	r2, r2, #1
 80057f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057f4:	e008      	b.n	8005808 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f042 0201 	orr.w	r2, r2, #1
 8005804:	601a      	str	r2, [r3, #0]
 8005806:	e000      	b.n	800580a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005808:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	40010000 	.word	0x40010000
 8005818:	40010400 	.word	0x40010400
 800581c:	40000400 	.word	0x40000400
 8005820:	40000800 	.word	0x40000800
 8005824:	40000c00 	.word	0x40000c00
 8005828:	40014000 	.word	0x40014000
 800582c:	40001800 	.word	0x40001800
 8005830:	00010007 	.word	0x00010007

08005834 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2200      	movs	r2, #0
 8005844:	6839      	ldr	r1, [r7, #0]
 8005846:	4618      	mov	r0, r3
 8005848:	f000 fdd4 	bl	80063f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a36      	ldr	r2, [pc, #216]	; (800592c <HAL_TIM_PWM_Stop+0xf8>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d004      	beq.n	8005860 <HAL_TIM_PWM_Stop+0x2c>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a35      	ldr	r2, [pc, #212]	; (8005930 <HAL_TIM_PWM_Stop+0xfc>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d101      	bne.n	8005864 <HAL_TIM_PWM_Stop+0x30>
 8005860:	2301      	movs	r3, #1
 8005862:	e000      	b.n	8005866 <HAL_TIM_PWM_Stop+0x32>
 8005864:	2300      	movs	r3, #0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d017      	beq.n	800589a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	6a1a      	ldr	r2, [r3, #32]
 8005870:	f241 1311 	movw	r3, #4369	; 0x1111
 8005874:	4013      	ands	r3, r2
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10f      	bne.n	800589a <HAL_TIM_PWM_Stop+0x66>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	6a1a      	ldr	r2, [r3, #32]
 8005880:	f240 4344 	movw	r3, #1092	; 0x444
 8005884:	4013      	ands	r3, r2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d107      	bne.n	800589a <HAL_TIM_PWM_Stop+0x66>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005898:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	6a1a      	ldr	r2, [r3, #32]
 80058a0:	f241 1311 	movw	r3, #4369	; 0x1111
 80058a4:	4013      	ands	r3, r2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10f      	bne.n	80058ca <HAL_TIM_PWM_Stop+0x96>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6a1a      	ldr	r2, [r3, #32]
 80058b0:	f240 4344 	movw	r3, #1092	; 0x444
 80058b4:	4013      	ands	r3, r2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d107      	bne.n	80058ca <HAL_TIM_PWM_Stop+0x96>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 0201 	bic.w	r2, r2, #1
 80058c8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d104      	bne.n	80058da <HAL_TIM_PWM_Stop+0xa6>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058d8:	e023      	b.n	8005922 <HAL_TIM_PWM_Stop+0xee>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b04      	cmp	r3, #4
 80058de:	d104      	bne.n	80058ea <HAL_TIM_PWM_Stop+0xb6>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058e8:	e01b      	b.n	8005922 <HAL_TIM_PWM_Stop+0xee>
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d104      	bne.n	80058fa <HAL_TIM_PWM_Stop+0xc6>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058f8:	e013      	b.n	8005922 <HAL_TIM_PWM_Stop+0xee>
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	2b0c      	cmp	r3, #12
 80058fe:	d104      	bne.n	800590a <HAL_TIM_PWM_Stop+0xd6>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005908:	e00b      	b.n	8005922 <HAL_TIM_PWM_Stop+0xee>
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b10      	cmp	r3, #16
 800590e:	d104      	bne.n	800591a <HAL_TIM_PWM_Stop+0xe6>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005918:	e003      	b.n	8005922 <HAL_TIM_PWM_Stop+0xee>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3708      	adds	r7, #8
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	40010000 	.word	0x40010000
 8005930:	40010400 	.word	0x40010400

08005934 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b02      	cmp	r3, #2
 8005948:	d122      	bne.n	8005990 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b02      	cmp	r3, #2
 8005956:	d11b      	bne.n	8005990 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f06f 0202 	mvn.w	r2, #2
 8005960:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	f003 0303 	and.w	r3, r3, #3
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fa20 	bl	8005dbc <HAL_TIM_IC_CaptureCallback>
 800597c:	e005      	b.n	800598a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 fa12 	bl	8005da8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 fa23 	bl	8005dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	f003 0304 	and.w	r3, r3, #4
 800599a:	2b04      	cmp	r3, #4
 800599c:	d122      	bne.n	80059e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f003 0304 	and.w	r3, r3, #4
 80059a8:	2b04      	cmp	r3, #4
 80059aa:	d11b      	bne.n	80059e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f06f 0204 	mvn.w	r2, #4
 80059b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2202      	movs	r2, #2
 80059ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f9f6 	bl	8005dbc <HAL_TIM_IC_CaptureCallback>
 80059d0:	e005      	b.n	80059de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f9e8 	bl	8005da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 f9f9 	bl	8005dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	f003 0308 	and.w	r3, r3, #8
 80059ee:	2b08      	cmp	r3, #8
 80059f0:	d122      	bne.n	8005a38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	f003 0308 	and.w	r3, r3, #8
 80059fc:	2b08      	cmp	r3, #8
 80059fe:	d11b      	bne.n	8005a38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f06f 0208 	mvn.w	r2, #8
 8005a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2204      	movs	r2, #4
 8005a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	69db      	ldr	r3, [r3, #28]
 8005a16:	f003 0303 	and.w	r3, r3, #3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d003      	beq.n	8005a26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f9cc 	bl	8005dbc <HAL_TIM_IC_CaptureCallback>
 8005a24:	e005      	b.n	8005a32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f9be 	bl	8005da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 f9cf 	bl	8005dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	f003 0310 	and.w	r3, r3, #16
 8005a42:	2b10      	cmp	r3, #16
 8005a44:	d122      	bne.n	8005a8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f003 0310 	and.w	r3, r3, #16
 8005a50:	2b10      	cmp	r3, #16
 8005a52:	d11b      	bne.n	8005a8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f06f 0210 	mvn.w	r2, #16
 8005a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2208      	movs	r2, #8
 8005a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	69db      	ldr	r3, [r3, #28]
 8005a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f9a2 	bl	8005dbc <HAL_TIM_IC_CaptureCallback>
 8005a78:	e005      	b.n	8005a86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f994 	bl	8005da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 f9a5 	bl	8005dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d10e      	bne.n	8005ab8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	f003 0301 	and.w	r3, r3, #1
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d107      	bne.n	8005ab8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f06f 0201 	mvn.w	r2, #1
 8005ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f96e 	bl	8005d94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac2:	2b80      	cmp	r3, #128	; 0x80
 8005ac4:	d10e      	bne.n	8005ae4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad0:	2b80      	cmp	r3, #128	; 0x80
 8005ad2:	d107      	bne.n	8005ae4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 fd46 	bl	8006570 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005af2:	d10e      	bne.n	8005b12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005afe:	2b80      	cmp	r3, #128	; 0x80
 8005b00:	d107      	bne.n	8005b12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fd39 	bl	8006584 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1c:	2b40      	cmp	r3, #64	; 0x40
 8005b1e:	d10e      	bne.n	8005b3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2a:	2b40      	cmp	r3, #64	; 0x40
 8005b2c:	d107      	bne.n	8005b3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 f953 	bl	8005de4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	f003 0320 	and.w	r3, r3, #32
 8005b48:	2b20      	cmp	r3, #32
 8005b4a:	d10e      	bne.n	8005b6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	f003 0320 	and.w	r3, r3, #32
 8005b56:	2b20      	cmp	r3, #32
 8005b58:	d107      	bne.n	8005b6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f06f 0220 	mvn.w	r2, #32
 8005b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 fcf9 	bl	800655c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b6a:	bf00      	nop
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
	...

08005b74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d101      	bne.n	8005b8e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005b8a:	2302      	movs	r3, #2
 8005b8c:	e0fd      	b.n	8005d8a <HAL_TIM_PWM_ConfigChannel+0x216>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2b14      	cmp	r3, #20
 8005b9a:	f200 80f0 	bhi.w	8005d7e <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005b9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ba4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba4:	08005bf9 	.word	0x08005bf9
 8005ba8:	08005d7f 	.word	0x08005d7f
 8005bac:	08005d7f 	.word	0x08005d7f
 8005bb0:	08005d7f 	.word	0x08005d7f
 8005bb4:	08005c39 	.word	0x08005c39
 8005bb8:	08005d7f 	.word	0x08005d7f
 8005bbc:	08005d7f 	.word	0x08005d7f
 8005bc0:	08005d7f 	.word	0x08005d7f
 8005bc4:	08005c7b 	.word	0x08005c7b
 8005bc8:	08005d7f 	.word	0x08005d7f
 8005bcc:	08005d7f 	.word	0x08005d7f
 8005bd0:	08005d7f 	.word	0x08005d7f
 8005bd4:	08005cbb 	.word	0x08005cbb
 8005bd8:	08005d7f 	.word	0x08005d7f
 8005bdc:	08005d7f 	.word	0x08005d7f
 8005be0:	08005d7f 	.word	0x08005d7f
 8005be4:	08005cfd 	.word	0x08005cfd
 8005be8:	08005d7f 	.word	0x08005d7f
 8005bec:	08005d7f 	.word	0x08005d7f
 8005bf0:	08005d7f 	.word	0x08005d7f
 8005bf4:	08005d3d 	.word	0x08005d3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68b9      	ldr	r1, [r7, #8]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 f99a 	bl	8005f38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	699a      	ldr	r2, [r3, #24]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f042 0208 	orr.w	r2, r2, #8
 8005c12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	699a      	ldr	r2, [r3, #24]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f022 0204 	bic.w	r2, r2, #4
 8005c22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6999      	ldr	r1, [r3, #24]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	691a      	ldr	r2, [r3, #16]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	619a      	str	r2, [r3, #24]
      break;
 8005c36:	e0a3      	b.n	8005d80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68b9      	ldr	r1, [r7, #8]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 f9ec 	bl	800601c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	699a      	ldr	r2, [r3, #24]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	699a      	ldr	r2, [r3, #24]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6999      	ldr	r1, [r3, #24]
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	021a      	lsls	r2, r3, #8
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	430a      	orrs	r2, r1
 8005c76:	619a      	str	r2, [r3, #24]
      break;
 8005c78:	e082      	b.n	8005d80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68b9      	ldr	r1, [r7, #8]
 8005c80:	4618      	mov	r0, r3
 8005c82:	f000 fa43 	bl	800610c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	69da      	ldr	r2, [r3, #28]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f042 0208 	orr.w	r2, r2, #8
 8005c94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	69da      	ldr	r2, [r3, #28]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f022 0204 	bic.w	r2, r2, #4
 8005ca4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	69d9      	ldr	r1, [r3, #28]
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	691a      	ldr	r2, [r3, #16]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	61da      	str	r2, [r3, #28]
      break;
 8005cb8:	e062      	b.n	8005d80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68b9      	ldr	r1, [r7, #8]
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f000 fa99 	bl	80061f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	69da      	ldr	r2, [r3, #28]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	69da      	ldr	r2, [r3, #28]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69d9      	ldr	r1, [r3, #28]
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	021a      	lsls	r2, r3, #8
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	61da      	str	r2, [r3, #28]
      break;
 8005cfa:	e041      	b.n	8005d80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68b9      	ldr	r1, [r7, #8]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f000 fad0 	bl	80062a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f042 0208 	orr.w	r2, r2, #8
 8005d16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f022 0204 	bic.w	r2, r2, #4
 8005d26:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	691a      	ldr	r2, [r3, #16]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	430a      	orrs	r2, r1
 8005d38:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d3a:	e021      	b.n	8005d80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68b9      	ldr	r1, [r7, #8]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f000 fb02 	bl	800634c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	021a      	lsls	r2, r3, #8
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d7c:	e000      	b.n	8005d80 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005d7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2200      	movs	r2, #0
 8005d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop

08005d94 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a40      	ldr	r2, [pc, #256]	; (8005f0c <TIM_Base_SetConfig+0x114>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d013      	beq.n	8005e38 <TIM_Base_SetConfig+0x40>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e16:	d00f      	beq.n	8005e38 <TIM_Base_SetConfig+0x40>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a3d      	ldr	r2, [pc, #244]	; (8005f10 <TIM_Base_SetConfig+0x118>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d00b      	beq.n	8005e38 <TIM_Base_SetConfig+0x40>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a3c      	ldr	r2, [pc, #240]	; (8005f14 <TIM_Base_SetConfig+0x11c>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d007      	beq.n	8005e38 <TIM_Base_SetConfig+0x40>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a3b      	ldr	r2, [pc, #236]	; (8005f18 <TIM_Base_SetConfig+0x120>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d003      	beq.n	8005e38 <TIM_Base_SetConfig+0x40>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a3a      	ldr	r2, [pc, #232]	; (8005f1c <TIM_Base_SetConfig+0x124>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d108      	bne.n	8005e4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a2f      	ldr	r2, [pc, #188]	; (8005f0c <TIM_Base_SetConfig+0x114>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d02b      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e58:	d027      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a2c      	ldr	r2, [pc, #176]	; (8005f10 <TIM_Base_SetConfig+0x118>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d023      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a2b      	ldr	r2, [pc, #172]	; (8005f14 <TIM_Base_SetConfig+0x11c>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d01f      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a2a      	ldr	r2, [pc, #168]	; (8005f18 <TIM_Base_SetConfig+0x120>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d01b      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a29      	ldr	r2, [pc, #164]	; (8005f1c <TIM_Base_SetConfig+0x124>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d017      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a28      	ldr	r2, [pc, #160]	; (8005f20 <TIM_Base_SetConfig+0x128>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d013      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a27      	ldr	r2, [pc, #156]	; (8005f24 <TIM_Base_SetConfig+0x12c>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d00f      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a26      	ldr	r2, [pc, #152]	; (8005f28 <TIM_Base_SetConfig+0x130>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d00b      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a25      	ldr	r2, [pc, #148]	; (8005f2c <TIM_Base_SetConfig+0x134>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d007      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a24      	ldr	r2, [pc, #144]	; (8005f30 <TIM_Base_SetConfig+0x138>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d003      	beq.n	8005eaa <TIM_Base_SetConfig+0xb2>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a23      	ldr	r2, [pc, #140]	; (8005f34 <TIM_Base_SetConfig+0x13c>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d108      	bne.n	8005ebc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	689a      	ldr	r2, [r3, #8]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a0a      	ldr	r2, [pc, #40]	; (8005f0c <TIM_Base_SetConfig+0x114>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d003      	beq.n	8005ef0 <TIM_Base_SetConfig+0xf8>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a0c      	ldr	r2, [pc, #48]	; (8005f1c <TIM_Base_SetConfig+0x124>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d103      	bne.n	8005ef8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	691a      	ldr	r2, [r3, #16]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	615a      	str	r2, [r3, #20]
}
 8005efe:	bf00      	nop
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	40010000 	.word	0x40010000
 8005f10:	40000400 	.word	0x40000400
 8005f14:	40000800 	.word	0x40000800
 8005f18:	40000c00 	.word	0x40000c00
 8005f1c:	40010400 	.word	0x40010400
 8005f20:	40014000 	.word	0x40014000
 8005f24:	40014400 	.word	0x40014400
 8005f28:	40014800 	.word	0x40014800
 8005f2c:	40001800 	.word	0x40001800
 8005f30:	40001c00 	.word	0x40001c00
 8005f34:	40002000 	.word	0x40002000

08005f38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b087      	sub	sp, #28
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	f023 0201 	bic.w	r2, r3, #1
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	4b2b      	ldr	r3, [pc, #172]	; (8006010 <TIM_OC1_SetConfig+0xd8>)
 8005f64:	4013      	ands	r3, r2
 8005f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f023 0303 	bic.w	r3, r3, #3
 8005f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f023 0302 	bic.w	r3, r3, #2
 8005f80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a21      	ldr	r2, [pc, #132]	; (8006014 <TIM_OC1_SetConfig+0xdc>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d003      	beq.n	8005f9c <TIM_OC1_SetConfig+0x64>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a20      	ldr	r2, [pc, #128]	; (8006018 <TIM_OC1_SetConfig+0xe0>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d10c      	bne.n	8005fb6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	f023 0308 	bic.w	r3, r3, #8
 8005fa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	f023 0304 	bic.w	r3, r3, #4
 8005fb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a16      	ldr	r2, [pc, #88]	; (8006014 <TIM_OC1_SetConfig+0xdc>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d003      	beq.n	8005fc6 <TIM_OC1_SetConfig+0x8e>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a15      	ldr	r2, [pc, #84]	; (8006018 <TIM_OC1_SetConfig+0xe0>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d111      	bne.n	8005fea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	685a      	ldr	r2, [r3, #4]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	697a      	ldr	r2, [r7, #20]
 8006002:	621a      	str	r2, [r3, #32]
}
 8006004:	bf00      	nop
 8006006:	371c      	adds	r7, #28
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr
 8006010:	fffeff8f 	.word	0xfffeff8f
 8006014:	40010000 	.word	0x40010000
 8006018:	40010400 	.word	0x40010400

0800601c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800601c:	b480      	push	{r7}
 800601e:	b087      	sub	sp, #28
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	f023 0210 	bic.w	r2, r3, #16
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	4b2e      	ldr	r3, [pc, #184]	; (8006100 <TIM_OC2_SetConfig+0xe4>)
 8006048:	4013      	ands	r3, r2
 800604a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006052:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	021b      	lsls	r3, r3, #8
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	4313      	orrs	r3, r2
 800605e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f023 0320 	bic.w	r3, r3, #32
 8006066:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	011b      	lsls	r3, r3, #4
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	4313      	orrs	r3, r2
 8006072:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a23      	ldr	r2, [pc, #140]	; (8006104 <TIM_OC2_SetConfig+0xe8>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d003      	beq.n	8006084 <TIM_OC2_SetConfig+0x68>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a22      	ldr	r2, [pc, #136]	; (8006108 <TIM_OC2_SetConfig+0xec>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d10d      	bne.n	80060a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800608a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	011b      	lsls	r3, r3, #4
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	4313      	orrs	r3, r2
 8006096:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800609e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a18      	ldr	r2, [pc, #96]	; (8006104 <TIM_OC2_SetConfig+0xe8>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d003      	beq.n	80060b0 <TIM_OC2_SetConfig+0x94>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a17      	ldr	r2, [pc, #92]	; (8006108 <TIM_OC2_SetConfig+0xec>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d113      	bne.n	80060d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	621a      	str	r2, [r3, #32]
}
 80060f2:	bf00      	nop
 80060f4:	371c      	adds	r7, #28
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	feff8fff 	.word	0xfeff8fff
 8006104:	40010000 	.word	0x40010000
 8006108:	40010400 	.word	0x40010400

0800610c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800610c:	b480      	push	{r7}
 800610e:	b087      	sub	sp, #28
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	69db      	ldr	r3, [r3, #28]
 8006132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	4b2d      	ldr	r3, [pc, #180]	; (80061ec <TIM_OC3_SetConfig+0xe0>)
 8006138:	4013      	ands	r3, r2
 800613a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f023 0303 	bic.w	r3, r3, #3
 8006142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	4313      	orrs	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006154:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	021b      	lsls	r3, r3, #8
 800615c:	697a      	ldr	r2, [r7, #20]
 800615e:	4313      	orrs	r3, r2
 8006160:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a22      	ldr	r2, [pc, #136]	; (80061f0 <TIM_OC3_SetConfig+0xe4>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d003      	beq.n	8006172 <TIM_OC3_SetConfig+0x66>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a21      	ldr	r2, [pc, #132]	; (80061f4 <TIM_OC3_SetConfig+0xe8>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d10d      	bne.n	800618e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006178:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	021b      	lsls	r3, r3, #8
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	4313      	orrs	r3, r2
 8006184:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800618c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a17      	ldr	r2, [pc, #92]	; (80061f0 <TIM_OC3_SetConfig+0xe4>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d003      	beq.n	800619e <TIM_OC3_SetConfig+0x92>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a16      	ldr	r2, [pc, #88]	; (80061f4 <TIM_OC3_SetConfig+0xe8>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d113      	bne.n	80061c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	011b      	lsls	r3, r3, #4
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	011b      	lsls	r3, r3, #4
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	685a      	ldr	r2, [r3, #4]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	621a      	str	r2, [r3, #32]
}
 80061e0:	bf00      	nop
 80061e2:	371c      	adds	r7, #28
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr
 80061ec:	fffeff8f 	.word	0xfffeff8f
 80061f0:	40010000 	.word	0x40010000
 80061f4:	40010400 	.word	0x40010400

080061f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b087      	sub	sp, #28
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	69db      	ldr	r3, [r3, #28]
 800621e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	4b1e      	ldr	r3, [pc, #120]	; (800629c <TIM_OC4_SetConfig+0xa4>)
 8006224:	4013      	ands	r3, r2
 8006226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800622e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	021b      	lsls	r3, r3, #8
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	4313      	orrs	r3, r2
 800623a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006242:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	031b      	lsls	r3, r3, #12
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	4313      	orrs	r3, r2
 800624e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a13      	ldr	r2, [pc, #76]	; (80062a0 <TIM_OC4_SetConfig+0xa8>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d003      	beq.n	8006260 <TIM_OC4_SetConfig+0x68>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a12      	ldr	r2, [pc, #72]	; (80062a4 <TIM_OC4_SetConfig+0xac>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d109      	bne.n	8006274 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006266:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	019b      	lsls	r3, r3, #6
 800626e:	697a      	ldr	r2, [r7, #20]
 8006270:	4313      	orrs	r3, r2
 8006272:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	621a      	str	r2, [r3, #32]
}
 800628e:	bf00      	nop
 8006290:	371c      	adds	r7, #28
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	feff8fff 	.word	0xfeff8fff
 80062a0:	40010000 	.word	0x40010000
 80062a4:	40010400 	.word	0x40010400

080062a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b087      	sub	sp, #28
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	4b1b      	ldr	r3, [pc, #108]	; (8006340 <TIM_OC5_SetConfig+0x98>)
 80062d4:	4013      	ands	r3, r2
 80062d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	4313      	orrs	r3, r2
 80062e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80062e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	041b      	lsls	r3, r3, #16
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a12      	ldr	r2, [pc, #72]	; (8006344 <TIM_OC5_SetConfig+0x9c>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d003      	beq.n	8006306 <TIM_OC5_SetConfig+0x5e>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a11      	ldr	r2, [pc, #68]	; (8006348 <TIM_OC5_SetConfig+0xa0>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d109      	bne.n	800631a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800630c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	021b      	lsls	r3, r3, #8
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	4313      	orrs	r3, r2
 8006318:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	697a      	ldr	r2, [r7, #20]
 800631e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	685a      	ldr	r2, [r3, #4]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	621a      	str	r2, [r3, #32]
}
 8006334:	bf00      	nop
 8006336:	371c      	adds	r7, #28
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr
 8006340:	fffeff8f 	.word	0xfffeff8f
 8006344:	40010000 	.word	0x40010000
 8006348:	40010400 	.word	0x40010400

0800634c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800634c:	b480      	push	{r7}
 800634e:	b087      	sub	sp, #28
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6a1b      	ldr	r3, [r3, #32]
 800635a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	4b1c      	ldr	r3, [pc, #112]	; (80063e8 <TIM_OC6_SetConfig+0x9c>)
 8006378:	4013      	ands	r3, r2
 800637a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	021b      	lsls	r3, r3, #8
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	4313      	orrs	r3, r2
 8006386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800638e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	051b      	lsls	r3, r3, #20
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	4313      	orrs	r3, r2
 800639a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a13      	ldr	r2, [pc, #76]	; (80063ec <TIM_OC6_SetConfig+0xa0>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d003      	beq.n	80063ac <TIM_OC6_SetConfig+0x60>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a12      	ldr	r2, [pc, #72]	; (80063f0 <TIM_OC6_SetConfig+0xa4>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d109      	bne.n	80063c0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	695b      	ldr	r3, [r3, #20]
 80063b8:	029b      	lsls	r3, r3, #10
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	4313      	orrs	r3, r2
 80063be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	621a      	str	r2, [r3, #32]
}
 80063da:	bf00      	nop
 80063dc:	371c      	adds	r7, #28
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	feff8fff 	.word	0xfeff8fff
 80063ec:	40010000 	.word	0x40010000
 80063f0:	40010400 	.word	0x40010400

080063f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b087      	sub	sp, #28
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	60f8      	str	r0, [r7, #12]
 80063fc:	60b9      	str	r1, [r7, #8]
 80063fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	f003 031f 	and.w	r3, r3, #31
 8006406:	2201      	movs	r2, #1
 8006408:	fa02 f303 	lsl.w	r3, r2, r3
 800640c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6a1a      	ldr	r2, [r3, #32]
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	43db      	mvns	r3, r3
 8006416:	401a      	ands	r2, r3
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6a1a      	ldr	r2, [r3, #32]
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	f003 031f 	and.w	r3, r3, #31
 8006426:	6879      	ldr	r1, [r7, #4]
 8006428:	fa01 f303 	lsl.w	r3, r1, r3
 800642c:	431a      	orrs	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	621a      	str	r2, [r3, #32]
}
 8006432:	bf00      	nop
 8006434:	371c      	adds	r7, #28
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
	...

08006440 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006450:	2b01      	cmp	r3, #1
 8006452:	d101      	bne.n	8006458 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006454:	2302      	movs	r3, #2
 8006456:	e06d      	b.n	8006534 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2202      	movs	r2, #2
 8006464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a30      	ldr	r2, [pc, #192]	; (8006540 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d004      	beq.n	800648c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a2f      	ldr	r2, [pc, #188]	; (8006544 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d108      	bne.n	800649e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006492:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	4313      	orrs	r3, r2
 800649c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a20      	ldr	r2, [pc, #128]	; (8006540 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d022      	beq.n	8006508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ca:	d01d      	beq.n	8006508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a1d      	ldr	r2, [pc, #116]	; (8006548 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d018      	beq.n	8006508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a1c      	ldr	r2, [pc, #112]	; (800654c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d013      	beq.n	8006508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a1a      	ldr	r2, [pc, #104]	; (8006550 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d00e      	beq.n	8006508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a15      	ldr	r2, [pc, #84]	; (8006544 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d009      	beq.n	8006508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a16      	ldr	r2, [pc, #88]	; (8006554 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d004      	beq.n	8006508 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a15      	ldr	r2, [pc, #84]	; (8006558 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d10c      	bne.n	8006522 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800650e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	4313      	orrs	r3, r2
 8006518:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2201      	movs	r2, #1
 8006526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3714      	adds	r7, #20
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr
 8006540:	40010000 	.word	0x40010000
 8006544:	40010400 	.word	0x40010400
 8006548:	40000400 	.word	0x40000400
 800654c:	40000800 	.word	0x40000800
 8006550:	40000c00 	.word	0x40000c00
 8006554:	40014000 	.word	0x40014000
 8006558:	40001800 	.word	0x40001800

0800655c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006578:	bf00      	nop
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d101      	bne.n	80065aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e040      	b.n	800662c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d106      	bne.n	80065c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f7fc fc7e 	bl	8002ebc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2224      	movs	r2, #36	; 0x24
 80065c4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f022 0201 	bic.w	r2, r2, #1
 80065d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 f8c0 	bl	800675c <UART_SetConfig>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d101      	bne.n	80065e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e022      	b.n	800662c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d002      	beq.n	80065f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 fb16 	bl	8006c20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	685a      	ldr	r2, [r3, #4]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006602:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	689a      	ldr	r2, [r3, #8]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006612:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f042 0201 	orr.w	r2, r2, #1
 8006622:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 fb9d 	bl	8006d64 <UART_CheckIdleState>
 800662a:	4603      	mov	r3, r0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b08a      	sub	sp, #40	; 0x28
 8006638:	af02      	add	r7, sp, #8
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	603b      	str	r3, [r7, #0]
 8006640:	4613      	mov	r3, r2
 8006642:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006648:	2b20      	cmp	r3, #32
 800664a:	f040 8081 	bne.w	8006750 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d002      	beq.n	800665a <HAL_UART_Transmit+0x26>
 8006654:	88fb      	ldrh	r3, [r7, #6]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d101      	bne.n	800665e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e079      	b.n	8006752 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006664:	2b01      	cmp	r3, #1
 8006666:	d101      	bne.n	800666c <HAL_UART_Transmit+0x38>
 8006668:	2302      	movs	r3, #2
 800666a:	e072      	b.n	8006752 <HAL_UART_Transmit+0x11e>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2221      	movs	r2, #33	; 0x21
 8006680:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006682:	f7fc fdcd 	bl	8003220 <HAL_GetTick>
 8006686:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	88fa      	ldrh	r2, [r7, #6]
 800668c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	88fa      	ldrh	r2, [r7, #6]
 8006694:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066a0:	d108      	bne.n	80066b4 <HAL_UART_Transmit+0x80>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d104      	bne.n	80066b4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80066aa:	2300      	movs	r3, #0
 80066ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	61bb      	str	r3, [r7, #24]
 80066b2:	e003      	b.n	80066bc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066b8:	2300      	movs	r3, #0
 80066ba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80066c4:	e02c      	b.n	8006720 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	9300      	str	r3, [sp, #0]
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	2200      	movs	r2, #0
 80066ce:	2180      	movs	r1, #128	; 0x80
 80066d0:	68f8      	ldr	r0, [r7, #12]
 80066d2:	f000 fb7a 	bl	8006dca <UART_WaitOnFlagUntilTimeout>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d001      	beq.n	80066e0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e038      	b.n	8006752 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10b      	bne.n	80066fe <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	881b      	ldrh	r3, [r3, #0]
 80066ea:	461a      	mov	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	3302      	adds	r3, #2
 80066fa:	61bb      	str	r3, [r7, #24]
 80066fc:	e007      	b.n	800670e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	781a      	ldrb	r2, [r3, #0]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	3301      	adds	r3, #1
 800670c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006714:	b29b      	uxth	r3, r3
 8006716:	3b01      	subs	r3, #1
 8006718:	b29a      	uxth	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006726:	b29b      	uxth	r3, r3
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1cc      	bne.n	80066c6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	2200      	movs	r2, #0
 8006734:	2140      	movs	r1, #64	; 0x40
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f000 fb47 	bl	8006dca <UART_WaitOnFlagUntilTimeout>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d001      	beq.n	8006746 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e005      	b.n	8006752 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2220      	movs	r2, #32
 800674a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800674c:	2300      	movs	r3, #0
 800674e:	e000      	b.n	8006752 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006750:	2302      	movs	r3, #2
  }
}
 8006752:	4618      	mov	r0, r3
 8006754:	3720      	adds	r7, #32
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
	...

0800675c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b088      	sub	sp, #32
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006764:	2300      	movs	r3, #0
 8006766:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	689a      	ldr	r2, [r3, #8]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	431a      	orrs	r2, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	431a      	orrs	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	69db      	ldr	r3, [r3, #28]
 800677c:	4313      	orrs	r3, r2
 800677e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	4ba7      	ldr	r3, [pc, #668]	; (8006a24 <UART_SetConfig+0x2c8>)
 8006788:	4013      	ands	r3, r2
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	6812      	ldr	r2, [r2, #0]
 800678e:	6979      	ldr	r1, [r7, #20]
 8006790:	430b      	orrs	r3, r1
 8006792:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	68da      	ldr	r2, [r3, #12]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	697a      	ldr	r2, [r7, #20]
 80067ca:	430a      	orrs	r2, r1
 80067cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a95      	ldr	r2, [pc, #596]	; (8006a28 <UART_SetConfig+0x2cc>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d120      	bne.n	800681a <UART_SetConfig+0xbe>
 80067d8:	4b94      	ldr	r3, [pc, #592]	; (8006a2c <UART_SetConfig+0x2d0>)
 80067da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067de:	f003 0303 	and.w	r3, r3, #3
 80067e2:	2b03      	cmp	r3, #3
 80067e4:	d816      	bhi.n	8006814 <UART_SetConfig+0xb8>
 80067e6:	a201      	add	r2, pc, #4	; (adr r2, 80067ec <UART_SetConfig+0x90>)
 80067e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ec:	080067fd 	.word	0x080067fd
 80067f0:	08006809 	.word	0x08006809
 80067f4:	08006803 	.word	0x08006803
 80067f8:	0800680f 	.word	0x0800680f
 80067fc:	2301      	movs	r3, #1
 80067fe:	77fb      	strb	r3, [r7, #31]
 8006800:	e14f      	b.n	8006aa2 <UART_SetConfig+0x346>
 8006802:	2302      	movs	r3, #2
 8006804:	77fb      	strb	r3, [r7, #31]
 8006806:	e14c      	b.n	8006aa2 <UART_SetConfig+0x346>
 8006808:	2304      	movs	r3, #4
 800680a:	77fb      	strb	r3, [r7, #31]
 800680c:	e149      	b.n	8006aa2 <UART_SetConfig+0x346>
 800680e:	2308      	movs	r3, #8
 8006810:	77fb      	strb	r3, [r7, #31]
 8006812:	e146      	b.n	8006aa2 <UART_SetConfig+0x346>
 8006814:	2310      	movs	r3, #16
 8006816:	77fb      	strb	r3, [r7, #31]
 8006818:	e143      	b.n	8006aa2 <UART_SetConfig+0x346>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a84      	ldr	r2, [pc, #528]	; (8006a30 <UART_SetConfig+0x2d4>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d132      	bne.n	800688a <UART_SetConfig+0x12e>
 8006824:	4b81      	ldr	r3, [pc, #516]	; (8006a2c <UART_SetConfig+0x2d0>)
 8006826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800682a:	f003 030c 	and.w	r3, r3, #12
 800682e:	2b0c      	cmp	r3, #12
 8006830:	d828      	bhi.n	8006884 <UART_SetConfig+0x128>
 8006832:	a201      	add	r2, pc, #4	; (adr r2, 8006838 <UART_SetConfig+0xdc>)
 8006834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006838:	0800686d 	.word	0x0800686d
 800683c:	08006885 	.word	0x08006885
 8006840:	08006885 	.word	0x08006885
 8006844:	08006885 	.word	0x08006885
 8006848:	08006879 	.word	0x08006879
 800684c:	08006885 	.word	0x08006885
 8006850:	08006885 	.word	0x08006885
 8006854:	08006885 	.word	0x08006885
 8006858:	08006873 	.word	0x08006873
 800685c:	08006885 	.word	0x08006885
 8006860:	08006885 	.word	0x08006885
 8006864:	08006885 	.word	0x08006885
 8006868:	0800687f 	.word	0x0800687f
 800686c:	2300      	movs	r3, #0
 800686e:	77fb      	strb	r3, [r7, #31]
 8006870:	e117      	b.n	8006aa2 <UART_SetConfig+0x346>
 8006872:	2302      	movs	r3, #2
 8006874:	77fb      	strb	r3, [r7, #31]
 8006876:	e114      	b.n	8006aa2 <UART_SetConfig+0x346>
 8006878:	2304      	movs	r3, #4
 800687a:	77fb      	strb	r3, [r7, #31]
 800687c:	e111      	b.n	8006aa2 <UART_SetConfig+0x346>
 800687e:	2308      	movs	r3, #8
 8006880:	77fb      	strb	r3, [r7, #31]
 8006882:	e10e      	b.n	8006aa2 <UART_SetConfig+0x346>
 8006884:	2310      	movs	r3, #16
 8006886:	77fb      	strb	r3, [r7, #31]
 8006888:	e10b      	b.n	8006aa2 <UART_SetConfig+0x346>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a69      	ldr	r2, [pc, #420]	; (8006a34 <UART_SetConfig+0x2d8>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d120      	bne.n	80068d6 <UART_SetConfig+0x17a>
 8006894:	4b65      	ldr	r3, [pc, #404]	; (8006a2c <UART_SetConfig+0x2d0>)
 8006896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800689a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800689e:	2b30      	cmp	r3, #48	; 0x30
 80068a0:	d013      	beq.n	80068ca <UART_SetConfig+0x16e>
 80068a2:	2b30      	cmp	r3, #48	; 0x30
 80068a4:	d814      	bhi.n	80068d0 <UART_SetConfig+0x174>
 80068a6:	2b20      	cmp	r3, #32
 80068a8:	d009      	beq.n	80068be <UART_SetConfig+0x162>
 80068aa:	2b20      	cmp	r3, #32
 80068ac:	d810      	bhi.n	80068d0 <UART_SetConfig+0x174>
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d002      	beq.n	80068b8 <UART_SetConfig+0x15c>
 80068b2:	2b10      	cmp	r3, #16
 80068b4:	d006      	beq.n	80068c4 <UART_SetConfig+0x168>
 80068b6:	e00b      	b.n	80068d0 <UART_SetConfig+0x174>
 80068b8:	2300      	movs	r3, #0
 80068ba:	77fb      	strb	r3, [r7, #31]
 80068bc:	e0f1      	b.n	8006aa2 <UART_SetConfig+0x346>
 80068be:	2302      	movs	r3, #2
 80068c0:	77fb      	strb	r3, [r7, #31]
 80068c2:	e0ee      	b.n	8006aa2 <UART_SetConfig+0x346>
 80068c4:	2304      	movs	r3, #4
 80068c6:	77fb      	strb	r3, [r7, #31]
 80068c8:	e0eb      	b.n	8006aa2 <UART_SetConfig+0x346>
 80068ca:	2308      	movs	r3, #8
 80068cc:	77fb      	strb	r3, [r7, #31]
 80068ce:	e0e8      	b.n	8006aa2 <UART_SetConfig+0x346>
 80068d0:	2310      	movs	r3, #16
 80068d2:	77fb      	strb	r3, [r7, #31]
 80068d4:	e0e5      	b.n	8006aa2 <UART_SetConfig+0x346>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a57      	ldr	r2, [pc, #348]	; (8006a38 <UART_SetConfig+0x2dc>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d120      	bne.n	8006922 <UART_SetConfig+0x1c6>
 80068e0:	4b52      	ldr	r3, [pc, #328]	; (8006a2c <UART_SetConfig+0x2d0>)
 80068e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80068ea:	2bc0      	cmp	r3, #192	; 0xc0
 80068ec:	d013      	beq.n	8006916 <UART_SetConfig+0x1ba>
 80068ee:	2bc0      	cmp	r3, #192	; 0xc0
 80068f0:	d814      	bhi.n	800691c <UART_SetConfig+0x1c0>
 80068f2:	2b80      	cmp	r3, #128	; 0x80
 80068f4:	d009      	beq.n	800690a <UART_SetConfig+0x1ae>
 80068f6:	2b80      	cmp	r3, #128	; 0x80
 80068f8:	d810      	bhi.n	800691c <UART_SetConfig+0x1c0>
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d002      	beq.n	8006904 <UART_SetConfig+0x1a8>
 80068fe:	2b40      	cmp	r3, #64	; 0x40
 8006900:	d006      	beq.n	8006910 <UART_SetConfig+0x1b4>
 8006902:	e00b      	b.n	800691c <UART_SetConfig+0x1c0>
 8006904:	2300      	movs	r3, #0
 8006906:	77fb      	strb	r3, [r7, #31]
 8006908:	e0cb      	b.n	8006aa2 <UART_SetConfig+0x346>
 800690a:	2302      	movs	r3, #2
 800690c:	77fb      	strb	r3, [r7, #31]
 800690e:	e0c8      	b.n	8006aa2 <UART_SetConfig+0x346>
 8006910:	2304      	movs	r3, #4
 8006912:	77fb      	strb	r3, [r7, #31]
 8006914:	e0c5      	b.n	8006aa2 <UART_SetConfig+0x346>
 8006916:	2308      	movs	r3, #8
 8006918:	77fb      	strb	r3, [r7, #31]
 800691a:	e0c2      	b.n	8006aa2 <UART_SetConfig+0x346>
 800691c:	2310      	movs	r3, #16
 800691e:	77fb      	strb	r3, [r7, #31]
 8006920:	e0bf      	b.n	8006aa2 <UART_SetConfig+0x346>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a45      	ldr	r2, [pc, #276]	; (8006a3c <UART_SetConfig+0x2e0>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d125      	bne.n	8006978 <UART_SetConfig+0x21c>
 800692c:	4b3f      	ldr	r3, [pc, #252]	; (8006a2c <UART_SetConfig+0x2d0>)
 800692e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006936:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800693a:	d017      	beq.n	800696c <UART_SetConfig+0x210>
 800693c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006940:	d817      	bhi.n	8006972 <UART_SetConfig+0x216>
 8006942:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006946:	d00b      	beq.n	8006960 <UART_SetConfig+0x204>
 8006948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800694c:	d811      	bhi.n	8006972 <UART_SetConfig+0x216>
 800694e:	2b00      	cmp	r3, #0
 8006950:	d003      	beq.n	800695a <UART_SetConfig+0x1fe>
 8006952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006956:	d006      	beq.n	8006966 <UART_SetConfig+0x20a>
 8006958:	e00b      	b.n	8006972 <UART_SetConfig+0x216>
 800695a:	2300      	movs	r3, #0
 800695c:	77fb      	strb	r3, [r7, #31]
 800695e:	e0a0      	b.n	8006aa2 <UART_SetConfig+0x346>
 8006960:	2302      	movs	r3, #2
 8006962:	77fb      	strb	r3, [r7, #31]
 8006964:	e09d      	b.n	8006aa2 <UART_SetConfig+0x346>
 8006966:	2304      	movs	r3, #4
 8006968:	77fb      	strb	r3, [r7, #31]
 800696a:	e09a      	b.n	8006aa2 <UART_SetConfig+0x346>
 800696c:	2308      	movs	r3, #8
 800696e:	77fb      	strb	r3, [r7, #31]
 8006970:	e097      	b.n	8006aa2 <UART_SetConfig+0x346>
 8006972:	2310      	movs	r3, #16
 8006974:	77fb      	strb	r3, [r7, #31]
 8006976:	e094      	b.n	8006aa2 <UART_SetConfig+0x346>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a30      	ldr	r2, [pc, #192]	; (8006a40 <UART_SetConfig+0x2e4>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d125      	bne.n	80069ce <UART_SetConfig+0x272>
 8006982:	4b2a      	ldr	r3, [pc, #168]	; (8006a2c <UART_SetConfig+0x2d0>)
 8006984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006988:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800698c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006990:	d017      	beq.n	80069c2 <UART_SetConfig+0x266>
 8006992:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006996:	d817      	bhi.n	80069c8 <UART_SetConfig+0x26c>
 8006998:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800699c:	d00b      	beq.n	80069b6 <UART_SetConfig+0x25a>
 800699e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069a2:	d811      	bhi.n	80069c8 <UART_SetConfig+0x26c>
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d003      	beq.n	80069b0 <UART_SetConfig+0x254>
 80069a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069ac:	d006      	beq.n	80069bc <UART_SetConfig+0x260>
 80069ae:	e00b      	b.n	80069c8 <UART_SetConfig+0x26c>
 80069b0:	2301      	movs	r3, #1
 80069b2:	77fb      	strb	r3, [r7, #31]
 80069b4:	e075      	b.n	8006aa2 <UART_SetConfig+0x346>
 80069b6:	2302      	movs	r3, #2
 80069b8:	77fb      	strb	r3, [r7, #31]
 80069ba:	e072      	b.n	8006aa2 <UART_SetConfig+0x346>
 80069bc:	2304      	movs	r3, #4
 80069be:	77fb      	strb	r3, [r7, #31]
 80069c0:	e06f      	b.n	8006aa2 <UART_SetConfig+0x346>
 80069c2:	2308      	movs	r3, #8
 80069c4:	77fb      	strb	r3, [r7, #31]
 80069c6:	e06c      	b.n	8006aa2 <UART_SetConfig+0x346>
 80069c8:	2310      	movs	r3, #16
 80069ca:	77fb      	strb	r3, [r7, #31]
 80069cc:	e069      	b.n	8006aa2 <UART_SetConfig+0x346>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a1c      	ldr	r2, [pc, #112]	; (8006a44 <UART_SetConfig+0x2e8>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d137      	bne.n	8006a48 <UART_SetConfig+0x2ec>
 80069d8:	4b14      	ldr	r3, [pc, #80]	; (8006a2c <UART_SetConfig+0x2d0>)
 80069da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069de:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80069e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069e6:	d017      	beq.n	8006a18 <UART_SetConfig+0x2bc>
 80069e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069ec:	d817      	bhi.n	8006a1e <UART_SetConfig+0x2c2>
 80069ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069f2:	d00b      	beq.n	8006a0c <UART_SetConfig+0x2b0>
 80069f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069f8:	d811      	bhi.n	8006a1e <UART_SetConfig+0x2c2>
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d003      	beq.n	8006a06 <UART_SetConfig+0x2aa>
 80069fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a02:	d006      	beq.n	8006a12 <UART_SetConfig+0x2b6>
 8006a04:	e00b      	b.n	8006a1e <UART_SetConfig+0x2c2>
 8006a06:	2300      	movs	r3, #0
 8006a08:	77fb      	strb	r3, [r7, #31]
 8006a0a:	e04a      	b.n	8006aa2 <UART_SetConfig+0x346>
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	77fb      	strb	r3, [r7, #31]
 8006a10:	e047      	b.n	8006aa2 <UART_SetConfig+0x346>
 8006a12:	2304      	movs	r3, #4
 8006a14:	77fb      	strb	r3, [r7, #31]
 8006a16:	e044      	b.n	8006aa2 <UART_SetConfig+0x346>
 8006a18:	2308      	movs	r3, #8
 8006a1a:	77fb      	strb	r3, [r7, #31]
 8006a1c:	e041      	b.n	8006aa2 <UART_SetConfig+0x346>
 8006a1e:	2310      	movs	r3, #16
 8006a20:	77fb      	strb	r3, [r7, #31]
 8006a22:	e03e      	b.n	8006aa2 <UART_SetConfig+0x346>
 8006a24:	efff69f3 	.word	0xefff69f3
 8006a28:	40011000 	.word	0x40011000
 8006a2c:	40023800 	.word	0x40023800
 8006a30:	40004400 	.word	0x40004400
 8006a34:	40004800 	.word	0x40004800
 8006a38:	40004c00 	.word	0x40004c00
 8006a3c:	40005000 	.word	0x40005000
 8006a40:	40011400 	.word	0x40011400
 8006a44:	40007800 	.word	0x40007800
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a71      	ldr	r2, [pc, #452]	; (8006c14 <UART_SetConfig+0x4b8>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d125      	bne.n	8006a9e <UART_SetConfig+0x342>
 8006a52:	4b71      	ldr	r3, [pc, #452]	; (8006c18 <UART_SetConfig+0x4bc>)
 8006a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006a5c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006a60:	d017      	beq.n	8006a92 <UART_SetConfig+0x336>
 8006a62:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006a66:	d817      	bhi.n	8006a98 <UART_SetConfig+0x33c>
 8006a68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a6c:	d00b      	beq.n	8006a86 <UART_SetConfig+0x32a>
 8006a6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a72:	d811      	bhi.n	8006a98 <UART_SetConfig+0x33c>
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d003      	beq.n	8006a80 <UART_SetConfig+0x324>
 8006a78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a7c:	d006      	beq.n	8006a8c <UART_SetConfig+0x330>
 8006a7e:	e00b      	b.n	8006a98 <UART_SetConfig+0x33c>
 8006a80:	2300      	movs	r3, #0
 8006a82:	77fb      	strb	r3, [r7, #31]
 8006a84:	e00d      	b.n	8006aa2 <UART_SetConfig+0x346>
 8006a86:	2302      	movs	r3, #2
 8006a88:	77fb      	strb	r3, [r7, #31]
 8006a8a:	e00a      	b.n	8006aa2 <UART_SetConfig+0x346>
 8006a8c:	2304      	movs	r3, #4
 8006a8e:	77fb      	strb	r3, [r7, #31]
 8006a90:	e007      	b.n	8006aa2 <UART_SetConfig+0x346>
 8006a92:	2308      	movs	r3, #8
 8006a94:	77fb      	strb	r3, [r7, #31]
 8006a96:	e004      	b.n	8006aa2 <UART_SetConfig+0x346>
 8006a98:	2310      	movs	r3, #16
 8006a9a:	77fb      	strb	r3, [r7, #31]
 8006a9c:	e001      	b.n	8006aa2 <UART_SetConfig+0x346>
 8006a9e:	2310      	movs	r3, #16
 8006aa0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	69db      	ldr	r3, [r3, #28]
 8006aa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006aaa:	d15b      	bne.n	8006b64 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8006aac:	7ffb      	ldrb	r3, [r7, #31]
 8006aae:	2b08      	cmp	r3, #8
 8006ab0:	d827      	bhi.n	8006b02 <UART_SetConfig+0x3a6>
 8006ab2:	a201      	add	r2, pc, #4	; (adr r2, 8006ab8 <UART_SetConfig+0x35c>)
 8006ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab8:	08006add 	.word	0x08006add
 8006abc:	08006ae5 	.word	0x08006ae5
 8006ac0:	08006aed 	.word	0x08006aed
 8006ac4:	08006b03 	.word	0x08006b03
 8006ac8:	08006af3 	.word	0x08006af3
 8006acc:	08006b03 	.word	0x08006b03
 8006ad0:	08006b03 	.word	0x08006b03
 8006ad4:	08006b03 	.word	0x08006b03
 8006ad8:	08006afb 	.word	0x08006afb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006adc:	f7fe f8ea 	bl	8004cb4 <HAL_RCC_GetPCLK1Freq>
 8006ae0:	61b8      	str	r0, [r7, #24]
        break;
 8006ae2:	e013      	b.n	8006b0c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ae4:	f7fe f8fa 	bl	8004cdc <HAL_RCC_GetPCLK2Freq>
 8006ae8:	61b8      	str	r0, [r7, #24]
        break;
 8006aea:	e00f      	b.n	8006b0c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006aec:	4b4b      	ldr	r3, [pc, #300]	; (8006c1c <UART_SetConfig+0x4c0>)
 8006aee:	61bb      	str	r3, [r7, #24]
        break;
 8006af0:	e00c      	b.n	8006b0c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006af2:	f7fe f81d 	bl	8004b30 <HAL_RCC_GetSysClockFreq>
 8006af6:	61b8      	str	r0, [r7, #24]
        break;
 8006af8:	e008      	b.n	8006b0c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006afe:	61bb      	str	r3, [r7, #24]
        break;
 8006b00:	e004      	b.n	8006b0c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006b02:	2300      	movs	r3, #0
 8006b04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	77bb      	strb	r3, [r7, #30]
        break;
 8006b0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d074      	beq.n	8006bfc <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	005a      	lsls	r2, r3, #1
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	085b      	lsrs	r3, r3, #1
 8006b1c:	441a      	add	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	2b0f      	cmp	r3, #15
 8006b2e:	d916      	bls.n	8006b5e <UART_SetConfig+0x402>
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b36:	d212      	bcs.n	8006b5e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	f023 030f 	bic.w	r3, r3, #15
 8006b40:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	085b      	lsrs	r3, r3, #1
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	f003 0307 	and.w	r3, r3, #7
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	89fb      	ldrh	r3, [r7, #14]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	89fa      	ldrh	r2, [r7, #14]
 8006b5a:	60da      	str	r2, [r3, #12]
 8006b5c:	e04e      	b.n	8006bfc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	77bb      	strb	r3, [r7, #30]
 8006b62:	e04b      	b.n	8006bfc <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b64:	7ffb      	ldrb	r3, [r7, #31]
 8006b66:	2b08      	cmp	r3, #8
 8006b68:	d827      	bhi.n	8006bba <UART_SetConfig+0x45e>
 8006b6a:	a201      	add	r2, pc, #4	; (adr r2, 8006b70 <UART_SetConfig+0x414>)
 8006b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b70:	08006b95 	.word	0x08006b95
 8006b74:	08006b9d 	.word	0x08006b9d
 8006b78:	08006ba5 	.word	0x08006ba5
 8006b7c:	08006bbb 	.word	0x08006bbb
 8006b80:	08006bab 	.word	0x08006bab
 8006b84:	08006bbb 	.word	0x08006bbb
 8006b88:	08006bbb 	.word	0x08006bbb
 8006b8c:	08006bbb 	.word	0x08006bbb
 8006b90:	08006bb3 	.word	0x08006bb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b94:	f7fe f88e 	bl	8004cb4 <HAL_RCC_GetPCLK1Freq>
 8006b98:	61b8      	str	r0, [r7, #24]
        break;
 8006b9a:	e013      	b.n	8006bc4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b9c:	f7fe f89e 	bl	8004cdc <HAL_RCC_GetPCLK2Freq>
 8006ba0:	61b8      	str	r0, [r7, #24]
        break;
 8006ba2:	e00f      	b.n	8006bc4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ba4:	4b1d      	ldr	r3, [pc, #116]	; (8006c1c <UART_SetConfig+0x4c0>)
 8006ba6:	61bb      	str	r3, [r7, #24]
        break;
 8006ba8:	e00c      	b.n	8006bc4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006baa:	f7fd ffc1 	bl	8004b30 <HAL_RCC_GetSysClockFreq>
 8006bae:	61b8      	str	r0, [r7, #24]
        break;
 8006bb0:	e008      	b.n	8006bc4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bb6:	61bb      	str	r3, [r7, #24]
        break;
 8006bb8:	e004      	b.n	8006bc4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	77bb      	strb	r3, [r7, #30]
        break;
 8006bc2:	bf00      	nop
    }

    if (pclk != 0U)
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d018      	beq.n	8006bfc <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	085a      	lsrs	r2, r3, #1
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	441a      	add	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	2b0f      	cmp	r3, #15
 8006be4:	d908      	bls.n	8006bf8 <UART_SetConfig+0x49c>
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bec:	d204      	bcs.n	8006bf8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	60da      	str	r2, [r3, #12]
 8006bf6:	e001      	b.n	8006bfc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006c08:	7fbb      	ldrb	r3, [r7, #30]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3720      	adds	r7, #32
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	40007c00 	.word	0x40007c00
 8006c18:	40023800 	.word	0x40023800
 8006c1c:	00f42400 	.word	0x00f42400

08006c20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2c:	f003 0301 	and.w	r3, r3, #1
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00a      	beq.n	8006c4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	430a      	orrs	r2, r1
 8006c48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4e:	f003 0302 	and.w	r3, r3, #2
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00a      	beq.n	8006c6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	430a      	orrs	r2, r1
 8006c6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c70:	f003 0304 	and.w	r3, r3, #4
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00a      	beq.n	8006c8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	430a      	orrs	r2, r1
 8006c8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c92:	f003 0308 	and.w	r3, r3, #8
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00a      	beq.n	8006cb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	430a      	orrs	r2, r1
 8006cae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb4:	f003 0310 	and.w	r3, r3, #16
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00a      	beq.n	8006cd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd6:	f003 0320 	and.w	r3, r3, #32
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00a      	beq.n	8006cf4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	430a      	orrs	r2, r1
 8006cf2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d01a      	beq.n	8006d36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	430a      	orrs	r2, r1
 8006d14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d1e:	d10a      	bne.n	8006d36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	430a      	orrs	r2, r1
 8006d34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00a      	beq.n	8006d58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	430a      	orrs	r2, r1
 8006d56:	605a      	str	r2, [r3, #4]
  }
}
 8006d58:	bf00      	nop
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b086      	sub	sp, #24
 8006d68:	af02      	add	r7, sp, #8
 8006d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d74:	f7fc fa54 	bl	8003220 <HAL_GetTick>
 8006d78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 0308 	and.w	r3, r3, #8
 8006d84:	2b08      	cmp	r3, #8
 8006d86:	d10e      	bne.n	8006da6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d8c:	9300      	str	r3, [sp, #0]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 f817 	bl	8006dca <UART_WaitOnFlagUntilTimeout>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d001      	beq.n	8006da6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e00d      	b.n	8006dc2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2220      	movs	r2, #32
 8006daa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2220      	movs	r2, #32
 8006db0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b084      	sub	sp, #16
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	60f8      	str	r0, [r7, #12]
 8006dd2:	60b9      	str	r1, [r7, #8]
 8006dd4:	603b      	str	r3, [r7, #0]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dda:	e05e      	b.n	8006e9a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de2:	d05a      	beq.n	8006e9a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006de4:	f7fc fa1c 	bl	8003220 <HAL_GetTick>
 8006de8:	4602      	mov	r2, r0
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	69ba      	ldr	r2, [r7, #24]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d302      	bcc.n	8006dfa <UART_WaitOnFlagUntilTimeout+0x30>
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d11b      	bne.n	8006e32 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e08:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	689a      	ldr	r2, [r3, #8]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f022 0201 	bic.w	r2, r2, #1
 8006e18:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2220      	movs	r2, #32
 8006e1e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2220      	movs	r2, #32
 8006e24:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e043      	b.n	8006eba <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0304 	and.w	r3, r3, #4
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d02c      	beq.n	8006e9a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	69db      	ldr	r3, [r3, #28]
 8006e46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e4e:	d124      	bne.n	8006e9a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e58:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e68:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	689a      	ldr	r2, [r3, #8]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f022 0201 	bic.w	r2, r2, #1
 8006e78:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2220      	movs	r2, #32
 8006e7e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2220      	movs	r2, #32
 8006e84:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2220      	movs	r2, #32
 8006e8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e00f      	b.n	8006eba <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	69da      	ldr	r2, [r3, #28]
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	bf0c      	ite	eq
 8006eaa:	2301      	moveq	r3, #1
 8006eac:	2300      	movne	r3, #0
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	79fb      	ldrb	r3, [r7, #7]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d091      	beq.n	8006ddc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
	...

08006ec4 <__errno>:
 8006ec4:	4b01      	ldr	r3, [pc, #4]	; (8006ecc <__errno+0x8>)
 8006ec6:	6818      	ldr	r0, [r3, #0]
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	2000000c 	.word	0x2000000c

08006ed0 <__libc_init_array>:
 8006ed0:	b570      	push	{r4, r5, r6, lr}
 8006ed2:	4d0d      	ldr	r5, [pc, #52]	; (8006f08 <__libc_init_array+0x38>)
 8006ed4:	4c0d      	ldr	r4, [pc, #52]	; (8006f0c <__libc_init_array+0x3c>)
 8006ed6:	1b64      	subs	r4, r4, r5
 8006ed8:	10a4      	asrs	r4, r4, #2
 8006eda:	2600      	movs	r6, #0
 8006edc:	42a6      	cmp	r6, r4
 8006ede:	d109      	bne.n	8006ef4 <__libc_init_array+0x24>
 8006ee0:	4d0b      	ldr	r5, [pc, #44]	; (8006f10 <__libc_init_array+0x40>)
 8006ee2:	4c0c      	ldr	r4, [pc, #48]	; (8006f14 <__libc_init_array+0x44>)
 8006ee4:	f002 fcee 	bl	80098c4 <_init>
 8006ee8:	1b64      	subs	r4, r4, r5
 8006eea:	10a4      	asrs	r4, r4, #2
 8006eec:	2600      	movs	r6, #0
 8006eee:	42a6      	cmp	r6, r4
 8006ef0:	d105      	bne.n	8006efe <__libc_init_array+0x2e>
 8006ef2:	bd70      	pop	{r4, r5, r6, pc}
 8006ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ef8:	4798      	blx	r3
 8006efa:	3601      	adds	r6, #1
 8006efc:	e7ee      	b.n	8006edc <__libc_init_array+0xc>
 8006efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f02:	4798      	blx	r3
 8006f04:	3601      	adds	r6, #1
 8006f06:	e7f2      	b.n	8006eee <__libc_init_array+0x1e>
 8006f08:	08009cec 	.word	0x08009cec
 8006f0c:	08009cec 	.word	0x08009cec
 8006f10:	08009cec 	.word	0x08009cec
 8006f14:	08009cf0 	.word	0x08009cf0

08006f18 <malloc>:
 8006f18:	4b02      	ldr	r3, [pc, #8]	; (8006f24 <malloc+0xc>)
 8006f1a:	4601      	mov	r1, r0
 8006f1c:	6818      	ldr	r0, [r3, #0]
 8006f1e:	f000 b85b 	b.w	8006fd8 <_malloc_r>
 8006f22:	bf00      	nop
 8006f24:	2000000c 	.word	0x2000000c

08006f28 <memset>:
 8006f28:	4402      	add	r2, r0
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d100      	bne.n	8006f32 <memset+0xa>
 8006f30:	4770      	bx	lr
 8006f32:	f803 1b01 	strb.w	r1, [r3], #1
 8006f36:	e7f9      	b.n	8006f2c <memset+0x4>

08006f38 <_free_r>:
 8006f38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f3a:	2900      	cmp	r1, #0
 8006f3c:	d048      	beq.n	8006fd0 <_free_r+0x98>
 8006f3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f42:	9001      	str	r0, [sp, #4]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f1a1 0404 	sub.w	r4, r1, #4
 8006f4a:	bfb8      	it	lt
 8006f4c:	18e4      	addlt	r4, r4, r3
 8006f4e:	f001 fba1 	bl	8008694 <__malloc_lock>
 8006f52:	4a20      	ldr	r2, [pc, #128]	; (8006fd4 <_free_r+0x9c>)
 8006f54:	9801      	ldr	r0, [sp, #4]
 8006f56:	6813      	ldr	r3, [r2, #0]
 8006f58:	4615      	mov	r5, r2
 8006f5a:	b933      	cbnz	r3, 8006f6a <_free_r+0x32>
 8006f5c:	6063      	str	r3, [r4, #4]
 8006f5e:	6014      	str	r4, [r2, #0]
 8006f60:	b003      	add	sp, #12
 8006f62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f66:	f001 bb9b 	b.w	80086a0 <__malloc_unlock>
 8006f6a:	42a3      	cmp	r3, r4
 8006f6c:	d90b      	bls.n	8006f86 <_free_r+0x4e>
 8006f6e:	6821      	ldr	r1, [r4, #0]
 8006f70:	1862      	adds	r2, r4, r1
 8006f72:	4293      	cmp	r3, r2
 8006f74:	bf04      	itt	eq
 8006f76:	681a      	ldreq	r2, [r3, #0]
 8006f78:	685b      	ldreq	r3, [r3, #4]
 8006f7a:	6063      	str	r3, [r4, #4]
 8006f7c:	bf04      	itt	eq
 8006f7e:	1852      	addeq	r2, r2, r1
 8006f80:	6022      	streq	r2, [r4, #0]
 8006f82:	602c      	str	r4, [r5, #0]
 8006f84:	e7ec      	b.n	8006f60 <_free_r+0x28>
 8006f86:	461a      	mov	r2, r3
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	b10b      	cbz	r3, 8006f90 <_free_r+0x58>
 8006f8c:	42a3      	cmp	r3, r4
 8006f8e:	d9fa      	bls.n	8006f86 <_free_r+0x4e>
 8006f90:	6811      	ldr	r1, [r2, #0]
 8006f92:	1855      	adds	r5, r2, r1
 8006f94:	42a5      	cmp	r5, r4
 8006f96:	d10b      	bne.n	8006fb0 <_free_r+0x78>
 8006f98:	6824      	ldr	r4, [r4, #0]
 8006f9a:	4421      	add	r1, r4
 8006f9c:	1854      	adds	r4, r2, r1
 8006f9e:	42a3      	cmp	r3, r4
 8006fa0:	6011      	str	r1, [r2, #0]
 8006fa2:	d1dd      	bne.n	8006f60 <_free_r+0x28>
 8006fa4:	681c      	ldr	r4, [r3, #0]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	6053      	str	r3, [r2, #4]
 8006faa:	4421      	add	r1, r4
 8006fac:	6011      	str	r1, [r2, #0]
 8006fae:	e7d7      	b.n	8006f60 <_free_r+0x28>
 8006fb0:	d902      	bls.n	8006fb8 <_free_r+0x80>
 8006fb2:	230c      	movs	r3, #12
 8006fb4:	6003      	str	r3, [r0, #0]
 8006fb6:	e7d3      	b.n	8006f60 <_free_r+0x28>
 8006fb8:	6825      	ldr	r5, [r4, #0]
 8006fba:	1961      	adds	r1, r4, r5
 8006fbc:	428b      	cmp	r3, r1
 8006fbe:	bf04      	itt	eq
 8006fc0:	6819      	ldreq	r1, [r3, #0]
 8006fc2:	685b      	ldreq	r3, [r3, #4]
 8006fc4:	6063      	str	r3, [r4, #4]
 8006fc6:	bf04      	itt	eq
 8006fc8:	1949      	addeq	r1, r1, r5
 8006fca:	6021      	streq	r1, [r4, #0]
 8006fcc:	6054      	str	r4, [r2, #4]
 8006fce:	e7c7      	b.n	8006f60 <_free_r+0x28>
 8006fd0:	b003      	add	sp, #12
 8006fd2:	bd30      	pop	{r4, r5, pc}
 8006fd4:	20000208 	.word	0x20000208

08006fd8 <_malloc_r>:
 8006fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fda:	1ccd      	adds	r5, r1, #3
 8006fdc:	f025 0503 	bic.w	r5, r5, #3
 8006fe0:	3508      	adds	r5, #8
 8006fe2:	2d0c      	cmp	r5, #12
 8006fe4:	bf38      	it	cc
 8006fe6:	250c      	movcc	r5, #12
 8006fe8:	2d00      	cmp	r5, #0
 8006fea:	4606      	mov	r6, r0
 8006fec:	db01      	blt.n	8006ff2 <_malloc_r+0x1a>
 8006fee:	42a9      	cmp	r1, r5
 8006ff0:	d903      	bls.n	8006ffa <_malloc_r+0x22>
 8006ff2:	230c      	movs	r3, #12
 8006ff4:	6033      	str	r3, [r6, #0]
 8006ff6:	2000      	movs	r0, #0
 8006ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ffa:	f001 fb4b 	bl	8008694 <__malloc_lock>
 8006ffe:	4921      	ldr	r1, [pc, #132]	; (8007084 <_malloc_r+0xac>)
 8007000:	680a      	ldr	r2, [r1, #0]
 8007002:	4614      	mov	r4, r2
 8007004:	b99c      	cbnz	r4, 800702e <_malloc_r+0x56>
 8007006:	4f20      	ldr	r7, [pc, #128]	; (8007088 <_malloc_r+0xb0>)
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	b923      	cbnz	r3, 8007016 <_malloc_r+0x3e>
 800700c:	4621      	mov	r1, r4
 800700e:	4630      	mov	r0, r6
 8007010:	f000 fca6 	bl	8007960 <_sbrk_r>
 8007014:	6038      	str	r0, [r7, #0]
 8007016:	4629      	mov	r1, r5
 8007018:	4630      	mov	r0, r6
 800701a:	f000 fca1 	bl	8007960 <_sbrk_r>
 800701e:	1c43      	adds	r3, r0, #1
 8007020:	d123      	bne.n	800706a <_malloc_r+0x92>
 8007022:	230c      	movs	r3, #12
 8007024:	6033      	str	r3, [r6, #0]
 8007026:	4630      	mov	r0, r6
 8007028:	f001 fb3a 	bl	80086a0 <__malloc_unlock>
 800702c:	e7e3      	b.n	8006ff6 <_malloc_r+0x1e>
 800702e:	6823      	ldr	r3, [r4, #0]
 8007030:	1b5b      	subs	r3, r3, r5
 8007032:	d417      	bmi.n	8007064 <_malloc_r+0x8c>
 8007034:	2b0b      	cmp	r3, #11
 8007036:	d903      	bls.n	8007040 <_malloc_r+0x68>
 8007038:	6023      	str	r3, [r4, #0]
 800703a:	441c      	add	r4, r3
 800703c:	6025      	str	r5, [r4, #0]
 800703e:	e004      	b.n	800704a <_malloc_r+0x72>
 8007040:	6863      	ldr	r3, [r4, #4]
 8007042:	42a2      	cmp	r2, r4
 8007044:	bf0c      	ite	eq
 8007046:	600b      	streq	r3, [r1, #0]
 8007048:	6053      	strne	r3, [r2, #4]
 800704a:	4630      	mov	r0, r6
 800704c:	f001 fb28 	bl	80086a0 <__malloc_unlock>
 8007050:	f104 000b 	add.w	r0, r4, #11
 8007054:	1d23      	adds	r3, r4, #4
 8007056:	f020 0007 	bic.w	r0, r0, #7
 800705a:	1ac2      	subs	r2, r0, r3
 800705c:	d0cc      	beq.n	8006ff8 <_malloc_r+0x20>
 800705e:	1a1b      	subs	r3, r3, r0
 8007060:	50a3      	str	r3, [r4, r2]
 8007062:	e7c9      	b.n	8006ff8 <_malloc_r+0x20>
 8007064:	4622      	mov	r2, r4
 8007066:	6864      	ldr	r4, [r4, #4]
 8007068:	e7cc      	b.n	8007004 <_malloc_r+0x2c>
 800706a:	1cc4      	adds	r4, r0, #3
 800706c:	f024 0403 	bic.w	r4, r4, #3
 8007070:	42a0      	cmp	r0, r4
 8007072:	d0e3      	beq.n	800703c <_malloc_r+0x64>
 8007074:	1a21      	subs	r1, r4, r0
 8007076:	4630      	mov	r0, r6
 8007078:	f000 fc72 	bl	8007960 <_sbrk_r>
 800707c:	3001      	adds	r0, #1
 800707e:	d1dd      	bne.n	800703c <_malloc_r+0x64>
 8007080:	e7cf      	b.n	8007022 <_malloc_r+0x4a>
 8007082:	bf00      	nop
 8007084:	20000208 	.word	0x20000208
 8007088:	2000020c 	.word	0x2000020c

0800708c <__cvt>:
 800708c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007090:	ec55 4b10 	vmov	r4, r5, d0
 8007094:	2d00      	cmp	r5, #0
 8007096:	460e      	mov	r6, r1
 8007098:	4619      	mov	r1, r3
 800709a:	462b      	mov	r3, r5
 800709c:	bfbb      	ittet	lt
 800709e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80070a2:	461d      	movlt	r5, r3
 80070a4:	2300      	movge	r3, #0
 80070a6:	232d      	movlt	r3, #45	; 0x2d
 80070a8:	700b      	strb	r3, [r1, #0]
 80070aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80070b0:	4691      	mov	r9, r2
 80070b2:	f023 0820 	bic.w	r8, r3, #32
 80070b6:	bfbc      	itt	lt
 80070b8:	4622      	movlt	r2, r4
 80070ba:	4614      	movlt	r4, r2
 80070bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80070c0:	d005      	beq.n	80070ce <__cvt+0x42>
 80070c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80070c6:	d100      	bne.n	80070ca <__cvt+0x3e>
 80070c8:	3601      	adds	r6, #1
 80070ca:	2102      	movs	r1, #2
 80070cc:	e000      	b.n	80070d0 <__cvt+0x44>
 80070ce:	2103      	movs	r1, #3
 80070d0:	ab03      	add	r3, sp, #12
 80070d2:	9301      	str	r3, [sp, #4]
 80070d4:	ab02      	add	r3, sp, #8
 80070d6:	9300      	str	r3, [sp, #0]
 80070d8:	ec45 4b10 	vmov	d0, r4, r5
 80070dc:	4653      	mov	r3, sl
 80070de:	4632      	mov	r2, r6
 80070e0:	f000 fcda 	bl	8007a98 <_dtoa_r>
 80070e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80070e8:	4607      	mov	r7, r0
 80070ea:	d102      	bne.n	80070f2 <__cvt+0x66>
 80070ec:	f019 0f01 	tst.w	r9, #1
 80070f0:	d022      	beq.n	8007138 <__cvt+0xac>
 80070f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80070f6:	eb07 0906 	add.w	r9, r7, r6
 80070fa:	d110      	bne.n	800711e <__cvt+0x92>
 80070fc:	783b      	ldrb	r3, [r7, #0]
 80070fe:	2b30      	cmp	r3, #48	; 0x30
 8007100:	d10a      	bne.n	8007118 <__cvt+0x8c>
 8007102:	2200      	movs	r2, #0
 8007104:	2300      	movs	r3, #0
 8007106:	4620      	mov	r0, r4
 8007108:	4629      	mov	r1, r5
 800710a:	f7f9 fcfd 	bl	8000b08 <__aeabi_dcmpeq>
 800710e:	b918      	cbnz	r0, 8007118 <__cvt+0x8c>
 8007110:	f1c6 0601 	rsb	r6, r6, #1
 8007114:	f8ca 6000 	str.w	r6, [sl]
 8007118:	f8da 3000 	ldr.w	r3, [sl]
 800711c:	4499      	add	r9, r3
 800711e:	2200      	movs	r2, #0
 8007120:	2300      	movs	r3, #0
 8007122:	4620      	mov	r0, r4
 8007124:	4629      	mov	r1, r5
 8007126:	f7f9 fcef 	bl	8000b08 <__aeabi_dcmpeq>
 800712a:	b108      	cbz	r0, 8007130 <__cvt+0xa4>
 800712c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007130:	2230      	movs	r2, #48	; 0x30
 8007132:	9b03      	ldr	r3, [sp, #12]
 8007134:	454b      	cmp	r3, r9
 8007136:	d307      	bcc.n	8007148 <__cvt+0xbc>
 8007138:	9b03      	ldr	r3, [sp, #12]
 800713a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800713c:	1bdb      	subs	r3, r3, r7
 800713e:	4638      	mov	r0, r7
 8007140:	6013      	str	r3, [r2, #0]
 8007142:	b004      	add	sp, #16
 8007144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007148:	1c59      	adds	r1, r3, #1
 800714a:	9103      	str	r1, [sp, #12]
 800714c:	701a      	strb	r2, [r3, #0]
 800714e:	e7f0      	b.n	8007132 <__cvt+0xa6>

08007150 <__exponent>:
 8007150:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007152:	4603      	mov	r3, r0
 8007154:	2900      	cmp	r1, #0
 8007156:	bfb8      	it	lt
 8007158:	4249      	neglt	r1, r1
 800715a:	f803 2b02 	strb.w	r2, [r3], #2
 800715e:	bfb4      	ite	lt
 8007160:	222d      	movlt	r2, #45	; 0x2d
 8007162:	222b      	movge	r2, #43	; 0x2b
 8007164:	2909      	cmp	r1, #9
 8007166:	7042      	strb	r2, [r0, #1]
 8007168:	dd2a      	ble.n	80071c0 <__exponent+0x70>
 800716a:	f10d 0407 	add.w	r4, sp, #7
 800716e:	46a4      	mov	ip, r4
 8007170:	270a      	movs	r7, #10
 8007172:	46a6      	mov	lr, r4
 8007174:	460a      	mov	r2, r1
 8007176:	fb91 f6f7 	sdiv	r6, r1, r7
 800717a:	fb07 1516 	mls	r5, r7, r6, r1
 800717e:	3530      	adds	r5, #48	; 0x30
 8007180:	2a63      	cmp	r2, #99	; 0x63
 8007182:	f104 34ff 	add.w	r4, r4, #4294967295
 8007186:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800718a:	4631      	mov	r1, r6
 800718c:	dcf1      	bgt.n	8007172 <__exponent+0x22>
 800718e:	3130      	adds	r1, #48	; 0x30
 8007190:	f1ae 0502 	sub.w	r5, lr, #2
 8007194:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007198:	1c44      	adds	r4, r0, #1
 800719a:	4629      	mov	r1, r5
 800719c:	4561      	cmp	r1, ip
 800719e:	d30a      	bcc.n	80071b6 <__exponent+0x66>
 80071a0:	f10d 0209 	add.w	r2, sp, #9
 80071a4:	eba2 020e 	sub.w	r2, r2, lr
 80071a8:	4565      	cmp	r5, ip
 80071aa:	bf88      	it	hi
 80071ac:	2200      	movhi	r2, #0
 80071ae:	4413      	add	r3, r2
 80071b0:	1a18      	subs	r0, r3, r0
 80071b2:	b003      	add	sp, #12
 80071b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 80071be:	e7ed      	b.n	800719c <__exponent+0x4c>
 80071c0:	2330      	movs	r3, #48	; 0x30
 80071c2:	3130      	adds	r1, #48	; 0x30
 80071c4:	7083      	strb	r3, [r0, #2]
 80071c6:	70c1      	strb	r1, [r0, #3]
 80071c8:	1d03      	adds	r3, r0, #4
 80071ca:	e7f1      	b.n	80071b0 <__exponent+0x60>

080071cc <_printf_float>:
 80071cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071d0:	ed2d 8b02 	vpush	{d8}
 80071d4:	b08d      	sub	sp, #52	; 0x34
 80071d6:	460c      	mov	r4, r1
 80071d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80071dc:	4616      	mov	r6, r2
 80071de:	461f      	mov	r7, r3
 80071e0:	4605      	mov	r5, r0
 80071e2:	f001 fa45 	bl	8008670 <_localeconv_r>
 80071e6:	f8d0 a000 	ldr.w	sl, [r0]
 80071ea:	4650      	mov	r0, sl
 80071ec:	f7f9 f810 	bl	8000210 <strlen>
 80071f0:	2300      	movs	r3, #0
 80071f2:	930a      	str	r3, [sp, #40]	; 0x28
 80071f4:	6823      	ldr	r3, [r4, #0]
 80071f6:	9305      	str	r3, [sp, #20]
 80071f8:	f8d8 3000 	ldr.w	r3, [r8]
 80071fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007200:	3307      	adds	r3, #7
 8007202:	f023 0307 	bic.w	r3, r3, #7
 8007206:	f103 0208 	add.w	r2, r3, #8
 800720a:	f8c8 2000 	str.w	r2, [r8]
 800720e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007212:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007216:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800721a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800721e:	9307      	str	r3, [sp, #28]
 8007220:	f8cd 8018 	str.w	r8, [sp, #24]
 8007224:	ee08 0a10 	vmov	s16, r0
 8007228:	4b9f      	ldr	r3, [pc, #636]	; (80074a8 <_printf_float+0x2dc>)
 800722a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800722e:	f04f 32ff 	mov.w	r2, #4294967295
 8007232:	f7f9 fc9b 	bl	8000b6c <__aeabi_dcmpun>
 8007236:	bb88      	cbnz	r0, 800729c <_printf_float+0xd0>
 8007238:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800723c:	4b9a      	ldr	r3, [pc, #616]	; (80074a8 <_printf_float+0x2dc>)
 800723e:	f04f 32ff 	mov.w	r2, #4294967295
 8007242:	f7f9 fc75 	bl	8000b30 <__aeabi_dcmple>
 8007246:	bb48      	cbnz	r0, 800729c <_printf_float+0xd0>
 8007248:	2200      	movs	r2, #0
 800724a:	2300      	movs	r3, #0
 800724c:	4640      	mov	r0, r8
 800724e:	4649      	mov	r1, r9
 8007250:	f7f9 fc64 	bl	8000b1c <__aeabi_dcmplt>
 8007254:	b110      	cbz	r0, 800725c <_printf_float+0x90>
 8007256:	232d      	movs	r3, #45	; 0x2d
 8007258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800725c:	4b93      	ldr	r3, [pc, #588]	; (80074ac <_printf_float+0x2e0>)
 800725e:	4894      	ldr	r0, [pc, #592]	; (80074b0 <_printf_float+0x2e4>)
 8007260:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007264:	bf94      	ite	ls
 8007266:	4698      	movls	r8, r3
 8007268:	4680      	movhi	r8, r0
 800726a:	2303      	movs	r3, #3
 800726c:	6123      	str	r3, [r4, #16]
 800726e:	9b05      	ldr	r3, [sp, #20]
 8007270:	f023 0204 	bic.w	r2, r3, #4
 8007274:	6022      	str	r2, [r4, #0]
 8007276:	f04f 0900 	mov.w	r9, #0
 800727a:	9700      	str	r7, [sp, #0]
 800727c:	4633      	mov	r3, r6
 800727e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007280:	4621      	mov	r1, r4
 8007282:	4628      	mov	r0, r5
 8007284:	f000 f9d8 	bl	8007638 <_printf_common>
 8007288:	3001      	adds	r0, #1
 800728a:	f040 8090 	bne.w	80073ae <_printf_float+0x1e2>
 800728e:	f04f 30ff 	mov.w	r0, #4294967295
 8007292:	b00d      	add	sp, #52	; 0x34
 8007294:	ecbd 8b02 	vpop	{d8}
 8007298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800729c:	4642      	mov	r2, r8
 800729e:	464b      	mov	r3, r9
 80072a0:	4640      	mov	r0, r8
 80072a2:	4649      	mov	r1, r9
 80072a4:	f7f9 fc62 	bl	8000b6c <__aeabi_dcmpun>
 80072a8:	b140      	cbz	r0, 80072bc <_printf_float+0xf0>
 80072aa:	464b      	mov	r3, r9
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	bfbc      	itt	lt
 80072b0:	232d      	movlt	r3, #45	; 0x2d
 80072b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80072b6:	487f      	ldr	r0, [pc, #508]	; (80074b4 <_printf_float+0x2e8>)
 80072b8:	4b7f      	ldr	r3, [pc, #508]	; (80074b8 <_printf_float+0x2ec>)
 80072ba:	e7d1      	b.n	8007260 <_printf_float+0x94>
 80072bc:	6863      	ldr	r3, [r4, #4]
 80072be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80072c2:	9206      	str	r2, [sp, #24]
 80072c4:	1c5a      	adds	r2, r3, #1
 80072c6:	d13f      	bne.n	8007348 <_printf_float+0x17c>
 80072c8:	2306      	movs	r3, #6
 80072ca:	6063      	str	r3, [r4, #4]
 80072cc:	9b05      	ldr	r3, [sp, #20]
 80072ce:	6861      	ldr	r1, [r4, #4]
 80072d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80072d4:	2300      	movs	r3, #0
 80072d6:	9303      	str	r3, [sp, #12]
 80072d8:	ab0a      	add	r3, sp, #40	; 0x28
 80072da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80072de:	ab09      	add	r3, sp, #36	; 0x24
 80072e0:	ec49 8b10 	vmov	d0, r8, r9
 80072e4:	9300      	str	r3, [sp, #0]
 80072e6:	6022      	str	r2, [r4, #0]
 80072e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80072ec:	4628      	mov	r0, r5
 80072ee:	f7ff fecd 	bl	800708c <__cvt>
 80072f2:	9b06      	ldr	r3, [sp, #24]
 80072f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072f6:	2b47      	cmp	r3, #71	; 0x47
 80072f8:	4680      	mov	r8, r0
 80072fa:	d108      	bne.n	800730e <_printf_float+0x142>
 80072fc:	1cc8      	adds	r0, r1, #3
 80072fe:	db02      	blt.n	8007306 <_printf_float+0x13a>
 8007300:	6863      	ldr	r3, [r4, #4]
 8007302:	4299      	cmp	r1, r3
 8007304:	dd41      	ble.n	800738a <_printf_float+0x1be>
 8007306:	f1ab 0b02 	sub.w	fp, fp, #2
 800730a:	fa5f fb8b 	uxtb.w	fp, fp
 800730e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007312:	d820      	bhi.n	8007356 <_printf_float+0x18a>
 8007314:	3901      	subs	r1, #1
 8007316:	465a      	mov	r2, fp
 8007318:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800731c:	9109      	str	r1, [sp, #36]	; 0x24
 800731e:	f7ff ff17 	bl	8007150 <__exponent>
 8007322:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007324:	1813      	adds	r3, r2, r0
 8007326:	2a01      	cmp	r2, #1
 8007328:	4681      	mov	r9, r0
 800732a:	6123      	str	r3, [r4, #16]
 800732c:	dc02      	bgt.n	8007334 <_printf_float+0x168>
 800732e:	6822      	ldr	r2, [r4, #0]
 8007330:	07d2      	lsls	r2, r2, #31
 8007332:	d501      	bpl.n	8007338 <_printf_float+0x16c>
 8007334:	3301      	adds	r3, #1
 8007336:	6123      	str	r3, [r4, #16]
 8007338:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800733c:	2b00      	cmp	r3, #0
 800733e:	d09c      	beq.n	800727a <_printf_float+0xae>
 8007340:	232d      	movs	r3, #45	; 0x2d
 8007342:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007346:	e798      	b.n	800727a <_printf_float+0xae>
 8007348:	9a06      	ldr	r2, [sp, #24]
 800734a:	2a47      	cmp	r2, #71	; 0x47
 800734c:	d1be      	bne.n	80072cc <_printf_float+0x100>
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1bc      	bne.n	80072cc <_printf_float+0x100>
 8007352:	2301      	movs	r3, #1
 8007354:	e7b9      	b.n	80072ca <_printf_float+0xfe>
 8007356:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800735a:	d118      	bne.n	800738e <_printf_float+0x1c2>
 800735c:	2900      	cmp	r1, #0
 800735e:	6863      	ldr	r3, [r4, #4]
 8007360:	dd0b      	ble.n	800737a <_printf_float+0x1ae>
 8007362:	6121      	str	r1, [r4, #16]
 8007364:	b913      	cbnz	r3, 800736c <_printf_float+0x1a0>
 8007366:	6822      	ldr	r2, [r4, #0]
 8007368:	07d0      	lsls	r0, r2, #31
 800736a:	d502      	bpl.n	8007372 <_printf_float+0x1a6>
 800736c:	3301      	adds	r3, #1
 800736e:	440b      	add	r3, r1
 8007370:	6123      	str	r3, [r4, #16]
 8007372:	65a1      	str	r1, [r4, #88]	; 0x58
 8007374:	f04f 0900 	mov.w	r9, #0
 8007378:	e7de      	b.n	8007338 <_printf_float+0x16c>
 800737a:	b913      	cbnz	r3, 8007382 <_printf_float+0x1b6>
 800737c:	6822      	ldr	r2, [r4, #0]
 800737e:	07d2      	lsls	r2, r2, #31
 8007380:	d501      	bpl.n	8007386 <_printf_float+0x1ba>
 8007382:	3302      	adds	r3, #2
 8007384:	e7f4      	b.n	8007370 <_printf_float+0x1a4>
 8007386:	2301      	movs	r3, #1
 8007388:	e7f2      	b.n	8007370 <_printf_float+0x1a4>
 800738a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800738e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007390:	4299      	cmp	r1, r3
 8007392:	db05      	blt.n	80073a0 <_printf_float+0x1d4>
 8007394:	6823      	ldr	r3, [r4, #0]
 8007396:	6121      	str	r1, [r4, #16]
 8007398:	07d8      	lsls	r0, r3, #31
 800739a:	d5ea      	bpl.n	8007372 <_printf_float+0x1a6>
 800739c:	1c4b      	adds	r3, r1, #1
 800739e:	e7e7      	b.n	8007370 <_printf_float+0x1a4>
 80073a0:	2900      	cmp	r1, #0
 80073a2:	bfd4      	ite	le
 80073a4:	f1c1 0202 	rsble	r2, r1, #2
 80073a8:	2201      	movgt	r2, #1
 80073aa:	4413      	add	r3, r2
 80073ac:	e7e0      	b.n	8007370 <_printf_float+0x1a4>
 80073ae:	6823      	ldr	r3, [r4, #0]
 80073b0:	055a      	lsls	r2, r3, #21
 80073b2:	d407      	bmi.n	80073c4 <_printf_float+0x1f8>
 80073b4:	6923      	ldr	r3, [r4, #16]
 80073b6:	4642      	mov	r2, r8
 80073b8:	4631      	mov	r1, r6
 80073ba:	4628      	mov	r0, r5
 80073bc:	47b8      	blx	r7
 80073be:	3001      	adds	r0, #1
 80073c0:	d12c      	bne.n	800741c <_printf_float+0x250>
 80073c2:	e764      	b.n	800728e <_printf_float+0xc2>
 80073c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80073c8:	f240 80e0 	bls.w	800758c <_printf_float+0x3c0>
 80073cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80073d0:	2200      	movs	r2, #0
 80073d2:	2300      	movs	r3, #0
 80073d4:	f7f9 fb98 	bl	8000b08 <__aeabi_dcmpeq>
 80073d8:	2800      	cmp	r0, #0
 80073da:	d034      	beq.n	8007446 <_printf_float+0x27a>
 80073dc:	4a37      	ldr	r2, [pc, #220]	; (80074bc <_printf_float+0x2f0>)
 80073de:	2301      	movs	r3, #1
 80073e0:	4631      	mov	r1, r6
 80073e2:	4628      	mov	r0, r5
 80073e4:	47b8      	blx	r7
 80073e6:	3001      	adds	r0, #1
 80073e8:	f43f af51 	beq.w	800728e <_printf_float+0xc2>
 80073ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073f0:	429a      	cmp	r2, r3
 80073f2:	db02      	blt.n	80073fa <_printf_float+0x22e>
 80073f4:	6823      	ldr	r3, [r4, #0]
 80073f6:	07d8      	lsls	r0, r3, #31
 80073f8:	d510      	bpl.n	800741c <_printf_float+0x250>
 80073fa:	ee18 3a10 	vmov	r3, s16
 80073fe:	4652      	mov	r2, sl
 8007400:	4631      	mov	r1, r6
 8007402:	4628      	mov	r0, r5
 8007404:	47b8      	blx	r7
 8007406:	3001      	adds	r0, #1
 8007408:	f43f af41 	beq.w	800728e <_printf_float+0xc2>
 800740c:	f04f 0800 	mov.w	r8, #0
 8007410:	f104 091a 	add.w	r9, r4, #26
 8007414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007416:	3b01      	subs	r3, #1
 8007418:	4543      	cmp	r3, r8
 800741a:	dc09      	bgt.n	8007430 <_printf_float+0x264>
 800741c:	6823      	ldr	r3, [r4, #0]
 800741e:	079b      	lsls	r3, r3, #30
 8007420:	f100 8105 	bmi.w	800762e <_printf_float+0x462>
 8007424:	68e0      	ldr	r0, [r4, #12]
 8007426:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007428:	4298      	cmp	r0, r3
 800742a:	bfb8      	it	lt
 800742c:	4618      	movlt	r0, r3
 800742e:	e730      	b.n	8007292 <_printf_float+0xc6>
 8007430:	2301      	movs	r3, #1
 8007432:	464a      	mov	r2, r9
 8007434:	4631      	mov	r1, r6
 8007436:	4628      	mov	r0, r5
 8007438:	47b8      	blx	r7
 800743a:	3001      	adds	r0, #1
 800743c:	f43f af27 	beq.w	800728e <_printf_float+0xc2>
 8007440:	f108 0801 	add.w	r8, r8, #1
 8007444:	e7e6      	b.n	8007414 <_printf_float+0x248>
 8007446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007448:	2b00      	cmp	r3, #0
 800744a:	dc39      	bgt.n	80074c0 <_printf_float+0x2f4>
 800744c:	4a1b      	ldr	r2, [pc, #108]	; (80074bc <_printf_float+0x2f0>)
 800744e:	2301      	movs	r3, #1
 8007450:	4631      	mov	r1, r6
 8007452:	4628      	mov	r0, r5
 8007454:	47b8      	blx	r7
 8007456:	3001      	adds	r0, #1
 8007458:	f43f af19 	beq.w	800728e <_printf_float+0xc2>
 800745c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007460:	4313      	orrs	r3, r2
 8007462:	d102      	bne.n	800746a <_printf_float+0x29e>
 8007464:	6823      	ldr	r3, [r4, #0]
 8007466:	07d9      	lsls	r1, r3, #31
 8007468:	d5d8      	bpl.n	800741c <_printf_float+0x250>
 800746a:	ee18 3a10 	vmov	r3, s16
 800746e:	4652      	mov	r2, sl
 8007470:	4631      	mov	r1, r6
 8007472:	4628      	mov	r0, r5
 8007474:	47b8      	blx	r7
 8007476:	3001      	adds	r0, #1
 8007478:	f43f af09 	beq.w	800728e <_printf_float+0xc2>
 800747c:	f04f 0900 	mov.w	r9, #0
 8007480:	f104 0a1a 	add.w	sl, r4, #26
 8007484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007486:	425b      	negs	r3, r3
 8007488:	454b      	cmp	r3, r9
 800748a:	dc01      	bgt.n	8007490 <_printf_float+0x2c4>
 800748c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800748e:	e792      	b.n	80073b6 <_printf_float+0x1ea>
 8007490:	2301      	movs	r3, #1
 8007492:	4652      	mov	r2, sl
 8007494:	4631      	mov	r1, r6
 8007496:	4628      	mov	r0, r5
 8007498:	47b8      	blx	r7
 800749a:	3001      	adds	r0, #1
 800749c:	f43f aef7 	beq.w	800728e <_printf_float+0xc2>
 80074a0:	f109 0901 	add.w	r9, r9, #1
 80074a4:	e7ee      	b.n	8007484 <_printf_float+0x2b8>
 80074a6:	bf00      	nop
 80074a8:	7fefffff 	.word	0x7fefffff
 80074ac:	08009904 	.word	0x08009904
 80074b0:	08009908 	.word	0x08009908
 80074b4:	08009910 	.word	0x08009910
 80074b8:	0800990c 	.word	0x0800990c
 80074bc:	08009914 	.word	0x08009914
 80074c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074c4:	429a      	cmp	r2, r3
 80074c6:	bfa8      	it	ge
 80074c8:	461a      	movge	r2, r3
 80074ca:	2a00      	cmp	r2, #0
 80074cc:	4691      	mov	r9, r2
 80074ce:	dc37      	bgt.n	8007540 <_printf_float+0x374>
 80074d0:	f04f 0b00 	mov.w	fp, #0
 80074d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074d8:	f104 021a 	add.w	r2, r4, #26
 80074dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074de:	9305      	str	r3, [sp, #20]
 80074e0:	eba3 0309 	sub.w	r3, r3, r9
 80074e4:	455b      	cmp	r3, fp
 80074e6:	dc33      	bgt.n	8007550 <_printf_float+0x384>
 80074e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074ec:	429a      	cmp	r2, r3
 80074ee:	db3b      	blt.n	8007568 <_printf_float+0x39c>
 80074f0:	6823      	ldr	r3, [r4, #0]
 80074f2:	07da      	lsls	r2, r3, #31
 80074f4:	d438      	bmi.n	8007568 <_printf_float+0x39c>
 80074f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074f8:	9b05      	ldr	r3, [sp, #20]
 80074fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80074fc:	1ad3      	subs	r3, r2, r3
 80074fe:	eba2 0901 	sub.w	r9, r2, r1
 8007502:	4599      	cmp	r9, r3
 8007504:	bfa8      	it	ge
 8007506:	4699      	movge	r9, r3
 8007508:	f1b9 0f00 	cmp.w	r9, #0
 800750c:	dc35      	bgt.n	800757a <_printf_float+0x3ae>
 800750e:	f04f 0800 	mov.w	r8, #0
 8007512:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007516:	f104 0a1a 	add.w	sl, r4, #26
 800751a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800751e:	1a9b      	subs	r3, r3, r2
 8007520:	eba3 0309 	sub.w	r3, r3, r9
 8007524:	4543      	cmp	r3, r8
 8007526:	f77f af79 	ble.w	800741c <_printf_float+0x250>
 800752a:	2301      	movs	r3, #1
 800752c:	4652      	mov	r2, sl
 800752e:	4631      	mov	r1, r6
 8007530:	4628      	mov	r0, r5
 8007532:	47b8      	blx	r7
 8007534:	3001      	adds	r0, #1
 8007536:	f43f aeaa 	beq.w	800728e <_printf_float+0xc2>
 800753a:	f108 0801 	add.w	r8, r8, #1
 800753e:	e7ec      	b.n	800751a <_printf_float+0x34e>
 8007540:	4613      	mov	r3, r2
 8007542:	4631      	mov	r1, r6
 8007544:	4642      	mov	r2, r8
 8007546:	4628      	mov	r0, r5
 8007548:	47b8      	blx	r7
 800754a:	3001      	adds	r0, #1
 800754c:	d1c0      	bne.n	80074d0 <_printf_float+0x304>
 800754e:	e69e      	b.n	800728e <_printf_float+0xc2>
 8007550:	2301      	movs	r3, #1
 8007552:	4631      	mov	r1, r6
 8007554:	4628      	mov	r0, r5
 8007556:	9205      	str	r2, [sp, #20]
 8007558:	47b8      	blx	r7
 800755a:	3001      	adds	r0, #1
 800755c:	f43f ae97 	beq.w	800728e <_printf_float+0xc2>
 8007560:	9a05      	ldr	r2, [sp, #20]
 8007562:	f10b 0b01 	add.w	fp, fp, #1
 8007566:	e7b9      	b.n	80074dc <_printf_float+0x310>
 8007568:	ee18 3a10 	vmov	r3, s16
 800756c:	4652      	mov	r2, sl
 800756e:	4631      	mov	r1, r6
 8007570:	4628      	mov	r0, r5
 8007572:	47b8      	blx	r7
 8007574:	3001      	adds	r0, #1
 8007576:	d1be      	bne.n	80074f6 <_printf_float+0x32a>
 8007578:	e689      	b.n	800728e <_printf_float+0xc2>
 800757a:	9a05      	ldr	r2, [sp, #20]
 800757c:	464b      	mov	r3, r9
 800757e:	4442      	add	r2, r8
 8007580:	4631      	mov	r1, r6
 8007582:	4628      	mov	r0, r5
 8007584:	47b8      	blx	r7
 8007586:	3001      	adds	r0, #1
 8007588:	d1c1      	bne.n	800750e <_printf_float+0x342>
 800758a:	e680      	b.n	800728e <_printf_float+0xc2>
 800758c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800758e:	2a01      	cmp	r2, #1
 8007590:	dc01      	bgt.n	8007596 <_printf_float+0x3ca>
 8007592:	07db      	lsls	r3, r3, #31
 8007594:	d538      	bpl.n	8007608 <_printf_float+0x43c>
 8007596:	2301      	movs	r3, #1
 8007598:	4642      	mov	r2, r8
 800759a:	4631      	mov	r1, r6
 800759c:	4628      	mov	r0, r5
 800759e:	47b8      	blx	r7
 80075a0:	3001      	adds	r0, #1
 80075a2:	f43f ae74 	beq.w	800728e <_printf_float+0xc2>
 80075a6:	ee18 3a10 	vmov	r3, s16
 80075aa:	4652      	mov	r2, sl
 80075ac:	4631      	mov	r1, r6
 80075ae:	4628      	mov	r0, r5
 80075b0:	47b8      	blx	r7
 80075b2:	3001      	adds	r0, #1
 80075b4:	f43f ae6b 	beq.w	800728e <_printf_float+0xc2>
 80075b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80075bc:	2200      	movs	r2, #0
 80075be:	2300      	movs	r3, #0
 80075c0:	f7f9 faa2 	bl	8000b08 <__aeabi_dcmpeq>
 80075c4:	b9d8      	cbnz	r0, 80075fe <_printf_float+0x432>
 80075c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075c8:	f108 0201 	add.w	r2, r8, #1
 80075cc:	3b01      	subs	r3, #1
 80075ce:	4631      	mov	r1, r6
 80075d0:	4628      	mov	r0, r5
 80075d2:	47b8      	blx	r7
 80075d4:	3001      	adds	r0, #1
 80075d6:	d10e      	bne.n	80075f6 <_printf_float+0x42a>
 80075d8:	e659      	b.n	800728e <_printf_float+0xc2>
 80075da:	2301      	movs	r3, #1
 80075dc:	4652      	mov	r2, sl
 80075de:	4631      	mov	r1, r6
 80075e0:	4628      	mov	r0, r5
 80075e2:	47b8      	blx	r7
 80075e4:	3001      	adds	r0, #1
 80075e6:	f43f ae52 	beq.w	800728e <_printf_float+0xc2>
 80075ea:	f108 0801 	add.w	r8, r8, #1
 80075ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075f0:	3b01      	subs	r3, #1
 80075f2:	4543      	cmp	r3, r8
 80075f4:	dcf1      	bgt.n	80075da <_printf_float+0x40e>
 80075f6:	464b      	mov	r3, r9
 80075f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80075fc:	e6dc      	b.n	80073b8 <_printf_float+0x1ec>
 80075fe:	f04f 0800 	mov.w	r8, #0
 8007602:	f104 0a1a 	add.w	sl, r4, #26
 8007606:	e7f2      	b.n	80075ee <_printf_float+0x422>
 8007608:	2301      	movs	r3, #1
 800760a:	4642      	mov	r2, r8
 800760c:	e7df      	b.n	80075ce <_printf_float+0x402>
 800760e:	2301      	movs	r3, #1
 8007610:	464a      	mov	r2, r9
 8007612:	4631      	mov	r1, r6
 8007614:	4628      	mov	r0, r5
 8007616:	47b8      	blx	r7
 8007618:	3001      	adds	r0, #1
 800761a:	f43f ae38 	beq.w	800728e <_printf_float+0xc2>
 800761e:	f108 0801 	add.w	r8, r8, #1
 8007622:	68e3      	ldr	r3, [r4, #12]
 8007624:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007626:	1a5b      	subs	r3, r3, r1
 8007628:	4543      	cmp	r3, r8
 800762a:	dcf0      	bgt.n	800760e <_printf_float+0x442>
 800762c:	e6fa      	b.n	8007424 <_printf_float+0x258>
 800762e:	f04f 0800 	mov.w	r8, #0
 8007632:	f104 0919 	add.w	r9, r4, #25
 8007636:	e7f4      	b.n	8007622 <_printf_float+0x456>

08007638 <_printf_common>:
 8007638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800763c:	4616      	mov	r6, r2
 800763e:	4699      	mov	r9, r3
 8007640:	688a      	ldr	r2, [r1, #8]
 8007642:	690b      	ldr	r3, [r1, #16]
 8007644:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007648:	4293      	cmp	r3, r2
 800764a:	bfb8      	it	lt
 800764c:	4613      	movlt	r3, r2
 800764e:	6033      	str	r3, [r6, #0]
 8007650:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007654:	4607      	mov	r7, r0
 8007656:	460c      	mov	r4, r1
 8007658:	b10a      	cbz	r2, 800765e <_printf_common+0x26>
 800765a:	3301      	adds	r3, #1
 800765c:	6033      	str	r3, [r6, #0]
 800765e:	6823      	ldr	r3, [r4, #0]
 8007660:	0699      	lsls	r1, r3, #26
 8007662:	bf42      	ittt	mi
 8007664:	6833      	ldrmi	r3, [r6, #0]
 8007666:	3302      	addmi	r3, #2
 8007668:	6033      	strmi	r3, [r6, #0]
 800766a:	6825      	ldr	r5, [r4, #0]
 800766c:	f015 0506 	ands.w	r5, r5, #6
 8007670:	d106      	bne.n	8007680 <_printf_common+0x48>
 8007672:	f104 0a19 	add.w	sl, r4, #25
 8007676:	68e3      	ldr	r3, [r4, #12]
 8007678:	6832      	ldr	r2, [r6, #0]
 800767a:	1a9b      	subs	r3, r3, r2
 800767c:	42ab      	cmp	r3, r5
 800767e:	dc26      	bgt.n	80076ce <_printf_common+0x96>
 8007680:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007684:	1e13      	subs	r3, r2, #0
 8007686:	6822      	ldr	r2, [r4, #0]
 8007688:	bf18      	it	ne
 800768a:	2301      	movne	r3, #1
 800768c:	0692      	lsls	r2, r2, #26
 800768e:	d42b      	bmi.n	80076e8 <_printf_common+0xb0>
 8007690:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007694:	4649      	mov	r1, r9
 8007696:	4638      	mov	r0, r7
 8007698:	47c0      	blx	r8
 800769a:	3001      	adds	r0, #1
 800769c:	d01e      	beq.n	80076dc <_printf_common+0xa4>
 800769e:	6823      	ldr	r3, [r4, #0]
 80076a0:	68e5      	ldr	r5, [r4, #12]
 80076a2:	6832      	ldr	r2, [r6, #0]
 80076a4:	f003 0306 	and.w	r3, r3, #6
 80076a8:	2b04      	cmp	r3, #4
 80076aa:	bf08      	it	eq
 80076ac:	1aad      	subeq	r5, r5, r2
 80076ae:	68a3      	ldr	r3, [r4, #8]
 80076b0:	6922      	ldr	r2, [r4, #16]
 80076b2:	bf0c      	ite	eq
 80076b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076b8:	2500      	movne	r5, #0
 80076ba:	4293      	cmp	r3, r2
 80076bc:	bfc4      	itt	gt
 80076be:	1a9b      	subgt	r3, r3, r2
 80076c0:	18ed      	addgt	r5, r5, r3
 80076c2:	2600      	movs	r6, #0
 80076c4:	341a      	adds	r4, #26
 80076c6:	42b5      	cmp	r5, r6
 80076c8:	d11a      	bne.n	8007700 <_printf_common+0xc8>
 80076ca:	2000      	movs	r0, #0
 80076cc:	e008      	b.n	80076e0 <_printf_common+0xa8>
 80076ce:	2301      	movs	r3, #1
 80076d0:	4652      	mov	r2, sl
 80076d2:	4649      	mov	r1, r9
 80076d4:	4638      	mov	r0, r7
 80076d6:	47c0      	blx	r8
 80076d8:	3001      	adds	r0, #1
 80076da:	d103      	bne.n	80076e4 <_printf_common+0xac>
 80076dc:	f04f 30ff 	mov.w	r0, #4294967295
 80076e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076e4:	3501      	adds	r5, #1
 80076e6:	e7c6      	b.n	8007676 <_printf_common+0x3e>
 80076e8:	18e1      	adds	r1, r4, r3
 80076ea:	1c5a      	adds	r2, r3, #1
 80076ec:	2030      	movs	r0, #48	; 0x30
 80076ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80076f2:	4422      	add	r2, r4
 80076f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80076f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80076fc:	3302      	adds	r3, #2
 80076fe:	e7c7      	b.n	8007690 <_printf_common+0x58>
 8007700:	2301      	movs	r3, #1
 8007702:	4622      	mov	r2, r4
 8007704:	4649      	mov	r1, r9
 8007706:	4638      	mov	r0, r7
 8007708:	47c0      	blx	r8
 800770a:	3001      	adds	r0, #1
 800770c:	d0e6      	beq.n	80076dc <_printf_common+0xa4>
 800770e:	3601      	adds	r6, #1
 8007710:	e7d9      	b.n	80076c6 <_printf_common+0x8e>
	...

08007714 <_printf_i>:
 8007714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007718:	460c      	mov	r4, r1
 800771a:	4691      	mov	r9, r2
 800771c:	7e27      	ldrb	r7, [r4, #24]
 800771e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007720:	2f78      	cmp	r7, #120	; 0x78
 8007722:	4680      	mov	r8, r0
 8007724:	469a      	mov	sl, r3
 8007726:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800772a:	d807      	bhi.n	800773c <_printf_i+0x28>
 800772c:	2f62      	cmp	r7, #98	; 0x62
 800772e:	d80a      	bhi.n	8007746 <_printf_i+0x32>
 8007730:	2f00      	cmp	r7, #0
 8007732:	f000 80d8 	beq.w	80078e6 <_printf_i+0x1d2>
 8007736:	2f58      	cmp	r7, #88	; 0x58
 8007738:	f000 80a3 	beq.w	8007882 <_printf_i+0x16e>
 800773c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007740:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007744:	e03a      	b.n	80077bc <_printf_i+0xa8>
 8007746:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800774a:	2b15      	cmp	r3, #21
 800774c:	d8f6      	bhi.n	800773c <_printf_i+0x28>
 800774e:	a001      	add	r0, pc, #4	; (adr r0, 8007754 <_printf_i+0x40>)
 8007750:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007754:	080077ad 	.word	0x080077ad
 8007758:	080077c1 	.word	0x080077c1
 800775c:	0800773d 	.word	0x0800773d
 8007760:	0800773d 	.word	0x0800773d
 8007764:	0800773d 	.word	0x0800773d
 8007768:	0800773d 	.word	0x0800773d
 800776c:	080077c1 	.word	0x080077c1
 8007770:	0800773d 	.word	0x0800773d
 8007774:	0800773d 	.word	0x0800773d
 8007778:	0800773d 	.word	0x0800773d
 800777c:	0800773d 	.word	0x0800773d
 8007780:	080078cd 	.word	0x080078cd
 8007784:	080077f1 	.word	0x080077f1
 8007788:	080078af 	.word	0x080078af
 800778c:	0800773d 	.word	0x0800773d
 8007790:	0800773d 	.word	0x0800773d
 8007794:	080078ef 	.word	0x080078ef
 8007798:	0800773d 	.word	0x0800773d
 800779c:	080077f1 	.word	0x080077f1
 80077a0:	0800773d 	.word	0x0800773d
 80077a4:	0800773d 	.word	0x0800773d
 80077a8:	080078b7 	.word	0x080078b7
 80077ac:	680b      	ldr	r3, [r1, #0]
 80077ae:	1d1a      	adds	r2, r3, #4
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	600a      	str	r2, [r1, #0]
 80077b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80077b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077bc:	2301      	movs	r3, #1
 80077be:	e0a3      	b.n	8007908 <_printf_i+0x1f4>
 80077c0:	6825      	ldr	r5, [r4, #0]
 80077c2:	6808      	ldr	r0, [r1, #0]
 80077c4:	062e      	lsls	r6, r5, #24
 80077c6:	f100 0304 	add.w	r3, r0, #4
 80077ca:	d50a      	bpl.n	80077e2 <_printf_i+0xce>
 80077cc:	6805      	ldr	r5, [r0, #0]
 80077ce:	600b      	str	r3, [r1, #0]
 80077d0:	2d00      	cmp	r5, #0
 80077d2:	da03      	bge.n	80077dc <_printf_i+0xc8>
 80077d4:	232d      	movs	r3, #45	; 0x2d
 80077d6:	426d      	negs	r5, r5
 80077d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077dc:	485e      	ldr	r0, [pc, #376]	; (8007958 <_printf_i+0x244>)
 80077de:	230a      	movs	r3, #10
 80077e0:	e019      	b.n	8007816 <_printf_i+0x102>
 80077e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80077e6:	6805      	ldr	r5, [r0, #0]
 80077e8:	600b      	str	r3, [r1, #0]
 80077ea:	bf18      	it	ne
 80077ec:	b22d      	sxthne	r5, r5
 80077ee:	e7ef      	b.n	80077d0 <_printf_i+0xbc>
 80077f0:	680b      	ldr	r3, [r1, #0]
 80077f2:	6825      	ldr	r5, [r4, #0]
 80077f4:	1d18      	adds	r0, r3, #4
 80077f6:	6008      	str	r0, [r1, #0]
 80077f8:	0628      	lsls	r0, r5, #24
 80077fa:	d501      	bpl.n	8007800 <_printf_i+0xec>
 80077fc:	681d      	ldr	r5, [r3, #0]
 80077fe:	e002      	b.n	8007806 <_printf_i+0xf2>
 8007800:	0669      	lsls	r1, r5, #25
 8007802:	d5fb      	bpl.n	80077fc <_printf_i+0xe8>
 8007804:	881d      	ldrh	r5, [r3, #0]
 8007806:	4854      	ldr	r0, [pc, #336]	; (8007958 <_printf_i+0x244>)
 8007808:	2f6f      	cmp	r7, #111	; 0x6f
 800780a:	bf0c      	ite	eq
 800780c:	2308      	moveq	r3, #8
 800780e:	230a      	movne	r3, #10
 8007810:	2100      	movs	r1, #0
 8007812:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007816:	6866      	ldr	r6, [r4, #4]
 8007818:	60a6      	str	r6, [r4, #8]
 800781a:	2e00      	cmp	r6, #0
 800781c:	bfa2      	ittt	ge
 800781e:	6821      	ldrge	r1, [r4, #0]
 8007820:	f021 0104 	bicge.w	r1, r1, #4
 8007824:	6021      	strge	r1, [r4, #0]
 8007826:	b90d      	cbnz	r5, 800782c <_printf_i+0x118>
 8007828:	2e00      	cmp	r6, #0
 800782a:	d04d      	beq.n	80078c8 <_printf_i+0x1b4>
 800782c:	4616      	mov	r6, r2
 800782e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007832:	fb03 5711 	mls	r7, r3, r1, r5
 8007836:	5dc7      	ldrb	r7, [r0, r7]
 8007838:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800783c:	462f      	mov	r7, r5
 800783e:	42bb      	cmp	r3, r7
 8007840:	460d      	mov	r5, r1
 8007842:	d9f4      	bls.n	800782e <_printf_i+0x11a>
 8007844:	2b08      	cmp	r3, #8
 8007846:	d10b      	bne.n	8007860 <_printf_i+0x14c>
 8007848:	6823      	ldr	r3, [r4, #0]
 800784a:	07df      	lsls	r7, r3, #31
 800784c:	d508      	bpl.n	8007860 <_printf_i+0x14c>
 800784e:	6923      	ldr	r3, [r4, #16]
 8007850:	6861      	ldr	r1, [r4, #4]
 8007852:	4299      	cmp	r1, r3
 8007854:	bfde      	ittt	le
 8007856:	2330      	movle	r3, #48	; 0x30
 8007858:	f806 3c01 	strble.w	r3, [r6, #-1]
 800785c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007860:	1b92      	subs	r2, r2, r6
 8007862:	6122      	str	r2, [r4, #16]
 8007864:	f8cd a000 	str.w	sl, [sp]
 8007868:	464b      	mov	r3, r9
 800786a:	aa03      	add	r2, sp, #12
 800786c:	4621      	mov	r1, r4
 800786e:	4640      	mov	r0, r8
 8007870:	f7ff fee2 	bl	8007638 <_printf_common>
 8007874:	3001      	adds	r0, #1
 8007876:	d14c      	bne.n	8007912 <_printf_i+0x1fe>
 8007878:	f04f 30ff 	mov.w	r0, #4294967295
 800787c:	b004      	add	sp, #16
 800787e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007882:	4835      	ldr	r0, [pc, #212]	; (8007958 <_printf_i+0x244>)
 8007884:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007888:	6823      	ldr	r3, [r4, #0]
 800788a:	680e      	ldr	r6, [r1, #0]
 800788c:	061f      	lsls	r7, r3, #24
 800788e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007892:	600e      	str	r6, [r1, #0]
 8007894:	d514      	bpl.n	80078c0 <_printf_i+0x1ac>
 8007896:	07d9      	lsls	r1, r3, #31
 8007898:	bf44      	itt	mi
 800789a:	f043 0320 	orrmi.w	r3, r3, #32
 800789e:	6023      	strmi	r3, [r4, #0]
 80078a0:	b91d      	cbnz	r5, 80078aa <_printf_i+0x196>
 80078a2:	6823      	ldr	r3, [r4, #0]
 80078a4:	f023 0320 	bic.w	r3, r3, #32
 80078a8:	6023      	str	r3, [r4, #0]
 80078aa:	2310      	movs	r3, #16
 80078ac:	e7b0      	b.n	8007810 <_printf_i+0xfc>
 80078ae:	6823      	ldr	r3, [r4, #0]
 80078b0:	f043 0320 	orr.w	r3, r3, #32
 80078b4:	6023      	str	r3, [r4, #0]
 80078b6:	2378      	movs	r3, #120	; 0x78
 80078b8:	4828      	ldr	r0, [pc, #160]	; (800795c <_printf_i+0x248>)
 80078ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078be:	e7e3      	b.n	8007888 <_printf_i+0x174>
 80078c0:	065e      	lsls	r6, r3, #25
 80078c2:	bf48      	it	mi
 80078c4:	b2ad      	uxthmi	r5, r5
 80078c6:	e7e6      	b.n	8007896 <_printf_i+0x182>
 80078c8:	4616      	mov	r6, r2
 80078ca:	e7bb      	b.n	8007844 <_printf_i+0x130>
 80078cc:	680b      	ldr	r3, [r1, #0]
 80078ce:	6826      	ldr	r6, [r4, #0]
 80078d0:	6960      	ldr	r0, [r4, #20]
 80078d2:	1d1d      	adds	r5, r3, #4
 80078d4:	600d      	str	r5, [r1, #0]
 80078d6:	0635      	lsls	r5, r6, #24
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	d501      	bpl.n	80078e0 <_printf_i+0x1cc>
 80078dc:	6018      	str	r0, [r3, #0]
 80078de:	e002      	b.n	80078e6 <_printf_i+0x1d2>
 80078e0:	0671      	lsls	r1, r6, #25
 80078e2:	d5fb      	bpl.n	80078dc <_printf_i+0x1c8>
 80078e4:	8018      	strh	r0, [r3, #0]
 80078e6:	2300      	movs	r3, #0
 80078e8:	6123      	str	r3, [r4, #16]
 80078ea:	4616      	mov	r6, r2
 80078ec:	e7ba      	b.n	8007864 <_printf_i+0x150>
 80078ee:	680b      	ldr	r3, [r1, #0]
 80078f0:	1d1a      	adds	r2, r3, #4
 80078f2:	600a      	str	r2, [r1, #0]
 80078f4:	681e      	ldr	r6, [r3, #0]
 80078f6:	6862      	ldr	r2, [r4, #4]
 80078f8:	2100      	movs	r1, #0
 80078fa:	4630      	mov	r0, r6
 80078fc:	f7f8 fc90 	bl	8000220 <memchr>
 8007900:	b108      	cbz	r0, 8007906 <_printf_i+0x1f2>
 8007902:	1b80      	subs	r0, r0, r6
 8007904:	6060      	str	r0, [r4, #4]
 8007906:	6863      	ldr	r3, [r4, #4]
 8007908:	6123      	str	r3, [r4, #16]
 800790a:	2300      	movs	r3, #0
 800790c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007910:	e7a8      	b.n	8007864 <_printf_i+0x150>
 8007912:	6923      	ldr	r3, [r4, #16]
 8007914:	4632      	mov	r2, r6
 8007916:	4649      	mov	r1, r9
 8007918:	4640      	mov	r0, r8
 800791a:	47d0      	blx	sl
 800791c:	3001      	adds	r0, #1
 800791e:	d0ab      	beq.n	8007878 <_printf_i+0x164>
 8007920:	6823      	ldr	r3, [r4, #0]
 8007922:	079b      	lsls	r3, r3, #30
 8007924:	d413      	bmi.n	800794e <_printf_i+0x23a>
 8007926:	68e0      	ldr	r0, [r4, #12]
 8007928:	9b03      	ldr	r3, [sp, #12]
 800792a:	4298      	cmp	r0, r3
 800792c:	bfb8      	it	lt
 800792e:	4618      	movlt	r0, r3
 8007930:	e7a4      	b.n	800787c <_printf_i+0x168>
 8007932:	2301      	movs	r3, #1
 8007934:	4632      	mov	r2, r6
 8007936:	4649      	mov	r1, r9
 8007938:	4640      	mov	r0, r8
 800793a:	47d0      	blx	sl
 800793c:	3001      	adds	r0, #1
 800793e:	d09b      	beq.n	8007878 <_printf_i+0x164>
 8007940:	3501      	adds	r5, #1
 8007942:	68e3      	ldr	r3, [r4, #12]
 8007944:	9903      	ldr	r1, [sp, #12]
 8007946:	1a5b      	subs	r3, r3, r1
 8007948:	42ab      	cmp	r3, r5
 800794a:	dcf2      	bgt.n	8007932 <_printf_i+0x21e>
 800794c:	e7eb      	b.n	8007926 <_printf_i+0x212>
 800794e:	2500      	movs	r5, #0
 8007950:	f104 0619 	add.w	r6, r4, #25
 8007954:	e7f5      	b.n	8007942 <_printf_i+0x22e>
 8007956:	bf00      	nop
 8007958:	08009916 	.word	0x08009916
 800795c:	08009927 	.word	0x08009927

08007960 <_sbrk_r>:
 8007960:	b538      	push	{r3, r4, r5, lr}
 8007962:	4d06      	ldr	r5, [pc, #24]	; (800797c <_sbrk_r+0x1c>)
 8007964:	2300      	movs	r3, #0
 8007966:	4604      	mov	r4, r0
 8007968:	4608      	mov	r0, r1
 800796a:	602b      	str	r3, [r5, #0]
 800796c:	f7fb f8b4 	bl	8002ad8 <_sbrk>
 8007970:	1c43      	adds	r3, r0, #1
 8007972:	d102      	bne.n	800797a <_sbrk_r+0x1a>
 8007974:	682b      	ldr	r3, [r5, #0]
 8007976:	b103      	cbz	r3, 800797a <_sbrk_r+0x1a>
 8007978:	6023      	str	r3, [r4, #0]
 800797a:	bd38      	pop	{r3, r4, r5, pc}
 800797c:	2000853c 	.word	0x2000853c

08007980 <quorem>:
 8007980:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007984:	6903      	ldr	r3, [r0, #16]
 8007986:	690c      	ldr	r4, [r1, #16]
 8007988:	42a3      	cmp	r3, r4
 800798a:	4607      	mov	r7, r0
 800798c:	f2c0 8081 	blt.w	8007a92 <quorem+0x112>
 8007990:	3c01      	subs	r4, #1
 8007992:	f101 0814 	add.w	r8, r1, #20
 8007996:	f100 0514 	add.w	r5, r0, #20
 800799a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800799e:	9301      	str	r3, [sp, #4]
 80079a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80079a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079a8:	3301      	adds	r3, #1
 80079aa:	429a      	cmp	r2, r3
 80079ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80079b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80079b4:	fbb2 f6f3 	udiv	r6, r2, r3
 80079b8:	d331      	bcc.n	8007a1e <quorem+0x9e>
 80079ba:	f04f 0e00 	mov.w	lr, #0
 80079be:	4640      	mov	r0, r8
 80079c0:	46ac      	mov	ip, r5
 80079c2:	46f2      	mov	sl, lr
 80079c4:	f850 2b04 	ldr.w	r2, [r0], #4
 80079c8:	b293      	uxth	r3, r2
 80079ca:	fb06 e303 	mla	r3, r6, r3, lr
 80079ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	ebaa 0303 	sub.w	r3, sl, r3
 80079d8:	0c12      	lsrs	r2, r2, #16
 80079da:	f8dc a000 	ldr.w	sl, [ip]
 80079de:	fb06 e202 	mla	r2, r6, r2, lr
 80079e2:	fa13 f38a 	uxtah	r3, r3, sl
 80079e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80079ea:	fa1f fa82 	uxth.w	sl, r2
 80079ee:	f8dc 2000 	ldr.w	r2, [ip]
 80079f2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80079f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a00:	4581      	cmp	r9, r0
 8007a02:	f84c 3b04 	str.w	r3, [ip], #4
 8007a06:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007a0a:	d2db      	bcs.n	80079c4 <quorem+0x44>
 8007a0c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007a10:	b92b      	cbnz	r3, 8007a1e <quorem+0x9e>
 8007a12:	9b01      	ldr	r3, [sp, #4]
 8007a14:	3b04      	subs	r3, #4
 8007a16:	429d      	cmp	r5, r3
 8007a18:	461a      	mov	r2, r3
 8007a1a:	d32e      	bcc.n	8007a7a <quorem+0xfa>
 8007a1c:	613c      	str	r4, [r7, #16]
 8007a1e:	4638      	mov	r0, r7
 8007a20:	f001 f8c2 	bl	8008ba8 <__mcmp>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	db24      	blt.n	8007a72 <quorem+0xf2>
 8007a28:	3601      	adds	r6, #1
 8007a2a:	4628      	mov	r0, r5
 8007a2c:	f04f 0c00 	mov.w	ip, #0
 8007a30:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a34:	f8d0 e000 	ldr.w	lr, [r0]
 8007a38:	b293      	uxth	r3, r2
 8007a3a:	ebac 0303 	sub.w	r3, ip, r3
 8007a3e:	0c12      	lsrs	r2, r2, #16
 8007a40:	fa13 f38e 	uxtah	r3, r3, lr
 8007a44:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007a48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a52:	45c1      	cmp	r9, r8
 8007a54:	f840 3b04 	str.w	r3, [r0], #4
 8007a58:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007a5c:	d2e8      	bcs.n	8007a30 <quorem+0xb0>
 8007a5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a66:	b922      	cbnz	r2, 8007a72 <quorem+0xf2>
 8007a68:	3b04      	subs	r3, #4
 8007a6a:	429d      	cmp	r5, r3
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	d30a      	bcc.n	8007a86 <quorem+0x106>
 8007a70:	613c      	str	r4, [r7, #16]
 8007a72:	4630      	mov	r0, r6
 8007a74:	b003      	add	sp, #12
 8007a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a7a:	6812      	ldr	r2, [r2, #0]
 8007a7c:	3b04      	subs	r3, #4
 8007a7e:	2a00      	cmp	r2, #0
 8007a80:	d1cc      	bne.n	8007a1c <quorem+0x9c>
 8007a82:	3c01      	subs	r4, #1
 8007a84:	e7c7      	b.n	8007a16 <quorem+0x96>
 8007a86:	6812      	ldr	r2, [r2, #0]
 8007a88:	3b04      	subs	r3, #4
 8007a8a:	2a00      	cmp	r2, #0
 8007a8c:	d1f0      	bne.n	8007a70 <quorem+0xf0>
 8007a8e:	3c01      	subs	r4, #1
 8007a90:	e7eb      	b.n	8007a6a <quorem+0xea>
 8007a92:	2000      	movs	r0, #0
 8007a94:	e7ee      	b.n	8007a74 <quorem+0xf4>
	...

08007a98 <_dtoa_r>:
 8007a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a9c:	ed2d 8b02 	vpush	{d8}
 8007aa0:	ec57 6b10 	vmov	r6, r7, d0
 8007aa4:	b095      	sub	sp, #84	; 0x54
 8007aa6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007aa8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007aac:	9105      	str	r1, [sp, #20]
 8007aae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007ab2:	4604      	mov	r4, r0
 8007ab4:	9209      	str	r2, [sp, #36]	; 0x24
 8007ab6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ab8:	b975      	cbnz	r5, 8007ad8 <_dtoa_r+0x40>
 8007aba:	2010      	movs	r0, #16
 8007abc:	f7ff fa2c 	bl	8006f18 <malloc>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	6260      	str	r0, [r4, #36]	; 0x24
 8007ac4:	b920      	cbnz	r0, 8007ad0 <_dtoa_r+0x38>
 8007ac6:	4bb2      	ldr	r3, [pc, #712]	; (8007d90 <_dtoa_r+0x2f8>)
 8007ac8:	21ea      	movs	r1, #234	; 0xea
 8007aca:	48b2      	ldr	r0, [pc, #712]	; (8007d94 <_dtoa_r+0x2fc>)
 8007acc:	f001 f97c 	bl	8008dc8 <__assert_func>
 8007ad0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007ad4:	6005      	str	r5, [r0, #0]
 8007ad6:	60c5      	str	r5, [r0, #12]
 8007ad8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ada:	6819      	ldr	r1, [r3, #0]
 8007adc:	b151      	cbz	r1, 8007af4 <_dtoa_r+0x5c>
 8007ade:	685a      	ldr	r2, [r3, #4]
 8007ae0:	604a      	str	r2, [r1, #4]
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	4093      	lsls	r3, r2
 8007ae6:	608b      	str	r3, [r1, #8]
 8007ae8:	4620      	mov	r0, r4
 8007aea:	f000 fe1f 	bl	800872c <_Bfree>
 8007aee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007af0:	2200      	movs	r2, #0
 8007af2:	601a      	str	r2, [r3, #0]
 8007af4:	1e3b      	subs	r3, r7, #0
 8007af6:	bfb9      	ittee	lt
 8007af8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007afc:	9303      	strlt	r3, [sp, #12]
 8007afe:	2300      	movge	r3, #0
 8007b00:	f8c8 3000 	strge.w	r3, [r8]
 8007b04:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007b08:	4ba3      	ldr	r3, [pc, #652]	; (8007d98 <_dtoa_r+0x300>)
 8007b0a:	bfbc      	itt	lt
 8007b0c:	2201      	movlt	r2, #1
 8007b0e:	f8c8 2000 	strlt.w	r2, [r8]
 8007b12:	ea33 0309 	bics.w	r3, r3, r9
 8007b16:	d11b      	bne.n	8007b50 <_dtoa_r+0xb8>
 8007b18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b1a:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b1e:	6013      	str	r3, [r2, #0]
 8007b20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b24:	4333      	orrs	r3, r6
 8007b26:	f000 857a 	beq.w	800861e <_dtoa_r+0xb86>
 8007b2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b2c:	b963      	cbnz	r3, 8007b48 <_dtoa_r+0xb0>
 8007b2e:	4b9b      	ldr	r3, [pc, #620]	; (8007d9c <_dtoa_r+0x304>)
 8007b30:	e024      	b.n	8007b7c <_dtoa_r+0xe4>
 8007b32:	4b9b      	ldr	r3, [pc, #620]	; (8007da0 <_dtoa_r+0x308>)
 8007b34:	9300      	str	r3, [sp, #0]
 8007b36:	3308      	adds	r3, #8
 8007b38:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b3a:	6013      	str	r3, [r2, #0]
 8007b3c:	9800      	ldr	r0, [sp, #0]
 8007b3e:	b015      	add	sp, #84	; 0x54
 8007b40:	ecbd 8b02 	vpop	{d8}
 8007b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b48:	4b94      	ldr	r3, [pc, #592]	; (8007d9c <_dtoa_r+0x304>)
 8007b4a:	9300      	str	r3, [sp, #0]
 8007b4c:	3303      	adds	r3, #3
 8007b4e:	e7f3      	b.n	8007b38 <_dtoa_r+0xa0>
 8007b50:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b54:	2200      	movs	r2, #0
 8007b56:	ec51 0b17 	vmov	r0, r1, d7
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007b60:	f7f8 ffd2 	bl	8000b08 <__aeabi_dcmpeq>
 8007b64:	4680      	mov	r8, r0
 8007b66:	b158      	cbz	r0, 8007b80 <_dtoa_r+0xe8>
 8007b68:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	6013      	str	r3, [r2, #0]
 8007b6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f000 8551 	beq.w	8008618 <_dtoa_r+0xb80>
 8007b76:	488b      	ldr	r0, [pc, #556]	; (8007da4 <_dtoa_r+0x30c>)
 8007b78:	6018      	str	r0, [r3, #0]
 8007b7a:	1e43      	subs	r3, r0, #1
 8007b7c:	9300      	str	r3, [sp, #0]
 8007b7e:	e7dd      	b.n	8007b3c <_dtoa_r+0xa4>
 8007b80:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007b84:	aa12      	add	r2, sp, #72	; 0x48
 8007b86:	a913      	add	r1, sp, #76	; 0x4c
 8007b88:	4620      	mov	r0, r4
 8007b8a:	f001 f8b1 	bl	8008cf0 <__d2b>
 8007b8e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007b92:	4683      	mov	fp, r0
 8007b94:	2d00      	cmp	r5, #0
 8007b96:	d07c      	beq.n	8007c92 <_dtoa_r+0x1fa>
 8007b98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b9a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007b9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ba2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007ba6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007baa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007bae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007bb2:	4b7d      	ldr	r3, [pc, #500]	; (8007da8 <_dtoa_r+0x310>)
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	4630      	mov	r0, r6
 8007bb8:	4639      	mov	r1, r7
 8007bba:	f7f8 fb85 	bl	80002c8 <__aeabi_dsub>
 8007bbe:	a36e      	add	r3, pc, #440	; (adr r3, 8007d78 <_dtoa_r+0x2e0>)
 8007bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc4:	f7f8 fd38 	bl	8000638 <__aeabi_dmul>
 8007bc8:	a36d      	add	r3, pc, #436	; (adr r3, 8007d80 <_dtoa_r+0x2e8>)
 8007bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bce:	f7f8 fb7d 	bl	80002cc <__adddf3>
 8007bd2:	4606      	mov	r6, r0
 8007bd4:	4628      	mov	r0, r5
 8007bd6:	460f      	mov	r7, r1
 8007bd8:	f7f8 fcc4 	bl	8000564 <__aeabi_i2d>
 8007bdc:	a36a      	add	r3, pc, #424	; (adr r3, 8007d88 <_dtoa_r+0x2f0>)
 8007bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be2:	f7f8 fd29 	bl	8000638 <__aeabi_dmul>
 8007be6:	4602      	mov	r2, r0
 8007be8:	460b      	mov	r3, r1
 8007bea:	4630      	mov	r0, r6
 8007bec:	4639      	mov	r1, r7
 8007bee:	f7f8 fb6d 	bl	80002cc <__adddf3>
 8007bf2:	4606      	mov	r6, r0
 8007bf4:	460f      	mov	r7, r1
 8007bf6:	f7f8 ffcf 	bl	8000b98 <__aeabi_d2iz>
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	4682      	mov	sl, r0
 8007bfe:	2300      	movs	r3, #0
 8007c00:	4630      	mov	r0, r6
 8007c02:	4639      	mov	r1, r7
 8007c04:	f7f8 ff8a 	bl	8000b1c <__aeabi_dcmplt>
 8007c08:	b148      	cbz	r0, 8007c1e <_dtoa_r+0x186>
 8007c0a:	4650      	mov	r0, sl
 8007c0c:	f7f8 fcaa 	bl	8000564 <__aeabi_i2d>
 8007c10:	4632      	mov	r2, r6
 8007c12:	463b      	mov	r3, r7
 8007c14:	f7f8 ff78 	bl	8000b08 <__aeabi_dcmpeq>
 8007c18:	b908      	cbnz	r0, 8007c1e <_dtoa_r+0x186>
 8007c1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c1e:	f1ba 0f16 	cmp.w	sl, #22
 8007c22:	d854      	bhi.n	8007cce <_dtoa_r+0x236>
 8007c24:	4b61      	ldr	r3, [pc, #388]	; (8007dac <_dtoa_r+0x314>)
 8007c26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007c32:	f7f8 ff73 	bl	8000b1c <__aeabi_dcmplt>
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d04b      	beq.n	8007cd2 <_dtoa_r+0x23a>
 8007c3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c3e:	2300      	movs	r3, #0
 8007c40:	930e      	str	r3, [sp, #56]	; 0x38
 8007c42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c44:	1b5d      	subs	r5, r3, r5
 8007c46:	1e6b      	subs	r3, r5, #1
 8007c48:	9304      	str	r3, [sp, #16]
 8007c4a:	bf43      	ittte	mi
 8007c4c:	2300      	movmi	r3, #0
 8007c4e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007c52:	9304      	strmi	r3, [sp, #16]
 8007c54:	f04f 0800 	movpl.w	r8, #0
 8007c58:	f1ba 0f00 	cmp.w	sl, #0
 8007c5c:	db3b      	blt.n	8007cd6 <_dtoa_r+0x23e>
 8007c5e:	9b04      	ldr	r3, [sp, #16]
 8007c60:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007c64:	4453      	add	r3, sl
 8007c66:	9304      	str	r3, [sp, #16]
 8007c68:	2300      	movs	r3, #0
 8007c6a:	9306      	str	r3, [sp, #24]
 8007c6c:	9b05      	ldr	r3, [sp, #20]
 8007c6e:	2b09      	cmp	r3, #9
 8007c70:	d869      	bhi.n	8007d46 <_dtoa_r+0x2ae>
 8007c72:	2b05      	cmp	r3, #5
 8007c74:	bfc4      	itt	gt
 8007c76:	3b04      	subgt	r3, #4
 8007c78:	9305      	strgt	r3, [sp, #20]
 8007c7a:	9b05      	ldr	r3, [sp, #20]
 8007c7c:	f1a3 0302 	sub.w	r3, r3, #2
 8007c80:	bfcc      	ite	gt
 8007c82:	2500      	movgt	r5, #0
 8007c84:	2501      	movle	r5, #1
 8007c86:	2b03      	cmp	r3, #3
 8007c88:	d869      	bhi.n	8007d5e <_dtoa_r+0x2c6>
 8007c8a:	e8df f003 	tbb	[pc, r3]
 8007c8e:	4e2c      	.short	0x4e2c
 8007c90:	5a4c      	.short	0x5a4c
 8007c92:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007c96:	441d      	add	r5, r3
 8007c98:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007c9c:	2b20      	cmp	r3, #32
 8007c9e:	bfc1      	itttt	gt
 8007ca0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007ca4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007ca8:	fa09 f303 	lslgt.w	r3, r9, r3
 8007cac:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007cb0:	bfda      	itte	le
 8007cb2:	f1c3 0320 	rsble	r3, r3, #32
 8007cb6:	fa06 f003 	lslle.w	r0, r6, r3
 8007cba:	4318      	orrgt	r0, r3
 8007cbc:	f7f8 fc42 	bl	8000544 <__aeabi_ui2d>
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	4606      	mov	r6, r0
 8007cc4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007cc8:	3d01      	subs	r5, #1
 8007cca:	9310      	str	r3, [sp, #64]	; 0x40
 8007ccc:	e771      	b.n	8007bb2 <_dtoa_r+0x11a>
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e7b6      	b.n	8007c40 <_dtoa_r+0x1a8>
 8007cd2:	900e      	str	r0, [sp, #56]	; 0x38
 8007cd4:	e7b5      	b.n	8007c42 <_dtoa_r+0x1aa>
 8007cd6:	f1ca 0300 	rsb	r3, sl, #0
 8007cda:	9306      	str	r3, [sp, #24]
 8007cdc:	2300      	movs	r3, #0
 8007cde:	eba8 080a 	sub.w	r8, r8, sl
 8007ce2:	930d      	str	r3, [sp, #52]	; 0x34
 8007ce4:	e7c2      	b.n	8007c6c <_dtoa_r+0x1d4>
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	9308      	str	r3, [sp, #32]
 8007cea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	dc39      	bgt.n	8007d64 <_dtoa_r+0x2cc>
 8007cf0:	f04f 0901 	mov.w	r9, #1
 8007cf4:	f8cd 9004 	str.w	r9, [sp, #4]
 8007cf8:	464b      	mov	r3, r9
 8007cfa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007cfe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007d00:	2200      	movs	r2, #0
 8007d02:	6042      	str	r2, [r0, #4]
 8007d04:	2204      	movs	r2, #4
 8007d06:	f102 0614 	add.w	r6, r2, #20
 8007d0a:	429e      	cmp	r6, r3
 8007d0c:	6841      	ldr	r1, [r0, #4]
 8007d0e:	d92f      	bls.n	8007d70 <_dtoa_r+0x2d8>
 8007d10:	4620      	mov	r0, r4
 8007d12:	f000 fccb 	bl	80086ac <_Balloc>
 8007d16:	9000      	str	r0, [sp, #0]
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	d14b      	bne.n	8007db4 <_dtoa_r+0x31c>
 8007d1c:	4b24      	ldr	r3, [pc, #144]	; (8007db0 <_dtoa_r+0x318>)
 8007d1e:	4602      	mov	r2, r0
 8007d20:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007d24:	e6d1      	b.n	8007aca <_dtoa_r+0x32>
 8007d26:	2301      	movs	r3, #1
 8007d28:	e7de      	b.n	8007ce8 <_dtoa_r+0x250>
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	9308      	str	r3, [sp, #32]
 8007d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d30:	eb0a 0903 	add.w	r9, sl, r3
 8007d34:	f109 0301 	add.w	r3, r9, #1
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	9301      	str	r3, [sp, #4]
 8007d3c:	bfb8      	it	lt
 8007d3e:	2301      	movlt	r3, #1
 8007d40:	e7dd      	b.n	8007cfe <_dtoa_r+0x266>
 8007d42:	2301      	movs	r3, #1
 8007d44:	e7f2      	b.n	8007d2c <_dtoa_r+0x294>
 8007d46:	2501      	movs	r5, #1
 8007d48:	2300      	movs	r3, #0
 8007d4a:	9305      	str	r3, [sp, #20]
 8007d4c:	9508      	str	r5, [sp, #32]
 8007d4e:	f04f 39ff 	mov.w	r9, #4294967295
 8007d52:	2200      	movs	r2, #0
 8007d54:	f8cd 9004 	str.w	r9, [sp, #4]
 8007d58:	2312      	movs	r3, #18
 8007d5a:	9209      	str	r2, [sp, #36]	; 0x24
 8007d5c:	e7cf      	b.n	8007cfe <_dtoa_r+0x266>
 8007d5e:	2301      	movs	r3, #1
 8007d60:	9308      	str	r3, [sp, #32]
 8007d62:	e7f4      	b.n	8007d4e <_dtoa_r+0x2b6>
 8007d64:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007d68:	f8cd 9004 	str.w	r9, [sp, #4]
 8007d6c:	464b      	mov	r3, r9
 8007d6e:	e7c6      	b.n	8007cfe <_dtoa_r+0x266>
 8007d70:	3101      	adds	r1, #1
 8007d72:	6041      	str	r1, [r0, #4]
 8007d74:	0052      	lsls	r2, r2, #1
 8007d76:	e7c6      	b.n	8007d06 <_dtoa_r+0x26e>
 8007d78:	636f4361 	.word	0x636f4361
 8007d7c:	3fd287a7 	.word	0x3fd287a7
 8007d80:	8b60c8b3 	.word	0x8b60c8b3
 8007d84:	3fc68a28 	.word	0x3fc68a28
 8007d88:	509f79fb 	.word	0x509f79fb
 8007d8c:	3fd34413 	.word	0x3fd34413
 8007d90:	08009945 	.word	0x08009945
 8007d94:	0800995c 	.word	0x0800995c
 8007d98:	7ff00000 	.word	0x7ff00000
 8007d9c:	08009941 	.word	0x08009941
 8007da0:	08009938 	.word	0x08009938
 8007da4:	08009915 	.word	0x08009915
 8007da8:	3ff80000 	.word	0x3ff80000
 8007dac:	08009a58 	.word	0x08009a58
 8007db0:	080099bb 	.word	0x080099bb
 8007db4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007db6:	9a00      	ldr	r2, [sp, #0]
 8007db8:	601a      	str	r2, [r3, #0]
 8007dba:	9b01      	ldr	r3, [sp, #4]
 8007dbc:	2b0e      	cmp	r3, #14
 8007dbe:	f200 80ad 	bhi.w	8007f1c <_dtoa_r+0x484>
 8007dc2:	2d00      	cmp	r5, #0
 8007dc4:	f000 80aa 	beq.w	8007f1c <_dtoa_r+0x484>
 8007dc8:	f1ba 0f00 	cmp.w	sl, #0
 8007dcc:	dd36      	ble.n	8007e3c <_dtoa_r+0x3a4>
 8007dce:	4ac3      	ldr	r2, [pc, #780]	; (80080dc <_dtoa_r+0x644>)
 8007dd0:	f00a 030f 	and.w	r3, sl, #15
 8007dd4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007dd8:	ed93 7b00 	vldr	d7, [r3]
 8007ddc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007de0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007de4:	eeb0 8a47 	vmov.f32	s16, s14
 8007de8:	eef0 8a67 	vmov.f32	s17, s15
 8007dec:	d016      	beq.n	8007e1c <_dtoa_r+0x384>
 8007dee:	4bbc      	ldr	r3, [pc, #752]	; (80080e0 <_dtoa_r+0x648>)
 8007df0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007df4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007df8:	f7f8 fd48 	bl	800088c <__aeabi_ddiv>
 8007dfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e00:	f007 070f 	and.w	r7, r7, #15
 8007e04:	2503      	movs	r5, #3
 8007e06:	4eb6      	ldr	r6, [pc, #728]	; (80080e0 <_dtoa_r+0x648>)
 8007e08:	b957      	cbnz	r7, 8007e20 <_dtoa_r+0x388>
 8007e0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e0e:	ec53 2b18 	vmov	r2, r3, d8
 8007e12:	f7f8 fd3b 	bl	800088c <__aeabi_ddiv>
 8007e16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e1a:	e029      	b.n	8007e70 <_dtoa_r+0x3d8>
 8007e1c:	2502      	movs	r5, #2
 8007e1e:	e7f2      	b.n	8007e06 <_dtoa_r+0x36e>
 8007e20:	07f9      	lsls	r1, r7, #31
 8007e22:	d508      	bpl.n	8007e36 <_dtoa_r+0x39e>
 8007e24:	ec51 0b18 	vmov	r0, r1, d8
 8007e28:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e2c:	f7f8 fc04 	bl	8000638 <__aeabi_dmul>
 8007e30:	ec41 0b18 	vmov	d8, r0, r1
 8007e34:	3501      	adds	r5, #1
 8007e36:	107f      	asrs	r7, r7, #1
 8007e38:	3608      	adds	r6, #8
 8007e3a:	e7e5      	b.n	8007e08 <_dtoa_r+0x370>
 8007e3c:	f000 80a6 	beq.w	8007f8c <_dtoa_r+0x4f4>
 8007e40:	f1ca 0600 	rsb	r6, sl, #0
 8007e44:	4ba5      	ldr	r3, [pc, #660]	; (80080dc <_dtoa_r+0x644>)
 8007e46:	4fa6      	ldr	r7, [pc, #664]	; (80080e0 <_dtoa_r+0x648>)
 8007e48:	f006 020f 	and.w	r2, r6, #15
 8007e4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e54:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e58:	f7f8 fbee 	bl	8000638 <__aeabi_dmul>
 8007e5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e60:	1136      	asrs	r6, r6, #4
 8007e62:	2300      	movs	r3, #0
 8007e64:	2502      	movs	r5, #2
 8007e66:	2e00      	cmp	r6, #0
 8007e68:	f040 8085 	bne.w	8007f76 <_dtoa_r+0x4de>
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d1d2      	bne.n	8007e16 <_dtoa_r+0x37e>
 8007e70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f000 808c 	beq.w	8007f90 <_dtoa_r+0x4f8>
 8007e78:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007e7c:	4b99      	ldr	r3, [pc, #612]	; (80080e4 <_dtoa_r+0x64c>)
 8007e7e:	2200      	movs	r2, #0
 8007e80:	4630      	mov	r0, r6
 8007e82:	4639      	mov	r1, r7
 8007e84:	f7f8 fe4a 	bl	8000b1c <__aeabi_dcmplt>
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	f000 8081 	beq.w	8007f90 <_dtoa_r+0x4f8>
 8007e8e:	9b01      	ldr	r3, [sp, #4]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d07d      	beq.n	8007f90 <_dtoa_r+0x4f8>
 8007e94:	f1b9 0f00 	cmp.w	r9, #0
 8007e98:	dd3c      	ble.n	8007f14 <_dtoa_r+0x47c>
 8007e9a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007e9e:	9307      	str	r3, [sp, #28]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	4b91      	ldr	r3, [pc, #580]	; (80080e8 <_dtoa_r+0x650>)
 8007ea4:	4630      	mov	r0, r6
 8007ea6:	4639      	mov	r1, r7
 8007ea8:	f7f8 fbc6 	bl	8000638 <__aeabi_dmul>
 8007eac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007eb0:	3501      	adds	r5, #1
 8007eb2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007eb6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007eba:	4628      	mov	r0, r5
 8007ebc:	f7f8 fb52 	bl	8000564 <__aeabi_i2d>
 8007ec0:	4632      	mov	r2, r6
 8007ec2:	463b      	mov	r3, r7
 8007ec4:	f7f8 fbb8 	bl	8000638 <__aeabi_dmul>
 8007ec8:	4b88      	ldr	r3, [pc, #544]	; (80080ec <_dtoa_r+0x654>)
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f7f8 f9fe 	bl	80002cc <__adddf3>
 8007ed0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007ed4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ed8:	9303      	str	r3, [sp, #12]
 8007eda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d15c      	bne.n	8007f9a <_dtoa_r+0x502>
 8007ee0:	4b83      	ldr	r3, [pc, #524]	; (80080f0 <_dtoa_r+0x658>)
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	4630      	mov	r0, r6
 8007ee6:	4639      	mov	r1, r7
 8007ee8:	f7f8 f9ee 	bl	80002c8 <__aeabi_dsub>
 8007eec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ef0:	4606      	mov	r6, r0
 8007ef2:	460f      	mov	r7, r1
 8007ef4:	f7f8 fe30 	bl	8000b58 <__aeabi_dcmpgt>
 8007ef8:	2800      	cmp	r0, #0
 8007efa:	f040 8296 	bne.w	800842a <_dtoa_r+0x992>
 8007efe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007f02:	4630      	mov	r0, r6
 8007f04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f08:	4639      	mov	r1, r7
 8007f0a:	f7f8 fe07 	bl	8000b1c <__aeabi_dcmplt>
 8007f0e:	2800      	cmp	r0, #0
 8007f10:	f040 8288 	bne.w	8008424 <_dtoa_r+0x98c>
 8007f14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007f18:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	f2c0 8158 	blt.w	80081d4 <_dtoa_r+0x73c>
 8007f24:	f1ba 0f0e 	cmp.w	sl, #14
 8007f28:	f300 8154 	bgt.w	80081d4 <_dtoa_r+0x73c>
 8007f2c:	4b6b      	ldr	r3, [pc, #428]	; (80080dc <_dtoa_r+0x644>)
 8007f2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007f32:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f280 80e3 	bge.w	8008104 <_dtoa_r+0x66c>
 8007f3e:	9b01      	ldr	r3, [sp, #4]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	f300 80df 	bgt.w	8008104 <_dtoa_r+0x66c>
 8007f46:	f040 826d 	bne.w	8008424 <_dtoa_r+0x98c>
 8007f4a:	4b69      	ldr	r3, [pc, #420]	; (80080f0 <_dtoa_r+0x658>)
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	4640      	mov	r0, r8
 8007f50:	4649      	mov	r1, r9
 8007f52:	f7f8 fb71 	bl	8000638 <__aeabi_dmul>
 8007f56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f5a:	f7f8 fdf3 	bl	8000b44 <__aeabi_dcmpge>
 8007f5e:	9e01      	ldr	r6, [sp, #4]
 8007f60:	4637      	mov	r7, r6
 8007f62:	2800      	cmp	r0, #0
 8007f64:	f040 8243 	bne.w	80083ee <_dtoa_r+0x956>
 8007f68:	9d00      	ldr	r5, [sp, #0]
 8007f6a:	2331      	movs	r3, #49	; 0x31
 8007f6c:	f805 3b01 	strb.w	r3, [r5], #1
 8007f70:	f10a 0a01 	add.w	sl, sl, #1
 8007f74:	e23f      	b.n	80083f6 <_dtoa_r+0x95e>
 8007f76:	07f2      	lsls	r2, r6, #31
 8007f78:	d505      	bpl.n	8007f86 <_dtoa_r+0x4ee>
 8007f7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f7e:	f7f8 fb5b 	bl	8000638 <__aeabi_dmul>
 8007f82:	3501      	adds	r5, #1
 8007f84:	2301      	movs	r3, #1
 8007f86:	1076      	asrs	r6, r6, #1
 8007f88:	3708      	adds	r7, #8
 8007f8a:	e76c      	b.n	8007e66 <_dtoa_r+0x3ce>
 8007f8c:	2502      	movs	r5, #2
 8007f8e:	e76f      	b.n	8007e70 <_dtoa_r+0x3d8>
 8007f90:	9b01      	ldr	r3, [sp, #4]
 8007f92:	f8cd a01c 	str.w	sl, [sp, #28]
 8007f96:	930c      	str	r3, [sp, #48]	; 0x30
 8007f98:	e78d      	b.n	8007eb6 <_dtoa_r+0x41e>
 8007f9a:	9900      	ldr	r1, [sp, #0]
 8007f9c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007f9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fa0:	4b4e      	ldr	r3, [pc, #312]	; (80080dc <_dtoa_r+0x644>)
 8007fa2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007fa6:	4401      	add	r1, r0
 8007fa8:	9102      	str	r1, [sp, #8]
 8007faa:	9908      	ldr	r1, [sp, #32]
 8007fac:	eeb0 8a47 	vmov.f32	s16, s14
 8007fb0:	eef0 8a67 	vmov.f32	s17, s15
 8007fb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fb8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007fbc:	2900      	cmp	r1, #0
 8007fbe:	d045      	beq.n	800804c <_dtoa_r+0x5b4>
 8007fc0:	494c      	ldr	r1, [pc, #304]	; (80080f4 <_dtoa_r+0x65c>)
 8007fc2:	2000      	movs	r0, #0
 8007fc4:	f7f8 fc62 	bl	800088c <__aeabi_ddiv>
 8007fc8:	ec53 2b18 	vmov	r2, r3, d8
 8007fcc:	f7f8 f97c 	bl	80002c8 <__aeabi_dsub>
 8007fd0:	9d00      	ldr	r5, [sp, #0]
 8007fd2:	ec41 0b18 	vmov	d8, r0, r1
 8007fd6:	4639      	mov	r1, r7
 8007fd8:	4630      	mov	r0, r6
 8007fda:	f7f8 fddd 	bl	8000b98 <__aeabi_d2iz>
 8007fde:	900c      	str	r0, [sp, #48]	; 0x30
 8007fe0:	f7f8 fac0 	bl	8000564 <__aeabi_i2d>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	4630      	mov	r0, r6
 8007fea:	4639      	mov	r1, r7
 8007fec:	f7f8 f96c 	bl	80002c8 <__aeabi_dsub>
 8007ff0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ff2:	3330      	adds	r3, #48	; 0x30
 8007ff4:	f805 3b01 	strb.w	r3, [r5], #1
 8007ff8:	ec53 2b18 	vmov	r2, r3, d8
 8007ffc:	4606      	mov	r6, r0
 8007ffe:	460f      	mov	r7, r1
 8008000:	f7f8 fd8c 	bl	8000b1c <__aeabi_dcmplt>
 8008004:	2800      	cmp	r0, #0
 8008006:	d165      	bne.n	80080d4 <_dtoa_r+0x63c>
 8008008:	4632      	mov	r2, r6
 800800a:	463b      	mov	r3, r7
 800800c:	4935      	ldr	r1, [pc, #212]	; (80080e4 <_dtoa_r+0x64c>)
 800800e:	2000      	movs	r0, #0
 8008010:	f7f8 f95a 	bl	80002c8 <__aeabi_dsub>
 8008014:	ec53 2b18 	vmov	r2, r3, d8
 8008018:	f7f8 fd80 	bl	8000b1c <__aeabi_dcmplt>
 800801c:	2800      	cmp	r0, #0
 800801e:	f040 80b9 	bne.w	8008194 <_dtoa_r+0x6fc>
 8008022:	9b02      	ldr	r3, [sp, #8]
 8008024:	429d      	cmp	r5, r3
 8008026:	f43f af75 	beq.w	8007f14 <_dtoa_r+0x47c>
 800802a:	4b2f      	ldr	r3, [pc, #188]	; (80080e8 <_dtoa_r+0x650>)
 800802c:	ec51 0b18 	vmov	r0, r1, d8
 8008030:	2200      	movs	r2, #0
 8008032:	f7f8 fb01 	bl	8000638 <__aeabi_dmul>
 8008036:	4b2c      	ldr	r3, [pc, #176]	; (80080e8 <_dtoa_r+0x650>)
 8008038:	ec41 0b18 	vmov	d8, r0, r1
 800803c:	2200      	movs	r2, #0
 800803e:	4630      	mov	r0, r6
 8008040:	4639      	mov	r1, r7
 8008042:	f7f8 faf9 	bl	8000638 <__aeabi_dmul>
 8008046:	4606      	mov	r6, r0
 8008048:	460f      	mov	r7, r1
 800804a:	e7c4      	b.n	8007fd6 <_dtoa_r+0x53e>
 800804c:	ec51 0b17 	vmov	r0, r1, d7
 8008050:	f7f8 faf2 	bl	8000638 <__aeabi_dmul>
 8008054:	9b02      	ldr	r3, [sp, #8]
 8008056:	9d00      	ldr	r5, [sp, #0]
 8008058:	930c      	str	r3, [sp, #48]	; 0x30
 800805a:	ec41 0b18 	vmov	d8, r0, r1
 800805e:	4639      	mov	r1, r7
 8008060:	4630      	mov	r0, r6
 8008062:	f7f8 fd99 	bl	8000b98 <__aeabi_d2iz>
 8008066:	9011      	str	r0, [sp, #68]	; 0x44
 8008068:	f7f8 fa7c 	bl	8000564 <__aeabi_i2d>
 800806c:	4602      	mov	r2, r0
 800806e:	460b      	mov	r3, r1
 8008070:	4630      	mov	r0, r6
 8008072:	4639      	mov	r1, r7
 8008074:	f7f8 f928 	bl	80002c8 <__aeabi_dsub>
 8008078:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800807a:	3330      	adds	r3, #48	; 0x30
 800807c:	f805 3b01 	strb.w	r3, [r5], #1
 8008080:	9b02      	ldr	r3, [sp, #8]
 8008082:	429d      	cmp	r5, r3
 8008084:	4606      	mov	r6, r0
 8008086:	460f      	mov	r7, r1
 8008088:	f04f 0200 	mov.w	r2, #0
 800808c:	d134      	bne.n	80080f8 <_dtoa_r+0x660>
 800808e:	4b19      	ldr	r3, [pc, #100]	; (80080f4 <_dtoa_r+0x65c>)
 8008090:	ec51 0b18 	vmov	r0, r1, d8
 8008094:	f7f8 f91a 	bl	80002cc <__adddf3>
 8008098:	4602      	mov	r2, r0
 800809a:	460b      	mov	r3, r1
 800809c:	4630      	mov	r0, r6
 800809e:	4639      	mov	r1, r7
 80080a0:	f7f8 fd5a 	bl	8000b58 <__aeabi_dcmpgt>
 80080a4:	2800      	cmp	r0, #0
 80080a6:	d175      	bne.n	8008194 <_dtoa_r+0x6fc>
 80080a8:	ec53 2b18 	vmov	r2, r3, d8
 80080ac:	4911      	ldr	r1, [pc, #68]	; (80080f4 <_dtoa_r+0x65c>)
 80080ae:	2000      	movs	r0, #0
 80080b0:	f7f8 f90a 	bl	80002c8 <__aeabi_dsub>
 80080b4:	4602      	mov	r2, r0
 80080b6:	460b      	mov	r3, r1
 80080b8:	4630      	mov	r0, r6
 80080ba:	4639      	mov	r1, r7
 80080bc:	f7f8 fd2e 	bl	8000b1c <__aeabi_dcmplt>
 80080c0:	2800      	cmp	r0, #0
 80080c2:	f43f af27 	beq.w	8007f14 <_dtoa_r+0x47c>
 80080c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80080c8:	1e6b      	subs	r3, r5, #1
 80080ca:	930c      	str	r3, [sp, #48]	; 0x30
 80080cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80080d0:	2b30      	cmp	r3, #48	; 0x30
 80080d2:	d0f8      	beq.n	80080c6 <_dtoa_r+0x62e>
 80080d4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80080d8:	e04a      	b.n	8008170 <_dtoa_r+0x6d8>
 80080da:	bf00      	nop
 80080dc:	08009a58 	.word	0x08009a58
 80080e0:	08009a30 	.word	0x08009a30
 80080e4:	3ff00000 	.word	0x3ff00000
 80080e8:	40240000 	.word	0x40240000
 80080ec:	401c0000 	.word	0x401c0000
 80080f0:	40140000 	.word	0x40140000
 80080f4:	3fe00000 	.word	0x3fe00000
 80080f8:	4baf      	ldr	r3, [pc, #700]	; (80083b8 <_dtoa_r+0x920>)
 80080fa:	f7f8 fa9d 	bl	8000638 <__aeabi_dmul>
 80080fe:	4606      	mov	r6, r0
 8008100:	460f      	mov	r7, r1
 8008102:	e7ac      	b.n	800805e <_dtoa_r+0x5c6>
 8008104:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008108:	9d00      	ldr	r5, [sp, #0]
 800810a:	4642      	mov	r2, r8
 800810c:	464b      	mov	r3, r9
 800810e:	4630      	mov	r0, r6
 8008110:	4639      	mov	r1, r7
 8008112:	f7f8 fbbb 	bl	800088c <__aeabi_ddiv>
 8008116:	f7f8 fd3f 	bl	8000b98 <__aeabi_d2iz>
 800811a:	9002      	str	r0, [sp, #8]
 800811c:	f7f8 fa22 	bl	8000564 <__aeabi_i2d>
 8008120:	4642      	mov	r2, r8
 8008122:	464b      	mov	r3, r9
 8008124:	f7f8 fa88 	bl	8000638 <__aeabi_dmul>
 8008128:	4602      	mov	r2, r0
 800812a:	460b      	mov	r3, r1
 800812c:	4630      	mov	r0, r6
 800812e:	4639      	mov	r1, r7
 8008130:	f7f8 f8ca 	bl	80002c8 <__aeabi_dsub>
 8008134:	9e02      	ldr	r6, [sp, #8]
 8008136:	9f01      	ldr	r7, [sp, #4]
 8008138:	3630      	adds	r6, #48	; 0x30
 800813a:	f805 6b01 	strb.w	r6, [r5], #1
 800813e:	9e00      	ldr	r6, [sp, #0]
 8008140:	1bae      	subs	r6, r5, r6
 8008142:	42b7      	cmp	r7, r6
 8008144:	4602      	mov	r2, r0
 8008146:	460b      	mov	r3, r1
 8008148:	d137      	bne.n	80081ba <_dtoa_r+0x722>
 800814a:	f7f8 f8bf 	bl	80002cc <__adddf3>
 800814e:	4642      	mov	r2, r8
 8008150:	464b      	mov	r3, r9
 8008152:	4606      	mov	r6, r0
 8008154:	460f      	mov	r7, r1
 8008156:	f7f8 fcff 	bl	8000b58 <__aeabi_dcmpgt>
 800815a:	b9c8      	cbnz	r0, 8008190 <_dtoa_r+0x6f8>
 800815c:	4642      	mov	r2, r8
 800815e:	464b      	mov	r3, r9
 8008160:	4630      	mov	r0, r6
 8008162:	4639      	mov	r1, r7
 8008164:	f7f8 fcd0 	bl	8000b08 <__aeabi_dcmpeq>
 8008168:	b110      	cbz	r0, 8008170 <_dtoa_r+0x6d8>
 800816a:	9b02      	ldr	r3, [sp, #8]
 800816c:	07d9      	lsls	r1, r3, #31
 800816e:	d40f      	bmi.n	8008190 <_dtoa_r+0x6f8>
 8008170:	4620      	mov	r0, r4
 8008172:	4659      	mov	r1, fp
 8008174:	f000 fada 	bl	800872c <_Bfree>
 8008178:	2300      	movs	r3, #0
 800817a:	702b      	strb	r3, [r5, #0]
 800817c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800817e:	f10a 0001 	add.w	r0, sl, #1
 8008182:	6018      	str	r0, [r3, #0]
 8008184:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008186:	2b00      	cmp	r3, #0
 8008188:	f43f acd8 	beq.w	8007b3c <_dtoa_r+0xa4>
 800818c:	601d      	str	r5, [r3, #0]
 800818e:	e4d5      	b.n	8007b3c <_dtoa_r+0xa4>
 8008190:	f8cd a01c 	str.w	sl, [sp, #28]
 8008194:	462b      	mov	r3, r5
 8008196:	461d      	mov	r5, r3
 8008198:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800819c:	2a39      	cmp	r2, #57	; 0x39
 800819e:	d108      	bne.n	80081b2 <_dtoa_r+0x71a>
 80081a0:	9a00      	ldr	r2, [sp, #0]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d1f7      	bne.n	8008196 <_dtoa_r+0x6fe>
 80081a6:	9a07      	ldr	r2, [sp, #28]
 80081a8:	9900      	ldr	r1, [sp, #0]
 80081aa:	3201      	adds	r2, #1
 80081ac:	9207      	str	r2, [sp, #28]
 80081ae:	2230      	movs	r2, #48	; 0x30
 80081b0:	700a      	strb	r2, [r1, #0]
 80081b2:	781a      	ldrb	r2, [r3, #0]
 80081b4:	3201      	adds	r2, #1
 80081b6:	701a      	strb	r2, [r3, #0]
 80081b8:	e78c      	b.n	80080d4 <_dtoa_r+0x63c>
 80081ba:	4b7f      	ldr	r3, [pc, #508]	; (80083b8 <_dtoa_r+0x920>)
 80081bc:	2200      	movs	r2, #0
 80081be:	f7f8 fa3b 	bl	8000638 <__aeabi_dmul>
 80081c2:	2200      	movs	r2, #0
 80081c4:	2300      	movs	r3, #0
 80081c6:	4606      	mov	r6, r0
 80081c8:	460f      	mov	r7, r1
 80081ca:	f7f8 fc9d 	bl	8000b08 <__aeabi_dcmpeq>
 80081ce:	2800      	cmp	r0, #0
 80081d0:	d09b      	beq.n	800810a <_dtoa_r+0x672>
 80081d2:	e7cd      	b.n	8008170 <_dtoa_r+0x6d8>
 80081d4:	9a08      	ldr	r2, [sp, #32]
 80081d6:	2a00      	cmp	r2, #0
 80081d8:	f000 80c4 	beq.w	8008364 <_dtoa_r+0x8cc>
 80081dc:	9a05      	ldr	r2, [sp, #20]
 80081de:	2a01      	cmp	r2, #1
 80081e0:	f300 80a8 	bgt.w	8008334 <_dtoa_r+0x89c>
 80081e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80081e6:	2a00      	cmp	r2, #0
 80081e8:	f000 80a0 	beq.w	800832c <_dtoa_r+0x894>
 80081ec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80081f0:	9e06      	ldr	r6, [sp, #24]
 80081f2:	4645      	mov	r5, r8
 80081f4:	9a04      	ldr	r2, [sp, #16]
 80081f6:	2101      	movs	r1, #1
 80081f8:	441a      	add	r2, r3
 80081fa:	4620      	mov	r0, r4
 80081fc:	4498      	add	r8, r3
 80081fe:	9204      	str	r2, [sp, #16]
 8008200:	f000 fb50 	bl	80088a4 <__i2b>
 8008204:	4607      	mov	r7, r0
 8008206:	2d00      	cmp	r5, #0
 8008208:	dd0b      	ble.n	8008222 <_dtoa_r+0x78a>
 800820a:	9b04      	ldr	r3, [sp, #16]
 800820c:	2b00      	cmp	r3, #0
 800820e:	dd08      	ble.n	8008222 <_dtoa_r+0x78a>
 8008210:	42ab      	cmp	r3, r5
 8008212:	9a04      	ldr	r2, [sp, #16]
 8008214:	bfa8      	it	ge
 8008216:	462b      	movge	r3, r5
 8008218:	eba8 0803 	sub.w	r8, r8, r3
 800821c:	1aed      	subs	r5, r5, r3
 800821e:	1ad3      	subs	r3, r2, r3
 8008220:	9304      	str	r3, [sp, #16]
 8008222:	9b06      	ldr	r3, [sp, #24]
 8008224:	b1fb      	cbz	r3, 8008266 <_dtoa_r+0x7ce>
 8008226:	9b08      	ldr	r3, [sp, #32]
 8008228:	2b00      	cmp	r3, #0
 800822a:	f000 809f 	beq.w	800836c <_dtoa_r+0x8d4>
 800822e:	2e00      	cmp	r6, #0
 8008230:	dd11      	ble.n	8008256 <_dtoa_r+0x7be>
 8008232:	4639      	mov	r1, r7
 8008234:	4632      	mov	r2, r6
 8008236:	4620      	mov	r0, r4
 8008238:	f000 fbf0 	bl	8008a1c <__pow5mult>
 800823c:	465a      	mov	r2, fp
 800823e:	4601      	mov	r1, r0
 8008240:	4607      	mov	r7, r0
 8008242:	4620      	mov	r0, r4
 8008244:	f000 fb44 	bl	80088d0 <__multiply>
 8008248:	4659      	mov	r1, fp
 800824a:	9007      	str	r0, [sp, #28]
 800824c:	4620      	mov	r0, r4
 800824e:	f000 fa6d 	bl	800872c <_Bfree>
 8008252:	9b07      	ldr	r3, [sp, #28]
 8008254:	469b      	mov	fp, r3
 8008256:	9b06      	ldr	r3, [sp, #24]
 8008258:	1b9a      	subs	r2, r3, r6
 800825a:	d004      	beq.n	8008266 <_dtoa_r+0x7ce>
 800825c:	4659      	mov	r1, fp
 800825e:	4620      	mov	r0, r4
 8008260:	f000 fbdc 	bl	8008a1c <__pow5mult>
 8008264:	4683      	mov	fp, r0
 8008266:	2101      	movs	r1, #1
 8008268:	4620      	mov	r0, r4
 800826a:	f000 fb1b 	bl	80088a4 <__i2b>
 800826e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008270:	2b00      	cmp	r3, #0
 8008272:	4606      	mov	r6, r0
 8008274:	dd7c      	ble.n	8008370 <_dtoa_r+0x8d8>
 8008276:	461a      	mov	r2, r3
 8008278:	4601      	mov	r1, r0
 800827a:	4620      	mov	r0, r4
 800827c:	f000 fbce 	bl	8008a1c <__pow5mult>
 8008280:	9b05      	ldr	r3, [sp, #20]
 8008282:	2b01      	cmp	r3, #1
 8008284:	4606      	mov	r6, r0
 8008286:	dd76      	ble.n	8008376 <_dtoa_r+0x8de>
 8008288:	2300      	movs	r3, #0
 800828a:	9306      	str	r3, [sp, #24]
 800828c:	6933      	ldr	r3, [r6, #16]
 800828e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008292:	6918      	ldr	r0, [r3, #16]
 8008294:	f000 fab6 	bl	8008804 <__hi0bits>
 8008298:	f1c0 0020 	rsb	r0, r0, #32
 800829c:	9b04      	ldr	r3, [sp, #16]
 800829e:	4418      	add	r0, r3
 80082a0:	f010 001f 	ands.w	r0, r0, #31
 80082a4:	f000 8086 	beq.w	80083b4 <_dtoa_r+0x91c>
 80082a8:	f1c0 0320 	rsb	r3, r0, #32
 80082ac:	2b04      	cmp	r3, #4
 80082ae:	dd7f      	ble.n	80083b0 <_dtoa_r+0x918>
 80082b0:	f1c0 001c 	rsb	r0, r0, #28
 80082b4:	9b04      	ldr	r3, [sp, #16]
 80082b6:	4403      	add	r3, r0
 80082b8:	4480      	add	r8, r0
 80082ba:	4405      	add	r5, r0
 80082bc:	9304      	str	r3, [sp, #16]
 80082be:	f1b8 0f00 	cmp.w	r8, #0
 80082c2:	dd05      	ble.n	80082d0 <_dtoa_r+0x838>
 80082c4:	4659      	mov	r1, fp
 80082c6:	4642      	mov	r2, r8
 80082c8:	4620      	mov	r0, r4
 80082ca:	f000 fc01 	bl	8008ad0 <__lshift>
 80082ce:	4683      	mov	fp, r0
 80082d0:	9b04      	ldr	r3, [sp, #16]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	dd05      	ble.n	80082e2 <_dtoa_r+0x84a>
 80082d6:	4631      	mov	r1, r6
 80082d8:	461a      	mov	r2, r3
 80082da:	4620      	mov	r0, r4
 80082dc:	f000 fbf8 	bl	8008ad0 <__lshift>
 80082e0:	4606      	mov	r6, r0
 80082e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d069      	beq.n	80083bc <_dtoa_r+0x924>
 80082e8:	4631      	mov	r1, r6
 80082ea:	4658      	mov	r0, fp
 80082ec:	f000 fc5c 	bl	8008ba8 <__mcmp>
 80082f0:	2800      	cmp	r0, #0
 80082f2:	da63      	bge.n	80083bc <_dtoa_r+0x924>
 80082f4:	2300      	movs	r3, #0
 80082f6:	4659      	mov	r1, fp
 80082f8:	220a      	movs	r2, #10
 80082fa:	4620      	mov	r0, r4
 80082fc:	f000 fa38 	bl	8008770 <__multadd>
 8008300:	9b08      	ldr	r3, [sp, #32]
 8008302:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008306:	4683      	mov	fp, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	f000 818f 	beq.w	800862c <_dtoa_r+0xb94>
 800830e:	4639      	mov	r1, r7
 8008310:	2300      	movs	r3, #0
 8008312:	220a      	movs	r2, #10
 8008314:	4620      	mov	r0, r4
 8008316:	f000 fa2b 	bl	8008770 <__multadd>
 800831a:	f1b9 0f00 	cmp.w	r9, #0
 800831e:	4607      	mov	r7, r0
 8008320:	f300 808e 	bgt.w	8008440 <_dtoa_r+0x9a8>
 8008324:	9b05      	ldr	r3, [sp, #20]
 8008326:	2b02      	cmp	r3, #2
 8008328:	dc50      	bgt.n	80083cc <_dtoa_r+0x934>
 800832a:	e089      	b.n	8008440 <_dtoa_r+0x9a8>
 800832c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800832e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008332:	e75d      	b.n	80081f0 <_dtoa_r+0x758>
 8008334:	9b01      	ldr	r3, [sp, #4]
 8008336:	1e5e      	subs	r6, r3, #1
 8008338:	9b06      	ldr	r3, [sp, #24]
 800833a:	42b3      	cmp	r3, r6
 800833c:	bfbf      	itttt	lt
 800833e:	9b06      	ldrlt	r3, [sp, #24]
 8008340:	9606      	strlt	r6, [sp, #24]
 8008342:	1af2      	sublt	r2, r6, r3
 8008344:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008346:	bfb6      	itet	lt
 8008348:	189b      	addlt	r3, r3, r2
 800834a:	1b9e      	subge	r6, r3, r6
 800834c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800834e:	9b01      	ldr	r3, [sp, #4]
 8008350:	bfb8      	it	lt
 8008352:	2600      	movlt	r6, #0
 8008354:	2b00      	cmp	r3, #0
 8008356:	bfb5      	itete	lt
 8008358:	eba8 0503 	sublt.w	r5, r8, r3
 800835c:	9b01      	ldrge	r3, [sp, #4]
 800835e:	2300      	movlt	r3, #0
 8008360:	4645      	movge	r5, r8
 8008362:	e747      	b.n	80081f4 <_dtoa_r+0x75c>
 8008364:	9e06      	ldr	r6, [sp, #24]
 8008366:	9f08      	ldr	r7, [sp, #32]
 8008368:	4645      	mov	r5, r8
 800836a:	e74c      	b.n	8008206 <_dtoa_r+0x76e>
 800836c:	9a06      	ldr	r2, [sp, #24]
 800836e:	e775      	b.n	800825c <_dtoa_r+0x7c4>
 8008370:	9b05      	ldr	r3, [sp, #20]
 8008372:	2b01      	cmp	r3, #1
 8008374:	dc18      	bgt.n	80083a8 <_dtoa_r+0x910>
 8008376:	9b02      	ldr	r3, [sp, #8]
 8008378:	b9b3      	cbnz	r3, 80083a8 <_dtoa_r+0x910>
 800837a:	9b03      	ldr	r3, [sp, #12]
 800837c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008380:	b9a3      	cbnz	r3, 80083ac <_dtoa_r+0x914>
 8008382:	9b03      	ldr	r3, [sp, #12]
 8008384:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008388:	0d1b      	lsrs	r3, r3, #20
 800838a:	051b      	lsls	r3, r3, #20
 800838c:	b12b      	cbz	r3, 800839a <_dtoa_r+0x902>
 800838e:	9b04      	ldr	r3, [sp, #16]
 8008390:	3301      	adds	r3, #1
 8008392:	9304      	str	r3, [sp, #16]
 8008394:	f108 0801 	add.w	r8, r8, #1
 8008398:	2301      	movs	r3, #1
 800839a:	9306      	str	r3, [sp, #24]
 800839c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800839e:	2b00      	cmp	r3, #0
 80083a0:	f47f af74 	bne.w	800828c <_dtoa_r+0x7f4>
 80083a4:	2001      	movs	r0, #1
 80083a6:	e779      	b.n	800829c <_dtoa_r+0x804>
 80083a8:	2300      	movs	r3, #0
 80083aa:	e7f6      	b.n	800839a <_dtoa_r+0x902>
 80083ac:	9b02      	ldr	r3, [sp, #8]
 80083ae:	e7f4      	b.n	800839a <_dtoa_r+0x902>
 80083b0:	d085      	beq.n	80082be <_dtoa_r+0x826>
 80083b2:	4618      	mov	r0, r3
 80083b4:	301c      	adds	r0, #28
 80083b6:	e77d      	b.n	80082b4 <_dtoa_r+0x81c>
 80083b8:	40240000 	.word	0x40240000
 80083bc:	9b01      	ldr	r3, [sp, #4]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	dc38      	bgt.n	8008434 <_dtoa_r+0x99c>
 80083c2:	9b05      	ldr	r3, [sp, #20]
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	dd35      	ble.n	8008434 <_dtoa_r+0x99c>
 80083c8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80083cc:	f1b9 0f00 	cmp.w	r9, #0
 80083d0:	d10d      	bne.n	80083ee <_dtoa_r+0x956>
 80083d2:	4631      	mov	r1, r6
 80083d4:	464b      	mov	r3, r9
 80083d6:	2205      	movs	r2, #5
 80083d8:	4620      	mov	r0, r4
 80083da:	f000 f9c9 	bl	8008770 <__multadd>
 80083de:	4601      	mov	r1, r0
 80083e0:	4606      	mov	r6, r0
 80083e2:	4658      	mov	r0, fp
 80083e4:	f000 fbe0 	bl	8008ba8 <__mcmp>
 80083e8:	2800      	cmp	r0, #0
 80083ea:	f73f adbd 	bgt.w	8007f68 <_dtoa_r+0x4d0>
 80083ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083f0:	9d00      	ldr	r5, [sp, #0]
 80083f2:	ea6f 0a03 	mvn.w	sl, r3
 80083f6:	f04f 0800 	mov.w	r8, #0
 80083fa:	4631      	mov	r1, r6
 80083fc:	4620      	mov	r0, r4
 80083fe:	f000 f995 	bl	800872c <_Bfree>
 8008402:	2f00      	cmp	r7, #0
 8008404:	f43f aeb4 	beq.w	8008170 <_dtoa_r+0x6d8>
 8008408:	f1b8 0f00 	cmp.w	r8, #0
 800840c:	d005      	beq.n	800841a <_dtoa_r+0x982>
 800840e:	45b8      	cmp	r8, r7
 8008410:	d003      	beq.n	800841a <_dtoa_r+0x982>
 8008412:	4641      	mov	r1, r8
 8008414:	4620      	mov	r0, r4
 8008416:	f000 f989 	bl	800872c <_Bfree>
 800841a:	4639      	mov	r1, r7
 800841c:	4620      	mov	r0, r4
 800841e:	f000 f985 	bl	800872c <_Bfree>
 8008422:	e6a5      	b.n	8008170 <_dtoa_r+0x6d8>
 8008424:	2600      	movs	r6, #0
 8008426:	4637      	mov	r7, r6
 8008428:	e7e1      	b.n	80083ee <_dtoa_r+0x956>
 800842a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800842c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008430:	4637      	mov	r7, r6
 8008432:	e599      	b.n	8007f68 <_dtoa_r+0x4d0>
 8008434:	9b08      	ldr	r3, [sp, #32]
 8008436:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	f000 80fd 	beq.w	800863a <_dtoa_r+0xba2>
 8008440:	2d00      	cmp	r5, #0
 8008442:	dd05      	ble.n	8008450 <_dtoa_r+0x9b8>
 8008444:	4639      	mov	r1, r7
 8008446:	462a      	mov	r2, r5
 8008448:	4620      	mov	r0, r4
 800844a:	f000 fb41 	bl	8008ad0 <__lshift>
 800844e:	4607      	mov	r7, r0
 8008450:	9b06      	ldr	r3, [sp, #24]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d05c      	beq.n	8008510 <_dtoa_r+0xa78>
 8008456:	6879      	ldr	r1, [r7, #4]
 8008458:	4620      	mov	r0, r4
 800845a:	f000 f927 	bl	80086ac <_Balloc>
 800845e:	4605      	mov	r5, r0
 8008460:	b928      	cbnz	r0, 800846e <_dtoa_r+0x9d6>
 8008462:	4b80      	ldr	r3, [pc, #512]	; (8008664 <_dtoa_r+0xbcc>)
 8008464:	4602      	mov	r2, r0
 8008466:	f240 21ea 	movw	r1, #746	; 0x2ea
 800846a:	f7ff bb2e 	b.w	8007aca <_dtoa_r+0x32>
 800846e:	693a      	ldr	r2, [r7, #16]
 8008470:	3202      	adds	r2, #2
 8008472:	0092      	lsls	r2, r2, #2
 8008474:	f107 010c 	add.w	r1, r7, #12
 8008478:	300c      	adds	r0, #12
 800847a:	f000 f8fd 	bl	8008678 <memcpy>
 800847e:	2201      	movs	r2, #1
 8008480:	4629      	mov	r1, r5
 8008482:	4620      	mov	r0, r4
 8008484:	f000 fb24 	bl	8008ad0 <__lshift>
 8008488:	9b00      	ldr	r3, [sp, #0]
 800848a:	3301      	adds	r3, #1
 800848c:	9301      	str	r3, [sp, #4]
 800848e:	9b00      	ldr	r3, [sp, #0]
 8008490:	444b      	add	r3, r9
 8008492:	9307      	str	r3, [sp, #28]
 8008494:	9b02      	ldr	r3, [sp, #8]
 8008496:	f003 0301 	and.w	r3, r3, #1
 800849a:	46b8      	mov	r8, r7
 800849c:	9306      	str	r3, [sp, #24]
 800849e:	4607      	mov	r7, r0
 80084a0:	9b01      	ldr	r3, [sp, #4]
 80084a2:	4631      	mov	r1, r6
 80084a4:	3b01      	subs	r3, #1
 80084a6:	4658      	mov	r0, fp
 80084a8:	9302      	str	r3, [sp, #8]
 80084aa:	f7ff fa69 	bl	8007980 <quorem>
 80084ae:	4603      	mov	r3, r0
 80084b0:	3330      	adds	r3, #48	; 0x30
 80084b2:	9004      	str	r0, [sp, #16]
 80084b4:	4641      	mov	r1, r8
 80084b6:	4658      	mov	r0, fp
 80084b8:	9308      	str	r3, [sp, #32]
 80084ba:	f000 fb75 	bl	8008ba8 <__mcmp>
 80084be:	463a      	mov	r2, r7
 80084c0:	4681      	mov	r9, r0
 80084c2:	4631      	mov	r1, r6
 80084c4:	4620      	mov	r0, r4
 80084c6:	f000 fb8b 	bl	8008be0 <__mdiff>
 80084ca:	68c2      	ldr	r2, [r0, #12]
 80084cc:	9b08      	ldr	r3, [sp, #32]
 80084ce:	4605      	mov	r5, r0
 80084d0:	bb02      	cbnz	r2, 8008514 <_dtoa_r+0xa7c>
 80084d2:	4601      	mov	r1, r0
 80084d4:	4658      	mov	r0, fp
 80084d6:	f000 fb67 	bl	8008ba8 <__mcmp>
 80084da:	9b08      	ldr	r3, [sp, #32]
 80084dc:	4602      	mov	r2, r0
 80084de:	4629      	mov	r1, r5
 80084e0:	4620      	mov	r0, r4
 80084e2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80084e6:	f000 f921 	bl	800872c <_Bfree>
 80084ea:	9b05      	ldr	r3, [sp, #20]
 80084ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084ee:	9d01      	ldr	r5, [sp, #4]
 80084f0:	ea43 0102 	orr.w	r1, r3, r2
 80084f4:	9b06      	ldr	r3, [sp, #24]
 80084f6:	430b      	orrs	r3, r1
 80084f8:	9b08      	ldr	r3, [sp, #32]
 80084fa:	d10d      	bne.n	8008518 <_dtoa_r+0xa80>
 80084fc:	2b39      	cmp	r3, #57	; 0x39
 80084fe:	d029      	beq.n	8008554 <_dtoa_r+0xabc>
 8008500:	f1b9 0f00 	cmp.w	r9, #0
 8008504:	dd01      	ble.n	800850a <_dtoa_r+0xa72>
 8008506:	9b04      	ldr	r3, [sp, #16]
 8008508:	3331      	adds	r3, #49	; 0x31
 800850a:	9a02      	ldr	r2, [sp, #8]
 800850c:	7013      	strb	r3, [r2, #0]
 800850e:	e774      	b.n	80083fa <_dtoa_r+0x962>
 8008510:	4638      	mov	r0, r7
 8008512:	e7b9      	b.n	8008488 <_dtoa_r+0x9f0>
 8008514:	2201      	movs	r2, #1
 8008516:	e7e2      	b.n	80084de <_dtoa_r+0xa46>
 8008518:	f1b9 0f00 	cmp.w	r9, #0
 800851c:	db06      	blt.n	800852c <_dtoa_r+0xa94>
 800851e:	9905      	ldr	r1, [sp, #20]
 8008520:	ea41 0909 	orr.w	r9, r1, r9
 8008524:	9906      	ldr	r1, [sp, #24]
 8008526:	ea59 0101 	orrs.w	r1, r9, r1
 800852a:	d120      	bne.n	800856e <_dtoa_r+0xad6>
 800852c:	2a00      	cmp	r2, #0
 800852e:	ddec      	ble.n	800850a <_dtoa_r+0xa72>
 8008530:	4659      	mov	r1, fp
 8008532:	2201      	movs	r2, #1
 8008534:	4620      	mov	r0, r4
 8008536:	9301      	str	r3, [sp, #4]
 8008538:	f000 faca 	bl	8008ad0 <__lshift>
 800853c:	4631      	mov	r1, r6
 800853e:	4683      	mov	fp, r0
 8008540:	f000 fb32 	bl	8008ba8 <__mcmp>
 8008544:	2800      	cmp	r0, #0
 8008546:	9b01      	ldr	r3, [sp, #4]
 8008548:	dc02      	bgt.n	8008550 <_dtoa_r+0xab8>
 800854a:	d1de      	bne.n	800850a <_dtoa_r+0xa72>
 800854c:	07da      	lsls	r2, r3, #31
 800854e:	d5dc      	bpl.n	800850a <_dtoa_r+0xa72>
 8008550:	2b39      	cmp	r3, #57	; 0x39
 8008552:	d1d8      	bne.n	8008506 <_dtoa_r+0xa6e>
 8008554:	9a02      	ldr	r2, [sp, #8]
 8008556:	2339      	movs	r3, #57	; 0x39
 8008558:	7013      	strb	r3, [r2, #0]
 800855a:	462b      	mov	r3, r5
 800855c:	461d      	mov	r5, r3
 800855e:	3b01      	subs	r3, #1
 8008560:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008564:	2a39      	cmp	r2, #57	; 0x39
 8008566:	d050      	beq.n	800860a <_dtoa_r+0xb72>
 8008568:	3201      	adds	r2, #1
 800856a:	701a      	strb	r2, [r3, #0]
 800856c:	e745      	b.n	80083fa <_dtoa_r+0x962>
 800856e:	2a00      	cmp	r2, #0
 8008570:	dd03      	ble.n	800857a <_dtoa_r+0xae2>
 8008572:	2b39      	cmp	r3, #57	; 0x39
 8008574:	d0ee      	beq.n	8008554 <_dtoa_r+0xabc>
 8008576:	3301      	adds	r3, #1
 8008578:	e7c7      	b.n	800850a <_dtoa_r+0xa72>
 800857a:	9a01      	ldr	r2, [sp, #4]
 800857c:	9907      	ldr	r1, [sp, #28]
 800857e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008582:	428a      	cmp	r2, r1
 8008584:	d02a      	beq.n	80085dc <_dtoa_r+0xb44>
 8008586:	4659      	mov	r1, fp
 8008588:	2300      	movs	r3, #0
 800858a:	220a      	movs	r2, #10
 800858c:	4620      	mov	r0, r4
 800858e:	f000 f8ef 	bl	8008770 <__multadd>
 8008592:	45b8      	cmp	r8, r7
 8008594:	4683      	mov	fp, r0
 8008596:	f04f 0300 	mov.w	r3, #0
 800859a:	f04f 020a 	mov.w	r2, #10
 800859e:	4641      	mov	r1, r8
 80085a0:	4620      	mov	r0, r4
 80085a2:	d107      	bne.n	80085b4 <_dtoa_r+0xb1c>
 80085a4:	f000 f8e4 	bl	8008770 <__multadd>
 80085a8:	4680      	mov	r8, r0
 80085aa:	4607      	mov	r7, r0
 80085ac:	9b01      	ldr	r3, [sp, #4]
 80085ae:	3301      	adds	r3, #1
 80085b0:	9301      	str	r3, [sp, #4]
 80085b2:	e775      	b.n	80084a0 <_dtoa_r+0xa08>
 80085b4:	f000 f8dc 	bl	8008770 <__multadd>
 80085b8:	4639      	mov	r1, r7
 80085ba:	4680      	mov	r8, r0
 80085bc:	2300      	movs	r3, #0
 80085be:	220a      	movs	r2, #10
 80085c0:	4620      	mov	r0, r4
 80085c2:	f000 f8d5 	bl	8008770 <__multadd>
 80085c6:	4607      	mov	r7, r0
 80085c8:	e7f0      	b.n	80085ac <_dtoa_r+0xb14>
 80085ca:	f1b9 0f00 	cmp.w	r9, #0
 80085ce:	9a00      	ldr	r2, [sp, #0]
 80085d0:	bfcc      	ite	gt
 80085d2:	464d      	movgt	r5, r9
 80085d4:	2501      	movle	r5, #1
 80085d6:	4415      	add	r5, r2
 80085d8:	f04f 0800 	mov.w	r8, #0
 80085dc:	4659      	mov	r1, fp
 80085de:	2201      	movs	r2, #1
 80085e0:	4620      	mov	r0, r4
 80085e2:	9301      	str	r3, [sp, #4]
 80085e4:	f000 fa74 	bl	8008ad0 <__lshift>
 80085e8:	4631      	mov	r1, r6
 80085ea:	4683      	mov	fp, r0
 80085ec:	f000 fadc 	bl	8008ba8 <__mcmp>
 80085f0:	2800      	cmp	r0, #0
 80085f2:	dcb2      	bgt.n	800855a <_dtoa_r+0xac2>
 80085f4:	d102      	bne.n	80085fc <_dtoa_r+0xb64>
 80085f6:	9b01      	ldr	r3, [sp, #4]
 80085f8:	07db      	lsls	r3, r3, #31
 80085fa:	d4ae      	bmi.n	800855a <_dtoa_r+0xac2>
 80085fc:	462b      	mov	r3, r5
 80085fe:	461d      	mov	r5, r3
 8008600:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008604:	2a30      	cmp	r2, #48	; 0x30
 8008606:	d0fa      	beq.n	80085fe <_dtoa_r+0xb66>
 8008608:	e6f7      	b.n	80083fa <_dtoa_r+0x962>
 800860a:	9a00      	ldr	r2, [sp, #0]
 800860c:	429a      	cmp	r2, r3
 800860e:	d1a5      	bne.n	800855c <_dtoa_r+0xac4>
 8008610:	f10a 0a01 	add.w	sl, sl, #1
 8008614:	2331      	movs	r3, #49	; 0x31
 8008616:	e779      	b.n	800850c <_dtoa_r+0xa74>
 8008618:	4b13      	ldr	r3, [pc, #76]	; (8008668 <_dtoa_r+0xbd0>)
 800861a:	f7ff baaf 	b.w	8007b7c <_dtoa_r+0xe4>
 800861e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008620:	2b00      	cmp	r3, #0
 8008622:	f47f aa86 	bne.w	8007b32 <_dtoa_r+0x9a>
 8008626:	4b11      	ldr	r3, [pc, #68]	; (800866c <_dtoa_r+0xbd4>)
 8008628:	f7ff baa8 	b.w	8007b7c <_dtoa_r+0xe4>
 800862c:	f1b9 0f00 	cmp.w	r9, #0
 8008630:	dc03      	bgt.n	800863a <_dtoa_r+0xba2>
 8008632:	9b05      	ldr	r3, [sp, #20]
 8008634:	2b02      	cmp	r3, #2
 8008636:	f73f aec9 	bgt.w	80083cc <_dtoa_r+0x934>
 800863a:	9d00      	ldr	r5, [sp, #0]
 800863c:	4631      	mov	r1, r6
 800863e:	4658      	mov	r0, fp
 8008640:	f7ff f99e 	bl	8007980 <quorem>
 8008644:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008648:	f805 3b01 	strb.w	r3, [r5], #1
 800864c:	9a00      	ldr	r2, [sp, #0]
 800864e:	1aaa      	subs	r2, r5, r2
 8008650:	4591      	cmp	r9, r2
 8008652:	ddba      	ble.n	80085ca <_dtoa_r+0xb32>
 8008654:	4659      	mov	r1, fp
 8008656:	2300      	movs	r3, #0
 8008658:	220a      	movs	r2, #10
 800865a:	4620      	mov	r0, r4
 800865c:	f000 f888 	bl	8008770 <__multadd>
 8008660:	4683      	mov	fp, r0
 8008662:	e7eb      	b.n	800863c <_dtoa_r+0xba4>
 8008664:	080099bb 	.word	0x080099bb
 8008668:	08009914 	.word	0x08009914
 800866c:	08009938 	.word	0x08009938

08008670 <_localeconv_r>:
 8008670:	4800      	ldr	r0, [pc, #0]	; (8008674 <_localeconv_r+0x4>)
 8008672:	4770      	bx	lr
 8008674:	20000160 	.word	0x20000160

08008678 <memcpy>:
 8008678:	440a      	add	r2, r1
 800867a:	4291      	cmp	r1, r2
 800867c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008680:	d100      	bne.n	8008684 <memcpy+0xc>
 8008682:	4770      	bx	lr
 8008684:	b510      	push	{r4, lr}
 8008686:	f811 4b01 	ldrb.w	r4, [r1], #1
 800868a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800868e:	4291      	cmp	r1, r2
 8008690:	d1f9      	bne.n	8008686 <memcpy+0xe>
 8008692:	bd10      	pop	{r4, pc}

08008694 <__malloc_lock>:
 8008694:	4801      	ldr	r0, [pc, #4]	; (800869c <__malloc_lock+0x8>)
 8008696:	f7fa bd4a 	b.w	800312e <__retarget_lock_acquire_recursive>
 800869a:	bf00      	nop
 800869c:	20000204 	.word	0x20000204

080086a0 <__malloc_unlock>:
 80086a0:	4801      	ldr	r0, [pc, #4]	; (80086a8 <__malloc_unlock+0x8>)
 80086a2:	f7fa bd58 	b.w	8003156 <__retarget_lock_release_recursive>
 80086a6:	bf00      	nop
 80086a8:	20000204 	.word	0x20000204

080086ac <_Balloc>:
 80086ac:	b570      	push	{r4, r5, r6, lr}
 80086ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80086b0:	4604      	mov	r4, r0
 80086b2:	460d      	mov	r5, r1
 80086b4:	b976      	cbnz	r6, 80086d4 <_Balloc+0x28>
 80086b6:	2010      	movs	r0, #16
 80086b8:	f7fe fc2e 	bl	8006f18 <malloc>
 80086bc:	4602      	mov	r2, r0
 80086be:	6260      	str	r0, [r4, #36]	; 0x24
 80086c0:	b920      	cbnz	r0, 80086cc <_Balloc+0x20>
 80086c2:	4b18      	ldr	r3, [pc, #96]	; (8008724 <_Balloc+0x78>)
 80086c4:	4818      	ldr	r0, [pc, #96]	; (8008728 <_Balloc+0x7c>)
 80086c6:	2166      	movs	r1, #102	; 0x66
 80086c8:	f000 fb7e 	bl	8008dc8 <__assert_func>
 80086cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086d0:	6006      	str	r6, [r0, #0]
 80086d2:	60c6      	str	r6, [r0, #12]
 80086d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80086d6:	68f3      	ldr	r3, [r6, #12]
 80086d8:	b183      	cbz	r3, 80086fc <_Balloc+0x50>
 80086da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086dc:	68db      	ldr	r3, [r3, #12]
 80086de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80086e2:	b9b8      	cbnz	r0, 8008714 <_Balloc+0x68>
 80086e4:	2101      	movs	r1, #1
 80086e6:	fa01 f605 	lsl.w	r6, r1, r5
 80086ea:	1d72      	adds	r2, r6, #5
 80086ec:	0092      	lsls	r2, r2, #2
 80086ee:	4620      	mov	r0, r4
 80086f0:	f000 fb5a 	bl	8008da8 <_calloc_r>
 80086f4:	b160      	cbz	r0, 8008710 <_Balloc+0x64>
 80086f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80086fa:	e00e      	b.n	800871a <_Balloc+0x6e>
 80086fc:	2221      	movs	r2, #33	; 0x21
 80086fe:	2104      	movs	r1, #4
 8008700:	4620      	mov	r0, r4
 8008702:	f000 fb51 	bl	8008da8 <_calloc_r>
 8008706:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008708:	60f0      	str	r0, [r6, #12]
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d1e4      	bne.n	80086da <_Balloc+0x2e>
 8008710:	2000      	movs	r0, #0
 8008712:	bd70      	pop	{r4, r5, r6, pc}
 8008714:	6802      	ldr	r2, [r0, #0]
 8008716:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800871a:	2300      	movs	r3, #0
 800871c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008720:	e7f7      	b.n	8008712 <_Balloc+0x66>
 8008722:	bf00      	nop
 8008724:	08009945 	.word	0x08009945
 8008728:	080099cc 	.word	0x080099cc

0800872c <_Bfree>:
 800872c:	b570      	push	{r4, r5, r6, lr}
 800872e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008730:	4605      	mov	r5, r0
 8008732:	460c      	mov	r4, r1
 8008734:	b976      	cbnz	r6, 8008754 <_Bfree+0x28>
 8008736:	2010      	movs	r0, #16
 8008738:	f7fe fbee 	bl	8006f18 <malloc>
 800873c:	4602      	mov	r2, r0
 800873e:	6268      	str	r0, [r5, #36]	; 0x24
 8008740:	b920      	cbnz	r0, 800874c <_Bfree+0x20>
 8008742:	4b09      	ldr	r3, [pc, #36]	; (8008768 <_Bfree+0x3c>)
 8008744:	4809      	ldr	r0, [pc, #36]	; (800876c <_Bfree+0x40>)
 8008746:	218a      	movs	r1, #138	; 0x8a
 8008748:	f000 fb3e 	bl	8008dc8 <__assert_func>
 800874c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008750:	6006      	str	r6, [r0, #0]
 8008752:	60c6      	str	r6, [r0, #12]
 8008754:	b13c      	cbz	r4, 8008766 <_Bfree+0x3a>
 8008756:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008758:	6862      	ldr	r2, [r4, #4]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008760:	6021      	str	r1, [r4, #0]
 8008762:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008766:	bd70      	pop	{r4, r5, r6, pc}
 8008768:	08009945 	.word	0x08009945
 800876c:	080099cc 	.word	0x080099cc

08008770 <__multadd>:
 8008770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008774:	690e      	ldr	r6, [r1, #16]
 8008776:	4607      	mov	r7, r0
 8008778:	4698      	mov	r8, r3
 800877a:	460c      	mov	r4, r1
 800877c:	f101 0014 	add.w	r0, r1, #20
 8008780:	2300      	movs	r3, #0
 8008782:	6805      	ldr	r5, [r0, #0]
 8008784:	b2a9      	uxth	r1, r5
 8008786:	fb02 8101 	mla	r1, r2, r1, r8
 800878a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800878e:	0c2d      	lsrs	r5, r5, #16
 8008790:	fb02 c505 	mla	r5, r2, r5, ip
 8008794:	b289      	uxth	r1, r1
 8008796:	3301      	adds	r3, #1
 8008798:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800879c:	429e      	cmp	r6, r3
 800879e:	f840 1b04 	str.w	r1, [r0], #4
 80087a2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80087a6:	dcec      	bgt.n	8008782 <__multadd+0x12>
 80087a8:	f1b8 0f00 	cmp.w	r8, #0
 80087ac:	d022      	beq.n	80087f4 <__multadd+0x84>
 80087ae:	68a3      	ldr	r3, [r4, #8]
 80087b0:	42b3      	cmp	r3, r6
 80087b2:	dc19      	bgt.n	80087e8 <__multadd+0x78>
 80087b4:	6861      	ldr	r1, [r4, #4]
 80087b6:	4638      	mov	r0, r7
 80087b8:	3101      	adds	r1, #1
 80087ba:	f7ff ff77 	bl	80086ac <_Balloc>
 80087be:	4605      	mov	r5, r0
 80087c0:	b928      	cbnz	r0, 80087ce <__multadd+0x5e>
 80087c2:	4602      	mov	r2, r0
 80087c4:	4b0d      	ldr	r3, [pc, #52]	; (80087fc <__multadd+0x8c>)
 80087c6:	480e      	ldr	r0, [pc, #56]	; (8008800 <__multadd+0x90>)
 80087c8:	21b5      	movs	r1, #181	; 0xb5
 80087ca:	f000 fafd 	bl	8008dc8 <__assert_func>
 80087ce:	6922      	ldr	r2, [r4, #16]
 80087d0:	3202      	adds	r2, #2
 80087d2:	f104 010c 	add.w	r1, r4, #12
 80087d6:	0092      	lsls	r2, r2, #2
 80087d8:	300c      	adds	r0, #12
 80087da:	f7ff ff4d 	bl	8008678 <memcpy>
 80087de:	4621      	mov	r1, r4
 80087e0:	4638      	mov	r0, r7
 80087e2:	f7ff ffa3 	bl	800872c <_Bfree>
 80087e6:	462c      	mov	r4, r5
 80087e8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80087ec:	3601      	adds	r6, #1
 80087ee:	f8c3 8014 	str.w	r8, [r3, #20]
 80087f2:	6126      	str	r6, [r4, #16]
 80087f4:	4620      	mov	r0, r4
 80087f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087fa:	bf00      	nop
 80087fc:	080099bb 	.word	0x080099bb
 8008800:	080099cc 	.word	0x080099cc

08008804 <__hi0bits>:
 8008804:	0c03      	lsrs	r3, r0, #16
 8008806:	041b      	lsls	r3, r3, #16
 8008808:	b9d3      	cbnz	r3, 8008840 <__hi0bits+0x3c>
 800880a:	0400      	lsls	r0, r0, #16
 800880c:	2310      	movs	r3, #16
 800880e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008812:	bf04      	itt	eq
 8008814:	0200      	lsleq	r0, r0, #8
 8008816:	3308      	addeq	r3, #8
 8008818:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800881c:	bf04      	itt	eq
 800881e:	0100      	lsleq	r0, r0, #4
 8008820:	3304      	addeq	r3, #4
 8008822:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008826:	bf04      	itt	eq
 8008828:	0080      	lsleq	r0, r0, #2
 800882a:	3302      	addeq	r3, #2
 800882c:	2800      	cmp	r0, #0
 800882e:	db05      	blt.n	800883c <__hi0bits+0x38>
 8008830:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008834:	f103 0301 	add.w	r3, r3, #1
 8008838:	bf08      	it	eq
 800883a:	2320      	moveq	r3, #32
 800883c:	4618      	mov	r0, r3
 800883e:	4770      	bx	lr
 8008840:	2300      	movs	r3, #0
 8008842:	e7e4      	b.n	800880e <__hi0bits+0xa>

08008844 <__lo0bits>:
 8008844:	6803      	ldr	r3, [r0, #0]
 8008846:	f013 0207 	ands.w	r2, r3, #7
 800884a:	4601      	mov	r1, r0
 800884c:	d00b      	beq.n	8008866 <__lo0bits+0x22>
 800884e:	07da      	lsls	r2, r3, #31
 8008850:	d424      	bmi.n	800889c <__lo0bits+0x58>
 8008852:	0798      	lsls	r0, r3, #30
 8008854:	bf49      	itett	mi
 8008856:	085b      	lsrmi	r3, r3, #1
 8008858:	089b      	lsrpl	r3, r3, #2
 800885a:	2001      	movmi	r0, #1
 800885c:	600b      	strmi	r3, [r1, #0]
 800885e:	bf5c      	itt	pl
 8008860:	600b      	strpl	r3, [r1, #0]
 8008862:	2002      	movpl	r0, #2
 8008864:	4770      	bx	lr
 8008866:	b298      	uxth	r0, r3
 8008868:	b9b0      	cbnz	r0, 8008898 <__lo0bits+0x54>
 800886a:	0c1b      	lsrs	r3, r3, #16
 800886c:	2010      	movs	r0, #16
 800886e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008872:	bf04      	itt	eq
 8008874:	0a1b      	lsreq	r3, r3, #8
 8008876:	3008      	addeq	r0, #8
 8008878:	071a      	lsls	r2, r3, #28
 800887a:	bf04      	itt	eq
 800887c:	091b      	lsreq	r3, r3, #4
 800887e:	3004      	addeq	r0, #4
 8008880:	079a      	lsls	r2, r3, #30
 8008882:	bf04      	itt	eq
 8008884:	089b      	lsreq	r3, r3, #2
 8008886:	3002      	addeq	r0, #2
 8008888:	07da      	lsls	r2, r3, #31
 800888a:	d403      	bmi.n	8008894 <__lo0bits+0x50>
 800888c:	085b      	lsrs	r3, r3, #1
 800888e:	f100 0001 	add.w	r0, r0, #1
 8008892:	d005      	beq.n	80088a0 <__lo0bits+0x5c>
 8008894:	600b      	str	r3, [r1, #0]
 8008896:	4770      	bx	lr
 8008898:	4610      	mov	r0, r2
 800889a:	e7e8      	b.n	800886e <__lo0bits+0x2a>
 800889c:	2000      	movs	r0, #0
 800889e:	4770      	bx	lr
 80088a0:	2020      	movs	r0, #32
 80088a2:	4770      	bx	lr

080088a4 <__i2b>:
 80088a4:	b510      	push	{r4, lr}
 80088a6:	460c      	mov	r4, r1
 80088a8:	2101      	movs	r1, #1
 80088aa:	f7ff feff 	bl	80086ac <_Balloc>
 80088ae:	4602      	mov	r2, r0
 80088b0:	b928      	cbnz	r0, 80088be <__i2b+0x1a>
 80088b2:	4b05      	ldr	r3, [pc, #20]	; (80088c8 <__i2b+0x24>)
 80088b4:	4805      	ldr	r0, [pc, #20]	; (80088cc <__i2b+0x28>)
 80088b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80088ba:	f000 fa85 	bl	8008dc8 <__assert_func>
 80088be:	2301      	movs	r3, #1
 80088c0:	6144      	str	r4, [r0, #20]
 80088c2:	6103      	str	r3, [r0, #16]
 80088c4:	bd10      	pop	{r4, pc}
 80088c6:	bf00      	nop
 80088c8:	080099bb 	.word	0x080099bb
 80088cc:	080099cc 	.word	0x080099cc

080088d0 <__multiply>:
 80088d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d4:	4614      	mov	r4, r2
 80088d6:	690a      	ldr	r2, [r1, #16]
 80088d8:	6923      	ldr	r3, [r4, #16]
 80088da:	429a      	cmp	r2, r3
 80088dc:	bfb8      	it	lt
 80088de:	460b      	movlt	r3, r1
 80088e0:	460d      	mov	r5, r1
 80088e2:	bfbc      	itt	lt
 80088e4:	4625      	movlt	r5, r4
 80088e6:	461c      	movlt	r4, r3
 80088e8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80088ec:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80088f0:	68ab      	ldr	r3, [r5, #8]
 80088f2:	6869      	ldr	r1, [r5, #4]
 80088f4:	eb0a 0709 	add.w	r7, sl, r9
 80088f8:	42bb      	cmp	r3, r7
 80088fa:	b085      	sub	sp, #20
 80088fc:	bfb8      	it	lt
 80088fe:	3101      	addlt	r1, #1
 8008900:	f7ff fed4 	bl	80086ac <_Balloc>
 8008904:	b930      	cbnz	r0, 8008914 <__multiply+0x44>
 8008906:	4602      	mov	r2, r0
 8008908:	4b42      	ldr	r3, [pc, #264]	; (8008a14 <__multiply+0x144>)
 800890a:	4843      	ldr	r0, [pc, #268]	; (8008a18 <__multiply+0x148>)
 800890c:	f240 115d 	movw	r1, #349	; 0x15d
 8008910:	f000 fa5a 	bl	8008dc8 <__assert_func>
 8008914:	f100 0614 	add.w	r6, r0, #20
 8008918:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800891c:	4633      	mov	r3, r6
 800891e:	2200      	movs	r2, #0
 8008920:	4543      	cmp	r3, r8
 8008922:	d31e      	bcc.n	8008962 <__multiply+0x92>
 8008924:	f105 0c14 	add.w	ip, r5, #20
 8008928:	f104 0314 	add.w	r3, r4, #20
 800892c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008930:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008934:	9202      	str	r2, [sp, #8]
 8008936:	ebac 0205 	sub.w	r2, ip, r5
 800893a:	3a15      	subs	r2, #21
 800893c:	f022 0203 	bic.w	r2, r2, #3
 8008940:	3204      	adds	r2, #4
 8008942:	f105 0115 	add.w	r1, r5, #21
 8008946:	458c      	cmp	ip, r1
 8008948:	bf38      	it	cc
 800894a:	2204      	movcc	r2, #4
 800894c:	9201      	str	r2, [sp, #4]
 800894e:	9a02      	ldr	r2, [sp, #8]
 8008950:	9303      	str	r3, [sp, #12]
 8008952:	429a      	cmp	r2, r3
 8008954:	d808      	bhi.n	8008968 <__multiply+0x98>
 8008956:	2f00      	cmp	r7, #0
 8008958:	dc55      	bgt.n	8008a06 <__multiply+0x136>
 800895a:	6107      	str	r7, [r0, #16]
 800895c:	b005      	add	sp, #20
 800895e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008962:	f843 2b04 	str.w	r2, [r3], #4
 8008966:	e7db      	b.n	8008920 <__multiply+0x50>
 8008968:	f8b3 a000 	ldrh.w	sl, [r3]
 800896c:	f1ba 0f00 	cmp.w	sl, #0
 8008970:	d020      	beq.n	80089b4 <__multiply+0xe4>
 8008972:	f105 0e14 	add.w	lr, r5, #20
 8008976:	46b1      	mov	r9, r6
 8008978:	2200      	movs	r2, #0
 800897a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800897e:	f8d9 b000 	ldr.w	fp, [r9]
 8008982:	b2a1      	uxth	r1, r4
 8008984:	fa1f fb8b 	uxth.w	fp, fp
 8008988:	fb0a b101 	mla	r1, sl, r1, fp
 800898c:	4411      	add	r1, r2
 800898e:	f8d9 2000 	ldr.w	r2, [r9]
 8008992:	0c24      	lsrs	r4, r4, #16
 8008994:	0c12      	lsrs	r2, r2, #16
 8008996:	fb0a 2404 	mla	r4, sl, r4, r2
 800899a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800899e:	b289      	uxth	r1, r1
 80089a0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80089a4:	45f4      	cmp	ip, lr
 80089a6:	f849 1b04 	str.w	r1, [r9], #4
 80089aa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80089ae:	d8e4      	bhi.n	800897a <__multiply+0xaa>
 80089b0:	9901      	ldr	r1, [sp, #4]
 80089b2:	5072      	str	r2, [r6, r1]
 80089b4:	9a03      	ldr	r2, [sp, #12]
 80089b6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80089ba:	3304      	adds	r3, #4
 80089bc:	f1b9 0f00 	cmp.w	r9, #0
 80089c0:	d01f      	beq.n	8008a02 <__multiply+0x132>
 80089c2:	6834      	ldr	r4, [r6, #0]
 80089c4:	f105 0114 	add.w	r1, r5, #20
 80089c8:	46b6      	mov	lr, r6
 80089ca:	f04f 0a00 	mov.w	sl, #0
 80089ce:	880a      	ldrh	r2, [r1, #0]
 80089d0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80089d4:	fb09 b202 	mla	r2, r9, r2, fp
 80089d8:	4492      	add	sl, r2
 80089da:	b2a4      	uxth	r4, r4
 80089dc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80089e0:	f84e 4b04 	str.w	r4, [lr], #4
 80089e4:	f851 4b04 	ldr.w	r4, [r1], #4
 80089e8:	f8be 2000 	ldrh.w	r2, [lr]
 80089ec:	0c24      	lsrs	r4, r4, #16
 80089ee:	fb09 2404 	mla	r4, r9, r4, r2
 80089f2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80089f6:	458c      	cmp	ip, r1
 80089f8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80089fc:	d8e7      	bhi.n	80089ce <__multiply+0xfe>
 80089fe:	9a01      	ldr	r2, [sp, #4]
 8008a00:	50b4      	str	r4, [r6, r2]
 8008a02:	3604      	adds	r6, #4
 8008a04:	e7a3      	b.n	800894e <__multiply+0x7e>
 8008a06:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d1a5      	bne.n	800895a <__multiply+0x8a>
 8008a0e:	3f01      	subs	r7, #1
 8008a10:	e7a1      	b.n	8008956 <__multiply+0x86>
 8008a12:	bf00      	nop
 8008a14:	080099bb 	.word	0x080099bb
 8008a18:	080099cc 	.word	0x080099cc

08008a1c <__pow5mult>:
 8008a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a20:	4615      	mov	r5, r2
 8008a22:	f012 0203 	ands.w	r2, r2, #3
 8008a26:	4606      	mov	r6, r0
 8008a28:	460f      	mov	r7, r1
 8008a2a:	d007      	beq.n	8008a3c <__pow5mult+0x20>
 8008a2c:	4c25      	ldr	r4, [pc, #148]	; (8008ac4 <__pow5mult+0xa8>)
 8008a2e:	3a01      	subs	r2, #1
 8008a30:	2300      	movs	r3, #0
 8008a32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a36:	f7ff fe9b 	bl	8008770 <__multadd>
 8008a3a:	4607      	mov	r7, r0
 8008a3c:	10ad      	asrs	r5, r5, #2
 8008a3e:	d03d      	beq.n	8008abc <__pow5mult+0xa0>
 8008a40:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008a42:	b97c      	cbnz	r4, 8008a64 <__pow5mult+0x48>
 8008a44:	2010      	movs	r0, #16
 8008a46:	f7fe fa67 	bl	8006f18 <malloc>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	6270      	str	r0, [r6, #36]	; 0x24
 8008a4e:	b928      	cbnz	r0, 8008a5c <__pow5mult+0x40>
 8008a50:	4b1d      	ldr	r3, [pc, #116]	; (8008ac8 <__pow5mult+0xac>)
 8008a52:	481e      	ldr	r0, [pc, #120]	; (8008acc <__pow5mult+0xb0>)
 8008a54:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008a58:	f000 f9b6 	bl	8008dc8 <__assert_func>
 8008a5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a60:	6004      	str	r4, [r0, #0]
 8008a62:	60c4      	str	r4, [r0, #12]
 8008a64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008a68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a6c:	b94c      	cbnz	r4, 8008a82 <__pow5mult+0x66>
 8008a6e:	f240 2171 	movw	r1, #625	; 0x271
 8008a72:	4630      	mov	r0, r6
 8008a74:	f7ff ff16 	bl	80088a4 <__i2b>
 8008a78:	2300      	movs	r3, #0
 8008a7a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a7e:	4604      	mov	r4, r0
 8008a80:	6003      	str	r3, [r0, #0]
 8008a82:	f04f 0900 	mov.w	r9, #0
 8008a86:	07eb      	lsls	r3, r5, #31
 8008a88:	d50a      	bpl.n	8008aa0 <__pow5mult+0x84>
 8008a8a:	4639      	mov	r1, r7
 8008a8c:	4622      	mov	r2, r4
 8008a8e:	4630      	mov	r0, r6
 8008a90:	f7ff ff1e 	bl	80088d0 <__multiply>
 8008a94:	4639      	mov	r1, r7
 8008a96:	4680      	mov	r8, r0
 8008a98:	4630      	mov	r0, r6
 8008a9a:	f7ff fe47 	bl	800872c <_Bfree>
 8008a9e:	4647      	mov	r7, r8
 8008aa0:	106d      	asrs	r5, r5, #1
 8008aa2:	d00b      	beq.n	8008abc <__pow5mult+0xa0>
 8008aa4:	6820      	ldr	r0, [r4, #0]
 8008aa6:	b938      	cbnz	r0, 8008ab8 <__pow5mult+0x9c>
 8008aa8:	4622      	mov	r2, r4
 8008aaa:	4621      	mov	r1, r4
 8008aac:	4630      	mov	r0, r6
 8008aae:	f7ff ff0f 	bl	80088d0 <__multiply>
 8008ab2:	6020      	str	r0, [r4, #0]
 8008ab4:	f8c0 9000 	str.w	r9, [r0]
 8008ab8:	4604      	mov	r4, r0
 8008aba:	e7e4      	b.n	8008a86 <__pow5mult+0x6a>
 8008abc:	4638      	mov	r0, r7
 8008abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ac2:	bf00      	nop
 8008ac4:	08009b20 	.word	0x08009b20
 8008ac8:	08009945 	.word	0x08009945
 8008acc:	080099cc 	.word	0x080099cc

08008ad0 <__lshift>:
 8008ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ad4:	460c      	mov	r4, r1
 8008ad6:	6849      	ldr	r1, [r1, #4]
 8008ad8:	6923      	ldr	r3, [r4, #16]
 8008ada:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ade:	68a3      	ldr	r3, [r4, #8]
 8008ae0:	4607      	mov	r7, r0
 8008ae2:	4691      	mov	r9, r2
 8008ae4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ae8:	f108 0601 	add.w	r6, r8, #1
 8008aec:	42b3      	cmp	r3, r6
 8008aee:	db0b      	blt.n	8008b08 <__lshift+0x38>
 8008af0:	4638      	mov	r0, r7
 8008af2:	f7ff fddb 	bl	80086ac <_Balloc>
 8008af6:	4605      	mov	r5, r0
 8008af8:	b948      	cbnz	r0, 8008b0e <__lshift+0x3e>
 8008afa:	4602      	mov	r2, r0
 8008afc:	4b28      	ldr	r3, [pc, #160]	; (8008ba0 <__lshift+0xd0>)
 8008afe:	4829      	ldr	r0, [pc, #164]	; (8008ba4 <__lshift+0xd4>)
 8008b00:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008b04:	f000 f960 	bl	8008dc8 <__assert_func>
 8008b08:	3101      	adds	r1, #1
 8008b0a:	005b      	lsls	r3, r3, #1
 8008b0c:	e7ee      	b.n	8008aec <__lshift+0x1c>
 8008b0e:	2300      	movs	r3, #0
 8008b10:	f100 0114 	add.w	r1, r0, #20
 8008b14:	f100 0210 	add.w	r2, r0, #16
 8008b18:	4618      	mov	r0, r3
 8008b1a:	4553      	cmp	r3, sl
 8008b1c:	db33      	blt.n	8008b86 <__lshift+0xb6>
 8008b1e:	6920      	ldr	r0, [r4, #16]
 8008b20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b24:	f104 0314 	add.w	r3, r4, #20
 8008b28:	f019 091f 	ands.w	r9, r9, #31
 8008b2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008b34:	d02b      	beq.n	8008b8e <__lshift+0xbe>
 8008b36:	f1c9 0e20 	rsb	lr, r9, #32
 8008b3a:	468a      	mov	sl, r1
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	6818      	ldr	r0, [r3, #0]
 8008b40:	fa00 f009 	lsl.w	r0, r0, r9
 8008b44:	4302      	orrs	r2, r0
 8008b46:	f84a 2b04 	str.w	r2, [sl], #4
 8008b4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b4e:	459c      	cmp	ip, r3
 8008b50:	fa22 f20e 	lsr.w	r2, r2, lr
 8008b54:	d8f3      	bhi.n	8008b3e <__lshift+0x6e>
 8008b56:	ebac 0304 	sub.w	r3, ip, r4
 8008b5a:	3b15      	subs	r3, #21
 8008b5c:	f023 0303 	bic.w	r3, r3, #3
 8008b60:	3304      	adds	r3, #4
 8008b62:	f104 0015 	add.w	r0, r4, #21
 8008b66:	4584      	cmp	ip, r0
 8008b68:	bf38      	it	cc
 8008b6a:	2304      	movcc	r3, #4
 8008b6c:	50ca      	str	r2, [r1, r3]
 8008b6e:	b10a      	cbz	r2, 8008b74 <__lshift+0xa4>
 8008b70:	f108 0602 	add.w	r6, r8, #2
 8008b74:	3e01      	subs	r6, #1
 8008b76:	4638      	mov	r0, r7
 8008b78:	612e      	str	r6, [r5, #16]
 8008b7a:	4621      	mov	r1, r4
 8008b7c:	f7ff fdd6 	bl	800872c <_Bfree>
 8008b80:	4628      	mov	r0, r5
 8008b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b86:	f842 0f04 	str.w	r0, [r2, #4]!
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	e7c5      	b.n	8008b1a <__lshift+0x4a>
 8008b8e:	3904      	subs	r1, #4
 8008b90:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b94:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b98:	459c      	cmp	ip, r3
 8008b9a:	d8f9      	bhi.n	8008b90 <__lshift+0xc0>
 8008b9c:	e7ea      	b.n	8008b74 <__lshift+0xa4>
 8008b9e:	bf00      	nop
 8008ba0:	080099bb 	.word	0x080099bb
 8008ba4:	080099cc 	.word	0x080099cc

08008ba8 <__mcmp>:
 8008ba8:	b530      	push	{r4, r5, lr}
 8008baa:	6902      	ldr	r2, [r0, #16]
 8008bac:	690c      	ldr	r4, [r1, #16]
 8008bae:	1b12      	subs	r2, r2, r4
 8008bb0:	d10e      	bne.n	8008bd0 <__mcmp+0x28>
 8008bb2:	f100 0314 	add.w	r3, r0, #20
 8008bb6:	3114      	adds	r1, #20
 8008bb8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008bbc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008bc0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008bc4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008bc8:	42a5      	cmp	r5, r4
 8008bca:	d003      	beq.n	8008bd4 <__mcmp+0x2c>
 8008bcc:	d305      	bcc.n	8008bda <__mcmp+0x32>
 8008bce:	2201      	movs	r2, #1
 8008bd0:	4610      	mov	r0, r2
 8008bd2:	bd30      	pop	{r4, r5, pc}
 8008bd4:	4283      	cmp	r3, r0
 8008bd6:	d3f3      	bcc.n	8008bc0 <__mcmp+0x18>
 8008bd8:	e7fa      	b.n	8008bd0 <__mcmp+0x28>
 8008bda:	f04f 32ff 	mov.w	r2, #4294967295
 8008bde:	e7f7      	b.n	8008bd0 <__mcmp+0x28>

08008be0 <__mdiff>:
 8008be0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be4:	460c      	mov	r4, r1
 8008be6:	4606      	mov	r6, r0
 8008be8:	4611      	mov	r1, r2
 8008bea:	4620      	mov	r0, r4
 8008bec:	4617      	mov	r7, r2
 8008bee:	f7ff ffdb 	bl	8008ba8 <__mcmp>
 8008bf2:	1e05      	subs	r5, r0, #0
 8008bf4:	d110      	bne.n	8008c18 <__mdiff+0x38>
 8008bf6:	4629      	mov	r1, r5
 8008bf8:	4630      	mov	r0, r6
 8008bfa:	f7ff fd57 	bl	80086ac <_Balloc>
 8008bfe:	b930      	cbnz	r0, 8008c0e <__mdiff+0x2e>
 8008c00:	4b39      	ldr	r3, [pc, #228]	; (8008ce8 <__mdiff+0x108>)
 8008c02:	4602      	mov	r2, r0
 8008c04:	f240 2132 	movw	r1, #562	; 0x232
 8008c08:	4838      	ldr	r0, [pc, #224]	; (8008cec <__mdiff+0x10c>)
 8008c0a:	f000 f8dd 	bl	8008dc8 <__assert_func>
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008c14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c18:	bfa4      	itt	ge
 8008c1a:	463b      	movge	r3, r7
 8008c1c:	4627      	movge	r7, r4
 8008c1e:	4630      	mov	r0, r6
 8008c20:	6879      	ldr	r1, [r7, #4]
 8008c22:	bfa6      	itte	ge
 8008c24:	461c      	movge	r4, r3
 8008c26:	2500      	movge	r5, #0
 8008c28:	2501      	movlt	r5, #1
 8008c2a:	f7ff fd3f 	bl	80086ac <_Balloc>
 8008c2e:	b920      	cbnz	r0, 8008c3a <__mdiff+0x5a>
 8008c30:	4b2d      	ldr	r3, [pc, #180]	; (8008ce8 <__mdiff+0x108>)
 8008c32:	4602      	mov	r2, r0
 8008c34:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008c38:	e7e6      	b.n	8008c08 <__mdiff+0x28>
 8008c3a:	693e      	ldr	r6, [r7, #16]
 8008c3c:	60c5      	str	r5, [r0, #12]
 8008c3e:	6925      	ldr	r5, [r4, #16]
 8008c40:	f107 0114 	add.w	r1, r7, #20
 8008c44:	f104 0914 	add.w	r9, r4, #20
 8008c48:	f100 0e14 	add.w	lr, r0, #20
 8008c4c:	f107 0210 	add.w	r2, r7, #16
 8008c50:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008c54:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008c58:	46f2      	mov	sl, lr
 8008c5a:	2700      	movs	r7, #0
 8008c5c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008c60:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008c64:	fa1f f883 	uxth.w	r8, r3
 8008c68:	fa17 f78b 	uxtah	r7, r7, fp
 8008c6c:	0c1b      	lsrs	r3, r3, #16
 8008c6e:	eba7 0808 	sub.w	r8, r7, r8
 8008c72:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008c76:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008c7a:	fa1f f888 	uxth.w	r8, r8
 8008c7e:	141f      	asrs	r7, r3, #16
 8008c80:	454d      	cmp	r5, r9
 8008c82:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008c86:	f84a 3b04 	str.w	r3, [sl], #4
 8008c8a:	d8e7      	bhi.n	8008c5c <__mdiff+0x7c>
 8008c8c:	1b2b      	subs	r3, r5, r4
 8008c8e:	3b15      	subs	r3, #21
 8008c90:	f023 0303 	bic.w	r3, r3, #3
 8008c94:	3304      	adds	r3, #4
 8008c96:	3415      	adds	r4, #21
 8008c98:	42a5      	cmp	r5, r4
 8008c9a:	bf38      	it	cc
 8008c9c:	2304      	movcc	r3, #4
 8008c9e:	4419      	add	r1, r3
 8008ca0:	4473      	add	r3, lr
 8008ca2:	469e      	mov	lr, r3
 8008ca4:	460d      	mov	r5, r1
 8008ca6:	4565      	cmp	r5, ip
 8008ca8:	d30e      	bcc.n	8008cc8 <__mdiff+0xe8>
 8008caa:	f10c 0203 	add.w	r2, ip, #3
 8008cae:	1a52      	subs	r2, r2, r1
 8008cb0:	f022 0203 	bic.w	r2, r2, #3
 8008cb4:	3903      	subs	r1, #3
 8008cb6:	458c      	cmp	ip, r1
 8008cb8:	bf38      	it	cc
 8008cba:	2200      	movcc	r2, #0
 8008cbc:	441a      	add	r2, r3
 8008cbe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008cc2:	b17b      	cbz	r3, 8008ce4 <__mdiff+0x104>
 8008cc4:	6106      	str	r6, [r0, #16]
 8008cc6:	e7a5      	b.n	8008c14 <__mdiff+0x34>
 8008cc8:	f855 8b04 	ldr.w	r8, [r5], #4
 8008ccc:	fa17 f488 	uxtah	r4, r7, r8
 8008cd0:	1422      	asrs	r2, r4, #16
 8008cd2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008cd6:	b2a4      	uxth	r4, r4
 8008cd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008cdc:	f84e 4b04 	str.w	r4, [lr], #4
 8008ce0:	1417      	asrs	r7, r2, #16
 8008ce2:	e7e0      	b.n	8008ca6 <__mdiff+0xc6>
 8008ce4:	3e01      	subs	r6, #1
 8008ce6:	e7ea      	b.n	8008cbe <__mdiff+0xde>
 8008ce8:	080099bb 	.word	0x080099bb
 8008cec:	080099cc 	.word	0x080099cc

08008cf0 <__d2b>:
 8008cf0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008cf4:	4689      	mov	r9, r1
 8008cf6:	2101      	movs	r1, #1
 8008cf8:	ec57 6b10 	vmov	r6, r7, d0
 8008cfc:	4690      	mov	r8, r2
 8008cfe:	f7ff fcd5 	bl	80086ac <_Balloc>
 8008d02:	4604      	mov	r4, r0
 8008d04:	b930      	cbnz	r0, 8008d14 <__d2b+0x24>
 8008d06:	4602      	mov	r2, r0
 8008d08:	4b25      	ldr	r3, [pc, #148]	; (8008da0 <__d2b+0xb0>)
 8008d0a:	4826      	ldr	r0, [pc, #152]	; (8008da4 <__d2b+0xb4>)
 8008d0c:	f240 310a 	movw	r1, #778	; 0x30a
 8008d10:	f000 f85a 	bl	8008dc8 <__assert_func>
 8008d14:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008d18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008d1c:	bb35      	cbnz	r5, 8008d6c <__d2b+0x7c>
 8008d1e:	2e00      	cmp	r6, #0
 8008d20:	9301      	str	r3, [sp, #4]
 8008d22:	d028      	beq.n	8008d76 <__d2b+0x86>
 8008d24:	4668      	mov	r0, sp
 8008d26:	9600      	str	r6, [sp, #0]
 8008d28:	f7ff fd8c 	bl	8008844 <__lo0bits>
 8008d2c:	9900      	ldr	r1, [sp, #0]
 8008d2e:	b300      	cbz	r0, 8008d72 <__d2b+0x82>
 8008d30:	9a01      	ldr	r2, [sp, #4]
 8008d32:	f1c0 0320 	rsb	r3, r0, #32
 8008d36:	fa02 f303 	lsl.w	r3, r2, r3
 8008d3a:	430b      	orrs	r3, r1
 8008d3c:	40c2      	lsrs	r2, r0
 8008d3e:	6163      	str	r3, [r4, #20]
 8008d40:	9201      	str	r2, [sp, #4]
 8008d42:	9b01      	ldr	r3, [sp, #4]
 8008d44:	61a3      	str	r3, [r4, #24]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	bf14      	ite	ne
 8008d4a:	2202      	movne	r2, #2
 8008d4c:	2201      	moveq	r2, #1
 8008d4e:	6122      	str	r2, [r4, #16]
 8008d50:	b1d5      	cbz	r5, 8008d88 <__d2b+0x98>
 8008d52:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008d56:	4405      	add	r5, r0
 8008d58:	f8c9 5000 	str.w	r5, [r9]
 8008d5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008d60:	f8c8 0000 	str.w	r0, [r8]
 8008d64:	4620      	mov	r0, r4
 8008d66:	b003      	add	sp, #12
 8008d68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d70:	e7d5      	b.n	8008d1e <__d2b+0x2e>
 8008d72:	6161      	str	r1, [r4, #20]
 8008d74:	e7e5      	b.n	8008d42 <__d2b+0x52>
 8008d76:	a801      	add	r0, sp, #4
 8008d78:	f7ff fd64 	bl	8008844 <__lo0bits>
 8008d7c:	9b01      	ldr	r3, [sp, #4]
 8008d7e:	6163      	str	r3, [r4, #20]
 8008d80:	2201      	movs	r2, #1
 8008d82:	6122      	str	r2, [r4, #16]
 8008d84:	3020      	adds	r0, #32
 8008d86:	e7e3      	b.n	8008d50 <__d2b+0x60>
 8008d88:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008d8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008d90:	f8c9 0000 	str.w	r0, [r9]
 8008d94:	6918      	ldr	r0, [r3, #16]
 8008d96:	f7ff fd35 	bl	8008804 <__hi0bits>
 8008d9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008d9e:	e7df      	b.n	8008d60 <__d2b+0x70>
 8008da0:	080099bb 	.word	0x080099bb
 8008da4:	080099cc 	.word	0x080099cc

08008da8 <_calloc_r>:
 8008da8:	b513      	push	{r0, r1, r4, lr}
 8008daa:	434a      	muls	r2, r1
 8008dac:	4611      	mov	r1, r2
 8008dae:	9201      	str	r2, [sp, #4]
 8008db0:	f7fe f912 	bl	8006fd8 <_malloc_r>
 8008db4:	4604      	mov	r4, r0
 8008db6:	b118      	cbz	r0, 8008dc0 <_calloc_r+0x18>
 8008db8:	9a01      	ldr	r2, [sp, #4]
 8008dba:	2100      	movs	r1, #0
 8008dbc:	f7fe f8b4 	bl	8006f28 <memset>
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	b002      	add	sp, #8
 8008dc4:	bd10      	pop	{r4, pc}
	...

08008dc8 <__assert_func>:
 8008dc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008dca:	4614      	mov	r4, r2
 8008dcc:	461a      	mov	r2, r3
 8008dce:	4b09      	ldr	r3, [pc, #36]	; (8008df4 <__assert_func+0x2c>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4605      	mov	r5, r0
 8008dd4:	68d8      	ldr	r0, [r3, #12]
 8008dd6:	b14c      	cbz	r4, 8008dec <__assert_func+0x24>
 8008dd8:	4b07      	ldr	r3, [pc, #28]	; (8008df8 <__assert_func+0x30>)
 8008dda:	9100      	str	r1, [sp, #0]
 8008ddc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008de0:	4906      	ldr	r1, [pc, #24]	; (8008dfc <__assert_func+0x34>)
 8008de2:	462b      	mov	r3, r5
 8008de4:	f000 f80e 	bl	8008e04 <fiprintf>
 8008de8:	f000 fa58 	bl	800929c <abort>
 8008dec:	4b04      	ldr	r3, [pc, #16]	; (8008e00 <__assert_func+0x38>)
 8008dee:	461c      	mov	r4, r3
 8008df0:	e7f3      	b.n	8008dda <__assert_func+0x12>
 8008df2:	bf00      	nop
 8008df4:	2000000c 	.word	0x2000000c
 8008df8:	08009b2c 	.word	0x08009b2c
 8008dfc:	08009b39 	.word	0x08009b39
 8008e00:	08009b67 	.word	0x08009b67

08008e04 <fiprintf>:
 8008e04:	b40e      	push	{r1, r2, r3}
 8008e06:	b503      	push	{r0, r1, lr}
 8008e08:	4601      	mov	r1, r0
 8008e0a:	ab03      	add	r3, sp, #12
 8008e0c:	4805      	ldr	r0, [pc, #20]	; (8008e24 <fiprintf+0x20>)
 8008e0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e12:	6800      	ldr	r0, [r0, #0]
 8008e14:	9301      	str	r3, [sp, #4]
 8008e16:	f000 f843 	bl	8008ea0 <_vfiprintf_r>
 8008e1a:	b002      	add	sp, #8
 8008e1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e20:	b003      	add	sp, #12
 8008e22:	4770      	bx	lr
 8008e24:	2000000c 	.word	0x2000000c

08008e28 <__ascii_mbtowc>:
 8008e28:	b082      	sub	sp, #8
 8008e2a:	b901      	cbnz	r1, 8008e2e <__ascii_mbtowc+0x6>
 8008e2c:	a901      	add	r1, sp, #4
 8008e2e:	b142      	cbz	r2, 8008e42 <__ascii_mbtowc+0x1a>
 8008e30:	b14b      	cbz	r3, 8008e46 <__ascii_mbtowc+0x1e>
 8008e32:	7813      	ldrb	r3, [r2, #0]
 8008e34:	600b      	str	r3, [r1, #0]
 8008e36:	7812      	ldrb	r2, [r2, #0]
 8008e38:	1e10      	subs	r0, r2, #0
 8008e3a:	bf18      	it	ne
 8008e3c:	2001      	movne	r0, #1
 8008e3e:	b002      	add	sp, #8
 8008e40:	4770      	bx	lr
 8008e42:	4610      	mov	r0, r2
 8008e44:	e7fb      	b.n	8008e3e <__ascii_mbtowc+0x16>
 8008e46:	f06f 0001 	mvn.w	r0, #1
 8008e4a:	e7f8      	b.n	8008e3e <__ascii_mbtowc+0x16>

08008e4c <__sfputc_r>:
 8008e4c:	6893      	ldr	r3, [r2, #8]
 8008e4e:	3b01      	subs	r3, #1
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	b410      	push	{r4}
 8008e54:	6093      	str	r3, [r2, #8]
 8008e56:	da08      	bge.n	8008e6a <__sfputc_r+0x1e>
 8008e58:	6994      	ldr	r4, [r2, #24]
 8008e5a:	42a3      	cmp	r3, r4
 8008e5c:	db01      	blt.n	8008e62 <__sfputc_r+0x16>
 8008e5e:	290a      	cmp	r1, #10
 8008e60:	d103      	bne.n	8008e6a <__sfputc_r+0x1e>
 8008e62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e66:	f000 b94b 	b.w	8009100 <__swbuf_r>
 8008e6a:	6813      	ldr	r3, [r2, #0]
 8008e6c:	1c58      	adds	r0, r3, #1
 8008e6e:	6010      	str	r0, [r2, #0]
 8008e70:	7019      	strb	r1, [r3, #0]
 8008e72:	4608      	mov	r0, r1
 8008e74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e78:	4770      	bx	lr

08008e7a <__sfputs_r>:
 8008e7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e7c:	4606      	mov	r6, r0
 8008e7e:	460f      	mov	r7, r1
 8008e80:	4614      	mov	r4, r2
 8008e82:	18d5      	adds	r5, r2, r3
 8008e84:	42ac      	cmp	r4, r5
 8008e86:	d101      	bne.n	8008e8c <__sfputs_r+0x12>
 8008e88:	2000      	movs	r0, #0
 8008e8a:	e007      	b.n	8008e9c <__sfputs_r+0x22>
 8008e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e90:	463a      	mov	r2, r7
 8008e92:	4630      	mov	r0, r6
 8008e94:	f7ff ffda 	bl	8008e4c <__sfputc_r>
 8008e98:	1c43      	adds	r3, r0, #1
 8008e9a:	d1f3      	bne.n	8008e84 <__sfputs_r+0xa>
 8008e9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ea0 <_vfiprintf_r>:
 8008ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea4:	460d      	mov	r5, r1
 8008ea6:	b09d      	sub	sp, #116	; 0x74
 8008ea8:	4614      	mov	r4, r2
 8008eaa:	4698      	mov	r8, r3
 8008eac:	4606      	mov	r6, r0
 8008eae:	b118      	cbz	r0, 8008eb8 <_vfiprintf_r+0x18>
 8008eb0:	6983      	ldr	r3, [r0, #24]
 8008eb2:	b90b      	cbnz	r3, 8008eb8 <_vfiprintf_r+0x18>
 8008eb4:	f000 fb14 	bl	80094e0 <__sinit>
 8008eb8:	4b89      	ldr	r3, [pc, #548]	; (80090e0 <_vfiprintf_r+0x240>)
 8008eba:	429d      	cmp	r5, r3
 8008ebc:	d11b      	bne.n	8008ef6 <_vfiprintf_r+0x56>
 8008ebe:	6875      	ldr	r5, [r6, #4]
 8008ec0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ec2:	07d9      	lsls	r1, r3, #31
 8008ec4:	d405      	bmi.n	8008ed2 <_vfiprintf_r+0x32>
 8008ec6:	89ab      	ldrh	r3, [r5, #12]
 8008ec8:	059a      	lsls	r2, r3, #22
 8008eca:	d402      	bmi.n	8008ed2 <_vfiprintf_r+0x32>
 8008ecc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ece:	f7fa f92e 	bl	800312e <__retarget_lock_acquire_recursive>
 8008ed2:	89ab      	ldrh	r3, [r5, #12]
 8008ed4:	071b      	lsls	r3, r3, #28
 8008ed6:	d501      	bpl.n	8008edc <_vfiprintf_r+0x3c>
 8008ed8:	692b      	ldr	r3, [r5, #16]
 8008eda:	b9eb      	cbnz	r3, 8008f18 <_vfiprintf_r+0x78>
 8008edc:	4629      	mov	r1, r5
 8008ede:	4630      	mov	r0, r6
 8008ee0:	f000 f96e 	bl	80091c0 <__swsetup_r>
 8008ee4:	b1c0      	cbz	r0, 8008f18 <_vfiprintf_r+0x78>
 8008ee6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ee8:	07dc      	lsls	r4, r3, #31
 8008eea:	d50e      	bpl.n	8008f0a <_vfiprintf_r+0x6a>
 8008eec:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef0:	b01d      	add	sp, #116	; 0x74
 8008ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ef6:	4b7b      	ldr	r3, [pc, #492]	; (80090e4 <_vfiprintf_r+0x244>)
 8008ef8:	429d      	cmp	r5, r3
 8008efa:	d101      	bne.n	8008f00 <_vfiprintf_r+0x60>
 8008efc:	68b5      	ldr	r5, [r6, #8]
 8008efe:	e7df      	b.n	8008ec0 <_vfiprintf_r+0x20>
 8008f00:	4b79      	ldr	r3, [pc, #484]	; (80090e8 <_vfiprintf_r+0x248>)
 8008f02:	429d      	cmp	r5, r3
 8008f04:	bf08      	it	eq
 8008f06:	68f5      	ldreq	r5, [r6, #12]
 8008f08:	e7da      	b.n	8008ec0 <_vfiprintf_r+0x20>
 8008f0a:	89ab      	ldrh	r3, [r5, #12]
 8008f0c:	0598      	lsls	r0, r3, #22
 8008f0e:	d4ed      	bmi.n	8008eec <_vfiprintf_r+0x4c>
 8008f10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f12:	f7fa f920 	bl	8003156 <__retarget_lock_release_recursive>
 8008f16:	e7e9      	b.n	8008eec <_vfiprintf_r+0x4c>
 8008f18:	2300      	movs	r3, #0
 8008f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8008f1c:	2320      	movs	r3, #32
 8008f1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f22:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f26:	2330      	movs	r3, #48	; 0x30
 8008f28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80090ec <_vfiprintf_r+0x24c>
 8008f2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f30:	f04f 0901 	mov.w	r9, #1
 8008f34:	4623      	mov	r3, r4
 8008f36:	469a      	mov	sl, r3
 8008f38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f3c:	b10a      	cbz	r2, 8008f42 <_vfiprintf_r+0xa2>
 8008f3e:	2a25      	cmp	r2, #37	; 0x25
 8008f40:	d1f9      	bne.n	8008f36 <_vfiprintf_r+0x96>
 8008f42:	ebba 0b04 	subs.w	fp, sl, r4
 8008f46:	d00b      	beq.n	8008f60 <_vfiprintf_r+0xc0>
 8008f48:	465b      	mov	r3, fp
 8008f4a:	4622      	mov	r2, r4
 8008f4c:	4629      	mov	r1, r5
 8008f4e:	4630      	mov	r0, r6
 8008f50:	f7ff ff93 	bl	8008e7a <__sfputs_r>
 8008f54:	3001      	adds	r0, #1
 8008f56:	f000 80aa 	beq.w	80090ae <_vfiprintf_r+0x20e>
 8008f5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f5c:	445a      	add	r2, fp
 8008f5e:	9209      	str	r2, [sp, #36]	; 0x24
 8008f60:	f89a 3000 	ldrb.w	r3, [sl]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	f000 80a2 	beq.w	80090ae <_vfiprintf_r+0x20e>
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f74:	f10a 0a01 	add.w	sl, sl, #1
 8008f78:	9304      	str	r3, [sp, #16]
 8008f7a:	9307      	str	r3, [sp, #28]
 8008f7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f80:	931a      	str	r3, [sp, #104]	; 0x68
 8008f82:	4654      	mov	r4, sl
 8008f84:	2205      	movs	r2, #5
 8008f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f8a:	4858      	ldr	r0, [pc, #352]	; (80090ec <_vfiprintf_r+0x24c>)
 8008f8c:	f7f7 f948 	bl	8000220 <memchr>
 8008f90:	9a04      	ldr	r2, [sp, #16]
 8008f92:	b9d8      	cbnz	r0, 8008fcc <_vfiprintf_r+0x12c>
 8008f94:	06d1      	lsls	r1, r2, #27
 8008f96:	bf44      	itt	mi
 8008f98:	2320      	movmi	r3, #32
 8008f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f9e:	0713      	lsls	r3, r2, #28
 8008fa0:	bf44      	itt	mi
 8008fa2:	232b      	movmi	r3, #43	; 0x2b
 8008fa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fa8:	f89a 3000 	ldrb.w	r3, [sl]
 8008fac:	2b2a      	cmp	r3, #42	; 0x2a
 8008fae:	d015      	beq.n	8008fdc <_vfiprintf_r+0x13c>
 8008fb0:	9a07      	ldr	r2, [sp, #28]
 8008fb2:	4654      	mov	r4, sl
 8008fb4:	2000      	movs	r0, #0
 8008fb6:	f04f 0c0a 	mov.w	ip, #10
 8008fba:	4621      	mov	r1, r4
 8008fbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fc0:	3b30      	subs	r3, #48	; 0x30
 8008fc2:	2b09      	cmp	r3, #9
 8008fc4:	d94e      	bls.n	8009064 <_vfiprintf_r+0x1c4>
 8008fc6:	b1b0      	cbz	r0, 8008ff6 <_vfiprintf_r+0x156>
 8008fc8:	9207      	str	r2, [sp, #28]
 8008fca:	e014      	b.n	8008ff6 <_vfiprintf_r+0x156>
 8008fcc:	eba0 0308 	sub.w	r3, r0, r8
 8008fd0:	fa09 f303 	lsl.w	r3, r9, r3
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	9304      	str	r3, [sp, #16]
 8008fd8:	46a2      	mov	sl, r4
 8008fda:	e7d2      	b.n	8008f82 <_vfiprintf_r+0xe2>
 8008fdc:	9b03      	ldr	r3, [sp, #12]
 8008fde:	1d19      	adds	r1, r3, #4
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	9103      	str	r1, [sp, #12]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	bfbb      	ittet	lt
 8008fe8:	425b      	neglt	r3, r3
 8008fea:	f042 0202 	orrlt.w	r2, r2, #2
 8008fee:	9307      	strge	r3, [sp, #28]
 8008ff0:	9307      	strlt	r3, [sp, #28]
 8008ff2:	bfb8      	it	lt
 8008ff4:	9204      	strlt	r2, [sp, #16]
 8008ff6:	7823      	ldrb	r3, [r4, #0]
 8008ff8:	2b2e      	cmp	r3, #46	; 0x2e
 8008ffa:	d10c      	bne.n	8009016 <_vfiprintf_r+0x176>
 8008ffc:	7863      	ldrb	r3, [r4, #1]
 8008ffe:	2b2a      	cmp	r3, #42	; 0x2a
 8009000:	d135      	bne.n	800906e <_vfiprintf_r+0x1ce>
 8009002:	9b03      	ldr	r3, [sp, #12]
 8009004:	1d1a      	adds	r2, r3, #4
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	9203      	str	r2, [sp, #12]
 800900a:	2b00      	cmp	r3, #0
 800900c:	bfb8      	it	lt
 800900e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009012:	3402      	adds	r4, #2
 8009014:	9305      	str	r3, [sp, #20]
 8009016:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80090fc <_vfiprintf_r+0x25c>
 800901a:	7821      	ldrb	r1, [r4, #0]
 800901c:	2203      	movs	r2, #3
 800901e:	4650      	mov	r0, sl
 8009020:	f7f7 f8fe 	bl	8000220 <memchr>
 8009024:	b140      	cbz	r0, 8009038 <_vfiprintf_r+0x198>
 8009026:	2340      	movs	r3, #64	; 0x40
 8009028:	eba0 000a 	sub.w	r0, r0, sl
 800902c:	fa03 f000 	lsl.w	r0, r3, r0
 8009030:	9b04      	ldr	r3, [sp, #16]
 8009032:	4303      	orrs	r3, r0
 8009034:	3401      	adds	r4, #1
 8009036:	9304      	str	r3, [sp, #16]
 8009038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800903c:	482c      	ldr	r0, [pc, #176]	; (80090f0 <_vfiprintf_r+0x250>)
 800903e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009042:	2206      	movs	r2, #6
 8009044:	f7f7 f8ec 	bl	8000220 <memchr>
 8009048:	2800      	cmp	r0, #0
 800904a:	d03f      	beq.n	80090cc <_vfiprintf_r+0x22c>
 800904c:	4b29      	ldr	r3, [pc, #164]	; (80090f4 <_vfiprintf_r+0x254>)
 800904e:	bb1b      	cbnz	r3, 8009098 <_vfiprintf_r+0x1f8>
 8009050:	9b03      	ldr	r3, [sp, #12]
 8009052:	3307      	adds	r3, #7
 8009054:	f023 0307 	bic.w	r3, r3, #7
 8009058:	3308      	adds	r3, #8
 800905a:	9303      	str	r3, [sp, #12]
 800905c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800905e:	443b      	add	r3, r7
 8009060:	9309      	str	r3, [sp, #36]	; 0x24
 8009062:	e767      	b.n	8008f34 <_vfiprintf_r+0x94>
 8009064:	fb0c 3202 	mla	r2, ip, r2, r3
 8009068:	460c      	mov	r4, r1
 800906a:	2001      	movs	r0, #1
 800906c:	e7a5      	b.n	8008fba <_vfiprintf_r+0x11a>
 800906e:	2300      	movs	r3, #0
 8009070:	3401      	adds	r4, #1
 8009072:	9305      	str	r3, [sp, #20]
 8009074:	4619      	mov	r1, r3
 8009076:	f04f 0c0a 	mov.w	ip, #10
 800907a:	4620      	mov	r0, r4
 800907c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009080:	3a30      	subs	r2, #48	; 0x30
 8009082:	2a09      	cmp	r2, #9
 8009084:	d903      	bls.n	800908e <_vfiprintf_r+0x1ee>
 8009086:	2b00      	cmp	r3, #0
 8009088:	d0c5      	beq.n	8009016 <_vfiprintf_r+0x176>
 800908a:	9105      	str	r1, [sp, #20]
 800908c:	e7c3      	b.n	8009016 <_vfiprintf_r+0x176>
 800908e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009092:	4604      	mov	r4, r0
 8009094:	2301      	movs	r3, #1
 8009096:	e7f0      	b.n	800907a <_vfiprintf_r+0x1da>
 8009098:	ab03      	add	r3, sp, #12
 800909a:	9300      	str	r3, [sp, #0]
 800909c:	462a      	mov	r2, r5
 800909e:	4b16      	ldr	r3, [pc, #88]	; (80090f8 <_vfiprintf_r+0x258>)
 80090a0:	a904      	add	r1, sp, #16
 80090a2:	4630      	mov	r0, r6
 80090a4:	f7fe f892 	bl	80071cc <_printf_float>
 80090a8:	4607      	mov	r7, r0
 80090aa:	1c78      	adds	r0, r7, #1
 80090ac:	d1d6      	bne.n	800905c <_vfiprintf_r+0x1bc>
 80090ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090b0:	07d9      	lsls	r1, r3, #31
 80090b2:	d405      	bmi.n	80090c0 <_vfiprintf_r+0x220>
 80090b4:	89ab      	ldrh	r3, [r5, #12]
 80090b6:	059a      	lsls	r2, r3, #22
 80090b8:	d402      	bmi.n	80090c0 <_vfiprintf_r+0x220>
 80090ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090bc:	f7fa f84b 	bl	8003156 <__retarget_lock_release_recursive>
 80090c0:	89ab      	ldrh	r3, [r5, #12]
 80090c2:	065b      	lsls	r3, r3, #25
 80090c4:	f53f af12 	bmi.w	8008eec <_vfiprintf_r+0x4c>
 80090c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090ca:	e711      	b.n	8008ef0 <_vfiprintf_r+0x50>
 80090cc:	ab03      	add	r3, sp, #12
 80090ce:	9300      	str	r3, [sp, #0]
 80090d0:	462a      	mov	r2, r5
 80090d2:	4b09      	ldr	r3, [pc, #36]	; (80090f8 <_vfiprintf_r+0x258>)
 80090d4:	a904      	add	r1, sp, #16
 80090d6:	4630      	mov	r0, r6
 80090d8:	f7fe fb1c 	bl	8007714 <_printf_i>
 80090dc:	e7e4      	b.n	80090a8 <_vfiprintf_r+0x208>
 80090de:	bf00      	nop
 80090e0:	08009ca4 	.word	0x08009ca4
 80090e4:	08009cc4 	.word	0x08009cc4
 80090e8:	08009c84 	.word	0x08009c84
 80090ec:	08009b72 	.word	0x08009b72
 80090f0:	08009b7c 	.word	0x08009b7c
 80090f4:	080071cd 	.word	0x080071cd
 80090f8:	08008e7b 	.word	0x08008e7b
 80090fc:	08009b78 	.word	0x08009b78

08009100 <__swbuf_r>:
 8009100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009102:	460e      	mov	r6, r1
 8009104:	4614      	mov	r4, r2
 8009106:	4605      	mov	r5, r0
 8009108:	b118      	cbz	r0, 8009112 <__swbuf_r+0x12>
 800910a:	6983      	ldr	r3, [r0, #24]
 800910c:	b90b      	cbnz	r3, 8009112 <__swbuf_r+0x12>
 800910e:	f000 f9e7 	bl	80094e0 <__sinit>
 8009112:	4b21      	ldr	r3, [pc, #132]	; (8009198 <__swbuf_r+0x98>)
 8009114:	429c      	cmp	r4, r3
 8009116:	d12b      	bne.n	8009170 <__swbuf_r+0x70>
 8009118:	686c      	ldr	r4, [r5, #4]
 800911a:	69a3      	ldr	r3, [r4, #24]
 800911c:	60a3      	str	r3, [r4, #8]
 800911e:	89a3      	ldrh	r3, [r4, #12]
 8009120:	071a      	lsls	r2, r3, #28
 8009122:	d52f      	bpl.n	8009184 <__swbuf_r+0x84>
 8009124:	6923      	ldr	r3, [r4, #16]
 8009126:	b36b      	cbz	r3, 8009184 <__swbuf_r+0x84>
 8009128:	6923      	ldr	r3, [r4, #16]
 800912a:	6820      	ldr	r0, [r4, #0]
 800912c:	1ac0      	subs	r0, r0, r3
 800912e:	6963      	ldr	r3, [r4, #20]
 8009130:	b2f6      	uxtb	r6, r6
 8009132:	4283      	cmp	r3, r0
 8009134:	4637      	mov	r7, r6
 8009136:	dc04      	bgt.n	8009142 <__swbuf_r+0x42>
 8009138:	4621      	mov	r1, r4
 800913a:	4628      	mov	r0, r5
 800913c:	f000 f93c 	bl	80093b8 <_fflush_r>
 8009140:	bb30      	cbnz	r0, 8009190 <__swbuf_r+0x90>
 8009142:	68a3      	ldr	r3, [r4, #8]
 8009144:	3b01      	subs	r3, #1
 8009146:	60a3      	str	r3, [r4, #8]
 8009148:	6823      	ldr	r3, [r4, #0]
 800914a:	1c5a      	adds	r2, r3, #1
 800914c:	6022      	str	r2, [r4, #0]
 800914e:	701e      	strb	r6, [r3, #0]
 8009150:	6963      	ldr	r3, [r4, #20]
 8009152:	3001      	adds	r0, #1
 8009154:	4283      	cmp	r3, r0
 8009156:	d004      	beq.n	8009162 <__swbuf_r+0x62>
 8009158:	89a3      	ldrh	r3, [r4, #12]
 800915a:	07db      	lsls	r3, r3, #31
 800915c:	d506      	bpl.n	800916c <__swbuf_r+0x6c>
 800915e:	2e0a      	cmp	r6, #10
 8009160:	d104      	bne.n	800916c <__swbuf_r+0x6c>
 8009162:	4621      	mov	r1, r4
 8009164:	4628      	mov	r0, r5
 8009166:	f000 f927 	bl	80093b8 <_fflush_r>
 800916a:	b988      	cbnz	r0, 8009190 <__swbuf_r+0x90>
 800916c:	4638      	mov	r0, r7
 800916e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009170:	4b0a      	ldr	r3, [pc, #40]	; (800919c <__swbuf_r+0x9c>)
 8009172:	429c      	cmp	r4, r3
 8009174:	d101      	bne.n	800917a <__swbuf_r+0x7a>
 8009176:	68ac      	ldr	r4, [r5, #8]
 8009178:	e7cf      	b.n	800911a <__swbuf_r+0x1a>
 800917a:	4b09      	ldr	r3, [pc, #36]	; (80091a0 <__swbuf_r+0xa0>)
 800917c:	429c      	cmp	r4, r3
 800917e:	bf08      	it	eq
 8009180:	68ec      	ldreq	r4, [r5, #12]
 8009182:	e7ca      	b.n	800911a <__swbuf_r+0x1a>
 8009184:	4621      	mov	r1, r4
 8009186:	4628      	mov	r0, r5
 8009188:	f000 f81a 	bl	80091c0 <__swsetup_r>
 800918c:	2800      	cmp	r0, #0
 800918e:	d0cb      	beq.n	8009128 <__swbuf_r+0x28>
 8009190:	f04f 37ff 	mov.w	r7, #4294967295
 8009194:	e7ea      	b.n	800916c <__swbuf_r+0x6c>
 8009196:	bf00      	nop
 8009198:	08009ca4 	.word	0x08009ca4
 800919c:	08009cc4 	.word	0x08009cc4
 80091a0:	08009c84 	.word	0x08009c84

080091a4 <__ascii_wctomb>:
 80091a4:	b149      	cbz	r1, 80091ba <__ascii_wctomb+0x16>
 80091a6:	2aff      	cmp	r2, #255	; 0xff
 80091a8:	bf85      	ittet	hi
 80091aa:	238a      	movhi	r3, #138	; 0x8a
 80091ac:	6003      	strhi	r3, [r0, #0]
 80091ae:	700a      	strbls	r2, [r1, #0]
 80091b0:	f04f 30ff 	movhi.w	r0, #4294967295
 80091b4:	bf98      	it	ls
 80091b6:	2001      	movls	r0, #1
 80091b8:	4770      	bx	lr
 80091ba:	4608      	mov	r0, r1
 80091bc:	4770      	bx	lr
	...

080091c0 <__swsetup_r>:
 80091c0:	4b32      	ldr	r3, [pc, #200]	; (800928c <__swsetup_r+0xcc>)
 80091c2:	b570      	push	{r4, r5, r6, lr}
 80091c4:	681d      	ldr	r5, [r3, #0]
 80091c6:	4606      	mov	r6, r0
 80091c8:	460c      	mov	r4, r1
 80091ca:	b125      	cbz	r5, 80091d6 <__swsetup_r+0x16>
 80091cc:	69ab      	ldr	r3, [r5, #24]
 80091ce:	b913      	cbnz	r3, 80091d6 <__swsetup_r+0x16>
 80091d0:	4628      	mov	r0, r5
 80091d2:	f000 f985 	bl	80094e0 <__sinit>
 80091d6:	4b2e      	ldr	r3, [pc, #184]	; (8009290 <__swsetup_r+0xd0>)
 80091d8:	429c      	cmp	r4, r3
 80091da:	d10f      	bne.n	80091fc <__swsetup_r+0x3c>
 80091dc:	686c      	ldr	r4, [r5, #4]
 80091de:	89a3      	ldrh	r3, [r4, #12]
 80091e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091e4:	0719      	lsls	r1, r3, #28
 80091e6:	d42c      	bmi.n	8009242 <__swsetup_r+0x82>
 80091e8:	06dd      	lsls	r5, r3, #27
 80091ea:	d411      	bmi.n	8009210 <__swsetup_r+0x50>
 80091ec:	2309      	movs	r3, #9
 80091ee:	6033      	str	r3, [r6, #0]
 80091f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80091f4:	81a3      	strh	r3, [r4, #12]
 80091f6:	f04f 30ff 	mov.w	r0, #4294967295
 80091fa:	e03e      	b.n	800927a <__swsetup_r+0xba>
 80091fc:	4b25      	ldr	r3, [pc, #148]	; (8009294 <__swsetup_r+0xd4>)
 80091fe:	429c      	cmp	r4, r3
 8009200:	d101      	bne.n	8009206 <__swsetup_r+0x46>
 8009202:	68ac      	ldr	r4, [r5, #8]
 8009204:	e7eb      	b.n	80091de <__swsetup_r+0x1e>
 8009206:	4b24      	ldr	r3, [pc, #144]	; (8009298 <__swsetup_r+0xd8>)
 8009208:	429c      	cmp	r4, r3
 800920a:	bf08      	it	eq
 800920c:	68ec      	ldreq	r4, [r5, #12]
 800920e:	e7e6      	b.n	80091de <__swsetup_r+0x1e>
 8009210:	0758      	lsls	r0, r3, #29
 8009212:	d512      	bpl.n	800923a <__swsetup_r+0x7a>
 8009214:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009216:	b141      	cbz	r1, 800922a <__swsetup_r+0x6a>
 8009218:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800921c:	4299      	cmp	r1, r3
 800921e:	d002      	beq.n	8009226 <__swsetup_r+0x66>
 8009220:	4630      	mov	r0, r6
 8009222:	f7fd fe89 	bl	8006f38 <_free_r>
 8009226:	2300      	movs	r3, #0
 8009228:	6363      	str	r3, [r4, #52]	; 0x34
 800922a:	89a3      	ldrh	r3, [r4, #12]
 800922c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009230:	81a3      	strh	r3, [r4, #12]
 8009232:	2300      	movs	r3, #0
 8009234:	6063      	str	r3, [r4, #4]
 8009236:	6923      	ldr	r3, [r4, #16]
 8009238:	6023      	str	r3, [r4, #0]
 800923a:	89a3      	ldrh	r3, [r4, #12]
 800923c:	f043 0308 	orr.w	r3, r3, #8
 8009240:	81a3      	strh	r3, [r4, #12]
 8009242:	6923      	ldr	r3, [r4, #16]
 8009244:	b94b      	cbnz	r3, 800925a <__swsetup_r+0x9a>
 8009246:	89a3      	ldrh	r3, [r4, #12]
 8009248:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800924c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009250:	d003      	beq.n	800925a <__swsetup_r+0x9a>
 8009252:	4621      	mov	r1, r4
 8009254:	4630      	mov	r0, r6
 8009256:	f000 fa05 	bl	8009664 <__smakebuf_r>
 800925a:	89a0      	ldrh	r0, [r4, #12]
 800925c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009260:	f010 0301 	ands.w	r3, r0, #1
 8009264:	d00a      	beq.n	800927c <__swsetup_r+0xbc>
 8009266:	2300      	movs	r3, #0
 8009268:	60a3      	str	r3, [r4, #8]
 800926a:	6963      	ldr	r3, [r4, #20]
 800926c:	425b      	negs	r3, r3
 800926e:	61a3      	str	r3, [r4, #24]
 8009270:	6923      	ldr	r3, [r4, #16]
 8009272:	b943      	cbnz	r3, 8009286 <__swsetup_r+0xc6>
 8009274:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009278:	d1ba      	bne.n	80091f0 <__swsetup_r+0x30>
 800927a:	bd70      	pop	{r4, r5, r6, pc}
 800927c:	0781      	lsls	r1, r0, #30
 800927e:	bf58      	it	pl
 8009280:	6963      	ldrpl	r3, [r4, #20]
 8009282:	60a3      	str	r3, [r4, #8]
 8009284:	e7f4      	b.n	8009270 <__swsetup_r+0xb0>
 8009286:	2000      	movs	r0, #0
 8009288:	e7f7      	b.n	800927a <__swsetup_r+0xba>
 800928a:	bf00      	nop
 800928c:	2000000c 	.word	0x2000000c
 8009290:	08009ca4 	.word	0x08009ca4
 8009294:	08009cc4 	.word	0x08009cc4
 8009298:	08009c84 	.word	0x08009c84

0800929c <abort>:
 800929c:	b508      	push	{r3, lr}
 800929e:	2006      	movs	r0, #6
 80092a0:	f000 fa48 	bl	8009734 <raise>
 80092a4:	2001      	movs	r0, #1
 80092a6:	f7f9 fb9f 	bl	80029e8 <_exit>
	...

080092ac <__sflush_r>:
 80092ac:	898a      	ldrh	r2, [r1, #12]
 80092ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092b2:	4605      	mov	r5, r0
 80092b4:	0710      	lsls	r0, r2, #28
 80092b6:	460c      	mov	r4, r1
 80092b8:	d458      	bmi.n	800936c <__sflush_r+0xc0>
 80092ba:	684b      	ldr	r3, [r1, #4]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	dc05      	bgt.n	80092cc <__sflush_r+0x20>
 80092c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	dc02      	bgt.n	80092cc <__sflush_r+0x20>
 80092c6:	2000      	movs	r0, #0
 80092c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092ce:	2e00      	cmp	r6, #0
 80092d0:	d0f9      	beq.n	80092c6 <__sflush_r+0x1a>
 80092d2:	2300      	movs	r3, #0
 80092d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80092d8:	682f      	ldr	r7, [r5, #0]
 80092da:	602b      	str	r3, [r5, #0]
 80092dc:	d032      	beq.n	8009344 <__sflush_r+0x98>
 80092de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80092e0:	89a3      	ldrh	r3, [r4, #12]
 80092e2:	075a      	lsls	r2, r3, #29
 80092e4:	d505      	bpl.n	80092f2 <__sflush_r+0x46>
 80092e6:	6863      	ldr	r3, [r4, #4]
 80092e8:	1ac0      	subs	r0, r0, r3
 80092ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092ec:	b10b      	cbz	r3, 80092f2 <__sflush_r+0x46>
 80092ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80092f0:	1ac0      	subs	r0, r0, r3
 80092f2:	2300      	movs	r3, #0
 80092f4:	4602      	mov	r2, r0
 80092f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092f8:	6a21      	ldr	r1, [r4, #32]
 80092fa:	4628      	mov	r0, r5
 80092fc:	47b0      	blx	r6
 80092fe:	1c43      	adds	r3, r0, #1
 8009300:	89a3      	ldrh	r3, [r4, #12]
 8009302:	d106      	bne.n	8009312 <__sflush_r+0x66>
 8009304:	6829      	ldr	r1, [r5, #0]
 8009306:	291d      	cmp	r1, #29
 8009308:	d82c      	bhi.n	8009364 <__sflush_r+0xb8>
 800930a:	4a2a      	ldr	r2, [pc, #168]	; (80093b4 <__sflush_r+0x108>)
 800930c:	40ca      	lsrs	r2, r1
 800930e:	07d6      	lsls	r6, r2, #31
 8009310:	d528      	bpl.n	8009364 <__sflush_r+0xb8>
 8009312:	2200      	movs	r2, #0
 8009314:	6062      	str	r2, [r4, #4]
 8009316:	04d9      	lsls	r1, r3, #19
 8009318:	6922      	ldr	r2, [r4, #16]
 800931a:	6022      	str	r2, [r4, #0]
 800931c:	d504      	bpl.n	8009328 <__sflush_r+0x7c>
 800931e:	1c42      	adds	r2, r0, #1
 8009320:	d101      	bne.n	8009326 <__sflush_r+0x7a>
 8009322:	682b      	ldr	r3, [r5, #0]
 8009324:	b903      	cbnz	r3, 8009328 <__sflush_r+0x7c>
 8009326:	6560      	str	r0, [r4, #84]	; 0x54
 8009328:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800932a:	602f      	str	r7, [r5, #0]
 800932c:	2900      	cmp	r1, #0
 800932e:	d0ca      	beq.n	80092c6 <__sflush_r+0x1a>
 8009330:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009334:	4299      	cmp	r1, r3
 8009336:	d002      	beq.n	800933e <__sflush_r+0x92>
 8009338:	4628      	mov	r0, r5
 800933a:	f7fd fdfd 	bl	8006f38 <_free_r>
 800933e:	2000      	movs	r0, #0
 8009340:	6360      	str	r0, [r4, #52]	; 0x34
 8009342:	e7c1      	b.n	80092c8 <__sflush_r+0x1c>
 8009344:	6a21      	ldr	r1, [r4, #32]
 8009346:	2301      	movs	r3, #1
 8009348:	4628      	mov	r0, r5
 800934a:	47b0      	blx	r6
 800934c:	1c41      	adds	r1, r0, #1
 800934e:	d1c7      	bne.n	80092e0 <__sflush_r+0x34>
 8009350:	682b      	ldr	r3, [r5, #0]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d0c4      	beq.n	80092e0 <__sflush_r+0x34>
 8009356:	2b1d      	cmp	r3, #29
 8009358:	d001      	beq.n	800935e <__sflush_r+0xb2>
 800935a:	2b16      	cmp	r3, #22
 800935c:	d101      	bne.n	8009362 <__sflush_r+0xb6>
 800935e:	602f      	str	r7, [r5, #0]
 8009360:	e7b1      	b.n	80092c6 <__sflush_r+0x1a>
 8009362:	89a3      	ldrh	r3, [r4, #12]
 8009364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009368:	81a3      	strh	r3, [r4, #12]
 800936a:	e7ad      	b.n	80092c8 <__sflush_r+0x1c>
 800936c:	690f      	ldr	r7, [r1, #16]
 800936e:	2f00      	cmp	r7, #0
 8009370:	d0a9      	beq.n	80092c6 <__sflush_r+0x1a>
 8009372:	0793      	lsls	r3, r2, #30
 8009374:	680e      	ldr	r6, [r1, #0]
 8009376:	bf08      	it	eq
 8009378:	694b      	ldreq	r3, [r1, #20]
 800937a:	600f      	str	r7, [r1, #0]
 800937c:	bf18      	it	ne
 800937e:	2300      	movne	r3, #0
 8009380:	eba6 0807 	sub.w	r8, r6, r7
 8009384:	608b      	str	r3, [r1, #8]
 8009386:	f1b8 0f00 	cmp.w	r8, #0
 800938a:	dd9c      	ble.n	80092c6 <__sflush_r+0x1a>
 800938c:	6a21      	ldr	r1, [r4, #32]
 800938e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009390:	4643      	mov	r3, r8
 8009392:	463a      	mov	r2, r7
 8009394:	4628      	mov	r0, r5
 8009396:	47b0      	blx	r6
 8009398:	2800      	cmp	r0, #0
 800939a:	dc06      	bgt.n	80093aa <__sflush_r+0xfe>
 800939c:	89a3      	ldrh	r3, [r4, #12]
 800939e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093a2:	81a3      	strh	r3, [r4, #12]
 80093a4:	f04f 30ff 	mov.w	r0, #4294967295
 80093a8:	e78e      	b.n	80092c8 <__sflush_r+0x1c>
 80093aa:	4407      	add	r7, r0
 80093ac:	eba8 0800 	sub.w	r8, r8, r0
 80093b0:	e7e9      	b.n	8009386 <__sflush_r+0xda>
 80093b2:	bf00      	nop
 80093b4:	20400001 	.word	0x20400001

080093b8 <_fflush_r>:
 80093b8:	b538      	push	{r3, r4, r5, lr}
 80093ba:	690b      	ldr	r3, [r1, #16]
 80093bc:	4605      	mov	r5, r0
 80093be:	460c      	mov	r4, r1
 80093c0:	b913      	cbnz	r3, 80093c8 <_fflush_r+0x10>
 80093c2:	2500      	movs	r5, #0
 80093c4:	4628      	mov	r0, r5
 80093c6:	bd38      	pop	{r3, r4, r5, pc}
 80093c8:	b118      	cbz	r0, 80093d2 <_fflush_r+0x1a>
 80093ca:	6983      	ldr	r3, [r0, #24]
 80093cc:	b90b      	cbnz	r3, 80093d2 <_fflush_r+0x1a>
 80093ce:	f000 f887 	bl	80094e0 <__sinit>
 80093d2:	4b14      	ldr	r3, [pc, #80]	; (8009424 <_fflush_r+0x6c>)
 80093d4:	429c      	cmp	r4, r3
 80093d6:	d11b      	bne.n	8009410 <_fflush_r+0x58>
 80093d8:	686c      	ldr	r4, [r5, #4]
 80093da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d0ef      	beq.n	80093c2 <_fflush_r+0xa>
 80093e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80093e4:	07d0      	lsls	r0, r2, #31
 80093e6:	d404      	bmi.n	80093f2 <_fflush_r+0x3a>
 80093e8:	0599      	lsls	r1, r3, #22
 80093ea:	d402      	bmi.n	80093f2 <_fflush_r+0x3a>
 80093ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093ee:	f7f9 fe9e 	bl	800312e <__retarget_lock_acquire_recursive>
 80093f2:	4628      	mov	r0, r5
 80093f4:	4621      	mov	r1, r4
 80093f6:	f7ff ff59 	bl	80092ac <__sflush_r>
 80093fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80093fc:	07da      	lsls	r2, r3, #31
 80093fe:	4605      	mov	r5, r0
 8009400:	d4e0      	bmi.n	80093c4 <_fflush_r+0xc>
 8009402:	89a3      	ldrh	r3, [r4, #12]
 8009404:	059b      	lsls	r3, r3, #22
 8009406:	d4dd      	bmi.n	80093c4 <_fflush_r+0xc>
 8009408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800940a:	f7f9 fea4 	bl	8003156 <__retarget_lock_release_recursive>
 800940e:	e7d9      	b.n	80093c4 <_fflush_r+0xc>
 8009410:	4b05      	ldr	r3, [pc, #20]	; (8009428 <_fflush_r+0x70>)
 8009412:	429c      	cmp	r4, r3
 8009414:	d101      	bne.n	800941a <_fflush_r+0x62>
 8009416:	68ac      	ldr	r4, [r5, #8]
 8009418:	e7df      	b.n	80093da <_fflush_r+0x22>
 800941a:	4b04      	ldr	r3, [pc, #16]	; (800942c <_fflush_r+0x74>)
 800941c:	429c      	cmp	r4, r3
 800941e:	bf08      	it	eq
 8009420:	68ec      	ldreq	r4, [r5, #12]
 8009422:	e7da      	b.n	80093da <_fflush_r+0x22>
 8009424:	08009ca4 	.word	0x08009ca4
 8009428:	08009cc4 	.word	0x08009cc4
 800942c:	08009c84 	.word	0x08009c84

08009430 <std>:
 8009430:	2300      	movs	r3, #0
 8009432:	b510      	push	{r4, lr}
 8009434:	4604      	mov	r4, r0
 8009436:	e9c0 3300 	strd	r3, r3, [r0]
 800943a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800943e:	6083      	str	r3, [r0, #8]
 8009440:	8181      	strh	r1, [r0, #12]
 8009442:	6643      	str	r3, [r0, #100]	; 0x64
 8009444:	81c2      	strh	r2, [r0, #14]
 8009446:	6183      	str	r3, [r0, #24]
 8009448:	4619      	mov	r1, r3
 800944a:	2208      	movs	r2, #8
 800944c:	305c      	adds	r0, #92	; 0x5c
 800944e:	f7fd fd6b 	bl	8006f28 <memset>
 8009452:	4b05      	ldr	r3, [pc, #20]	; (8009468 <std+0x38>)
 8009454:	6263      	str	r3, [r4, #36]	; 0x24
 8009456:	4b05      	ldr	r3, [pc, #20]	; (800946c <std+0x3c>)
 8009458:	62a3      	str	r3, [r4, #40]	; 0x28
 800945a:	4b05      	ldr	r3, [pc, #20]	; (8009470 <std+0x40>)
 800945c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800945e:	4b05      	ldr	r3, [pc, #20]	; (8009474 <std+0x44>)
 8009460:	6224      	str	r4, [r4, #32]
 8009462:	6323      	str	r3, [r4, #48]	; 0x30
 8009464:	bd10      	pop	{r4, pc}
 8009466:	bf00      	nop
 8009468:	0800976d 	.word	0x0800976d
 800946c:	0800978f 	.word	0x0800978f
 8009470:	080097c7 	.word	0x080097c7
 8009474:	080097eb 	.word	0x080097eb

08009478 <_cleanup_r>:
 8009478:	4901      	ldr	r1, [pc, #4]	; (8009480 <_cleanup_r+0x8>)
 800947a:	f000 b8af 	b.w	80095dc <_fwalk_reent>
 800947e:	bf00      	nop
 8009480:	080093b9 	.word	0x080093b9

08009484 <__sfmoreglue>:
 8009484:	b570      	push	{r4, r5, r6, lr}
 8009486:	1e4a      	subs	r2, r1, #1
 8009488:	2568      	movs	r5, #104	; 0x68
 800948a:	4355      	muls	r5, r2
 800948c:	460e      	mov	r6, r1
 800948e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009492:	f7fd fda1 	bl	8006fd8 <_malloc_r>
 8009496:	4604      	mov	r4, r0
 8009498:	b140      	cbz	r0, 80094ac <__sfmoreglue+0x28>
 800949a:	2100      	movs	r1, #0
 800949c:	e9c0 1600 	strd	r1, r6, [r0]
 80094a0:	300c      	adds	r0, #12
 80094a2:	60a0      	str	r0, [r4, #8]
 80094a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80094a8:	f7fd fd3e 	bl	8006f28 <memset>
 80094ac:	4620      	mov	r0, r4
 80094ae:	bd70      	pop	{r4, r5, r6, pc}

080094b0 <__sfp_lock_acquire>:
 80094b0:	4801      	ldr	r0, [pc, #4]	; (80094b8 <__sfp_lock_acquire+0x8>)
 80094b2:	f7f9 be3c 	b.w	800312e <__retarget_lock_acquire_recursive>
 80094b6:	bf00      	nop
 80094b8:	20000200 	.word	0x20000200

080094bc <__sfp_lock_release>:
 80094bc:	4801      	ldr	r0, [pc, #4]	; (80094c4 <__sfp_lock_release+0x8>)
 80094be:	f7f9 be4a 	b.w	8003156 <__retarget_lock_release_recursive>
 80094c2:	bf00      	nop
 80094c4:	20000200 	.word	0x20000200

080094c8 <__sinit_lock_acquire>:
 80094c8:	4801      	ldr	r0, [pc, #4]	; (80094d0 <__sinit_lock_acquire+0x8>)
 80094ca:	f7f9 be30 	b.w	800312e <__retarget_lock_acquire_recursive>
 80094ce:	bf00      	nop
 80094d0:	200001fc 	.word	0x200001fc

080094d4 <__sinit_lock_release>:
 80094d4:	4801      	ldr	r0, [pc, #4]	; (80094dc <__sinit_lock_release+0x8>)
 80094d6:	f7f9 be3e 	b.w	8003156 <__retarget_lock_release_recursive>
 80094da:	bf00      	nop
 80094dc:	200001fc 	.word	0x200001fc

080094e0 <__sinit>:
 80094e0:	b510      	push	{r4, lr}
 80094e2:	4604      	mov	r4, r0
 80094e4:	f7ff fff0 	bl	80094c8 <__sinit_lock_acquire>
 80094e8:	69a3      	ldr	r3, [r4, #24]
 80094ea:	b11b      	cbz	r3, 80094f4 <__sinit+0x14>
 80094ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094f0:	f7ff bff0 	b.w	80094d4 <__sinit_lock_release>
 80094f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80094f8:	6523      	str	r3, [r4, #80]	; 0x50
 80094fa:	4b13      	ldr	r3, [pc, #76]	; (8009548 <__sinit+0x68>)
 80094fc:	4a13      	ldr	r2, [pc, #76]	; (800954c <__sinit+0x6c>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	62a2      	str	r2, [r4, #40]	; 0x28
 8009502:	42a3      	cmp	r3, r4
 8009504:	bf04      	itt	eq
 8009506:	2301      	moveq	r3, #1
 8009508:	61a3      	streq	r3, [r4, #24]
 800950a:	4620      	mov	r0, r4
 800950c:	f000 f820 	bl	8009550 <__sfp>
 8009510:	6060      	str	r0, [r4, #4]
 8009512:	4620      	mov	r0, r4
 8009514:	f000 f81c 	bl	8009550 <__sfp>
 8009518:	60a0      	str	r0, [r4, #8]
 800951a:	4620      	mov	r0, r4
 800951c:	f000 f818 	bl	8009550 <__sfp>
 8009520:	2200      	movs	r2, #0
 8009522:	60e0      	str	r0, [r4, #12]
 8009524:	2104      	movs	r1, #4
 8009526:	6860      	ldr	r0, [r4, #4]
 8009528:	f7ff ff82 	bl	8009430 <std>
 800952c:	68a0      	ldr	r0, [r4, #8]
 800952e:	2201      	movs	r2, #1
 8009530:	2109      	movs	r1, #9
 8009532:	f7ff ff7d 	bl	8009430 <std>
 8009536:	68e0      	ldr	r0, [r4, #12]
 8009538:	2202      	movs	r2, #2
 800953a:	2112      	movs	r1, #18
 800953c:	f7ff ff78 	bl	8009430 <std>
 8009540:	2301      	movs	r3, #1
 8009542:	61a3      	str	r3, [r4, #24]
 8009544:	e7d2      	b.n	80094ec <__sinit+0xc>
 8009546:	bf00      	nop
 8009548:	08009900 	.word	0x08009900
 800954c:	08009479 	.word	0x08009479

08009550 <__sfp>:
 8009550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009552:	4607      	mov	r7, r0
 8009554:	f7ff ffac 	bl	80094b0 <__sfp_lock_acquire>
 8009558:	4b1e      	ldr	r3, [pc, #120]	; (80095d4 <__sfp+0x84>)
 800955a:	681e      	ldr	r6, [r3, #0]
 800955c:	69b3      	ldr	r3, [r6, #24]
 800955e:	b913      	cbnz	r3, 8009566 <__sfp+0x16>
 8009560:	4630      	mov	r0, r6
 8009562:	f7ff ffbd 	bl	80094e0 <__sinit>
 8009566:	3648      	adds	r6, #72	; 0x48
 8009568:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800956c:	3b01      	subs	r3, #1
 800956e:	d503      	bpl.n	8009578 <__sfp+0x28>
 8009570:	6833      	ldr	r3, [r6, #0]
 8009572:	b30b      	cbz	r3, 80095b8 <__sfp+0x68>
 8009574:	6836      	ldr	r6, [r6, #0]
 8009576:	e7f7      	b.n	8009568 <__sfp+0x18>
 8009578:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800957c:	b9d5      	cbnz	r5, 80095b4 <__sfp+0x64>
 800957e:	4b16      	ldr	r3, [pc, #88]	; (80095d8 <__sfp+0x88>)
 8009580:	60e3      	str	r3, [r4, #12]
 8009582:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009586:	6665      	str	r5, [r4, #100]	; 0x64
 8009588:	f7f9 fdab 	bl	80030e2 <__retarget_lock_init_recursive>
 800958c:	f7ff ff96 	bl	80094bc <__sfp_lock_release>
 8009590:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009594:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009598:	6025      	str	r5, [r4, #0]
 800959a:	61a5      	str	r5, [r4, #24]
 800959c:	2208      	movs	r2, #8
 800959e:	4629      	mov	r1, r5
 80095a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80095a4:	f7fd fcc0 	bl	8006f28 <memset>
 80095a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80095ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80095b0:	4620      	mov	r0, r4
 80095b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095b4:	3468      	adds	r4, #104	; 0x68
 80095b6:	e7d9      	b.n	800956c <__sfp+0x1c>
 80095b8:	2104      	movs	r1, #4
 80095ba:	4638      	mov	r0, r7
 80095bc:	f7ff ff62 	bl	8009484 <__sfmoreglue>
 80095c0:	4604      	mov	r4, r0
 80095c2:	6030      	str	r0, [r6, #0]
 80095c4:	2800      	cmp	r0, #0
 80095c6:	d1d5      	bne.n	8009574 <__sfp+0x24>
 80095c8:	f7ff ff78 	bl	80094bc <__sfp_lock_release>
 80095cc:	230c      	movs	r3, #12
 80095ce:	603b      	str	r3, [r7, #0]
 80095d0:	e7ee      	b.n	80095b0 <__sfp+0x60>
 80095d2:	bf00      	nop
 80095d4:	08009900 	.word	0x08009900
 80095d8:	ffff0001 	.word	0xffff0001

080095dc <_fwalk_reent>:
 80095dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095e0:	4606      	mov	r6, r0
 80095e2:	4688      	mov	r8, r1
 80095e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80095e8:	2700      	movs	r7, #0
 80095ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80095ee:	f1b9 0901 	subs.w	r9, r9, #1
 80095f2:	d505      	bpl.n	8009600 <_fwalk_reent+0x24>
 80095f4:	6824      	ldr	r4, [r4, #0]
 80095f6:	2c00      	cmp	r4, #0
 80095f8:	d1f7      	bne.n	80095ea <_fwalk_reent+0xe>
 80095fa:	4638      	mov	r0, r7
 80095fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009600:	89ab      	ldrh	r3, [r5, #12]
 8009602:	2b01      	cmp	r3, #1
 8009604:	d907      	bls.n	8009616 <_fwalk_reent+0x3a>
 8009606:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800960a:	3301      	adds	r3, #1
 800960c:	d003      	beq.n	8009616 <_fwalk_reent+0x3a>
 800960e:	4629      	mov	r1, r5
 8009610:	4630      	mov	r0, r6
 8009612:	47c0      	blx	r8
 8009614:	4307      	orrs	r7, r0
 8009616:	3568      	adds	r5, #104	; 0x68
 8009618:	e7e9      	b.n	80095ee <_fwalk_reent+0x12>

0800961a <__swhatbuf_r>:
 800961a:	b570      	push	{r4, r5, r6, lr}
 800961c:	460e      	mov	r6, r1
 800961e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009622:	2900      	cmp	r1, #0
 8009624:	b096      	sub	sp, #88	; 0x58
 8009626:	4614      	mov	r4, r2
 8009628:	461d      	mov	r5, r3
 800962a:	da07      	bge.n	800963c <__swhatbuf_r+0x22>
 800962c:	2300      	movs	r3, #0
 800962e:	602b      	str	r3, [r5, #0]
 8009630:	89b3      	ldrh	r3, [r6, #12]
 8009632:	061a      	lsls	r2, r3, #24
 8009634:	d410      	bmi.n	8009658 <__swhatbuf_r+0x3e>
 8009636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800963a:	e00e      	b.n	800965a <__swhatbuf_r+0x40>
 800963c:	466a      	mov	r2, sp
 800963e:	f000 f8fb 	bl	8009838 <_fstat_r>
 8009642:	2800      	cmp	r0, #0
 8009644:	dbf2      	blt.n	800962c <__swhatbuf_r+0x12>
 8009646:	9a01      	ldr	r2, [sp, #4]
 8009648:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800964c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009650:	425a      	negs	r2, r3
 8009652:	415a      	adcs	r2, r3
 8009654:	602a      	str	r2, [r5, #0]
 8009656:	e7ee      	b.n	8009636 <__swhatbuf_r+0x1c>
 8009658:	2340      	movs	r3, #64	; 0x40
 800965a:	2000      	movs	r0, #0
 800965c:	6023      	str	r3, [r4, #0]
 800965e:	b016      	add	sp, #88	; 0x58
 8009660:	bd70      	pop	{r4, r5, r6, pc}
	...

08009664 <__smakebuf_r>:
 8009664:	898b      	ldrh	r3, [r1, #12]
 8009666:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009668:	079d      	lsls	r5, r3, #30
 800966a:	4606      	mov	r6, r0
 800966c:	460c      	mov	r4, r1
 800966e:	d507      	bpl.n	8009680 <__smakebuf_r+0x1c>
 8009670:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009674:	6023      	str	r3, [r4, #0]
 8009676:	6123      	str	r3, [r4, #16]
 8009678:	2301      	movs	r3, #1
 800967a:	6163      	str	r3, [r4, #20]
 800967c:	b002      	add	sp, #8
 800967e:	bd70      	pop	{r4, r5, r6, pc}
 8009680:	ab01      	add	r3, sp, #4
 8009682:	466a      	mov	r2, sp
 8009684:	f7ff ffc9 	bl	800961a <__swhatbuf_r>
 8009688:	9900      	ldr	r1, [sp, #0]
 800968a:	4605      	mov	r5, r0
 800968c:	4630      	mov	r0, r6
 800968e:	f7fd fca3 	bl	8006fd8 <_malloc_r>
 8009692:	b948      	cbnz	r0, 80096a8 <__smakebuf_r+0x44>
 8009694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009698:	059a      	lsls	r2, r3, #22
 800969a:	d4ef      	bmi.n	800967c <__smakebuf_r+0x18>
 800969c:	f023 0303 	bic.w	r3, r3, #3
 80096a0:	f043 0302 	orr.w	r3, r3, #2
 80096a4:	81a3      	strh	r3, [r4, #12]
 80096a6:	e7e3      	b.n	8009670 <__smakebuf_r+0xc>
 80096a8:	4b0d      	ldr	r3, [pc, #52]	; (80096e0 <__smakebuf_r+0x7c>)
 80096aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80096ac:	89a3      	ldrh	r3, [r4, #12]
 80096ae:	6020      	str	r0, [r4, #0]
 80096b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096b4:	81a3      	strh	r3, [r4, #12]
 80096b6:	9b00      	ldr	r3, [sp, #0]
 80096b8:	6163      	str	r3, [r4, #20]
 80096ba:	9b01      	ldr	r3, [sp, #4]
 80096bc:	6120      	str	r0, [r4, #16]
 80096be:	b15b      	cbz	r3, 80096d8 <__smakebuf_r+0x74>
 80096c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096c4:	4630      	mov	r0, r6
 80096c6:	f000 f8c9 	bl	800985c <_isatty_r>
 80096ca:	b128      	cbz	r0, 80096d8 <__smakebuf_r+0x74>
 80096cc:	89a3      	ldrh	r3, [r4, #12]
 80096ce:	f023 0303 	bic.w	r3, r3, #3
 80096d2:	f043 0301 	orr.w	r3, r3, #1
 80096d6:	81a3      	strh	r3, [r4, #12]
 80096d8:	89a0      	ldrh	r0, [r4, #12]
 80096da:	4305      	orrs	r5, r0
 80096dc:	81a5      	strh	r5, [r4, #12]
 80096de:	e7cd      	b.n	800967c <__smakebuf_r+0x18>
 80096e0:	08009479 	.word	0x08009479

080096e4 <_raise_r>:
 80096e4:	291f      	cmp	r1, #31
 80096e6:	b538      	push	{r3, r4, r5, lr}
 80096e8:	4604      	mov	r4, r0
 80096ea:	460d      	mov	r5, r1
 80096ec:	d904      	bls.n	80096f8 <_raise_r+0x14>
 80096ee:	2316      	movs	r3, #22
 80096f0:	6003      	str	r3, [r0, #0]
 80096f2:	f04f 30ff 	mov.w	r0, #4294967295
 80096f6:	bd38      	pop	{r3, r4, r5, pc}
 80096f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80096fa:	b112      	cbz	r2, 8009702 <_raise_r+0x1e>
 80096fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009700:	b94b      	cbnz	r3, 8009716 <_raise_r+0x32>
 8009702:	4620      	mov	r0, r4
 8009704:	f000 f830 	bl	8009768 <_getpid_r>
 8009708:	462a      	mov	r2, r5
 800970a:	4601      	mov	r1, r0
 800970c:	4620      	mov	r0, r4
 800970e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009712:	f000 b817 	b.w	8009744 <_kill_r>
 8009716:	2b01      	cmp	r3, #1
 8009718:	d00a      	beq.n	8009730 <_raise_r+0x4c>
 800971a:	1c59      	adds	r1, r3, #1
 800971c:	d103      	bne.n	8009726 <_raise_r+0x42>
 800971e:	2316      	movs	r3, #22
 8009720:	6003      	str	r3, [r0, #0]
 8009722:	2001      	movs	r0, #1
 8009724:	e7e7      	b.n	80096f6 <_raise_r+0x12>
 8009726:	2400      	movs	r4, #0
 8009728:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800972c:	4628      	mov	r0, r5
 800972e:	4798      	blx	r3
 8009730:	2000      	movs	r0, #0
 8009732:	e7e0      	b.n	80096f6 <_raise_r+0x12>

08009734 <raise>:
 8009734:	4b02      	ldr	r3, [pc, #8]	; (8009740 <raise+0xc>)
 8009736:	4601      	mov	r1, r0
 8009738:	6818      	ldr	r0, [r3, #0]
 800973a:	f7ff bfd3 	b.w	80096e4 <_raise_r>
 800973e:	bf00      	nop
 8009740:	2000000c 	.word	0x2000000c

08009744 <_kill_r>:
 8009744:	b538      	push	{r3, r4, r5, lr}
 8009746:	4d07      	ldr	r5, [pc, #28]	; (8009764 <_kill_r+0x20>)
 8009748:	2300      	movs	r3, #0
 800974a:	4604      	mov	r4, r0
 800974c:	4608      	mov	r0, r1
 800974e:	4611      	mov	r1, r2
 8009750:	602b      	str	r3, [r5, #0]
 8009752:	f7f9 f939 	bl	80029c8 <_kill>
 8009756:	1c43      	adds	r3, r0, #1
 8009758:	d102      	bne.n	8009760 <_kill_r+0x1c>
 800975a:	682b      	ldr	r3, [r5, #0]
 800975c:	b103      	cbz	r3, 8009760 <_kill_r+0x1c>
 800975e:	6023      	str	r3, [r4, #0]
 8009760:	bd38      	pop	{r3, r4, r5, pc}
 8009762:	bf00      	nop
 8009764:	2000853c 	.word	0x2000853c

08009768 <_getpid_r>:
 8009768:	f7f9 b926 	b.w	80029b8 <_getpid>

0800976c <__sread>:
 800976c:	b510      	push	{r4, lr}
 800976e:	460c      	mov	r4, r1
 8009770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009774:	f000 f894 	bl	80098a0 <_read_r>
 8009778:	2800      	cmp	r0, #0
 800977a:	bfab      	itete	ge
 800977c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800977e:	89a3      	ldrhlt	r3, [r4, #12]
 8009780:	181b      	addge	r3, r3, r0
 8009782:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009786:	bfac      	ite	ge
 8009788:	6563      	strge	r3, [r4, #84]	; 0x54
 800978a:	81a3      	strhlt	r3, [r4, #12]
 800978c:	bd10      	pop	{r4, pc}

0800978e <__swrite>:
 800978e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009792:	461f      	mov	r7, r3
 8009794:	898b      	ldrh	r3, [r1, #12]
 8009796:	05db      	lsls	r3, r3, #23
 8009798:	4605      	mov	r5, r0
 800979a:	460c      	mov	r4, r1
 800979c:	4616      	mov	r6, r2
 800979e:	d505      	bpl.n	80097ac <__swrite+0x1e>
 80097a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097a4:	2302      	movs	r3, #2
 80097a6:	2200      	movs	r2, #0
 80097a8:	f000 f868 	bl	800987c <_lseek_r>
 80097ac:	89a3      	ldrh	r3, [r4, #12]
 80097ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097b6:	81a3      	strh	r3, [r4, #12]
 80097b8:	4632      	mov	r2, r6
 80097ba:	463b      	mov	r3, r7
 80097bc:	4628      	mov	r0, r5
 80097be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097c2:	f000 b817 	b.w	80097f4 <_write_r>

080097c6 <__sseek>:
 80097c6:	b510      	push	{r4, lr}
 80097c8:	460c      	mov	r4, r1
 80097ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097ce:	f000 f855 	bl	800987c <_lseek_r>
 80097d2:	1c43      	adds	r3, r0, #1
 80097d4:	89a3      	ldrh	r3, [r4, #12]
 80097d6:	bf15      	itete	ne
 80097d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80097da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80097de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80097e2:	81a3      	strheq	r3, [r4, #12]
 80097e4:	bf18      	it	ne
 80097e6:	81a3      	strhne	r3, [r4, #12]
 80097e8:	bd10      	pop	{r4, pc}

080097ea <__sclose>:
 80097ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097ee:	f000 b813 	b.w	8009818 <_close_r>
	...

080097f4 <_write_r>:
 80097f4:	b538      	push	{r3, r4, r5, lr}
 80097f6:	4d07      	ldr	r5, [pc, #28]	; (8009814 <_write_r+0x20>)
 80097f8:	4604      	mov	r4, r0
 80097fa:	4608      	mov	r0, r1
 80097fc:	4611      	mov	r1, r2
 80097fe:	2200      	movs	r2, #0
 8009800:	602a      	str	r2, [r5, #0]
 8009802:	461a      	mov	r2, r3
 8009804:	f7f9 f917 	bl	8002a36 <_write>
 8009808:	1c43      	adds	r3, r0, #1
 800980a:	d102      	bne.n	8009812 <_write_r+0x1e>
 800980c:	682b      	ldr	r3, [r5, #0]
 800980e:	b103      	cbz	r3, 8009812 <_write_r+0x1e>
 8009810:	6023      	str	r3, [r4, #0]
 8009812:	bd38      	pop	{r3, r4, r5, pc}
 8009814:	2000853c 	.word	0x2000853c

08009818 <_close_r>:
 8009818:	b538      	push	{r3, r4, r5, lr}
 800981a:	4d06      	ldr	r5, [pc, #24]	; (8009834 <_close_r+0x1c>)
 800981c:	2300      	movs	r3, #0
 800981e:	4604      	mov	r4, r0
 8009820:	4608      	mov	r0, r1
 8009822:	602b      	str	r3, [r5, #0]
 8009824:	f7f9 f923 	bl	8002a6e <_close>
 8009828:	1c43      	adds	r3, r0, #1
 800982a:	d102      	bne.n	8009832 <_close_r+0x1a>
 800982c:	682b      	ldr	r3, [r5, #0]
 800982e:	b103      	cbz	r3, 8009832 <_close_r+0x1a>
 8009830:	6023      	str	r3, [r4, #0]
 8009832:	bd38      	pop	{r3, r4, r5, pc}
 8009834:	2000853c 	.word	0x2000853c

08009838 <_fstat_r>:
 8009838:	b538      	push	{r3, r4, r5, lr}
 800983a:	4d07      	ldr	r5, [pc, #28]	; (8009858 <_fstat_r+0x20>)
 800983c:	2300      	movs	r3, #0
 800983e:	4604      	mov	r4, r0
 8009840:	4608      	mov	r0, r1
 8009842:	4611      	mov	r1, r2
 8009844:	602b      	str	r3, [r5, #0]
 8009846:	f7f9 f91e 	bl	8002a86 <_fstat>
 800984a:	1c43      	adds	r3, r0, #1
 800984c:	d102      	bne.n	8009854 <_fstat_r+0x1c>
 800984e:	682b      	ldr	r3, [r5, #0]
 8009850:	b103      	cbz	r3, 8009854 <_fstat_r+0x1c>
 8009852:	6023      	str	r3, [r4, #0]
 8009854:	bd38      	pop	{r3, r4, r5, pc}
 8009856:	bf00      	nop
 8009858:	2000853c 	.word	0x2000853c

0800985c <_isatty_r>:
 800985c:	b538      	push	{r3, r4, r5, lr}
 800985e:	4d06      	ldr	r5, [pc, #24]	; (8009878 <_isatty_r+0x1c>)
 8009860:	2300      	movs	r3, #0
 8009862:	4604      	mov	r4, r0
 8009864:	4608      	mov	r0, r1
 8009866:	602b      	str	r3, [r5, #0]
 8009868:	f7f9 f91d 	bl	8002aa6 <_isatty>
 800986c:	1c43      	adds	r3, r0, #1
 800986e:	d102      	bne.n	8009876 <_isatty_r+0x1a>
 8009870:	682b      	ldr	r3, [r5, #0]
 8009872:	b103      	cbz	r3, 8009876 <_isatty_r+0x1a>
 8009874:	6023      	str	r3, [r4, #0]
 8009876:	bd38      	pop	{r3, r4, r5, pc}
 8009878:	2000853c 	.word	0x2000853c

0800987c <_lseek_r>:
 800987c:	b538      	push	{r3, r4, r5, lr}
 800987e:	4d07      	ldr	r5, [pc, #28]	; (800989c <_lseek_r+0x20>)
 8009880:	4604      	mov	r4, r0
 8009882:	4608      	mov	r0, r1
 8009884:	4611      	mov	r1, r2
 8009886:	2200      	movs	r2, #0
 8009888:	602a      	str	r2, [r5, #0]
 800988a:	461a      	mov	r2, r3
 800988c:	f7f9 f916 	bl	8002abc <_lseek>
 8009890:	1c43      	adds	r3, r0, #1
 8009892:	d102      	bne.n	800989a <_lseek_r+0x1e>
 8009894:	682b      	ldr	r3, [r5, #0]
 8009896:	b103      	cbz	r3, 800989a <_lseek_r+0x1e>
 8009898:	6023      	str	r3, [r4, #0]
 800989a:	bd38      	pop	{r3, r4, r5, pc}
 800989c:	2000853c 	.word	0x2000853c

080098a0 <_read_r>:
 80098a0:	b538      	push	{r3, r4, r5, lr}
 80098a2:	4d07      	ldr	r5, [pc, #28]	; (80098c0 <_read_r+0x20>)
 80098a4:	4604      	mov	r4, r0
 80098a6:	4608      	mov	r0, r1
 80098a8:	4611      	mov	r1, r2
 80098aa:	2200      	movs	r2, #0
 80098ac:	602a      	str	r2, [r5, #0]
 80098ae:	461a      	mov	r2, r3
 80098b0:	f7f9 f8a4 	bl	80029fc <_read>
 80098b4:	1c43      	adds	r3, r0, #1
 80098b6:	d102      	bne.n	80098be <_read_r+0x1e>
 80098b8:	682b      	ldr	r3, [r5, #0]
 80098ba:	b103      	cbz	r3, 80098be <_read_r+0x1e>
 80098bc:	6023      	str	r3, [r4, #0]
 80098be:	bd38      	pop	{r3, r4, r5, pc}
 80098c0:	2000853c 	.word	0x2000853c

080098c4 <_init>:
 80098c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098c6:	bf00      	nop
 80098c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ca:	bc08      	pop	{r3}
 80098cc:	469e      	mov	lr, r3
 80098ce:	4770      	bx	lr

080098d0 <_fini>:
 80098d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098d2:	bf00      	nop
 80098d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098d6:	bc08      	pop	{r3}
 80098d8:	469e      	mov	lr, r3
 80098da:	4770      	bx	lr
