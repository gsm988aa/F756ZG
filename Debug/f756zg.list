
f756zg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d54  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08009f28  08009f28  00019f28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a354  0800a354  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a354  0800a354  0001a354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a35c  0800a35c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a35c  0800a35c  0001a35c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a360  0800a360  0001a360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000083a4  200001e0  0800a544  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008584  0800a544  00028584  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014ded  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fb2  00000000  00000000  00034ffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  00037fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f88  00000000  00000000  00039080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028c9e  00000000  00000000  0003a008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014728  00000000  00000000  00062ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9fc2  00000000  00000000  000773ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00171390  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000544c  00000000  00000000  001713e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009f0c 	.word	0x08009f0c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08009f0c 	.word	0x08009f0c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ef2:	4b21      	ldr	r3, [pc, #132]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000ef4:	4a21      	ldr	r2, [pc, #132]	; (8000f7c <MX_ADC1_Init+0x9c>)
 8000ef6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000ef8:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000efa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000efe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f00:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f06:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f0c:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f0e:	2201      	movs	r2, #1
 8000f10:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f12:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f1a:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f20:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f22:	4a17      	ldr	r2, [pc, #92]	; (8000f80 <MX_ADC1_Init+0xa0>)
 8000f24:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f40:	480d      	ldr	r0, [pc, #52]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f42:	f001 ffa7 	bl	8002e94 <HAL_ADC_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f4c:	f001 f9c8 	bl	80022e0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f54:	2301      	movs	r3, #1
 8000f56:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000f58:	2307      	movs	r3, #7
 8000f5a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4805      	ldr	r0, [pc, #20]	; (8000f78 <MX_ADC1_Init+0x98>)
 8000f62:	f001 ffdb 	bl	8002f1c <HAL_ADC_ConfigChannel>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f6c:	f001 f9b8 	bl	80022e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f70:	bf00      	nop
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000214 	.word	0x20000214
 8000f7c:	40012000 	.word	0x40012000
 8000f80:	0f000001 	.word	0x0f000001

08000f84 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a2d      	ldr	r2, [pc, #180]	; (8001058 <HAL_ADC_MspInit+0xd4>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d153      	bne.n	800104e <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fa6:	4b2d      	ldr	r3, [pc, #180]	; (800105c <HAL_ADC_MspInit+0xd8>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	4a2c      	ldr	r2, [pc, #176]	; (800105c <HAL_ADC_MspInit+0xd8>)
 8000fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb2:	4b2a      	ldr	r3, [pc, #168]	; (800105c <HAL_ADC_MspInit+0xd8>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	4b27      	ldr	r3, [pc, #156]	; (800105c <HAL_ADC_MspInit+0xd8>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	4a26      	ldr	r2, [pc, #152]	; (800105c <HAL_ADC_MspInit+0xd8>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fca:	4b24      	ldr	r3, [pc, #144]	; (800105c <HAL_ADC_MspInit+0xd8>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	481d      	ldr	r0, [pc, #116]	; (8001060 <HAL_ADC_MspInit+0xdc>)
 8000fea:	f002 fe69 	bl	8003cc0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000fee:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8000ff0:	4a1d      	ldr	r2, [pc, #116]	; (8001068 <HAL_ADC_MspInit+0xe4>)
 8000ff2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ffa:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001000:	4b18      	ldr	r3, [pc, #96]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001006:	4b17      	ldr	r3, [pc, #92]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8001008:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800100c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8001010:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001014:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001016:	4b13      	ldr	r3, [pc, #76]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8001018:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800101c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8001020:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001024:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8001028:	2200      	movs	r2, #0
 800102a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800102c:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 800102e:	2200      	movs	r2, #0
 8001030:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001032:	480c      	ldr	r0, [pc, #48]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8001034:	f002 fac8 	bl	80035c8 <HAL_DMA_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 800103e:	f001 f94f 	bl	80022e0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a07      	ldr	r2, [pc, #28]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 8001046:	639a      	str	r2, [r3, #56]	; 0x38
 8001048:	4a06      	ldr	r2, [pc, #24]	; (8001064 <HAL_ADC_MspInit+0xe0>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800104e:	bf00      	nop
 8001050:	3728      	adds	r7, #40	; 0x28
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40012000 	.word	0x40012000
 800105c:	40023800 	.word	0x40023800
 8001060:	40020000 	.word	0x40020000
 8001064:	2000025c 	.word	0x2000025c
 8001068:	40026410 	.word	0x40026410

0800106c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001072:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <MX_DMA_Init+0x38>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a0b      	ldr	r2, [pc, #44]	; (80010a4 <MX_DMA_Init+0x38>)
 8001078:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MX_DMA_Init+0x38>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2100      	movs	r1, #0
 800108e:	2038      	movs	r0, #56	; 0x38
 8001090:	f002 fa63 	bl	800355a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001094:	2038      	movs	r0, #56	; 0x38
 8001096:	f002 fa7c 	bl	8003592 <HAL_NVIC_EnableIRQ>

}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800

080010a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010be:	4b53      	ldr	r3, [pc, #332]	; (800120c <MX_GPIO_Init+0x164>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a52      	ldr	r2, [pc, #328]	; (800120c <MX_GPIO_Init+0x164>)
 80010c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b50      	ldr	r3, [pc, #320]	; (800120c <MX_GPIO_Init+0x164>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	4b4d      	ldr	r3, [pc, #308]	; (800120c <MX_GPIO_Init+0x164>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a4c      	ldr	r2, [pc, #304]	; (800120c <MX_GPIO_Init+0x164>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b4a      	ldr	r3, [pc, #296]	; (800120c <MX_GPIO_Init+0x164>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ee:	4b47      	ldr	r3, [pc, #284]	; (800120c <MX_GPIO_Init+0x164>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a46      	ldr	r2, [pc, #280]	; (800120c <MX_GPIO_Init+0x164>)
 80010f4:	f043 0302 	orr.w	r3, r3, #2
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b44      	ldr	r3, [pc, #272]	; (800120c <MX_GPIO_Init+0x164>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	60bb      	str	r3, [r7, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001106:	4b41      	ldr	r3, [pc, #260]	; (800120c <MX_GPIO_Init+0x164>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a40      	ldr	r2, [pc, #256]	; (800120c <MX_GPIO_Init+0x164>)
 800110c:	f043 0308 	orr.w	r3, r3, #8
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b3e      	ldr	r3, [pc, #248]	; (800120c <MX_GPIO_Init+0x164>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0308 	and.w	r3, r3, #8
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001124:	483a      	ldr	r0, [pc, #232]	; (8001210 <MX_GPIO_Init+0x168>)
 8001126:	f002 ff8f 	bl	8004048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	21f0      	movs	r1, #240	; 0xf0
 800112e:	4839      	ldr	r0, [pc, #228]	; (8001214 <MX_GPIO_Init+0x16c>)
 8001130:	f002 ff8a 	bl	8004048 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD8 PD9 PD12 PD13
                           PD14 PD15 PD4 PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12|GPIO_PIN_13
 8001134:	f24f 3330 	movw	r3, #62256	; 0xf330
 8001138:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800113a:	2300      	movs	r3, #0
 800113c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800113e:	2302      	movs	r3, #2
 8001140:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	4619      	mov	r1, r3
 8001148:	4833      	ldr	r0, [pc, #204]	; (8001218 <MX_GPIO_Init+0x170>)
 800114a:	f002 fdb9 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD0 PD1
                           PD2 PD3 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_0|GPIO_PIN_1
 800114e:	f640 43cf 	movw	r3, #3279	; 0xccf
 8001152:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001154:	4b31      	ldr	r3, [pc, #196]	; (800121c <MX_GPIO_Init+0x174>)
 8001156:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001158:	2302      	movs	r3, #2
 800115a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	4619      	mov	r1, r3
 8001162:	482d      	ldr	r0, [pc, #180]	; (8001218 <MX_GPIO_Init+0x170>)
 8001164:	f002 fdac 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001168:	f44f 7380 	mov.w	r3, #256	; 0x100
 800116c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116e:	2301      	movs	r3, #1
 8001170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4619      	mov	r1, r3
 8001180:	4823      	ldr	r0, [pc, #140]	; (8001210 <MX_GPIO_Init+0x168>)
 8001182:	f002 fd9d 	bl	8003cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001186:	23f0      	movs	r3, #240	; 0xf0
 8001188:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118a:	2301      	movs	r3, #1
 800118c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2300      	movs	r3, #0
 8001194:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	4619      	mov	r1, r3
 800119c:	481d      	ldr	r0, [pc, #116]	; (8001214 <MX_GPIO_Init+0x16c>)
 800119e:	f002 fd8f 	bl	8003cc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2102      	movs	r1, #2
 80011a6:	2006      	movs	r0, #6
 80011a8:	f002 f9d7 	bl	800355a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011ac:	2006      	movs	r0, #6
 80011ae:	f002 f9f0 	bl	8003592 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2102      	movs	r1, #2
 80011b6:	2007      	movs	r0, #7
 80011b8:	f002 f9cf 	bl	800355a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80011bc:	2007      	movs	r0, #7
 80011be:	f002 f9e8 	bl	8003592 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2102      	movs	r1, #2
 80011c6:	2008      	movs	r0, #8
 80011c8:	f002 f9c7 	bl	800355a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80011cc:	2008      	movs	r0, #8
 80011ce:	f002 f9e0 	bl	8003592 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2102      	movs	r1, #2
 80011d6:	2009      	movs	r0, #9
 80011d8:	f002 f9bf 	bl	800355a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80011dc:	2009      	movs	r0, #9
 80011de:	f002 f9d8 	bl	8003592 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2102      	movs	r1, #2
 80011e6:	2017      	movs	r0, #23
 80011e8:	f002 f9b7 	bl	800355a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011ec:	2017      	movs	r0, #23
 80011ee:	f002 f9d0 	bl	8003592 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2102      	movs	r1, #2
 80011f6:	2028      	movs	r0, #40	; 0x28
 80011f8:	f002 f9af 	bl	800355a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011fc:	2028      	movs	r0, #40	; 0x28
 80011fe:	f002 f9c8 	bl	8003592 <HAL_NVIC_EnableIRQ>

}
 8001202:	bf00      	nop
 8001204:	3728      	adds	r7, #40	; 0x28
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40023800 	.word	0x40023800
 8001210:	40020000 	.word	0x40020000
 8001214:	40020400 	.word	0x40020400
 8001218:	40020c00 	.word	0x40020c00
 800121c:	10210000 	.word	0x10210000

08001220 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001228:	1d39      	adds	r1, r7, #4
 800122a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800122e:	2201      	movs	r2, #1
 8001230:	4803      	ldr	r0, [pc, #12]	; (8001240 <__io_putchar+0x20>)
 8001232:	f005 f90d 	bl	8006450 <HAL_UART_Transmit>
  return ch;
 8001236:	687b      	ldr	r3, [r7, #4]
}
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	200084f8 	.word	0x200084f8

08001244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001248:	f001 fda3 	bl	8002d92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800124c:	f000 f946 	bl	80014dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001250:	f7ff ff2a 	bl	80010a8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001254:	f001 fbdc 	bl	8002a10 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8001258:	f7ff ff08 	bl	800106c <MX_DMA_Init>
  MX_ADC1_Init();
 800125c:	f7ff fe40 	bl	8000ee0 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001260:	f001 f9d8 	bl	8002614 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001264:	f001 fa3e 	bl	80026e4 <MX_TIM4_Init>
  MX_TIM14_Init();
 8001268:	f001 fadc 	bl	8002824 <MX_TIM14_Init>
  MX_TIM6_Init();
 800126c:	f001 faa2 	bl	80027b4 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8001270:	f001 fbfe 	bl	8002a70 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001274:	f000 f9c4 	bl	8001600 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

  //  HAL_ADC_Start(&hadc1);//启动ADC装换
  //  HAL_ADC_PollForConversion(&hadc1, 10);
  //PB0    PB1
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); //A03  底盘车电�????????????????????  �????????????????????个触�????????????????????
 8001278:	2108      	movs	r1, #8
 800127a:	488c      	ldr	r0, [pc, #560]	; (80014ac <main+0x268>)
 800127c:	f004 f8f8 	bl	8005470 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001280:	4b8a      	ldr	r3, [pc, #552]	; (80014ac <main+0x268>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2200      	movs	r2, #0
 8001286:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); //A04 底盘车电�???????????????????? 另一个触�????????????????????
 8001288:	210c      	movs	r1, #12
 800128a:	4888      	ldr	r0, [pc, #544]	; (80014ac <main+0x268>)
 800128c:	f004 f8f0 	bl	8005470 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001290:	4b86      	ldr	r3, [pc, #536]	; (80014ac <main+0x268>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2200      	movs	r2, #0
 8001296:	641a      	str	r2, [r3, #64]	; 0x40
  //PB8    PB9
  // // HAL_TIM_PWM_Stop();
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); //A05 接地�????????????????????电机 �????????????????????个触�????????????????????
 8001298:	2108      	movs	r1, #8
 800129a:	4885      	ldr	r0, [pc, #532]	; (80014b0 <main+0x26c>)
 800129c:	f004 f8e8 	bl	8005470 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 80012a0:	4b83      	ldr	r3, [pc, #524]	; (80014b0 <main+0x26c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2200      	movs	r2, #0
 80012a6:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //A06 接地�????????????????????电机 另一个触�????????????????????
 80012a8:	210c      	movs	r1, #12
 80012aa:	4881      	ldr	r0, [pc, #516]	; (80014b0 <main+0x26c>)
 80012ac:	f004 f8e0 	bl	8005470 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 80012b0:	4b7f      	ldr	r3, [pc, #508]	; (80014b0 <main+0x26c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2200      	movs	r2, #0
 80012b6:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); //A07 储能电机
 80012b8:	2200      	movs	r2, #0
 80012ba:	2110      	movs	r1, #16
 80012bc:	487d      	ldr	r0, [pc, #500]	; (80014b4 <main+0x270>)
 80012be:	f002 fec3 	bl	8004048 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); //A09 分闸线圈
 80012c2:	2200      	movs	r2, #0
 80012c4:	2120      	movs	r1, #32
 80012c6:	487b      	ldr	r0, [pc, #492]	; (80014b4 <main+0x270>)
 80012c8:	f002 febe 	bl	8004048 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); //A10 合闸线圈
 80012cc:	2200      	movs	r2, #0
 80012ce:	2140      	movs	r1, #64	; 0x40
 80012d0:	4878      	ldr	r0, [pc, #480]	; (80014b4 <main+0x270>)
 80012d2:	f002 feb9 	bl	8004048 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); //A11 继电器合�????????????????????
 80012d6:	2200      	movs	r2, #0
 80012d8:	2180      	movs	r1, #128	; 0x80
 80012da:	4876      	ldr	r0, [pc, #472]	; (80014b4 <main+0x270>)
 80012dc:	f002 feb4 	bl	8004048 <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT(&huart1,aRxBuffer1,1);			// Enable the USART1 Interrupt
 80012e0:	2201      	movs	r2, #1
 80012e2:	4975      	ldr	r1, [pc, #468]	; (80014b8 <main+0x274>)
 80012e4:	4875      	ldr	r0, [pc, #468]	; (80014bc <main+0x278>)
 80012e6:	f005 f946 	bl	8006576 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2,aRxBuffer2,1);			// Enable the USART2 Interrupt
 80012ea:	2201      	movs	r2, #1
 80012ec:	4974      	ldr	r1, [pc, #464]	; (80014c0 <main+0x27c>)
 80012ee:	4875      	ldr	r0, [pc, #468]	; (80014c4 <main+0x280>)
 80012f0:	f005 f941 	bl	8006576 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart1,aTxBuffer,sizeof(aTxBuffer),100);
 80012f4:	2364      	movs	r3, #100	; 0x64
 80012f6:	2201      	movs	r2, #1
 80012f8:	4973      	ldr	r1, [pc, #460]	; (80014c8 <main+0x284>)
 80012fa:	4870      	ldr	r0, [pc, #448]	; (80014bc <main+0x278>)
 80012fc:	f005 f8a8 	bl	8006450 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2,aTxBuffer,sizeof(aTxBuffer),100);
 8001300:	2364      	movs	r3, #100	; 0x64
 8001302:	2201      	movs	r2, #1
 8001304:	4970      	ldr	r1, [pc, #448]	; (80014c8 <main+0x284>)
 8001306:	486f      	ldr	r0, [pc, #444]	; (80014c4 <main+0x280>)
 8001308:	f005 f8a2 	bl	8006450 <HAL_UART_Transmit>
	HAL_TIM_Base_Start_IT(&htim6);						// 启动定时�???3
 800130c:	486f      	ldr	r0, [pc, #444]	; (80014cc <main+0x288>)
 800130e:	f003 ffdf 	bl	80052d0 <HAL_TIM_Base_Start_IT>
  {
    //	  Delay_ms(1000);
    //     statesum = statesum+1;
    //     printf("%d\n",statesum);

    pbx[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0); //A08 储能电机辅助按钮 要和 A27弹簧未储能按钮配�????????????????????       重要4   [按钮  外部中断]
 8001312:	2101      	movs	r1, #1
 8001314:	4867      	ldr	r0, [pc, #412]	; (80014b4 <main+0x270>)
 8001316:	f002 fe7f 	bl	8004018 <HAL_GPIO_ReadPin>
 800131a:	4603      	mov	r3, r0
 800131c:	461a      	mov	r2, r3
 800131e:	4b6c      	ldr	r3, [pc, #432]	; (80014d0 <main+0x28c>)
 8001320:	601a      	str	r2, [r3, #0]
    pbx[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1); //A12 手动分闸按钮  A21 遥控分闸出口                   重要1    [按钮  外部中断]
 8001322:	2102      	movs	r1, #2
 8001324:	4863      	ldr	r0, [pc, #396]	; (80014b4 <main+0x270>)
 8001326:	f002 fe77 	bl	8004018 <HAL_GPIO_ReadPin>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b68      	ldr	r3, [pc, #416]	; (80014d0 <main+0x28c>)
 8001330:	605a      	str	r2, [r3, #4]
    pbx[2] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2); //A13 保护分闸按钮                                    重要2    [按钮  外部中断]
 8001332:	2104      	movs	r1, #4
 8001334:	485f      	ldr	r0, [pc, #380]	; (80014b4 <main+0x270>)
 8001336:	f002 fe6f 	bl	8004018 <HAL_GPIO_ReadPin>
 800133a:	4603      	mov	r3, r0
 800133c:	461a      	mov	r2, r3
 800133e:	4b64      	ldr	r3, [pc, #400]	; (80014d0 <main+0x28c>)
 8001340:	609a      	str	r2, [r3, #8]
    pbx[3] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3); //A14合闸按钮                                         重要5    [按钮  外部中断]
 8001342:	2108      	movs	r1, #8
 8001344:	485b      	ldr	r0, [pc, #364]	; (80014b4 <main+0x270>)
 8001346:	f002 fe67 	bl	8004018 <HAL_GPIO_ReadPin>
 800134a:	4603      	mov	r3, r0
 800134c:	461a      	mov	r2, r3
 800134e:	4b60      	ldr	r3, [pc, #384]	; (80014d0 <main+0x28c>)
 8001350:	60da      	str	r2, [r3, #12]
    pbx[4] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4); //A23底盘车试验位�????????????????????                 {状�?�}
 8001352:	2110      	movs	r1, #16
 8001354:	4857      	ldr	r0, [pc, #348]	; (80014b4 <main+0x270>)
 8001356:	f002 fe5f 	bl	8004018 <HAL_GPIO_ReadPin>
 800135a:	4603      	mov	r3, r0
 800135c:	461a      	mov	r2, r3
 800135e:	4b5c      	ldr	r3, [pc, #368]	; (80014d0 <main+0x28c>)
 8001360:	611a      	str	r2, [r3, #16]
    pbx[5] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5); //A24底盘车工作位�????????????????????                 {状�?�}
 8001362:	2120      	movs	r1, #32
 8001364:	4853      	ldr	r0, [pc, #332]	; (80014b4 <main+0x270>)
 8001366:	f002 fe57 	bl	8004018 <HAL_GPIO_ReadPin>
 800136a:	4603      	mov	r3, r0
 800136c:	461a      	mov	r2, r3
 800136e:	4b58      	ldr	r3, [pc, #352]	; (80014d0 <main+0x28c>)
 8001370:	615a      	str	r2, [r3, #20]
    pbx[6] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6); //A25底盘车遥进按钮手�????????????????????                                重要6    [按钮  外部中断]
 8001372:	2140      	movs	r1, #64	; 0x40
 8001374:	484f      	ldr	r0, [pc, #316]	; (80014b4 <main+0x270>)
 8001376:	f002 fe4f 	bl	8004018 <HAL_GPIO_ReadPin>
 800137a:	4603      	mov	r3, r0
 800137c:	461a      	mov	r2, r3
 800137e:	4b54      	ldr	r3, [pc, #336]	; (80014d0 <main+0x28c>)
 8001380:	619a      	str	r2, [r3, #24]
    pbx[7] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7); //A26底盘车遥出按钮手�????????????????????                                重要7    [按钮  外部中断]
 8001382:	2180      	movs	r1, #128	; 0x80
 8001384:	484b      	ldr	r0, [pc, #300]	; (80014b4 <main+0x270>)
 8001386:	f002 fe47 	bl	8004018 <HAL_GPIO_ReadPin>
 800138a:	4603      	mov	r3, r0
 800138c:	461a      	mov	r2, r3
 800138e:	4b50      	ldr	r3, [pc, #320]	; (80014d0 <main+0x28c>)
 8001390:	61da      	str	r2, [r3, #28]

    pdx[0] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0);   //A08 储能电机辅助按钮 要和 A27弹簧未储能按钮配�????????????????????       重要4   [按钮  外部中断]
 8001392:	2101      	movs	r1, #1
 8001394:	484f      	ldr	r0, [pc, #316]	; (80014d4 <main+0x290>)
 8001396:	f002 fe3f 	bl	8004018 <HAL_GPIO_ReadPin>
 800139a:	4603      	mov	r3, r0
 800139c:	461a      	mov	r2, r3
 800139e:	4b4e      	ldr	r3, [pc, #312]	; (80014d8 <main+0x294>)
 80013a0:	601a      	str	r2, [r3, #0]
    pdx[1] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);   //A12 手动分闸按钮  A21 遥控分闸出口                   重要1    [按钮  外部中断]
 80013a2:	2102      	movs	r1, #2
 80013a4:	484b      	ldr	r0, [pc, #300]	; (80014d4 <main+0x290>)
 80013a6:	f002 fe37 	bl	8004018 <HAL_GPIO_ReadPin>
 80013aa:	4603      	mov	r3, r0
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b4a      	ldr	r3, [pc, #296]	; (80014d8 <main+0x294>)
 80013b0:	605a      	str	r2, [r3, #4]
    pdx[2] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2);   //A13 保护分闸按钮                                    重要2    [按钮  外部中断]
 80013b2:	2104      	movs	r1, #4
 80013b4:	4847      	ldr	r0, [pc, #284]	; (80014d4 <main+0x290>)
 80013b6:	f002 fe2f 	bl	8004018 <HAL_GPIO_ReadPin>
 80013ba:	4603      	mov	r3, r0
 80013bc:	461a      	mov	r2, r3
 80013be:	4b46      	ldr	r3, [pc, #280]	; (80014d8 <main+0x294>)
 80013c0:	609a      	str	r2, [r3, #8]
    pdx[3] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3);   //A14合闸按钮                                         重要5    [按钮  外部中断]
 80013c2:	2108      	movs	r1, #8
 80013c4:	4843      	ldr	r0, [pc, #268]	; (80014d4 <main+0x290>)
 80013c6:	f002 fe27 	bl	8004018 <HAL_GPIO_ReadPin>
 80013ca:	4603      	mov	r3, r0
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b42      	ldr	r3, [pc, #264]	; (80014d8 <main+0x294>)
 80013d0:	60da      	str	r2, [r3, #12]
    pdx[4] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4);   //A23底盘车试验位�????????????????????                 {状�?�}
 80013d2:	2110      	movs	r1, #16
 80013d4:	483f      	ldr	r0, [pc, #252]	; (80014d4 <main+0x290>)
 80013d6:	f002 fe1f 	bl	8004018 <HAL_GPIO_ReadPin>
 80013da:	4603      	mov	r3, r0
 80013dc:	461a      	mov	r2, r3
 80013de:	4b3e      	ldr	r3, [pc, #248]	; (80014d8 <main+0x294>)
 80013e0:	611a      	str	r2, [r3, #16]
    pdx[5] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5);   //A24底盘车工作位�????????????????????                 {状�?�}
 80013e2:	2120      	movs	r1, #32
 80013e4:	483b      	ldr	r0, [pc, #236]	; (80014d4 <main+0x290>)
 80013e6:	f002 fe17 	bl	8004018 <HAL_GPIO_ReadPin>
 80013ea:	4603      	mov	r3, r0
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b3a      	ldr	r3, [pc, #232]	; (80014d8 <main+0x294>)
 80013f0:	615a      	str	r2, [r3, #20]
    pdx[6] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_6);   //A25底盘车遥进按钮手�????????????????????                                重要6    [按钮  外部中断]
 80013f2:	2140      	movs	r1, #64	; 0x40
 80013f4:	4837      	ldr	r0, [pc, #220]	; (80014d4 <main+0x290>)
 80013f6:	f002 fe0f 	bl	8004018 <HAL_GPIO_ReadPin>
 80013fa:	4603      	mov	r3, r0
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b36      	ldr	r3, [pc, #216]	; (80014d8 <main+0x294>)
 8001400:	619a      	str	r2, [r3, #24]
    pdx[7] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7);   //A26底盘车遥出按钮手�????????????????????                                重要7    [按钮  外部中断]
 8001402:	2180      	movs	r1, #128	; 0x80
 8001404:	4833      	ldr	r0, [pc, #204]	; (80014d4 <main+0x290>)
 8001406:	f002 fe07 	bl	8004018 <HAL_GPIO_ReadPin>
 800140a:	4603      	mov	r3, r0
 800140c:	461a      	mov	r2, r3
 800140e:	4b32      	ldr	r3, [pc, #200]	; (80014d8 <main+0x294>)
 8001410:	61da      	str	r2, [r3, #28]
    pdx[8] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);   //A27弹簧未储�????????????????????                     {状�?�}
 8001412:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001416:	482f      	ldr	r0, [pc, #188]	; (80014d4 <main+0x290>)
 8001418:	f002 fdfe 	bl	8004018 <HAL_GPIO_ReadPin>
 800141c:	4603      	mov	r3, r0
 800141e:	461a      	mov	r2, r3
 8001420:	4b2d      	ldr	r3, [pc, #180]	; (80014d8 <main+0x294>)
 8001422:	621a      	str	r2, [r3, #32]
    pdx[9] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9);   //A29遥控允许                       {状�?�}
 8001424:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001428:	482a      	ldr	r0, [pc, #168]	; (80014d4 <main+0x290>)
 800142a:	f002 fdf5 	bl	8004018 <HAL_GPIO_ReadPin>
 800142e:	4603      	mov	r3, r0
 8001430:	461a      	mov	r2, r3
 8001432:	4b29      	ldr	r3, [pc, #164]	; (80014d8 <main+0x294>)
 8001434:	625a      	str	r2, [r3, #36]	; 0x24
    pdx[10] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_10); //A30接地�????????????????????合闸输入按钮                               重要8    [按钮  外部中断]
 8001436:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800143a:	4826      	ldr	r0, [pc, #152]	; (80014d4 <main+0x290>)
 800143c:	f002 fdec 	bl	8004018 <HAL_GPIO_ReadPin>
 8001440:	4603      	mov	r3, r0
 8001442:	461a      	mov	r2, r3
 8001444:	4b24      	ldr	r3, [pc, #144]	; (80014d8 <main+0x294>)
 8001446:	629a      	str	r2, [r3, #40]	; 0x28
    pdx[11] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_11); //A31接地�????????????????????分闸输入按钮                               重要3    [按钮  外部中断]
 8001448:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800144c:	4821      	ldr	r0, [pc, #132]	; (80014d4 <main+0x290>)
 800144e:	f002 fde3 	bl	8004018 <HAL_GPIO_ReadPin>
 8001452:	4603      	mov	r3, r0
 8001454:	461a      	mov	r2, r3
 8001456:	4b20      	ldr	r3, [pc, #128]	; (80014d8 <main+0x294>)
 8001458:	62da      	str	r2, [r3, #44]	; 0x2c
    pdx[12] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12); //A32接地�????????????????????机构合闸位置（信号快)      {状�?�}
 800145a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800145e:	481d      	ldr	r0, [pc, #116]	; (80014d4 <main+0x290>)
 8001460:	f002 fdda 	bl	8004018 <HAL_GPIO_ReadPin>
 8001464:	4603      	mov	r3, r0
 8001466:	461a      	mov	r2, r3
 8001468:	4b1b      	ldr	r3, [pc, #108]	; (80014d8 <main+0x294>)
 800146a:	631a      	str	r2, [r3, #48]	; 0x30
    pdx[13] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13); //A33接地�????????????????????机构分闸位置（信号快)      {状�?�}
 800146c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001470:	4818      	ldr	r0, [pc, #96]	; (80014d4 <main+0x290>)
 8001472:	f002 fdd1 	bl	8004018 <HAL_GPIO_ReadPin>
 8001476:	4603      	mov	r3, r0
 8001478:	461a      	mov	r2, r3
 800147a:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <main+0x294>)
 800147c:	635a      	str	r2, [r3, #52]	; 0x34
    pdx[14] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14); //A34接地�????????????????????合闸位置   要和A32 配合    {状�?�}
 800147e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001482:	4814      	ldr	r0, [pc, #80]	; (80014d4 <main+0x290>)
 8001484:	f002 fdc8 	bl	8004018 <HAL_GPIO_ReadPin>
 8001488:	4603      	mov	r3, r0
 800148a:	461a      	mov	r2, r3
 800148c:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <main+0x294>)
 800148e:	639a      	str	r2, [r3, #56]	; 0x38
    pdx[15] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15); //A35接地�????????????????????分闸位置                  {状�?�}
 8001490:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001494:	480f      	ldr	r0, [pc, #60]	; (80014d4 <main+0x290>)
 8001496:	f002 fdbf 	bl	8004018 <HAL_GPIO_ReadPin>
 800149a:	4603      	mov	r3, r0
 800149c:	461a      	mov	r2, r3
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <main+0x294>)
 80014a0:	63da      	str	r2, [r3, #60]	; 0x3c

    HAL_Delay(200);
 80014a2:	20c8      	movs	r0, #200	; 0xc8
 80014a4:	f001 fcd2 	bl	8002e4c <HAL_Delay>
    pbx[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0); //A08 储能电机辅助按钮 要和 A27弹簧未储能按钮配�????????????????????       重要4   [按钮  外部中断]
 80014a8:	e733      	b.n	8001312 <main+0xce>
 80014aa:	bf00      	nop
 80014ac:	20008390 	.word	0x20008390
 80014b0:	20008344 	.word	0x20008344
 80014b4:	40020400 	.word	0x40020400
 80014b8:	2000033c 	.word	0x2000033c
 80014bc:	20008474 	.word	0x20008474
 80014c0:	200002bc 	.word	0x200002bc
 80014c4:	200084f8 	.word	0x200084f8
 80014c8:	20000000 	.word	0x20000000
 80014cc:	200083dc 	.word	0x200083dc
 80014d0:	200002d4 	.word	0x200002d4
 80014d4:	40020c00 	.word	0x40020c00
 80014d8:	200002f8 	.word	0x200002f8

080014dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b0b4      	sub	sp, #208	; 0xd0
 80014e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014e2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80014e6:	2230      	movs	r2, #48	; 0x30
 80014e8:	2100      	movs	r1, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f006 f82c 	bl	8007548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001500:	f107 0308 	add.w	r3, r7, #8
 8001504:	2284      	movs	r2, #132	; 0x84
 8001506:	2100      	movs	r1, #0
 8001508:	4618      	mov	r0, r3
 800150a:	f006 f81d 	bl	8007548 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800150e:	4b3a      	ldr	r3, [pc, #232]	; (80015f8 <SystemClock_Config+0x11c>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	4a39      	ldr	r2, [pc, #228]	; (80015f8 <SystemClock_Config+0x11c>)
 8001514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001518:	6413      	str	r3, [r2, #64]	; 0x40
 800151a:	4b37      	ldr	r3, [pc, #220]	; (80015f8 <SystemClock_Config+0x11c>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001526:	4b35      	ldr	r3, [pc, #212]	; (80015fc <SystemClock_Config+0x120>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a34      	ldr	r2, [pc, #208]	; (80015fc <SystemClock_Config+0x120>)
 800152c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001530:	6013      	str	r3, [r2, #0]
 8001532:	4b32      	ldr	r3, [pc, #200]	; (80015fc <SystemClock_Config+0x120>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800153e:	2302      	movs	r3, #2
 8001540:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001544:	2301      	movs	r3, #1
 8001546:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800154a:	2310      	movs	r3, #16
 800154c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001550:	2302      	movs	r3, #2
 8001552:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001556:	2300      	movs	r3, #0
 8001558:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 800155c:	2308      	movs	r3, #8
 800155e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001562:	23d8      	movs	r3, #216	; 0xd8
 8001564:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001568:	2302      	movs	r3, #2
 800156a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800156e:	2302      	movs	r3, #2
 8001570:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001574:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001578:	4618      	mov	r0, r3
 800157a:	f002 fde7 	bl	800414c <HAL_RCC_OscConfig>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001584:	f000 feac 	bl	80022e0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001588:	f002 fd90 	bl	80040ac <HAL_PWREx_EnableOverDrive>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001592:	f000 fea5 	bl	80022e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001596:	230f      	movs	r3, #15
 8001598:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800159c:	2302      	movs	r3, #2
 800159e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80015b8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80015bc:	2107      	movs	r1, #7
 80015be:	4618      	mov	r0, r3
 80015c0:	f003 f868 	bl	8004694 <HAL_RCC_ClockConfig>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80015ca:	f000 fe89 	bl	80022e0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80015ce:	23c0      	movs	r3, #192	; 0xc0
 80015d0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80015d2:	2300      	movs	r3, #0
 80015d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015da:	f107 0308 	add.w	r3, r7, #8
 80015de:	4618      	mov	r0, r3
 80015e0:	f003 fa2e 	bl	8004a40 <HAL_RCCEx_PeriphCLKConfig>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <SystemClock_Config+0x112>
  {
    Error_Handler();
 80015ea:	f000 fe79 	bl	80022e0 <Error_Handler>
  }
}
 80015ee:	bf00      	nop
 80015f0:	37d0      	adds	r7, #208	; 0xd0
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40007000 	.word	0x40007000

08001600 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8001604:	2200      	movs	r2, #0
 8001606:	2103      	movs	r1, #3
 8001608:	2025      	movs	r0, #37	; 0x25
 800160a:	f001 ffa6 	bl	800355a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800160e:	2025      	movs	r0, #37	; 0x25
 8001610:	f001 ffbf 	bl	8003592 <HAL_NVIC_EnableIRQ>
  /* TIM6_DAC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001614:	2200      	movs	r2, #0
 8001616:	2105      	movs	r1, #5
 8001618:	2036      	movs	r0, #54	; 0x36
 800161a:	f001 ff9e 	bl	800355a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800161e:	2036      	movs	r0, #54	; 0x36
 8001620:	f001 ffb7 	bl	8003592 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 4, 0);
 8001624:	2200      	movs	r2, #0
 8001626:	2104      	movs	r1, #4
 8001628:	2026      	movs	r0, #38	; 0x26
 800162a:	f001 ff96 	bl	800355a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800162e:	2026      	movs	r0, #38	; 0x26
 8001630:	f001 ffaf 	bl	8003592 <HAL_NVIC_EnableIRQ>
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}

08001638 <HAL_UART_RxCpltCallback>:
}



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
	//TX-White RX-Green
	// UART1 PA9(TX) PA10(RX)
	// UART1 PA2(TX) PA3(RX)
	if(huart->Instance == USART1)	// 判断是由哪个串口触发的中�???
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a10      	ldr	r2, [pc, #64]	; (8001688 <HAL_UART_RxCpltCallback+0x50>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d10a      	bne.n	8001660 <HAL_UART_RxCpltCallback+0x28>
	{




		HAL_UART_Transmit(&huart1,aRxBuffer1,1,100);	// 接收到数据马上使用串�???1发�?�出�???
 800164a:	2364      	movs	r3, #100	; 0x64
 800164c:	2201      	movs	r2, #1
 800164e:	490f      	ldr	r1, [pc, #60]	; (800168c <HAL_UART_RxCpltCallback+0x54>)
 8001650:	480f      	ldr	r0, [pc, #60]	; (8001690 <HAL_UART_RxCpltCallback+0x58>)
 8001652:	f004 fefd 	bl	8006450 <HAL_UART_Transmit>



		HAL_UART_Receive_IT(&huart1,aRxBuffer1,1);		// 重新使能串口1接收中断
 8001656:	2201      	movs	r2, #1
 8001658:	490c      	ldr	r1, [pc, #48]	; (800168c <HAL_UART_RxCpltCallback+0x54>)
 800165a:	480d      	ldr	r0, [pc, #52]	; (8001690 <HAL_UART_RxCpltCallback+0x58>)
 800165c:	f004 ff8b 	bl	8006576 <HAL_UART_Receive_IT>




	}
	if(huart->Instance == USART2)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a0b      	ldr	r2, [pc, #44]	; (8001694 <HAL_UART_RxCpltCallback+0x5c>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d10a      	bne.n	8001680 <HAL_UART_RxCpltCallback+0x48>
//		uint8_t aRxBuffer2size = sizeof(aRxBuffer2);
//
//		aRxBuffer2translate  = MB_CRC16(aRxBuffer2, aRxBuffer2size );

		// HAL_UART_Transmit(&huart2,(uint8_t *)aRxBuffer2translate,1,100);	// 接收到数据马上使用串�???1发�?�出�???
		HAL_UART_Transmit(&huart2,aRxBuffer2,1,100);	// 接收到数据马上使用串�???1发�?�出�???
 800166a:	2364      	movs	r3, #100	; 0x64
 800166c:	2201      	movs	r2, #1
 800166e:	490a      	ldr	r1, [pc, #40]	; (8001698 <HAL_UART_RxCpltCallback+0x60>)
 8001670:	480a      	ldr	r0, [pc, #40]	; (800169c <HAL_UART_RxCpltCallback+0x64>)
 8001672:	f004 feed 	bl	8006450 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2,aRxBuffer2,1);		// 重新使能串口2接收中断
 8001676:	2201      	movs	r2, #1
 8001678:	4907      	ldr	r1, [pc, #28]	; (8001698 <HAL_UART_RxCpltCallback+0x60>)
 800167a:	4808      	ldr	r0, [pc, #32]	; (800169c <HAL_UART_RxCpltCallback+0x64>)
 800167c:	f004 ff7b 	bl	8006576 <HAL_UART_Receive_IT>



	}
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40011000 	.word	0x40011000
 800168c:	2000033c 	.word	0x2000033c
 8001690:	20008474 	.word	0x20008474
 8001694:	40004400 	.word	0x40004400
 8001698:	200002bc 	.word	0x200002bc
 800169c:	200084f8 	.word	0x200084f8

080016a0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
//	{
//		//HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_8);
//		printf("TIM6 interrupt\n");
//	}

}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <HAL_GPIO_EXTI_Callback>:
// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); //A07 储能电机
// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); //A09 分闸线圈
// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); //A10 合闸线圈
// HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); //A11 继电器合�????????????????????
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	80fb      	strh	r3, [r7, #6]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80016be:	2201      	movs	r2, #1
 80016c0:	2180      	movs	r1, #128	; 0x80
 80016c2:	48b8      	ldr	r0, [pc, #736]	; (80019a4 <HAL_GPIO_EXTI_Callback+0x2f0>)
 80016c4:	f002 fcc0 	bl	8004048 <HAL_GPIO_WritePin>
  printf("OKKK0");
 80016c8:	48b7      	ldr	r0, [pc, #732]	; (80019a8 <HAL_GPIO_EXTI_Callback+0x2f4>)
 80016ca:	f006 fc59 	bl	8007f80 <iprintf>
  //PD0 A08 储能电机辅助按钮 要和 A27弹簧未储能按钮配�????????????????????       重要4   [按钮  外部中断]
  //已捕获PD0 弹簧未储�????????????????????, 则弹簧储�????????????????????  �????????????????????�???????????????????? 捕捉弹簧现在未储能状态PD8 �???????????????????? 远控允许PD9
  if (GPIO_Pin == GPIO_PIN_0)
 80016ce:	88fb      	ldrh	r3, [r7, #6]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d16d      	bne.n	80017b0 <HAL_GPIO_EXTI_Callback+0xfc>
  {
    statesum = 0;
 80016d4:	4bb5      	ldr	r3, [pc, #724]	; (80019ac <HAL_GPIO_EXTI_Callback+0x2f8>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	801a      	strh	r2, [r3, #0]
    pdx[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 80016da:	2101      	movs	r1, #1
 80016dc:	48b1      	ldr	r0, [pc, #708]	; (80019a4 <HAL_GPIO_EXTI_Callback+0x2f0>)
 80016de:	f002 fc9b 	bl	8004018 <HAL_GPIO_ReadPin>
 80016e2:	4603      	mov	r3, r0
 80016e4:	461a      	mov	r2, r3
 80016e6:	4bb2      	ldr	r3, [pc, #712]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x2fc>)
 80016e8:	601a      	str	r2, [r3, #0]
    pbx[4] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 80016ea:	2110      	movs	r1, #16
 80016ec:	48ad      	ldr	r0, [pc, #692]	; (80019a4 <HAL_GPIO_EXTI_Callback+0x2f0>)
 80016ee:	f002 fc93 	bl	8004018 <HAL_GPIO_ReadPin>
 80016f2:	4603      	mov	r3, r0
 80016f4:	461a      	mov	r2, r3
 80016f6:	4baf      	ldr	r3, [pc, #700]	; (80019b4 <HAL_GPIO_EXTI_Callback+0x300>)
 80016f8:	611a      	str	r2, [r3, #16]
    printf("OKKK1");
 80016fa:	48af      	ldr	r0, [pc, #700]	; (80019b8 <HAL_GPIO_EXTI_Callback+0x304>)
 80016fc:	f006 fc40 	bl	8007f80 <iprintf>
    pdx[8] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);
 8001700:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001704:	48ad      	ldr	r0, [pc, #692]	; (80019bc <HAL_GPIO_EXTI_Callback+0x308>)
 8001706:	f002 fc87 	bl	8004018 <HAL_GPIO_ReadPin>
 800170a:	4603      	mov	r3, r0
 800170c:	461a      	mov	r2, r3
 800170e:	4ba8      	ldr	r3, [pc, #672]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8001710:	621a      	str	r2, [r3, #32]
    pdx[9] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9);
 8001712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001716:	48a9      	ldr	r0, [pc, #676]	; (80019bc <HAL_GPIO_EXTI_Callback+0x308>)
 8001718:	f002 fc7e 	bl	8004018 <HAL_GPIO_ReadPin>
 800171c:	4603      	mov	r3, r0
 800171e:	461a      	mov	r2, r3
 8001720:	4ba3      	ldr	r3, [pc, #652]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8001722:	625a      	str	r2, [r3, #36]	; 0x24
    if (pdx[8] && (!pdx[9]))
 8001724:	4ba2      	ldr	r3, [pc, #648]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d01b      	beq.n	8001764 <HAL_GPIO_EXTI_Callback+0xb0>
 800172c:	4ba0      	ldr	r3, [pc, #640]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x2fc>)
 800172e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001730:	2b00      	cmp	r3, #0
 8001732:	d117      	bne.n	8001764 <HAL_GPIO_EXTI_Callback+0xb0>
    {
      statesum = 1;
 8001734:	4b9d      	ldr	r3, [pc, #628]	; (80019ac <HAL_GPIO_EXTI_Callback+0x2f8>)
 8001736:	2201      	movs	r2, #1
 8001738:	801a      	strh	r2, [r3, #0]
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800173a:	2201      	movs	r2, #1
 800173c:	2110      	movs	r1, #16
 800173e:	4899      	ldr	r0, [pc, #612]	; (80019a4 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001740:	f002 fc82 	bl	8004048 <HAL_GPIO_WritePin>
      printf("OKKK2");
 8001744:	489e      	ldr	r0, [pc, #632]	; (80019c0 <HAL_GPIO_EXTI_Callback+0x30c>)
 8001746:	f006 fc1b 	bl	8007f80 <iprintf>
      HAL_Delay(4000);
 800174a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800174e:	f001 fb7d 	bl	8002e4c <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001752:	2200      	movs	r2, #0
 8001754:	2110      	movs	r1, #16
 8001756:	4893      	ldr	r0, [pc, #588]	; (80019a4 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001758:	f002 fc76 	bl	8004048 <HAL_GPIO_WritePin>
      HAL_Delay(5000);
 800175c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001760:	f001 fb74 	bl	8002e4c <HAL_Delay>
    }
    if (pdx[8] && pdx[9])
 8001764:	4b92      	ldr	r3, [pc, #584]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d021      	beq.n	80017b0 <HAL_GPIO_EXTI_Callback+0xfc>
 800176c:	4b90      	ldr	r3, [pc, #576]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x2fc>)
 800176e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001770:	2b00      	cmp	r3, #0
 8001772:	d01d      	beq.n	80017b0 <HAL_GPIO_EXTI_Callback+0xfc>
    {
      printf("OKKK3");
 8001774:	4893      	ldr	r0, [pc, #588]	; (80019c4 <HAL_GPIO_EXTI_Callback+0x310>)
 8001776:	f006 fc03 	bl	8007f80 <iprintf>
      statesum = 2;
 800177a:	4b8c      	ldr	r3, [pc, #560]	; (80019ac <HAL_GPIO_EXTI_Callback+0x2f8>)
 800177c:	2202      	movs	r2, #2
 800177e:	801a      	strh	r2, [r3, #0]
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001780:	2201      	movs	r2, #1
 8001782:	2110      	movs	r1, #16
 8001784:	4887      	ldr	r0, [pc, #540]	; (80019a4 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001786:	f002 fc5f 	bl	8004048 <HAL_GPIO_WritePin>
      HAL_Delay(4000);
 800178a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800178e:	f001 fb5d 	bl	8002e4c <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	2110      	movs	r1, #16
 8001796:	4883      	ldr	r0, [pc, #524]	; (80019a4 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001798:	f002 fc56 	bl	8004048 <HAL_GPIO_WritePin>
      HAL_Delay(5000);
 800179c:	f241 3088 	movw	r0, #5000	; 0x1388
 80017a0:	f001 fb54 	bl	8002e4c <HAL_Delay>
      statesum = 29;
 80017a4:	4b81      	ldr	r3, [pc, #516]	; (80019ac <HAL_GPIO_EXTI_Callback+0x2f8>)
 80017a6:	221d      	movs	r2, #29
 80017a8:	801a      	strh	r2, [r3, #0]
      printf("OKK4");
 80017aa:	4887      	ldr	r0, [pc, #540]	; (80019c8 <HAL_GPIO_EXTI_Callback+0x314>)
 80017ac:	f006 fbe8 	bl	8007f80 <iprintf>
    }
  }
  //PD1 A12 手动分闸按钮  A21 遥控分闸出口                   重要1    [按钮  外部中断]
  //已捕获PD1 手动分闸,直接分闸 �???????????????????? !远控允许PD9必须�????????????????????0 �???????????????????? 底盘车工作位置PD5
  //由于紧�?�分�???????????????????? 不�?�虑以下情况:  �???????????????????? PD13 接地�????????????????????机构分闸位置（信号快)  �???????????????????? PD15 接地�????????????????????分闸位置 �???????????????????? PD3 合闸按钮必须�????????????????????0
  if (GPIO_Pin == GPIO_PIN_1)
 80017b0:	88fb      	ldrh	r3, [r7, #6]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d144      	bne.n	8001840 <HAL_GPIO_EXTI_Callback+0x18c>
  {
    pdx[5] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5);
 80017b6:	2120      	movs	r1, #32
 80017b8:	4880      	ldr	r0, [pc, #512]	; (80019bc <HAL_GPIO_EXTI_Callback+0x308>)
 80017ba:	f002 fc2d 	bl	8004018 <HAL_GPIO_ReadPin>
 80017be:	4603      	mov	r3, r0
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b7b      	ldr	r3, [pc, #492]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x2fc>)
 80017c4:	615a      	str	r2, [r3, #20]
    pdx[9] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9);
 80017c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017ca:	487c      	ldr	r0, [pc, #496]	; (80019bc <HAL_GPIO_EXTI_Callback+0x308>)
 80017cc:	f002 fc24 	bl	8004018 <HAL_GPIO_ReadPin>
 80017d0:	4603      	mov	r3, r0
 80017d2:	461a      	mov	r2, r3
 80017d4:	4b76      	ldr	r3, [pc, #472]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x2fc>)
 80017d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (pdx[5] && (!pdx[9]))
 80017d8:	4b75      	ldr	r3, [pc, #468]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x2fc>)
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d015      	beq.n	800180c <HAL_GPIO_EXTI_Callback+0x158>
 80017e0:	4b73      	ldr	r3, [pc, #460]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x2fc>)
 80017e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d111      	bne.n	800180c <HAL_GPIO_EXTI_Callback+0x158>
    {
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80017e8:	2201      	movs	r2, #1
 80017ea:	2120      	movs	r1, #32
 80017ec:	486d      	ldr	r0, [pc, #436]	; (80019a4 <HAL_GPIO_EXTI_Callback+0x2f0>)
 80017ee:	f002 fc2b 	bl	8004048 <HAL_GPIO_WritePin>
      HAL_Delay(1000);
 80017f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017f6:	f001 fb29 	bl	8002e4c <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2120      	movs	r1, #32
 80017fe:	4869      	ldr	r0, [pc, #420]	; (80019a4 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001800:	f002 fc22 	bl	8004048 <HAL_GPIO_WritePin>
      HAL_Delay(5000);
 8001804:	f241 3088 	movw	r0, #5000	; 0x1388
 8001808:	f001 fb20 	bl	8002e4c <HAL_Delay>
    }
    if (pdx[5] && pdx[9])
 800180c:	4b68      	ldr	r3, [pc, #416]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x2fc>)
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d015      	beq.n	8001840 <HAL_GPIO_EXTI_Callback+0x18c>
 8001814:	4b66      	ldr	r3, [pc, #408]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8001816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001818:	2b00      	cmp	r3, #0
 800181a:	d011      	beq.n	8001840 <HAL_GPIO_EXTI_Callback+0x18c>
    {
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800181c:	2201      	movs	r2, #1
 800181e:	2120      	movs	r1, #32
 8001820:	4860      	ldr	r0, [pc, #384]	; (80019a4 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001822:	f002 fc11 	bl	8004048 <HAL_GPIO_WritePin>
      HAL_Delay(1000);
 8001826:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800182a:	f001 fb0f 	bl	8002e4c <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800182e:	2200      	movs	r2, #0
 8001830:	2120      	movs	r1, #32
 8001832:	485c      	ldr	r0, [pc, #368]	; (80019a4 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001834:	f002 fc08 	bl	8004048 <HAL_GPIO_WritePin>
      HAL_Delay(5000);
 8001838:	f241 3088 	movw	r0, #5000	; 0x1388
 800183c:	f001 fb06 	bl	8002e4c <HAL_Delay>
    }
  }
  //PD2 A13 保护分闸按钮                                    重要2    [按钮  外部中断]
  //已捕获PD1 手动分闸,直接分闸 �???????????????????? 远控允许PD9 �???????????????????? 底盘车工作位置PD5
  //由于非紧急分�???????????????????? 考虑以下情况:  �???????????????????? PD13 接地�????????????????????机构分闸位置（信号快)  �???????????????????? PD15 接地�????????????????????分闸位置 �???????????????????? PD3 !合闸按钮必须�????????????????????0
  if (GPIO_Pin == GPIO_PIN_2)
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	2b04      	cmp	r3, #4
 8001844:	d144      	bne.n	80018d0 <HAL_GPIO_EXTI_Callback+0x21c>
  {
    pdx[5] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5);
 8001846:	2120      	movs	r1, #32
 8001848:	485c      	ldr	r0, [pc, #368]	; (80019bc <HAL_GPIO_EXTI_Callback+0x308>)
 800184a:	f002 fbe5 	bl	8004018 <HAL_GPIO_ReadPin>
 800184e:	4603      	mov	r3, r0
 8001850:	461a      	mov	r2, r3
 8001852:	4b57      	ldr	r3, [pc, #348]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8001854:	615a      	str	r2, [r3, #20]
    pdx[9] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9);
 8001856:	f44f 7100 	mov.w	r1, #512	; 0x200
 800185a:	4858      	ldr	r0, [pc, #352]	; (80019bc <HAL_GPIO_EXTI_Callback+0x308>)
 800185c:	f002 fbdc 	bl	8004018 <HAL_GPIO_ReadPin>
 8001860:	4603      	mov	r3, r0
 8001862:	461a      	mov	r2, r3
 8001864:	4b52      	ldr	r3, [pc, #328]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8001866:	625a      	str	r2, [r3, #36]	; 0x24
    if (pdx[5] && pdx[9])
 8001868:	4b51      	ldr	r3, [pc, #324]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x2fc>)
 800186a:	695b      	ldr	r3, [r3, #20]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d015      	beq.n	800189c <HAL_GPIO_EXTI_Callback+0x1e8>
 8001870:	4b4f      	ldr	r3, [pc, #316]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8001872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001874:	2b00      	cmp	r3, #0
 8001876:	d011      	beq.n	800189c <HAL_GPIO_EXTI_Callback+0x1e8>
    {
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001878:	2201      	movs	r2, #1
 800187a:	2120      	movs	r1, #32
 800187c:	4849      	ldr	r0, [pc, #292]	; (80019a4 <HAL_GPIO_EXTI_Callback+0x2f0>)
 800187e:	f002 fbe3 	bl	8004048 <HAL_GPIO_WritePin>
      HAL_Delay(1000);
 8001882:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001886:	f001 fae1 	bl	8002e4c <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800188a:	2200      	movs	r2, #0
 800188c:	2120      	movs	r1, #32
 800188e:	4845      	ldr	r0, [pc, #276]	; (80019a4 <HAL_GPIO_EXTI_Callback+0x2f0>)
 8001890:	f002 fbda 	bl	8004048 <HAL_GPIO_WritePin>
      HAL_Delay(5000);
 8001894:	f241 3088 	movw	r0, #5000	; 0x1388
 8001898:	f001 fad8 	bl	8002e4c <HAL_Delay>
    }
    if (pdx[5] && (!pdx[9]))
 800189c:	4b44      	ldr	r3, [pc, #272]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x2fc>)
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d015      	beq.n	80018d0 <HAL_GPIO_EXTI_Callback+0x21c>
 80018a4:	4b42      	ldr	r3, [pc, #264]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x2fc>)
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d111      	bne.n	80018d0 <HAL_GPIO_EXTI_Callback+0x21c>
    {
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80018ac:	2201      	movs	r2, #1
 80018ae:	2120      	movs	r1, #32
 80018b0:	483c      	ldr	r0, [pc, #240]	; (80019a4 <HAL_GPIO_EXTI_Callback+0x2f0>)
 80018b2:	f002 fbc9 	bl	8004048 <HAL_GPIO_WritePin>
      HAL_Delay(1000);
 80018b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018ba:	f001 fac7 	bl	8002e4c <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80018be:	2200      	movs	r2, #0
 80018c0:	2120      	movs	r1, #32
 80018c2:	4838      	ldr	r0, [pc, #224]	; (80019a4 <HAL_GPIO_EXTI_Callback+0x2f0>)
 80018c4:	f002 fbc0 	bl	8004048 <HAL_GPIO_WritePin>
      HAL_Delay(5000);
 80018c8:	f241 3088 	movw	r0, #5000	; 0x1388
 80018cc:	f001 fabe 	bl	8002e4c <HAL_Delay>
  }

  //PD3 A14合闸按钮                                         重要5    [按钮  外部中断]
  //已捕获PD3 合闸,直接合闸 �???????????????????? 远控允许PD9 �???????????????????? 底盘车工作位置PD5 �???????????????????? 底盘车在试验位置PD4
  //由于非紧急合�???????????????????? 考虑以下情况:      �???????????????????? PD15 接地�????????????????????分闸位置 �????????????????????     �???????????????????? PD2 !保护分闸按钮必须�????????????????????0 �???????????????????? PD8!弹簧未储能必�???????????????????? 0
  if (GPIO_Pin == GPIO_PIN_3)
 80018d0:	88fb      	ldrh	r3, [r7, #6]
 80018d2:	2b08      	cmp	r3, #8
 80018d4:	f040 808c 	bne.w	80019f0 <HAL_GPIO_EXTI_Callback+0x33c>
  {
    pdx[4] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4);
 80018d8:	2110      	movs	r1, #16
 80018da:	4838      	ldr	r0, [pc, #224]	; (80019bc <HAL_GPIO_EXTI_Callback+0x308>)
 80018dc:	f002 fb9c 	bl	8004018 <HAL_GPIO_ReadPin>
 80018e0:	4603      	mov	r3, r0
 80018e2:	461a      	mov	r2, r3
 80018e4:	4b32      	ldr	r3, [pc, #200]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x2fc>)
 80018e6:	611a      	str	r2, [r3, #16]
    pdx[5] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5);
 80018e8:	2120      	movs	r1, #32
 80018ea:	4834      	ldr	r0, [pc, #208]	; (80019bc <HAL_GPIO_EXTI_Callback+0x308>)
 80018ec:	f002 fb94 	bl	8004018 <HAL_GPIO_ReadPin>
 80018f0:	4603      	mov	r3, r0
 80018f2:	461a      	mov	r2, r3
 80018f4:	4b2e      	ldr	r3, [pc, #184]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x2fc>)
 80018f6:	615a      	str	r2, [r3, #20]
    pdx[9] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9);
 80018f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018fc:	482f      	ldr	r0, [pc, #188]	; (80019bc <HAL_GPIO_EXTI_Callback+0x308>)
 80018fe:	f002 fb8b 	bl	8004018 <HAL_GPIO_ReadPin>
 8001902:	4603      	mov	r3, r0
 8001904:	461a      	mov	r2, r3
 8001906:	4b2a      	ldr	r3, [pc, #168]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8001908:	625a      	str	r2, [r3, #36]	; 0x24
    pdx[15] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15);
 800190a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800190e:	482b      	ldr	r0, [pc, #172]	; (80019bc <HAL_GPIO_EXTI_Callback+0x308>)
 8001910:	f002 fb82 	bl	8004018 <HAL_GPIO_ReadPin>
 8001914:	4603      	mov	r3, r0
 8001916:	461a      	mov	r2, r3
 8001918:	4b25      	ldr	r3, [pc, #148]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x2fc>)
 800191a:	63da      	str	r2, [r3, #60]	; 0x3c
    pdx[8] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_8);
 800191c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001920:	4826      	ldr	r0, [pc, #152]	; (80019bc <HAL_GPIO_EXTI_Callback+0x308>)
 8001922:	f002 fb79 	bl	8004018 <HAL_GPIO_ReadPin>
 8001926:	4603      	mov	r3, r0
 8001928:	461a      	mov	r2, r3
 800192a:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x2fc>)
 800192c:	621a      	str	r2, [r3, #32]
    if ((pdx[5] || pdx[4]) && pdx[15] && (!pdx[8]) && (!pdx[9]))
 800192e:	4b20      	ldr	r3, [pc, #128]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d103      	bne.n	800193e <HAL_GPIO_EXTI_Callback+0x28a>
 8001936:	4b1e      	ldr	r3, [pc, #120]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d01d      	beq.n	800197a <HAL_GPIO_EXTI_Callback+0x2c6>
 800193e:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8001940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001942:	2b00      	cmp	r3, #0
 8001944:	d019      	beq.n	800197a <HAL_GPIO_EXTI_Callback+0x2c6>
 8001946:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d115      	bne.n	800197a <HAL_GPIO_EXTI_Callback+0x2c6>
 800194e:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8001950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001952:	2b00      	cmp	r3, #0
 8001954:	d111      	bne.n	800197a <HAL_GPIO_EXTI_Callback+0x2c6>
    {
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); //A10 合闸线圈
 8001956:	2201      	movs	r2, #1
 8001958:	2140      	movs	r1, #64	; 0x40
 800195a:	4812      	ldr	r0, [pc, #72]	; (80019a4 <HAL_GPIO_EXTI_Callback+0x2f0>)
 800195c:	f002 fb74 	bl	8004048 <HAL_GPIO_WritePin>
      HAL_Delay(1000);
 8001960:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001964:	f001 fa72 	bl	8002e4c <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); //A10 合闸线圈
 8001968:	2200      	movs	r2, #0
 800196a:	2140      	movs	r1, #64	; 0x40
 800196c:	480d      	ldr	r0, [pc, #52]	; (80019a4 <HAL_GPIO_EXTI_Callback+0x2f0>)
 800196e:	f002 fb6b 	bl	8004048 <HAL_GPIO_WritePin>
      HAL_Delay(5000);
 8001972:	f241 3088 	movw	r0, #5000	; 0x1388
 8001976:	f001 fa69 	bl	8002e4c <HAL_Delay>
    }
    if ((pdx[5] || pdx[4]) && pdx[15] && (!pdx[8]) && pdx[9])
 800197a:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x2fc>)
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d103      	bne.n	800198a <HAL_GPIO_EXTI_Callback+0x2d6>
 8001982:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d032      	beq.n	80019f0 <HAL_GPIO_EXTI_Callback+0x33c>
 800198a:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x2fc>)
 800198c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800198e:	2b00      	cmp	r3, #0
 8001990:	d02e      	beq.n	80019f0 <HAL_GPIO_EXTI_Callback+0x33c>
 8001992:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x2fc>)
 8001994:	6a1b      	ldr	r3, [r3, #32]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d12a      	bne.n	80019f0 <HAL_GPIO_EXTI_Callback+0x33c>
 800199a:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <HAL_GPIO_EXTI_Callback+0x2fc>)
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d026      	beq.n	80019f0 <HAL_GPIO_EXTI_Callback+0x33c>
 80019a2:	e013      	b.n	80019cc <HAL_GPIO_EXTI_Callback+0x318>
 80019a4:	40020400 	.word	0x40020400
 80019a8:	08009f28 	.word	0x08009f28
 80019ac:	200002c0 	.word	0x200002c0
 80019b0:	200002f8 	.word	0x200002f8
 80019b4:	200002d4 	.word	0x200002d4
 80019b8:	08009f30 	.word	0x08009f30
 80019bc:	40020c00 	.word	0x40020c00
 80019c0:	08009f38 	.word	0x08009f38
 80019c4:	08009f40 	.word	0x08009f40
 80019c8:	08009f48 	.word	0x08009f48
    {
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET); //A10 合闸线圈
 80019cc:	2201      	movs	r2, #1
 80019ce:	2140      	movs	r1, #64	; 0x40
 80019d0:	48aa      	ldr	r0, [pc, #680]	; (8001c7c <HAL_GPIO_EXTI_Callback+0x5c8>)
 80019d2:	f002 fb39 	bl	8004048 <HAL_GPIO_WritePin>
      HAL_Delay(1000);
 80019d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019da:	f001 fa37 	bl	8002e4c <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); //A10 合闸线圈
 80019de:	2200      	movs	r2, #0
 80019e0:	2140      	movs	r1, #64	; 0x40
 80019e2:	48a6      	ldr	r0, [pc, #664]	; (8001c7c <HAL_GPIO_EXTI_Callback+0x5c8>)
 80019e4:	f002 fb30 	bl	8004048 <HAL_GPIO_WritePin>
      HAL_Delay(5000);
 80019e8:	f241 3088 	movw	r0, #5000	; 0x1388
 80019ec:	f001 fa2e 	bl	8002e4c <HAL_Delay>
  //PB7继电器�?�开关必须使�????????????????????
  //已捕获PD6 底盘车手动推�????????????????????  电机反转PB0 = 0 , PB1 = 1 �???????????????????? !远控允许PD9必为0  �???????????????????? 底盘车工作位置PD5 �???????????????????? PB7继电器�?�开关必须使能为1 �????????????????????  !PB6 断路器必须分�???????????????????? �???????????????????? PD13 接地�????????????????????机构分闸位置（信号快)  �???????????????????? PD15 接地�????????????????????分闸位置

  /////////////

  if (GPIO_Pin == GPIO_PIN_6)
 80019f0:	88fb      	ldrh	r3, [r7, #6]
 80019f2:	2b40      	cmp	r3, #64	; 0x40
 80019f4:	f040 816d 	bne.w	8001cd2 <HAL_GPIO_EXTI_Callback+0x61e>
  {
    pdx[4] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4);
 80019f8:	2110      	movs	r1, #16
 80019fa:	48a1      	ldr	r0, [pc, #644]	; (8001c80 <HAL_GPIO_EXTI_Callback+0x5cc>)
 80019fc:	f002 fb0c 	bl	8004018 <HAL_GPIO_ReadPin>
 8001a00:	4603      	mov	r3, r0
 8001a02:	461a      	mov	r2, r3
 8001a04:	4b9f      	ldr	r3, [pc, #636]	; (8001c84 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8001a06:	611a      	str	r2, [r3, #16]
    pdx[5] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5);
 8001a08:	2120      	movs	r1, #32
 8001a0a:	489d      	ldr	r0, [pc, #628]	; (8001c80 <HAL_GPIO_EXTI_Callback+0x5cc>)
 8001a0c:	f002 fb04 	bl	8004018 <HAL_GPIO_ReadPin>
 8001a10:	4603      	mov	r3, r0
 8001a12:	461a      	mov	r2, r3
 8001a14:	4b9b      	ldr	r3, [pc, #620]	; (8001c84 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8001a16:	615a      	str	r2, [r3, #20]
    pdx[9] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9);
 8001a18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a1c:	4898      	ldr	r0, [pc, #608]	; (8001c80 <HAL_GPIO_EXTI_Callback+0x5cc>)
 8001a1e:	f002 fafb 	bl	8004018 <HAL_GPIO_ReadPin>
 8001a22:	4603      	mov	r3, r0
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b97      	ldr	r3, [pc, #604]	; (8001c84 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8001a28:	625a      	str	r2, [r3, #36]	; 0x24
    pdx[13] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_13);
 8001a2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a2e:	4894      	ldr	r0, [pc, #592]	; (8001c80 <HAL_GPIO_EXTI_Callback+0x5cc>)
 8001a30:	f002 faf2 	bl	8004018 <HAL_GPIO_ReadPin>
 8001a34:	4603      	mov	r3, r0
 8001a36:	461a      	mov	r2, r3
 8001a38:	4b92      	ldr	r3, [pc, #584]	; (8001c84 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8001a3a:	635a      	str	r2, [r3, #52]	; 0x34

    pbx[7] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
 8001a3c:	2180      	movs	r1, #128	; 0x80
 8001a3e:	488f      	ldr	r0, [pc, #572]	; (8001c7c <HAL_GPIO_EXTI_Callback+0x5c8>)
 8001a40:	f002 faea 	bl	8004018 <HAL_GPIO_ReadPin>
 8001a44:	4603      	mov	r3, r0
 8001a46:	461a      	mov	r2, r3
 8001a48:	4b8f      	ldr	r3, [pc, #572]	; (8001c88 <HAL_GPIO_EXTI_Callback+0x5d4>)
 8001a4a:	61da      	str	r2, [r3, #28]
    pbx[6] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8001a4c:	2140      	movs	r1, #64	; 0x40
 8001a4e:	488b      	ldr	r0, [pc, #556]	; (8001c7c <HAL_GPIO_EXTI_Callback+0x5c8>)
 8001a50:	f002 fae2 	bl	8004018 <HAL_GPIO_ReadPin>
 8001a54:	4603      	mov	r3, r0
 8001a56:	461a      	mov	r2, r3
 8001a58:	4b8b      	ldr	r3, [pc, #556]	; (8001c88 <HAL_GPIO_EXTI_Callback+0x5d4>)
 8001a5a:	619a      	str	r2, [r3, #24]
    if (pdx[5] && pbx[7] && (!pbx[6]) && pdx[13] && (!pdx[9]))
 8001a5c:	4b89      	ldr	r3, [pc, #548]	; (8001c84 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d04b      	beq.n	8001afc <HAL_GPIO_EXTI_Callback+0x448>
 8001a64:	4b88      	ldr	r3, [pc, #544]	; (8001c88 <HAL_GPIO_EXTI_Callback+0x5d4>)
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d047      	beq.n	8001afc <HAL_GPIO_EXTI_Callback+0x448>
 8001a6c:	4b86      	ldr	r3, [pc, #536]	; (8001c88 <HAL_GPIO_EXTI_Callback+0x5d4>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d143      	bne.n	8001afc <HAL_GPIO_EXTI_Callback+0x448>
 8001a74:	4b83      	ldr	r3, [pc, #524]	; (8001c84 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8001a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d03f      	beq.n	8001afc <HAL_GPIO_EXTI_Callback+0x448>
 8001a7c:	4b81      	ldr	r3, [pc, #516]	; (8001c84 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d13b      	bne.n	8001afc <HAL_GPIO_EXTI_Callback+0x448>
    {
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); //PB0    A03  底盘车电�????????????????????  �????????????????????个触�????????????????????
 8001a84:	2108      	movs	r1, #8
 8001a86:	4881      	ldr	r0, [pc, #516]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5d8>)
 8001a88:	f003 fcf2 	bl	8005470 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); //PB1    A04 底盘车电�???????????????????? 另一个触�????????????????????
 8001a8c:	210c      	movs	r1, #12
 8001a8e:	487f      	ldr	r0, [pc, #508]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5d8>)
 8001a90:	f003 fcee 	bl	8005470 <HAL_TIM_PWM_Start>
                                                // // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
                                                // // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
      // PB0   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);

      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001a94:	4b7d      	ldr	r3, [pc, #500]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5d8>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      // PB1   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001a9c:	4b7b      	ldr	r3, [pc, #492]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5d8>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_Delay(10);
 8001aa4:	200a      	movs	r0, #10
 8001aa6:	f001 f9d1 	bl	8002e4c <HAL_Delay>
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 1000);
 8001aaa:	4b78      	ldr	r3, [pc, #480]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5d8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ab2:	641a      	str	r2, [r3, #64]	; 0x40
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
      HAL_Delay(5000);
 8001ab4:	f241 3088 	movw	r0, #5000	; 0x1388
 8001ab8:	f001 f9c8 	bl	8002e4c <HAL_Delay>
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001abc:	4b73      	ldr	r3, [pc, #460]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5d8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 500);
 8001ac4:	4b71      	ldr	r3, [pc, #452]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5d8>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001acc:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_Delay(100);
 8001ace:	2064      	movs	r0, #100	; 0x64
 8001ad0:	f001 f9bc 	bl	8002e4c <HAL_Delay>
      //防抱�????????????????????
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001ad4:	4b6d      	ldr	r3, [pc, #436]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5d8>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001adc:	4b6b      	ldr	r3, [pc, #428]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5d8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8001ae4:	2108      	movs	r1, #8
 8001ae6:	4869      	ldr	r0, [pc, #420]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5d8>)
 8001ae8:	f003 fdbc 	bl	8005664 <HAL_TIM_PWM_Stop>
      HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
 8001aec:	210c      	movs	r1, #12
 8001aee:	4867      	ldr	r0, [pc, #412]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5d8>)
 8001af0:	f003 fdb8 	bl	8005664 <HAL_TIM_PWM_Stop>
      //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      HAL_Delay(3000);
 8001af4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001af8:	f001 f9a8 	bl	8002e4c <HAL_Delay>
    }
    if ((!pdx[5]) && (!pdx[4]) && pbx[7] && (!pbx[6]) && pdx[13] && (!pdx[9]))
 8001afc:	4b61      	ldr	r3, [pc, #388]	; (8001c84 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d147      	bne.n	8001b94 <HAL_GPIO_EXTI_Callback+0x4e0>
 8001b04:	4b5f      	ldr	r3, [pc, #380]	; (8001c84 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d143      	bne.n	8001b94 <HAL_GPIO_EXTI_Callback+0x4e0>
 8001b0c:	4b5e      	ldr	r3, [pc, #376]	; (8001c88 <HAL_GPIO_EXTI_Callback+0x5d4>)
 8001b0e:	69db      	ldr	r3, [r3, #28]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d03f      	beq.n	8001b94 <HAL_GPIO_EXTI_Callback+0x4e0>
 8001b14:	4b5c      	ldr	r3, [pc, #368]	; (8001c88 <HAL_GPIO_EXTI_Callback+0x5d4>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d13b      	bne.n	8001b94 <HAL_GPIO_EXTI_Callback+0x4e0>
 8001b1c:	4b59      	ldr	r3, [pc, #356]	; (8001c84 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8001b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d037      	beq.n	8001b94 <HAL_GPIO_EXTI_Callback+0x4e0>
 8001b24:	4b57      	ldr	r3, [pc, #348]	; (8001c84 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8001b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d133      	bne.n	8001b94 <HAL_GPIO_EXTI_Callback+0x4e0>
    {
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); //PB0    A03  底盘车电�????????????????????  �????????????????????个触�????????????????????
 8001b2c:	2108      	movs	r1, #8
 8001b2e:	4857      	ldr	r0, [pc, #348]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5d8>)
 8001b30:	f003 fc9e 	bl	8005470 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); //PB1    A04 底盘车电�???????????????????? 另一个触�????????????????????
 8001b34:	210c      	movs	r1, #12
 8001b36:	4855      	ldr	r0, [pc, #340]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5d8>)
 8001b38:	f003 fc9a 	bl	8005470 <HAL_TIM_PWM_Start>
                                                // // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
                                                // // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
      // PB0   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001b3c:	4b53      	ldr	r3, [pc, #332]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5d8>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2200      	movs	r2, #0
 8001b42:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      // PB1   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001b44:	4b51      	ldr	r3, [pc, #324]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5d8>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_Delay(10);
 8001b4c:	200a      	movs	r0, #10
 8001b4e:	f001 f97d 	bl	8002e4c <HAL_Delay>
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 1000);
 8001b52:	4b4e      	ldr	r3, [pc, #312]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5d8>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b5a:	641a      	str	r2, [r3, #64]	; 0x40
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
      HAL_Delay(5000);
 8001b5c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001b60:	f001 f974 	bl	8002e4c <HAL_Delay>
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001b64:	4b49      	ldr	r3, [pc, #292]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5d8>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 500);
 8001b6c:	4b47      	ldr	r3, [pc, #284]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5d8>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001b74:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_Delay(100);
 8001b76:	2064      	movs	r0, #100	; 0x64
 8001b78:	f001 f968 	bl	8002e4c <HAL_Delay>
      //防抱�????????????????????
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001b7c:	4b43      	ldr	r3, [pc, #268]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5d8>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2200      	movs	r2, #0
 8001b82:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001b84:	4b41      	ldr	r3, [pc, #260]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5d8>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
      // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      HAL_Delay(3000);
 8001b8c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001b90:	f001 f95c 	bl	8002e4c <HAL_Delay>
    }
    if (pdx[5] && pbx[7] && (!pbx[6]) && pdx[13] && pdx[9])
 8001b94:	4b3b      	ldr	r3, [pc, #236]	; (8001c84 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d043      	beq.n	8001c24 <HAL_GPIO_EXTI_Callback+0x570>
 8001b9c:	4b3a      	ldr	r3, [pc, #232]	; (8001c88 <HAL_GPIO_EXTI_Callback+0x5d4>)
 8001b9e:	69db      	ldr	r3, [r3, #28]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d03f      	beq.n	8001c24 <HAL_GPIO_EXTI_Callback+0x570>
 8001ba4:	4b38      	ldr	r3, [pc, #224]	; (8001c88 <HAL_GPIO_EXTI_Callback+0x5d4>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d13b      	bne.n	8001c24 <HAL_GPIO_EXTI_Callback+0x570>
 8001bac:	4b35      	ldr	r3, [pc, #212]	; (8001c84 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8001bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d037      	beq.n	8001c24 <HAL_GPIO_EXTI_Callback+0x570>
 8001bb4:	4b33      	ldr	r3, [pc, #204]	; (8001c84 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d033      	beq.n	8001c24 <HAL_GPIO_EXTI_Callback+0x570>
    {
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); //PB0    A03  底盘车电�????????????????????  �????????????????????个触�????????????????????
 8001bbc:	2108      	movs	r1, #8
 8001bbe:	4833      	ldr	r0, [pc, #204]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5d8>)
 8001bc0:	f003 fc56 	bl	8005470 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); //PB1    A04 底盘车电�???????????????????? 另一个触�????????????????????
 8001bc4:	210c      	movs	r1, #12
 8001bc6:	4831      	ldr	r0, [pc, #196]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5d8>)
 8001bc8:	f003 fc52 	bl	8005470 <HAL_TIM_PWM_Start>
                                                // // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
                                                // // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
      // PB0   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001bcc:	4b2f      	ldr	r3, [pc, #188]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5d8>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      // PB1   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001bd4:	4b2d      	ldr	r3, [pc, #180]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5d8>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_Delay(10);
 8001bdc:	200a      	movs	r0, #10
 8001bde:	f001 f935 	bl	8002e4c <HAL_Delay>
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 1000);
 8001be2:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5d8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bea:	641a      	str	r2, [r3, #64]	; 0x40
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
      HAL_Delay(5000);
 8001bec:	f241 3088 	movw	r0, #5000	; 0x1388
 8001bf0:	f001 f92c 	bl	8002e4c <HAL_Delay>
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001bf4:	4b25      	ldr	r3, [pc, #148]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5d8>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 500);
 8001bfc:	4b23      	ldr	r3, [pc, #140]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5d8>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001c04:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_Delay(100);
 8001c06:	2064      	movs	r0, #100	; 0x64
 8001c08:	f001 f920 	bl	8002e4c <HAL_Delay>
      //防抱�????????????????????
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001c0c:	4b1f      	ldr	r3, [pc, #124]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5d8>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2200      	movs	r2, #0
 8001c12:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001c14:	4b1d      	ldr	r3, [pc, #116]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5d8>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
      // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      HAL_Delay(3000);
 8001c1c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001c20:	f001 f914 	bl	8002e4c <HAL_Delay>
    }
    if ((!pdx[5]) && (!pdx[4]) && pbx[7] && (!pbx[6]) && pdx[13] && pdx[9])
 8001c24:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d152      	bne.n	8001cd2 <HAL_GPIO_EXTI_Callback+0x61e>
 8001c2c:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d14e      	bne.n	8001cd2 <HAL_GPIO_EXTI_Callback+0x61e>
 8001c34:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <HAL_GPIO_EXTI_Callback+0x5d4>)
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d04a      	beq.n	8001cd2 <HAL_GPIO_EXTI_Callback+0x61e>
 8001c3c:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <HAL_GPIO_EXTI_Callback+0x5d4>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d146      	bne.n	8001cd2 <HAL_GPIO_EXTI_Callback+0x61e>
 8001c44:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8001c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d042      	beq.n	8001cd2 <HAL_GPIO_EXTI_Callback+0x61e>
 8001c4c:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <HAL_GPIO_EXTI_Callback+0x5d0>)
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d03e      	beq.n	8001cd2 <HAL_GPIO_EXTI_Callback+0x61e>
    {
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); //PB0    A03  底盘车电�????????????????????  �????????????????????个触�????????????????????
 8001c54:	2108      	movs	r1, #8
 8001c56:	480d      	ldr	r0, [pc, #52]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5d8>)
 8001c58:	f003 fc0a 	bl	8005470 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); //PB1    A04 底盘车电�???????????????????? 另一个触�????????????????????
 8001c5c:	210c      	movs	r1, #12
 8001c5e:	480b      	ldr	r0, [pc, #44]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5d8>)
 8001c60:	f003 fc06 	bl	8005470 <HAL_TIM_PWM_Start>
                                                // // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
                                                // // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
      // PB0   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5d8>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      // PB1   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001c6c:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <HAL_GPIO_EXTI_Callback+0x5d8>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2200      	movs	r2, #0
 8001c72:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_Delay(10);
 8001c74:	200a      	movs	r0, #10
 8001c76:	f001 f8e9 	bl	8002e4c <HAL_Delay>
 8001c7a:	e009      	b.n	8001c90 <HAL_GPIO_EXTI_Callback+0x5dc>
 8001c7c:	40020400 	.word	0x40020400
 8001c80:	40020c00 	.word	0x40020c00
 8001c84:	200002f8 	.word	0x200002f8
 8001c88:	200002d4 	.word	0x200002d4
 8001c8c:	20008390 	.word	0x20008390
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 1000);
 8001c90:	4bac      	ldr	r3, [pc, #688]	; (8001f44 <HAL_GPIO_EXTI_Callback+0x890>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c98:	641a      	str	r2, [r3, #64]	; 0x40
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
      HAL_Delay(5000);
 8001c9a:	f241 3088 	movw	r0, #5000	; 0x1388
 8001c9e:	f001 f8d5 	bl	8002e4c <HAL_Delay>
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001ca2:	4ba8      	ldr	r3, [pc, #672]	; (8001f44 <HAL_GPIO_EXTI_Callback+0x890>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 500);
 8001caa:	4ba6      	ldr	r3, [pc, #664]	; (8001f44 <HAL_GPIO_EXTI_Callback+0x890>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001cb2:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_Delay(100);
 8001cb4:	2064      	movs	r0, #100	; 0x64
 8001cb6:	f001 f8c9 	bl	8002e4c <HAL_Delay>
      //防抱�????????????????????
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001cba:	4ba2      	ldr	r3, [pc, #648]	; (8001f44 <HAL_GPIO_EXTI_Callback+0x890>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001cc2:	4ba0      	ldr	r3, [pc, #640]	; (8001f44 <HAL_GPIO_EXTI_Callback+0x890>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
      // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      HAL_Delay(3000);
 8001cca:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001cce:	f001 f8bd 	bl	8002e4c <HAL_Delay>
    }
  }
  //PD7 A25底盘车遥进按钮手�????????????????????                                重要6    [按钮  外部中断]
  //已捕获PD7 底盘车手动驶�????????????????????
  if (GPIO_Pin == GPIO_PIN_7)
 8001cd2:	88fb      	ldrh	r3, [r7, #6]
 8001cd4:	2b80      	cmp	r3, #128	; 0x80
 8001cd6:	f040 80c2 	bne.w	8001e5e <HAL_GPIO_EXTI_Callback+0x7aa>
  {
    pdx[4] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4);
 8001cda:	2110      	movs	r1, #16
 8001cdc:	489a      	ldr	r0, [pc, #616]	; (8001f48 <HAL_GPIO_EXTI_Callback+0x894>)
 8001cde:	f002 f99b 	bl	8004018 <HAL_GPIO_ReadPin>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4b99      	ldr	r3, [pc, #612]	; (8001f4c <HAL_GPIO_EXTI_Callback+0x898>)
 8001ce8:	611a      	str	r2, [r3, #16]
    pdx[5] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_5);
 8001cea:	2120      	movs	r1, #32
 8001cec:	4896      	ldr	r0, [pc, #600]	; (8001f48 <HAL_GPIO_EXTI_Callback+0x894>)
 8001cee:	f002 f993 	bl	8004018 <HAL_GPIO_ReadPin>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4b95      	ldr	r3, [pc, #596]	; (8001f4c <HAL_GPIO_EXTI_Callback+0x898>)
 8001cf8:	615a      	str	r2, [r3, #20]
    pdx[9] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9);
 8001cfa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cfe:	4892      	ldr	r0, [pc, #584]	; (8001f48 <HAL_GPIO_EXTI_Callback+0x894>)
 8001d00:	f002 f98a 	bl	8004018 <HAL_GPIO_ReadPin>
 8001d04:	4603      	mov	r3, r0
 8001d06:	461a      	mov	r2, r3
 8001d08:	4b90      	ldr	r3, [pc, #576]	; (8001f4c <HAL_GPIO_EXTI_Callback+0x898>)
 8001d0a:	625a      	str	r2, [r3, #36]	; 0x24

    pdx[15] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15);
 8001d0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d10:	488d      	ldr	r0, [pc, #564]	; (8001f48 <HAL_GPIO_EXTI_Callback+0x894>)
 8001d12:	f002 f981 	bl	8004018 <HAL_GPIO_ReadPin>
 8001d16:	4603      	mov	r3, r0
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b8c      	ldr	r3, [pc, #560]	; (8001f4c <HAL_GPIO_EXTI_Callback+0x898>)
 8001d1c:	63da      	str	r2, [r3, #60]	; 0x3c

    pbx[7] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
 8001d1e:	2180      	movs	r1, #128	; 0x80
 8001d20:	488b      	ldr	r0, [pc, #556]	; (8001f50 <HAL_GPIO_EXTI_Callback+0x89c>)
 8001d22:	f002 f979 	bl	8004018 <HAL_GPIO_ReadPin>
 8001d26:	4603      	mov	r3, r0
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4b8a      	ldr	r3, [pc, #552]	; (8001f54 <HAL_GPIO_EXTI_Callback+0x8a0>)
 8001d2c:	61da      	str	r2, [r3, #28]
    pbx[6] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8001d2e:	2140      	movs	r1, #64	; 0x40
 8001d30:	4887      	ldr	r0, [pc, #540]	; (8001f50 <HAL_GPIO_EXTI_Callback+0x89c>)
 8001d32:	f002 f971 	bl	8004018 <HAL_GPIO_ReadPin>
 8001d36:	4603      	mov	r3, r0
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4b86      	ldr	r3, [pc, #536]	; (8001f54 <HAL_GPIO_EXTI_Callback+0x8a0>)
 8001d3c:	619a      	str	r2, [r3, #24]
    if (pdx[5] && pbx[7] && (!pbx[6]) && pdx[15] && (!pdx[9]))
 8001d3e:	4b83      	ldr	r3, [pc, #524]	; (8001f4c <HAL_GPIO_EXTI_Callback+0x898>)
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d043      	beq.n	8001dce <HAL_GPIO_EXTI_Callback+0x71a>
 8001d46:	4b83      	ldr	r3, [pc, #524]	; (8001f54 <HAL_GPIO_EXTI_Callback+0x8a0>)
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d03f      	beq.n	8001dce <HAL_GPIO_EXTI_Callback+0x71a>
 8001d4e:	4b81      	ldr	r3, [pc, #516]	; (8001f54 <HAL_GPIO_EXTI_Callback+0x8a0>)
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d13b      	bne.n	8001dce <HAL_GPIO_EXTI_Callback+0x71a>
 8001d56:	4b7d      	ldr	r3, [pc, #500]	; (8001f4c <HAL_GPIO_EXTI_Callback+0x898>)
 8001d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d037      	beq.n	8001dce <HAL_GPIO_EXTI_Callback+0x71a>
 8001d5e:	4b7b      	ldr	r3, [pc, #492]	; (8001f4c <HAL_GPIO_EXTI_Callback+0x898>)
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d133      	bne.n	8001dce <HAL_GPIO_EXTI_Callback+0x71a>
    {
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); //PB0    A03  底盘车电�????????????????????  �????????????????????个触�????????????????????
 8001d66:	2108      	movs	r1, #8
 8001d68:	4876      	ldr	r0, [pc, #472]	; (8001f44 <HAL_GPIO_EXTI_Callback+0x890>)
 8001d6a:	f003 fb81 	bl	8005470 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); //PB1    A04 底盘车电�???????????????????? 另一个触�????????????????????
 8001d6e:	210c      	movs	r1, #12
 8001d70:	4874      	ldr	r0, [pc, #464]	; (8001f44 <HAL_GPIO_EXTI_Callback+0x890>)
 8001d72:	f003 fb7d 	bl	8005470 <HAL_TIM_PWM_Start>
                                                // // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
                                                // // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
      // PB0   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001d76:	4b73      	ldr	r3, [pc, #460]	; (8001f44 <HAL_GPIO_EXTI_Callback+0x890>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      // PB1   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001d7e:	4b71      	ldr	r3, [pc, #452]	; (8001f44 <HAL_GPIO_EXTI_Callback+0x890>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2200      	movs	r2, #0
 8001d84:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_Delay(10);
 8001d86:	200a      	movs	r0, #10
 8001d88:	f001 f860 	bl	8002e4c <HAL_Delay>
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1000);
 8001d8c:	4b6d      	ldr	r3, [pc, #436]	; (8001f44 <HAL_GPIO_EXTI_Callback+0x890>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d94:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
      HAL_Delay(5000);
 8001d96:	f241 3088 	movw	r0, #5000	; 0x1388
 8001d9a:	f001 f857 	bl	8002e4c <HAL_Delay>
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001d9e:	4b69      	ldr	r3, [pc, #420]	; (8001f44 <HAL_GPIO_EXTI_Callback+0x890>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2200      	movs	r2, #0
 8001da4:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 500);
 8001da6:	4b67      	ldr	r3, [pc, #412]	; (8001f44 <HAL_GPIO_EXTI_Callback+0x890>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001dae:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_Delay(100);
 8001db0:	2064      	movs	r0, #100	; 0x64
 8001db2:	f001 f84b 	bl	8002e4c <HAL_Delay>
      //防抱�????????????????????
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001db6:	4b63      	ldr	r3, [pc, #396]	; (8001f44 <HAL_GPIO_EXTI_Callback+0x890>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001dbe:	4b61      	ldr	r3, [pc, #388]	; (8001f44 <HAL_GPIO_EXTI_Callback+0x890>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      HAL_Delay(3000);
 8001dc6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001dca:	f001 f83f 	bl	8002e4c <HAL_Delay>
      // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
      // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
    }
    if (pdx[5] && pbx[7] && (!pbx[6]) && pdx[15] && pdx[9])
 8001dce:	4b5f      	ldr	r3, [pc, #380]	; (8001f4c <HAL_GPIO_EXTI_Callback+0x898>)
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d043      	beq.n	8001e5e <HAL_GPIO_EXTI_Callback+0x7aa>
 8001dd6:	4b5f      	ldr	r3, [pc, #380]	; (8001f54 <HAL_GPIO_EXTI_Callback+0x8a0>)
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d03f      	beq.n	8001e5e <HAL_GPIO_EXTI_Callback+0x7aa>
 8001dde:	4b5d      	ldr	r3, [pc, #372]	; (8001f54 <HAL_GPIO_EXTI_Callback+0x8a0>)
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d13b      	bne.n	8001e5e <HAL_GPIO_EXTI_Callback+0x7aa>
 8001de6:	4b59      	ldr	r3, [pc, #356]	; (8001f4c <HAL_GPIO_EXTI_Callback+0x898>)
 8001de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d037      	beq.n	8001e5e <HAL_GPIO_EXTI_Callback+0x7aa>
 8001dee:	4b57      	ldr	r3, [pc, #348]	; (8001f4c <HAL_GPIO_EXTI_Callback+0x898>)
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d033      	beq.n	8001e5e <HAL_GPIO_EXTI_Callback+0x7aa>
    {
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); //PB0    A03  底盘车电�????????????????????  �????????????????????个触�????????????????????
 8001df6:	2108      	movs	r1, #8
 8001df8:	4852      	ldr	r0, [pc, #328]	; (8001f44 <HAL_GPIO_EXTI_Callback+0x890>)
 8001dfa:	f003 fb39 	bl	8005470 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); //PB1    A04 底盘车电�???????????????????? 另一个触�????????????????????
 8001dfe:	210c      	movs	r1, #12
 8001e00:	4850      	ldr	r0, [pc, #320]	; (8001f44 <HAL_GPIO_EXTI_Callback+0x890>)
 8001e02:	f003 fb35 	bl	8005470 <HAL_TIM_PWM_Start>
                                                // // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
                                                // // HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_4);
      // PB0   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001e06:	4b4f      	ldr	r3, [pc, #316]	; (8001f44 <HAL_GPIO_EXTI_Callback+0x890>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      // PB1   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001e0e:	4b4d      	ldr	r3, [pc, #308]	; (8001f44 <HAL_GPIO_EXTI_Callback+0x890>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2200      	movs	r2, #0
 8001e14:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_Delay(10);
 8001e16:	200a      	movs	r0, #10
 8001e18:	f001 f818 	bl	8002e4c <HAL_Delay>
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 1000);
 8001e1c:	4b49      	ldr	r3, [pc, #292]	; (8001f44 <HAL_GPIO_EXTI_Callback+0x890>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e24:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
      HAL_Delay(5000);
 8001e26:	f241 3088 	movw	r0, #5000	; 0x1388
 8001e2a:	f001 f80f 	bl	8002e4c <HAL_Delay>
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001e2e:	4b45      	ldr	r3, [pc, #276]	; (8001f44 <HAL_GPIO_EXTI_Callback+0x890>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2200      	movs	r2, #0
 8001e34:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 500);
 8001e36:	4b43      	ldr	r3, [pc, #268]	; (8001f44 <HAL_GPIO_EXTI_Callback+0x890>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001e3e:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_Delay(100);
 8001e40:	2064      	movs	r0, #100	; 0x64
 8001e42:	f001 f803 	bl	8002e4c <HAL_Delay>
      //防抱�????????????????????
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8001e46:	4b3f      	ldr	r3, [pc, #252]	; (8001f44 <HAL_GPIO_EXTI_Callback+0x890>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001e4e:	4b3d      	ldr	r3, [pc, #244]	; (8001f44 <HAL_GPIO_EXTI_Callback+0x890>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2200      	movs	r2, #0
 8001e54:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      HAL_Delay(3000);
 8001e56:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001e5a:	f000 fff7 	bl	8002e4c <HAL_Delay>
    }
  }
  //PD10 A30接地�????????????????????合闸输入按钮                               重要8    [按钮  外部中断]
  //PB7继电器�?�开关必须使�????????????????????
  //已捕获PD10 接地�????????????????????手动合闸  接地�????????????????????电机反转PB8 = 1 , PB9 = 0 �???????????????????? !远控允许PD9必为0  �???????????????????? 底盘车试验位置PD4 �???????????????????? PB7继电器�?�开关必须使能为1 �????????????????????  !PB6 断路器必须分�???????????????????? �???????????????????? PD13 接地�????????????????????机构分闸位置（信号快)  �???????????????????? PD15 接地�????????????????????分闸位置
  if (GPIO_Pin == GPIO_PIN_10)
 8001e5e:	88fb      	ldrh	r3, [r7, #6]
 8001e60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e64:	f040 815f 	bne.w	8002126 <HAL_GPIO_EXTI_Callback+0xa72>
  {
    pdx[4] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4);
 8001e68:	2110      	movs	r1, #16
 8001e6a:	4837      	ldr	r0, [pc, #220]	; (8001f48 <HAL_GPIO_EXTI_Callback+0x894>)
 8001e6c:	f002 f8d4 	bl	8004018 <HAL_GPIO_ReadPin>
 8001e70:	4603      	mov	r3, r0
 8001e72:	461a      	mov	r2, r3
 8001e74:	4b35      	ldr	r3, [pc, #212]	; (8001f4c <HAL_GPIO_EXTI_Callback+0x898>)
 8001e76:	611a      	str	r2, [r3, #16]
    pdx[9] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9);
 8001e78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e7c:	4832      	ldr	r0, [pc, #200]	; (8001f48 <HAL_GPIO_EXTI_Callback+0x894>)
 8001e7e:	f002 f8cb 	bl	8004018 <HAL_GPIO_ReadPin>
 8001e82:	4603      	mov	r3, r0
 8001e84:	461a      	mov	r2, r3
 8001e86:	4b31      	ldr	r3, [pc, #196]	; (8001f4c <HAL_GPIO_EXTI_Callback+0x898>)
 8001e88:	625a      	str	r2, [r3, #36]	; 0x24

    pdx[15] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_15);
 8001e8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e8e:	482e      	ldr	r0, [pc, #184]	; (8001f48 <HAL_GPIO_EXTI_Callback+0x894>)
 8001e90:	f002 f8c2 	bl	8004018 <HAL_GPIO_ReadPin>
 8001e94:	4603      	mov	r3, r0
 8001e96:	461a      	mov	r2, r3
 8001e98:	4b2c      	ldr	r3, [pc, #176]	; (8001f4c <HAL_GPIO_EXTI_Callback+0x898>)
 8001e9a:	63da      	str	r2, [r3, #60]	; 0x3c

    pbx[7] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
 8001e9c:	2180      	movs	r1, #128	; 0x80
 8001e9e:	482c      	ldr	r0, [pc, #176]	; (8001f50 <HAL_GPIO_EXTI_Callback+0x89c>)
 8001ea0:	f002 f8ba 	bl	8004018 <HAL_GPIO_ReadPin>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	4b2a      	ldr	r3, [pc, #168]	; (8001f54 <HAL_GPIO_EXTI_Callback+0x8a0>)
 8001eaa:	61da      	str	r2, [r3, #28]
    pbx[6] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8001eac:	2140      	movs	r1, #64	; 0x40
 8001eae:	4828      	ldr	r0, [pc, #160]	; (8001f50 <HAL_GPIO_EXTI_Callback+0x89c>)
 8001eb0:	f002 f8b2 	bl	8004018 <HAL_GPIO_ReadPin>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4b26      	ldr	r3, [pc, #152]	; (8001f54 <HAL_GPIO_EXTI_Callback+0x8a0>)
 8001eba:	619a      	str	r2, [r3, #24]
    if (pdx[4] && pbx[7] && (!pbx[6]) && pdx[15] && (!pdx[9]))
 8001ebc:	4b23      	ldr	r3, [pc, #140]	; (8001f4c <HAL_GPIO_EXTI_Callback+0x898>)
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d050      	beq.n	8001f66 <HAL_GPIO_EXTI_Callback+0x8b2>
 8001ec4:	4b23      	ldr	r3, [pc, #140]	; (8001f54 <HAL_GPIO_EXTI_Callback+0x8a0>)
 8001ec6:	69db      	ldr	r3, [r3, #28]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d04c      	beq.n	8001f66 <HAL_GPIO_EXTI_Callback+0x8b2>
 8001ecc:	4b21      	ldr	r3, [pc, #132]	; (8001f54 <HAL_GPIO_EXTI_Callback+0x8a0>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d148      	bne.n	8001f66 <HAL_GPIO_EXTI_Callback+0x8b2>
 8001ed4:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <HAL_GPIO_EXTI_Callback+0x898>)
 8001ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d044      	beq.n	8001f66 <HAL_GPIO_EXTI_Callback+0x8b2>
 8001edc:	4b1b      	ldr	r3, [pc, #108]	; (8001f4c <HAL_GPIO_EXTI_Callback+0x898>)
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d140      	bne.n	8001f66 <HAL_GPIO_EXTI_Callback+0x8b2>
    {
      HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); //PB8    A05  底盘车电�????????????????????  �????????????????????个触�????????????????????
 8001ee4:	2108      	movs	r1, #8
 8001ee6:	481c      	ldr	r0, [pc, #112]	; (8001f58 <HAL_GPIO_EXTI_Callback+0x8a4>)
 8001ee8:	f003 fac2 	bl	8005470 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //PB9    A06 底盘车电�???????????????????? 另一个触�????????????????????
 8001eec:	210c      	movs	r1, #12
 8001eee:	481a      	ldr	r0, [pc, #104]	; (8001f58 <HAL_GPIO_EXTI_Callback+0x8a4>)
 8001ef0:	f003 fabe 	bl	8005470 <HAL_TIM_PWM_Start>
                                                // // HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
                                                // // HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
      // PB0   __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8001ef4:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <HAL_GPIO_EXTI_Callback+0x8a4>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      // PB1   __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 8001efc:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <HAL_GPIO_EXTI_Callback+0x8a4>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2200      	movs	r2, #0
 8001f02:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_Delay(10);
 8001f04:	200a      	movs	r0, #10
 8001f06:	f000 ffa1 	bl	8002e4c <HAL_Delay>
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 1000);
 8001f0a:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <HAL_GPIO_EXTI_Callback+0x8a4>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f12:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
      HAL_Delay(5000);
 8001f14:	f241 3088 	movw	r0, #5000	; 0x1388
 8001f18:	f000 ff98 	bl	8002e4c <HAL_Delay>
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8001f1c:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <HAL_GPIO_EXTI_Callback+0x8a4>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2200      	movs	r2, #0
 8001f22:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 500);
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <HAL_GPIO_EXTI_Callback+0x8a4>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f2c:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_Delay(100);
 8001f2e:	2064      	movs	r0, #100	; 0x64
 8001f30:	f000 ff8c 	bl	8002e4c <HAL_Delay>
      //防抱�????????????????????
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 8001f34:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <HAL_GPIO_EXTI_Callback+0x8a4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <HAL_GPIO_EXTI_Callback+0x8a4>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2200      	movs	r2, #0
 8001f42:	e00b      	b.n	8001f5c <HAL_GPIO_EXTI_Callback+0x8a8>
 8001f44:	20008390 	.word	0x20008390
 8001f48:	40020c00 	.word	0x40020c00
 8001f4c:	200002f8 	.word	0x200002f8
 8001f50:	40020400 	.word	0x40020400
 8001f54:	200002d4 	.word	0x200002d4
 8001f58:	20008344 	.word	0x20008344
 8001f5c:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
      // HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      HAL_Delay(3000);
 8001f5e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001f62:	f000 ff73 	bl	8002e4c <HAL_Delay>
    }
    if (((!pdx[4]) || (!pdx[5])) && pbx[7] && (!pbx[6]) && pdx[15] && (!pdx[9]))
 8001f66:	4ba8      	ldr	r3, [pc, #672]	; (8002208 <HAL_GPIO_EXTI_Callback+0xb54>)
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_GPIO_EXTI_Callback+0x8c2>
 8001f6e:	4ba6      	ldr	r3, [pc, #664]	; (8002208 <HAL_GPIO_EXTI_Callback+0xb54>)
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d143      	bne.n	8001ffe <HAL_GPIO_EXTI_Callback+0x94a>
 8001f76:	4ba5      	ldr	r3, [pc, #660]	; (800220c <HAL_GPIO_EXTI_Callback+0xb58>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d03f      	beq.n	8001ffe <HAL_GPIO_EXTI_Callback+0x94a>
 8001f7e:	4ba3      	ldr	r3, [pc, #652]	; (800220c <HAL_GPIO_EXTI_Callback+0xb58>)
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d13b      	bne.n	8001ffe <HAL_GPIO_EXTI_Callback+0x94a>
 8001f86:	4ba0      	ldr	r3, [pc, #640]	; (8002208 <HAL_GPIO_EXTI_Callback+0xb54>)
 8001f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d037      	beq.n	8001ffe <HAL_GPIO_EXTI_Callback+0x94a>
 8001f8e:	4b9e      	ldr	r3, [pc, #632]	; (8002208 <HAL_GPIO_EXTI_Callback+0xb54>)
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d133      	bne.n	8001ffe <HAL_GPIO_EXTI_Callback+0x94a>
    {
      HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); //PB8    A05  底盘车电�????????????????????  �????????????????????个触�????????????????????
 8001f96:	2108      	movs	r1, #8
 8001f98:	489d      	ldr	r0, [pc, #628]	; (8002210 <HAL_GPIO_EXTI_Callback+0xb5c>)
 8001f9a:	f003 fa69 	bl	8005470 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //PB9    A06 底盘车电�???????????????????? 另一个触�????????????????????
 8001f9e:	210c      	movs	r1, #12
 8001fa0:	489b      	ldr	r0, [pc, #620]	; (8002210 <HAL_GPIO_EXTI_Callback+0xb5c>)
 8001fa2:	f003 fa65 	bl	8005470 <HAL_TIM_PWM_Start>
                                                // // HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
                                                // // HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
      // PB0   __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8001fa6:	4b9a      	ldr	r3, [pc, #616]	; (8002210 <HAL_GPIO_EXTI_Callback+0xb5c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2200      	movs	r2, #0
 8001fac:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      // PB1   __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 8001fae:	4b98      	ldr	r3, [pc, #608]	; (8002210 <HAL_GPIO_EXTI_Callback+0xb5c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_Delay(10);
 8001fb6:	200a      	movs	r0, #10
 8001fb8:	f000 ff48 	bl	8002e4c <HAL_Delay>
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 1000);
 8001fbc:	4b94      	ldr	r3, [pc, #592]	; (8002210 <HAL_GPIO_EXTI_Callback+0xb5c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fc4:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
      HAL_Delay(5000);
 8001fc6:	f241 3088 	movw	r0, #5000	; 0x1388
 8001fca:	f000 ff3f 	bl	8002e4c <HAL_Delay>
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8001fce:	4b90      	ldr	r3, [pc, #576]	; (8002210 <HAL_GPIO_EXTI_Callback+0xb5c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 500);
 8001fd6:	4b8e      	ldr	r3, [pc, #568]	; (8002210 <HAL_GPIO_EXTI_Callback+0xb5c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001fde:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_Delay(100);
 8001fe0:	2064      	movs	r0, #100	; 0x64
 8001fe2:	f000 ff33 	bl	8002e4c <HAL_Delay>
      //防抱�????????????????????
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 8001fe6:	4b8a      	ldr	r3, [pc, #552]	; (8002210 <HAL_GPIO_EXTI_Callback+0xb5c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2200      	movs	r2, #0
 8001fec:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8001fee:	4b88      	ldr	r3, [pc, #544]	; (8002210 <HAL_GPIO_EXTI_Callback+0xb5c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
      // HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      HAL_Delay(3000);
 8001ff6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001ffa:	f000 ff27 	bl	8002e4c <HAL_Delay>
    }
    if (pdx[4] && pbx[7] && (!pbx[6]) && pdx[15] && pdx[9])
 8001ffe:	4b82      	ldr	r3, [pc, #520]	; (8002208 <HAL_GPIO_EXTI_Callback+0xb54>)
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d043      	beq.n	800208e <HAL_GPIO_EXTI_Callback+0x9da>
 8002006:	4b81      	ldr	r3, [pc, #516]	; (800220c <HAL_GPIO_EXTI_Callback+0xb58>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d03f      	beq.n	800208e <HAL_GPIO_EXTI_Callback+0x9da>
 800200e:	4b7f      	ldr	r3, [pc, #508]	; (800220c <HAL_GPIO_EXTI_Callback+0xb58>)
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d13b      	bne.n	800208e <HAL_GPIO_EXTI_Callback+0x9da>
 8002016:	4b7c      	ldr	r3, [pc, #496]	; (8002208 <HAL_GPIO_EXTI_Callback+0xb54>)
 8002018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800201a:	2b00      	cmp	r3, #0
 800201c:	d037      	beq.n	800208e <HAL_GPIO_EXTI_Callback+0x9da>
 800201e:	4b7a      	ldr	r3, [pc, #488]	; (8002208 <HAL_GPIO_EXTI_Callback+0xb54>)
 8002020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002022:	2b00      	cmp	r3, #0
 8002024:	d033      	beq.n	800208e <HAL_GPIO_EXTI_Callback+0x9da>
    {
      HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); //PB8    A05  底盘车电�????????????????????  �????????????????????个触�????????????????????
 8002026:	2108      	movs	r1, #8
 8002028:	4879      	ldr	r0, [pc, #484]	; (8002210 <HAL_GPIO_EXTI_Callback+0xb5c>)
 800202a:	f003 fa21 	bl	8005470 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //PB9    A06 底盘车电�???????????????????? 另一个触�????????????????????
 800202e:	210c      	movs	r1, #12
 8002030:	4877      	ldr	r0, [pc, #476]	; (8002210 <HAL_GPIO_EXTI_Callback+0xb5c>)
 8002032:	f003 fa1d 	bl	8005470 <HAL_TIM_PWM_Start>
                                                // // HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
                                                // // HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
      // PB0   __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8002036:	4b76      	ldr	r3, [pc, #472]	; (8002210 <HAL_GPIO_EXTI_Callback+0xb5c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2200      	movs	r2, #0
 800203c:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      // PB1   __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 800203e:	4b74      	ldr	r3, [pc, #464]	; (8002210 <HAL_GPIO_EXTI_Callback+0xb5c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2200      	movs	r2, #0
 8002044:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_Delay(10);
 8002046:	200a      	movs	r0, #10
 8002048:	f000 ff00 	bl	8002e4c <HAL_Delay>
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 1000);
 800204c:	4b70      	ldr	r3, [pc, #448]	; (8002210 <HAL_GPIO_EXTI_Callback+0xb5c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002054:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
      HAL_Delay(5000);
 8002056:	f241 3088 	movw	r0, #5000	; 0x1388
 800205a:	f000 fef7 	bl	8002e4c <HAL_Delay>
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 800205e:	4b6c      	ldr	r3, [pc, #432]	; (8002210 <HAL_GPIO_EXTI_Callback+0xb5c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2200      	movs	r2, #0
 8002064:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 500);
 8002066:	4b6a      	ldr	r3, [pc, #424]	; (8002210 <HAL_GPIO_EXTI_Callback+0xb5c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800206e:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_Delay(100);
 8002070:	2064      	movs	r0, #100	; 0x64
 8002072:	f000 feeb 	bl	8002e4c <HAL_Delay>
      //防抱�????????????????????
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 8002076:	4b66      	ldr	r3, [pc, #408]	; (8002210 <HAL_GPIO_EXTI_Callback+0xb5c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2200      	movs	r2, #0
 800207c:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 800207e:	4b64      	ldr	r3, [pc, #400]	; (8002210 <HAL_GPIO_EXTI_Callback+0xb5c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2200      	movs	r2, #0
 8002084:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
      // HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      HAL_Delay(3000);
 8002086:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800208a:	f000 fedf 	bl	8002e4c <HAL_Delay>
    }
    if (((!pdx[4]) || (!pdx[5])) && pbx[7] && (!pbx[6]) && pdx[15] && pdx[9])
 800208e:	4b5e      	ldr	r3, [pc, #376]	; (8002208 <HAL_GPIO_EXTI_Callback+0xb54>)
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_EXTI_Callback+0x9ea>
 8002096:	4b5c      	ldr	r3, [pc, #368]	; (8002208 <HAL_GPIO_EXTI_Callback+0xb54>)
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d143      	bne.n	8002126 <HAL_GPIO_EXTI_Callback+0xa72>
 800209e:	4b5b      	ldr	r3, [pc, #364]	; (800220c <HAL_GPIO_EXTI_Callback+0xb58>)
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d03f      	beq.n	8002126 <HAL_GPIO_EXTI_Callback+0xa72>
 80020a6:	4b59      	ldr	r3, [pc, #356]	; (800220c <HAL_GPIO_EXTI_Callback+0xb58>)
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d13b      	bne.n	8002126 <HAL_GPIO_EXTI_Callback+0xa72>
 80020ae:	4b56      	ldr	r3, [pc, #344]	; (8002208 <HAL_GPIO_EXTI_Callback+0xb54>)
 80020b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d037      	beq.n	8002126 <HAL_GPIO_EXTI_Callback+0xa72>
 80020b6:	4b54      	ldr	r3, [pc, #336]	; (8002208 <HAL_GPIO_EXTI_Callback+0xb54>)
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d033      	beq.n	8002126 <HAL_GPIO_EXTI_Callback+0xa72>
    {
      HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); //PB8    A05  底盘车电�????????????????????  �????????????????????个触�????????????????????
 80020be:	2108      	movs	r1, #8
 80020c0:	4853      	ldr	r0, [pc, #332]	; (8002210 <HAL_GPIO_EXTI_Callback+0xb5c>)
 80020c2:	f003 f9d5 	bl	8005470 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //PB9    A06 底盘车电�???????????????????? 另一个触�????????????????????
 80020c6:	210c      	movs	r1, #12
 80020c8:	4851      	ldr	r0, [pc, #324]	; (8002210 <HAL_GPIO_EXTI_Callback+0xb5c>)
 80020ca:	f003 f9d1 	bl	8005470 <HAL_TIM_PWM_Start>
                                                // // HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
                                                // // HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
      // PB0   __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 80020ce:	4b50      	ldr	r3, [pc, #320]	; (8002210 <HAL_GPIO_EXTI_Callback+0xb5c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2200      	movs	r2, #0
 80020d4:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      // PB1   __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 80020d6:	4b4e      	ldr	r3, [pc, #312]	; (8002210 <HAL_GPIO_EXTI_Callback+0xb5c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2200      	movs	r2, #0
 80020dc:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_Delay(10);
 80020de:	200a      	movs	r0, #10
 80020e0:	f000 feb4 	bl	8002e4c <HAL_Delay>
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 1000);
 80020e4:	4b4a      	ldr	r3, [pc, #296]	; (8002210 <HAL_GPIO_EXTI_Callback+0xb5c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020ec:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
      HAL_Delay(5000);
 80020ee:	f241 3088 	movw	r0, #5000	; 0x1388
 80020f2:	f000 feab 	bl	8002e4c <HAL_Delay>
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 80020f6:	4b46      	ldr	r3, [pc, #280]	; (8002210 <HAL_GPIO_EXTI_Callback+0xb5c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2200      	movs	r2, #0
 80020fc:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 500);
 80020fe:	4b44      	ldr	r3, [pc, #272]	; (8002210 <HAL_GPIO_EXTI_Callback+0xb5c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002106:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_Delay(100);
 8002108:	2064      	movs	r0, #100	; 0x64
 800210a:	f000 fe9f 	bl	8002e4c <HAL_Delay>
      //防抱�????????????????????
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 800210e:	4b40      	ldr	r3, [pc, #256]	; (8002210 <HAL_GPIO_EXTI_Callback+0xb5c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2200      	movs	r2, #0
 8002114:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8002116:	4b3e      	ldr	r3, [pc, #248]	; (8002210 <HAL_GPIO_EXTI_Callback+0xb5c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2200      	movs	r2, #0
 800211c:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
      // HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      HAL_Delay(3000);
 800211e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002122:	f000 fe93 	bl	8002e4c <HAL_Delay>
    }
  }
  //PD11 A31接地�????????????????????分闸输入按钮                               重要3    [按钮  外部中断]
  if (GPIO_Pin == GPIO_PIN_11)
 8002126:	88fb      	ldrh	r3, [r7, #6]
 8002128:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800212c:	f040 80c6 	bne.w	80022bc <HAL_GPIO_EXTI_Callback+0xc08>
  {
    //PB7继电器�?�开关必须使�????????????????????
    //已捕获PD10 接地�????????????????????手动合闸  接地�????????????????????电机反转PB8 = 1 , PB9 = 0 �???????????????????? !远控允许PD9必为0  �???????????????????? 底盘车试验位置PD4 �???????????????????? PB7继电器�?�开关必须使能为1 �????????????????????  !PB6 断路器必须分�???????????????????? �???????????????????? PD12 接地�????????????????????机构合闸位置（信号快)  �???????????????????? PD14 接地�????????????????????合闸位置
    pdx[4] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4);
 8002130:	2110      	movs	r1, #16
 8002132:	4838      	ldr	r0, [pc, #224]	; (8002214 <HAL_GPIO_EXTI_Callback+0xb60>)
 8002134:	f001 ff70 	bl	8004018 <HAL_GPIO_ReadPin>
 8002138:	4603      	mov	r3, r0
 800213a:	461a      	mov	r2, r3
 800213c:	4b32      	ldr	r3, [pc, #200]	; (8002208 <HAL_GPIO_EXTI_Callback+0xb54>)
 800213e:	611a      	str	r2, [r3, #16]
    pdx[9] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_9);
 8002140:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002144:	4833      	ldr	r0, [pc, #204]	; (8002214 <HAL_GPIO_EXTI_Callback+0xb60>)
 8002146:	f001 ff67 	bl	8004018 <HAL_GPIO_ReadPin>
 800214a:	4603      	mov	r3, r0
 800214c:	461a      	mov	r2, r3
 800214e:	4b2e      	ldr	r3, [pc, #184]	; (8002208 <HAL_GPIO_EXTI_Callback+0xb54>)
 8002150:	625a      	str	r2, [r3, #36]	; 0x24

    pdx[14] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14);
 8002152:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002156:	482f      	ldr	r0, [pc, #188]	; (8002214 <HAL_GPIO_EXTI_Callback+0xb60>)
 8002158:	f001 ff5e 	bl	8004018 <HAL_GPIO_ReadPin>
 800215c:	4603      	mov	r3, r0
 800215e:	461a      	mov	r2, r3
 8002160:	4b29      	ldr	r3, [pc, #164]	; (8002208 <HAL_GPIO_EXTI_Callback+0xb54>)
 8002162:	639a      	str	r2, [r3, #56]	; 0x38

    pbx[7] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
 8002164:	2180      	movs	r1, #128	; 0x80
 8002166:	482c      	ldr	r0, [pc, #176]	; (8002218 <HAL_GPIO_EXTI_Callback+0xb64>)
 8002168:	f001 ff56 	bl	8004018 <HAL_GPIO_ReadPin>
 800216c:	4603      	mov	r3, r0
 800216e:	461a      	mov	r2, r3
 8002170:	4b26      	ldr	r3, [pc, #152]	; (800220c <HAL_GPIO_EXTI_Callback+0xb58>)
 8002172:	61da      	str	r2, [r3, #28]
    pbx[6] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8002174:	2140      	movs	r1, #64	; 0x40
 8002176:	4828      	ldr	r0, [pc, #160]	; (8002218 <HAL_GPIO_EXTI_Callback+0xb64>)
 8002178:	f001 ff4e 	bl	8004018 <HAL_GPIO_ReadPin>
 800217c:	4603      	mov	r3, r0
 800217e:	461a      	mov	r2, r3
 8002180:	4b22      	ldr	r3, [pc, #136]	; (800220c <HAL_GPIO_EXTI_Callback+0xb58>)
 8002182:	619a      	str	r2, [r3, #24]

    if (pdx[4] && pbx[7] && (!pbx[6]) && pdx[14] && (!pdx[9]))
 8002184:	4b20      	ldr	r3, [pc, #128]	; (8002208 <HAL_GPIO_EXTI_Callback+0xb54>)
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d04f      	beq.n	800222c <HAL_GPIO_EXTI_Callback+0xb78>
 800218c:	4b1f      	ldr	r3, [pc, #124]	; (800220c <HAL_GPIO_EXTI_Callback+0xb58>)
 800218e:	69db      	ldr	r3, [r3, #28]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d04b      	beq.n	800222c <HAL_GPIO_EXTI_Callback+0xb78>
 8002194:	4b1d      	ldr	r3, [pc, #116]	; (800220c <HAL_GPIO_EXTI_Callback+0xb58>)
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d147      	bne.n	800222c <HAL_GPIO_EXTI_Callback+0xb78>
 800219c:	4b1a      	ldr	r3, [pc, #104]	; (8002208 <HAL_GPIO_EXTI_Callback+0xb54>)
 800219e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d043      	beq.n	800222c <HAL_GPIO_EXTI_Callback+0xb78>
 80021a4:	4b18      	ldr	r3, [pc, #96]	; (8002208 <HAL_GPIO_EXTI_Callback+0xb54>)
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d13f      	bne.n	800222c <HAL_GPIO_EXTI_Callback+0xb78>
    {
      HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); // PB8    A05  底盘车电�????????????????????  �????????????????????个触�????????????????????
 80021ac:	2108      	movs	r1, #8
 80021ae:	4818      	ldr	r0, [pc, #96]	; (8002210 <HAL_GPIO_EXTI_Callback+0xb5c>)
 80021b0:	f003 f95e 	bl	8005470 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); // PB9    A06 底盘车电�???????????????????? 另一个触�????????????????????
 80021b4:	210c      	movs	r1, #12
 80021b6:	4816      	ldr	r0, [pc, #88]	; (8002210 <HAL_GPIO_EXTI_Callback+0xb5c>)
 80021b8:	f003 f95a 	bl	8005470 <HAL_TIM_PWM_Start>
                                                // // HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
                                                // // HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
      // PB0   __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 80021bc:	4b14      	ldr	r3, [pc, #80]	; (8002210 <HAL_GPIO_EXTI_Callback+0xb5c>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2200      	movs	r2, #0
 80021c2:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      // PB1   __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 80021c4:	4b12      	ldr	r3, [pc, #72]	; (8002210 <HAL_GPIO_EXTI_Callback+0xb5c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2200      	movs	r2, #0
 80021ca:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_Delay(10);
 80021cc:	200a      	movs	r0, #10
 80021ce:	f000 fe3d 	bl	8002e4c <HAL_Delay>
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 1000);
 80021d2:	4b0f      	ldr	r3, [pc, #60]	; (8002210 <HAL_GPIO_EXTI_Callback+0xb5c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021da:	641a      	str	r2, [r3, #64]	; 0x40
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
      HAL_Delay(5000);
 80021dc:	f241 3088 	movw	r0, #5000	; 0x1388
 80021e0:	f000 fe34 	bl	8002e4c <HAL_Delay>
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 80021e4:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <HAL_GPIO_EXTI_Callback+0xb5c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2200      	movs	r2, #0
 80021ea:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 500);
 80021ec:	4b08      	ldr	r3, [pc, #32]	; (8002210 <HAL_GPIO_EXTI_Callback+0xb5c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80021f4:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_Delay(100);
 80021f6:	2064      	movs	r0, #100	; 0x64
 80021f8:	f000 fe28 	bl	8002e4c <HAL_Delay>
      //防抱�????????????????????
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 80021fc:	4b04      	ldr	r3, [pc, #16]	; (8002210 <HAL_GPIO_EXTI_Callback+0xb5c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2200      	movs	r2, #0
 8002202:	641a      	str	r2, [r3, #64]	; 0x40
 8002204:	e00a      	b.n	800221c <HAL_GPIO_EXTI_Callback+0xb68>
 8002206:	bf00      	nop
 8002208:	200002f8 	.word	0x200002f8
 800220c:	200002d4 	.word	0x200002d4
 8002210:	20008344 	.word	0x20008344
 8002214:	40020c00 	.word	0x40020c00
 8002218:	40020400 	.word	0x40020400
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 800221c:	4b2c      	ldr	r3, [pc, #176]	; (80022d0 <HAL_GPIO_EXTI_Callback+0xc1c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2200      	movs	r2, #0
 8002222:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      HAL_Delay(3000);
 8002224:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002228:	f000 fe10 	bl	8002e4c <HAL_Delay>
      // HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
      // HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
    }
    if (pdx[4] && pbx[7] && (!pbx[6]) && pdx[14] && pdx[9])
 800222c:	4b29      	ldr	r3, [pc, #164]	; (80022d4 <HAL_GPIO_EXTI_Callback+0xc20>)
 800222e:	691b      	ldr	r3, [r3, #16]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d043      	beq.n	80022bc <HAL_GPIO_EXTI_Callback+0xc08>
 8002234:	4b28      	ldr	r3, [pc, #160]	; (80022d8 <HAL_GPIO_EXTI_Callback+0xc24>)
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d03f      	beq.n	80022bc <HAL_GPIO_EXTI_Callback+0xc08>
 800223c:	4b26      	ldr	r3, [pc, #152]	; (80022d8 <HAL_GPIO_EXTI_Callback+0xc24>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d13b      	bne.n	80022bc <HAL_GPIO_EXTI_Callback+0xc08>
 8002244:	4b23      	ldr	r3, [pc, #140]	; (80022d4 <HAL_GPIO_EXTI_Callback+0xc20>)
 8002246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002248:	2b00      	cmp	r3, #0
 800224a:	d037      	beq.n	80022bc <HAL_GPIO_EXTI_Callback+0xc08>
 800224c:	4b21      	ldr	r3, [pc, #132]	; (80022d4 <HAL_GPIO_EXTI_Callback+0xc20>)
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	2b00      	cmp	r3, #0
 8002252:	d033      	beq.n	80022bc <HAL_GPIO_EXTI_Callback+0xc08>
    {
      HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); //PB8    A05  底盘车电�????????????????????  �????????????????????个触�????????????????????
 8002254:	2108      	movs	r1, #8
 8002256:	481e      	ldr	r0, [pc, #120]	; (80022d0 <HAL_GPIO_EXTI_Callback+0xc1c>)
 8002258:	f003 f90a 	bl	8005470 <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //PB9    A06 底盘车电�???????????????????? 另一个触�????????????????????
 800225c:	210c      	movs	r1, #12
 800225e:	481c      	ldr	r0, [pc, #112]	; (80022d0 <HAL_GPIO_EXTI_Callback+0xc1c>)
 8002260:	f003 f906 	bl	8005470 <HAL_TIM_PWM_Start>
                                                // // HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
                                                // // HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
      // PB0   __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <HAL_GPIO_EXTI_Callback+0xc1c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2200      	movs	r2, #0
 800226a:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      // PB1   __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 800226c:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <HAL_GPIO_EXTI_Callback+0xc1c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2200      	movs	r2, #0
 8002272:	641a      	str	r2, [r3, #64]	; 0x40
      HAL_Delay(10);
 8002274:	200a      	movs	r0, #10
 8002276:	f000 fde9 	bl	8002e4c <HAL_Delay>
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 1000);
 800227a:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <HAL_GPIO_EXTI_Callback+0xc1c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002282:	641a      	str	r2, [r3, #64]	; 0x40
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
      HAL_Delay(5000);
 8002284:	f241 3088 	movw	r0, #5000	; 0x1388
 8002288:	f000 fde0 	bl	8002e4c <HAL_Delay>
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 800228c:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <HAL_GPIO_EXTI_Callback+0xc1c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2200      	movs	r2, #0
 8002292:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 500);
 8002294:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <HAL_GPIO_EXTI_Callback+0xc1c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800229c:	63da      	str	r2, [r3, #60]	; 0x3c
      HAL_Delay(100);
 800229e:	2064      	movs	r0, #100	; 0x64
 80022a0:	f000 fdd4 	bl	8002e4c <HAL_Delay>
      //防抱�????????????????????
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 80022a4:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <HAL_GPIO_EXTI_Callback+0xc1c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2200      	movs	r2, #0
 80022aa:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 80022ac:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <HAL_GPIO_EXTI_Callback+0xc1c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2200      	movs	r2, #0
 80022b2:	63da      	str	r2, [r3, #60]	; 0x3c
      // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
      HAL_Delay(3000);
 80022b4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80022b8:	f000 fdc8 	bl	8002e4c <HAL_Delay>
      // HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
      // HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
    }
  }

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80022bc:	2200      	movs	r2, #0
 80022be:	2180      	movs	r1, #128	; 0x80
 80022c0:	4806      	ldr	r0, [pc, #24]	; (80022dc <HAL_GPIO_EXTI_Callback+0xc28>)
 80022c2:	f001 fec1 	bl	8004048 <HAL_GPIO_WritePin>
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20008344 	.word	0x20008344
 80022d4:	200002f8 	.word	0x200002f8
 80022d8:	200002d4 	.word	0x200002d4
 80022dc:	40020400 	.word	0x40020400

080022e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022e4:	b672      	cpsid	i
}
 80022e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022e8:	e7fe      	b.n	80022e8 <Error_Handler+0x8>
	...

080022ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80022f2:	4b0f      	ldr	r3, [pc, #60]	; (8002330 <HAL_MspInit+0x44>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	4a0e      	ldr	r2, [pc, #56]	; (8002330 <HAL_MspInit+0x44>)
 80022f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022fc:	6413      	str	r3, [r2, #64]	; 0x40
 80022fe:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <HAL_MspInit+0x44>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002306:	607b      	str	r3, [r7, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230a:	4b09      	ldr	r3, [pc, #36]	; (8002330 <HAL_MspInit+0x44>)
 800230c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230e:	4a08      	ldr	r2, [pc, #32]	; (8002330 <HAL_MspInit+0x44>)
 8002310:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002314:	6453      	str	r3, [r2, #68]	; 0x44
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_MspInit+0x44>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800231e:	603b      	str	r3, [r7, #0]
 8002320:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	40023800 	.word	0x40023800

08002334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002338:	e7fe      	b.n	8002338 <NMI_Handler+0x4>

0800233a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800233a:	b480      	push	{r7}
 800233c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800233e:	e7fe      	b.n	800233e <HardFault_Handler+0x4>

08002340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002344:	e7fe      	b.n	8002344 <MemManage_Handler+0x4>

08002346 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800234a:	e7fe      	b.n	800234a <BusFault_Handler+0x4>

0800234c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002350:	e7fe      	b.n	8002350 <UsageFault_Handler+0x4>

08002352 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002352:	b480      	push	{r7}
 8002354:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002356:	bf00      	nop
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800236e:	b480      	push	{r7}
 8002370:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002380:	f000 fd44 	bl	8002e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002384:	bf00      	nop
 8002386:	bd80      	pop	{r7, pc}

08002388 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800238c:	2001      	movs	r0, #1
 800238e:	f001 fe75 	bl	800407c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}

08002396 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800239a:	2002      	movs	r0, #2
 800239c:	f001 fe6e 	bl	800407c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80023a0:	bf00      	nop
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80023a8:	2004      	movs	r0, #4
 80023aa:	f001 fe67 	bl	800407c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80023b6:	2008      	movs	r0, #8
 80023b8:	f001 fe60 	bl	800407c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}

080023c0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80023c4:	2040      	movs	r0, #64	; 0x40
 80023c6:	f001 fe59 	bl	800407c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80023ca:	2080      	movs	r0, #128	; 0x80
 80023cc:	f001 fe56 	bl	800407c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80023d0:	bf00      	nop
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80023d8:	4802      	ldr	r0, [pc, #8]	; (80023e4 <TIM3_IRQHandler+0x10>)
 80023da:	f003 f9c3 	bl	8005764 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20008390 	.word	0x20008390

080023e8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80023ec:	4802      	ldr	r0, [pc, #8]	; (80023f8 <TIM4_IRQHandler+0x10>)
 80023ee:	f003 f9b9 	bl	8005764 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20008344 	.word	0x20008344

080023fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002400:	4802      	ldr	r0, [pc, #8]	; (800240c <USART1_IRQHandler+0x10>)
 8002402:	f004 f8f5 	bl	80065f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20008474 	.word	0x20008474

08002410 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002414:	4802      	ldr	r0, [pc, #8]	; (8002420 <USART2_IRQHandler+0x10>)
 8002416:	f004 f8eb 	bl	80065f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	200084f8 	.word	0x200084f8

08002424 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002428:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800242c:	f001 fe26 	bl	800407c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002430:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002434:	f001 fe22 	bl	800407c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}

0800243c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002440:	4802      	ldr	r0, [pc, #8]	; (800244c <TIM6_DAC_IRQHandler+0x10>)
 8002442:	f003 f98f 	bl	8005764 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	200083dc 	.word	0x200083dc

08002450 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002454:	4802      	ldr	r0, [pc, #8]	; (8002460 <DMA2_Stream0_IRQHandler+0x10>)
 8002456:	f001 f9f7 	bl	8003848 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	2000025c 	.word	0x2000025c

08002464 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
	return 1;
 8002468:	2301      	movs	r3, #1
}
 800246a:	4618      	mov	r0, r3
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <_kill>:

int _kill(int pid, int sig)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800247e:	f005 f831 	bl	80074e4 <__errno>
 8002482:	4603      	mov	r3, r0
 8002484:	2216      	movs	r2, #22
 8002486:	601a      	str	r2, [r3, #0]
	return -1;
 8002488:	f04f 33ff 	mov.w	r3, #4294967295
}
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <_exit>:

void _exit (int status)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800249c:	f04f 31ff 	mov.w	r1, #4294967295
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff ffe7 	bl	8002474 <_kill>
	while (1) {}		/* Make sure we hang here */
 80024a6:	e7fe      	b.n	80024a6 <_exit+0x12>

080024a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]
 80024b8:	e00a      	b.n	80024d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024ba:	f3af 8000 	nop.w
 80024be:	4601      	mov	r1, r0
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	60ba      	str	r2, [r7, #8]
 80024c6:	b2ca      	uxtb	r2, r1
 80024c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	3301      	adds	r3, #1
 80024ce:	617b      	str	r3, [r7, #20]
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	dbf0      	blt.n	80024ba <_read+0x12>
	}

return len;
 80024d8:	687b      	ldr	r3, [r7, #4]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b086      	sub	sp, #24
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	60f8      	str	r0, [r7, #12]
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ee:	2300      	movs	r3, #0
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	e009      	b.n	8002508 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	1c5a      	adds	r2, r3, #1
 80024f8:	60ba      	str	r2, [r7, #8]
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fe fe8f 	bl	8001220 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	3301      	adds	r3, #1
 8002506:	617b      	str	r3, [r7, #20]
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	429a      	cmp	r2, r3
 800250e:	dbf1      	blt.n	80024f4 <_write+0x12>
	}
	return len;
 8002510:	687b      	ldr	r3, [r7, #4]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <_close>:

int _close(int file)
{
 800251a:	b480      	push	{r7}
 800251c:	b083      	sub	sp, #12
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
	return -1;
 8002522:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002526:	4618      	mov	r0, r3
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002542:	605a      	str	r2, [r3, #4]
	return 0;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <_isatty>:

int _isatty(int file)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
	return 1;
 800255a:	2301      	movs	r3, #1
}
 800255c:	4618      	mov	r0, r3
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
	return 0;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
	...

08002584 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800258c:	4a14      	ldr	r2, [pc, #80]	; (80025e0 <_sbrk+0x5c>)
 800258e:	4b15      	ldr	r3, [pc, #84]	; (80025e4 <_sbrk+0x60>)
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002598:	4b13      	ldr	r3, [pc, #76]	; (80025e8 <_sbrk+0x64>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d102      	bne.n	80025a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025a0:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <_sbrk+0x64>)
 80025a2:	4a12      	ldr	r2, [pc, #72]	; (80025ec <_sbrk+0x68>)
 80025a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025a6:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <_sbrk+0x64>)
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4413      	add	r3, r2
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d207      	bcs.n	80025c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025b4:	f004 ff96 	bl	80074e4 <__errno>
 80025b8:	4603      	mov	r3, r0
 80025ba:	220c      	movs	r2, #12
 80025bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025be:	f04f 33ff 	mov.w	r3, #4294967295
 80025c2:	e009      	b.n	80025d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025c4:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <_sbrk+0x64>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025ca:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <_sbrk+0x64>)
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4413      	add	r3, r2
 80025d2:	4a05      	ldr	r2, [pc, #20]	; (80025e8 <_sbrk+0x64>)
 80025d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025d6:	68fb      	ldr	r3, [r7, #12]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20050000 	.word	0x20050000
 80025e4:	00000400 	.word	0x00000400
 80025e8:	200001fc 	.word	0x200001fc
 80025ec:	20008588 	.word	0x20008588

080025f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025f4:	4b06      	ldr	r3, [pc, #24]	; (8002610 <SystemInit+0x20>)
 80025f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fa:	4a05      	ldr	r2, [pc, #20]	; (8002610 <SystemInit+0x20>)
 80025fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002600:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <MX_TIM3_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim14;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08a      	sub	sp, #40	; 0x28
 8002618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800261a:	f107 031c 	add.w	r3, r7, #28
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	605a      	str	r2, [r3, #4]
 8002624:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002626:	463b      	mov	r3, r7
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	60da      	str	r2, [r3, #12]
 8002632:	611a      	str	r2, [r3, #16]
 8002634:	615a      	str	r2, [r3, #20]
 8002636:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002638:	4b28      	ldr	r3, [pc, #160]	; (80026dc <MX_TIM3_Init+0xc8>)
 800263a:	4a29      	ldr	r2, [pc, #164]	; (80026e0 <MX_TIM3_Init+0xcc>)
 800263c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 215;
 800263e:	4b27      	ldr	r3, [pc, #156]	; (80026dc <MX_TIM3_Init+0xc8>)
 8002640:	22d7      	movs	r2, #215	; 0xd7
 8002642:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002644:	4b25      	ldr	r3, [pc, #148]	; (80026dc <MX_TIM3_Init+0xc8>)
 8002646:	2200      	movs	r2, #0
 8002648:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800264a:	4b24      	ldr	r3, [pc, #144]	; (80026dc <MX_TIM3_Init+0xc8>)
 800264c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002650:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002652:	4b22      	ldr	r3, [pc, #136]	; (80026dc <MX_TIM3_Init+0xc8>)
 8002654:	2200      	movs	r2, #0
 8002656:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002658:	4b20      	ldr	r3, [pc, #128]	; (80026dc <MX_TIM3_Init+0xc8>)
 800265a:	2200      	movs	r2, #0
 800265c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800265e:	481f      	ldr	r0, [pc, #124]	; (80026dc <MX_TIM3_Init+0xc8>)
 8002660:	f002 feae 	bl	80053c0 <HAL_TIM_PWM_Init>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800266a:	f7ff fe39 	bl	80022e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800266e:	2300      	movs	r3, #0
 8002670:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002672:	2300      	movs	r3, #0
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002676:	f107 031c 	add.w	r3, r7, #28
 800267a:	4619      	mov	r1, r3
 800267c:	4817      	ldr	r0, [pc, #92]	; (80026dc <MX_TIM3_Init+0xc8>)
 800267e:	f003 fded 	bl	800625c <HAL_TIMEx_MasterConfigSynchronization>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002688:	f7ff fe2a 	bl	80022e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800268c:	2360      	movs	r3, #96	; 0x60
 800268e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8002690:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002694:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002696:	2300      	movs	r3, #0
 8002698:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800269a:	2300      	movs	r3, #0
 800269c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800269e:	463b      	mov	r3, r7
 80026a0:	2208      	movs	r2, #8
 80026a2:	4619      	mov	r1, r3
 80026a4:	480d      	ldr	r0, [pc, #52]	; (80026dc <MX_TIM3_Init+0xc8>)
 80026a6:	f003 f97d 	bl	80059a4 <HAL_TIM_PWM_ConfigChannel>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80026b0:	f7ff fe16 	bl	80022e0 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80026b8:	463b      	mov	r3, r7
 80026ba:	220c      	movs	r2, #12
 80026bc:	4619      	mov	r1, r3
 80026be:	4807      	ldr	r0, [pc, #28]	; (80026dc <MX_TIM3_Init+0xc8>)
 80026c0:	f003 f970 	bl	80059a4 <HAL_TIM_PWM_ConfigChannel>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80026ca:	f7ff fe09 	bl	80022e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80026ce:	4803      	ldr	r0, [pc, #12]	; (80026dc <MX_TIM3_Init+0xc8>)
 80026d0:	f000 f942 	bl	8002958 <HAL_TIM_MspPostInit>

}
 80026d4:	bf00      	nop
 80026d6:	3728      	adds	r7, #40	; 0x28
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	20008390 	.word	0x20008390
 80026e0:	40000400 	.word	0x40000400

080026e4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08a      	sub	sp, #40	; 0x28
 80026e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026ea:	f107 031c 	add.w	r3, r7, #28
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	605a      	str	r2, [r3, #4]
 80026f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026f6:	463b      	mov	r3, r7
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	605a      	str	r2, [r3, #4]
 80026fe:	609a      	str	r2, [r3, #8]
 8002700:	60da      	str	r2, [r3, #12]
 8002702:	611a      	str	r2, [r3, #16]
 8002704:	615a      	str	r2, [r3, #20]
 8002706:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002708:	4b28      	ldr	r3, [pc, #160]	; (80027ac <MX_TIM4_Init+0xc8>)
 800270a:	4a29      	ldr	r2, [pc, #164]	; (80027b0 <MX_TIM4_Init+0xcc>)
 800270c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 215;
 800270e:	4b27      	ldr	r3, [pc, #156]	; (80027ac <MX_TIM4_Init+0xc8>)
 8002710:	22d7      	movs	r2, #215	; 0xd7
 8002712:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002714:	4b25      	ldr	r3, [pc, #148]	; (80027ac <MX_TIM4_Init+0xc8>)
 8002716:	2200      	movs	r2, #0
 8002718:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 800271a:	4b24      	ldr	r3, [pc, #144]	; (80027ac <MX_TIM4_Init+0xc8>)
 800271c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002720:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002722:	4b22      	ldr	r3, [pc, #136]	; (80027ac <MX_TIM4_Init+0xc8>)
 8002724:	2200      	movs	r2, #0
 8002726:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002728:	4b20      	ldr	r3, [pc, #128]	; (80027ac <MX_TIM4_Init+0xc8>)
 800272a:	2200      	movs	r2, #0
 800272c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800272e:	481f      	ldr	r0, [pc, #124]	; (80027ac <MX_TIM4_Init+0xc8>)
 8002730:	f002 fe46 	bl	80053c0 <HAL_TIM_PWM_Init>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800273a:	f7ff fdd1 	bl	80022e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800273e:	2300      	movs	r3, #0
 8002740:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002742:	2300      	movs	r3, #0
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002746:	f107 031c 	add.w	r3, r7, #28
 800274a:	4619      	mov	r1, r3
 800274c:	4817      	ldr	r0, [pc, #92]	; (80027ac <MX_TIM4_Init+0xc8>)
 800274e:	f003 fd85 	bl	800625c <HAL_TIMEx_MasterConfigSynchronization>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002758:	f7ff fdc2 	bl	80022e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800275c:	2360      	movs	r3, #96	; 0x60
 800275e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000;
 8002760:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002764:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002766:	2300      	movs	r3, #0
 8002768:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800276a:	2300      	movs	r3, #0
 800276c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800276e:	463b      	mov	r3, r7
 8002770:	2208      	movs	r2, #8
 8002772:	4619      	mov	r1, r3
 8002774:	480d      	ldr	r0, [pc, #52]	; (80027ac <MX_TIM4_Init+0xc8>)
 8002776:	f003 f915 	bl	80059a4 <HAL_TIM_PWM_ConfigChannel>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8002780:	f7ff fdae 	bl	80022e0 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8002784:	2300      	movs	r3, #0
 8002786:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002788:	463b      	mov	r3, r7
 800278a:	220c      	movs	r2, #12
 800278c:	4619      	mov	r1, r3
 800278e:	4807      	ldr	r0, [pc, #28]	; (80027ac <MX_TIM4_Init+0xc8>)
 8002790:	f003 f908 	bl	80059a4 <HAL_TIM_PWM_ConfigChannel>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <MX_TIM4_Init+0xba>
  {
    Error_Handler();
 800279a:	f7ff fda1 	bl	80022e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800279e:	4803      	ldr	r0, [pc, #12]	; (80027ac <MX_TIM4_Init+0xc8>)
 80027a0:	f000 f8da 	bl	8002958 <HAL_TIM_MspPostInit>

}
 80027a4:	bf00      	nop
 80027a6:	3728      	adds	r7, #40	; 0x28
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	20008344 	.word	0x20008344
 80027b0:	40000800 	.word	0x40000800

080027b4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ba:	1d3b      	adds	r3, r7, #4
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80027c4:	4b15      	ldr	r3, [pc, #84]	; (800281c <MX_TIM6_Init+0x68>)
 80027c6:	4a16      	ldr	r2, [pc, #88]	; (8002820 <MX_TIM6_Init+0x6c>)
 80027c8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10800-1;
 80027ca:	4b14      	ldr	r3, [pc, #80]	; (800281c <MX_TIM6_Init+0x68>)
 80027cc:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80027d0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d2:	4b12      	ldr	r3, [pc, #72]	; (800281c <MX_TIM6_Init+0x68>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 80027d8:	4b10      	ldr	r3, [pc, #64]	; (800281c <MX_TIM6_Init+0x68>)
 80027da:	f242 720f 	movw	r2, #9999	; 0x270f
 80027de:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e0:	4b0e      	ldr	r3, [pc, #56]	; (800281c <MX_TIM6_Init+0x68>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80027e6:	480d      	ldr	r0, [pc, #52]	; (800281c <MX_TIM6_Init+0x68>)
 80027e8:	f002 fd1a 	bl	8005220 <HAL_TIM_Base_Init>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80027f2:	f7ff fd75 	bl	80022e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027f6:	2300      	movs	r3, #0
 80027f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80027fe:	1d3b      	adds	r3, r7, #4
 8002800:	4619      	mov	r1, r3
 8002802:	4806      	ldr	r0, [pc, #24]	; (800281c <MX_TIM6_Init+0x68>)
 8002804:	f003 fd2a 	bl	800625c <HAL_TIMEx_MasterConfigSynchronization>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800280e:	f7ff fd67 	bl	80022e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002812:	bf00      	nop
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	200083dc 	.word	0x200083dc
 8002820:	40001000 	.word	0x40001000

08002824 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002828:	4b0e      	ldr	r3, [pc, #56]	; (8002864 <MX_TIM14_Init+0x40>)
 800282a:	4a0f      	ldr	r2, [pc, #60]	; (8002868 <MX_TIM14_Init+0x44>)
 800282c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 107;
 800282e:	4b0d      	ldr	r3, [pc, #52]	; (8002864 <MX_TIM14_Init+0x40>)
 8002830:	226b      	movs	r2, #107	; 0x6b
 8002832:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002834:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <MX_TIM14_Init+0x40>)
 8002836:	2200      	movs	r2, #0
 8002838:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800283a:	4b0a      	ldr	r3, [pc, #40]	; (8002864 <MX_TIM14_Init+0x40>)
 800283c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002840:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002842:	4b08      	ldr	r3, [pc, #32]	; (8002864 <MX_TIM14_Init+0x40>)
 8002844:	2200      	movs	r2, #0
 8002846:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002848:	4b06      	ldr	r3, [pc, #24]	; (8002864 <MX_TIM14_Init+0x40>)
 800284a:	2200      	movs	r2, #0
 800284c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800284e:	4805      	ldr	r0, [pc, #20]	; (8002864 <MX_TIM14_Init+0x40>)
 8002850:	f002 fce6 	bl	8005220 <HAL_TIM_Base_Init>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800285a:	f7ff fd41 	bl	80022e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800285e:	bf00      	nop
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	20008428 	.word	0x20008428
 8002868:	40002000 	.word	0x40002000

0800286c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a1a      	ldr	r2, [pc, #104]	; (80028e4 <HAL_TIM_PWM_MspInit+0x78>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d114      	bne.n	80028a8 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800287e:	4b1a      	ldr	r3, [pc, #104]	; (80028e8 <HAL_TIM_PWM_MspInit+0x7c>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	4a19      	ldr	r2, [pc, #100]	; (80028e8 <HAL_TIM_PWM_MspInit+0x7c>)
 8002884:	f043 0302 	orr.w	r3, r3, #2
 8002888:	6413      	str	r3, [r2, #64]	; 0x40
 800288a:	4b17      	ldr	r3, [pc, #92]	; (80028e8 <HAL_TIM_PWM_MspInit+0x7c>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8002896:	2200      	movs	r2, #0
 8002898:	2101      	movs	r1, #1
 800289a:	201d      	movs	r0, #29
 800289c:	f000 fe5d 	bl	800355a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80028a0:	201d      	movs	r0, #29
 80028a2:	f000 fe76 	bl	8003592 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80028a6:	e018      	b.n	80028da <HAL_TIM_PWM_MspInit+0x6e>
  else if(tim_pwmHandle->Instance==TIM4)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a0f      	ldr	r2, [pc, #60]	; (80028ec <HAL_TIM_PWM_MspInit+0x80>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d113      	bne.n	80028da <HAL_TIM_PWM_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028b2:	4b0d      	ldr	r3, [pc, #52]	; (80028e8 <HAL_TIM_PWM_MspInit+0x7c>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	4a0c      	ldr	r2, [pc, #48]	; (80028e8 <HAL_TIM_PWM_MspInit+0x7c>)
 80028b8:	f043 0304 	orr.w	r3, r3, #4
 80028bc:	6413      	str	r3, [r2, #64]	; 0x40
 80028be:	4b0a      	ldr	r3, [pc, #40]	; (80028e8 <HAL_TIM_PWM_MspInit+0x7c>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	f003 0304 	and.w	r3, r3, #4
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80028ca:	2200      	movs	r2, #0
 80028cc:	2101      	movs	r1, #1
 80028ce:	201e      	movs	r0, #30
 80028d0:	f000 fe43 	bl	800355a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80028d4:	201e      	movs	r0, #30
 80028d6:	f000 fe5c 	bl	8003592 <HAL_NVIC_EnableIRQ>
}
 80028da:	bf00      	nop
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40000400 	.word	0x40000400
 80028e8:	40023800 	.word	0x40023800
 80028ec:	40000800 	.word	0x40000800

080028f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a13      	ldr	r2, [pc, #76]	; (800294c <HAL_TIM_Base_MspInit+0x5c>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d10c      	bne.n	800291c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002902:	4b13      	ldr	r3, [pc, #76]	; (8002950 <HAL_TIM_Base_MspInit+0x60>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	4a12      	ldr	r2, [pc, #72]	; (8002950 <HAL_TIM_Base_MspInit+0x60>)
 8002908:	f043 0310 	orr.w	r3, r3, #16
 800290c:	6413      	str	r3, [r2, #64]	; 0x40
 800290e:	4b10      	ldr	r3, [pc, #64]	; (8002950 <HAL_TIM_Base_MspInit+0x60>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	f003 0310 	and.w	r3, r3, #16
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 800291a:	e010      	b.n	800293e <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM14)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a0c      	ldr	r2, [pc, #48]	; (8002954 <HAL_TIM_Base_MspInit+0x64>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d10b      	bne.n	800293e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002926:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <HAL_TIM_Base_MspInit+0x60>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	4a09      	ldr	r2, [pc, #36]	; (8002950 <HAL_TIM_Base_MspInit+0x60>)
 800292c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002930:	6413      	str	r3, [r2, #64]	; 0x40
 8002932:	4b07      	ldr	r3, [pc, #28]	; (8002950 <HAL_TIM_Base_MspInit+0x60>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293a:	60bb      	str	r3, [r7, #8]
 800293c:	68bb      	ldr	r3, [r7, #8]
}
 800293e:	bf00      	nop
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	40001000 	.word	0x40001000
 8002950:	40023800 	.word	0x40023800
 8002954:	40002000 	.word	0x40002000

08002958 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08a      	sub	sp, #40	; 0x28
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a22      	ldr	r2, [pc, #136]	; (8002a00 <HAL_TIM_MspPostInit+0xa8>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d11c      	bne.n	80029b4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800297a:	4b22      	ldr	r3, [pc, #136]	; (8002a04 <HAL_TIM_MspPostInit+0xac>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	4a21      	ldr	r2, [pc, #132]	; (8002a04 <HAL_TIM_MspPostInit+0xac>)
 8002980:	f043 0302 	orr.w	r3, r3, #2
 8002984:	6313      	str	r3, [r2, #48]	; 0x30
 8002986:	4b1f      	ldr	r3, [pc, #124]	; (8002a04 <HAL_TIM_MspPostInit+0xac>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002992:	2303      	movs	r3, #3
 8002994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002996:	2302      	movs	r3, #2
 8002998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299a:	2300      	movs	r3, #0
 800299c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299e:	2300      	movs	r3, #0
 80029a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029a2:	2302      	movs	r3, #2
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a6:	f107 0314 	add.w	r3, r7, #20
 80029aa:	4619      	mov	r1, r3
 80029ac:	4816      	ldr	r0, [pc, #88]	; (8002a08 <HAL_TIM_MspPostInit+0xb0>)
 80029ae:	f001 f987 	bl	8003cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80029b2:	e021      	b.n	80029f8 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM4)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a14      	ldr	r2, [pc, #80]	; (8002a0c <HAL_TIM_MspPostInit+0xb4>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d11c      	bne.n	80029f8 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029be:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <HAL_TIM_MspPostInit+0xac>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	4a10      	ldr	r2, [pc, #64]	; (8002a04 <HAL_TIM_MspPostInit+0xac>)
 80029c4:	f043 0302 	orr.w	r3, r3, #2
 80029c8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ca:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <HAL_TIM_MspPostInit+0xac>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029dc:	2302      	movs	r3, #2
 80029de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e4:	2300      	movs	r3, #0
 80029e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80029e8:	2302      	movs	r3, #2
 80029ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ec:	f107 0314 	add.w	r3, r7, #20
 80029f0:	4619      	mov	r1, r3
 80029f2:	4805      	ldr	r0, [pc, #20]	; (8002a08 <HAL_TIM_MspPostInit+0xb0>)
 80029f4:	f001 f964 	bl	8003cc0 <HAL_GPIO_Init>
}
 80029f8:	bf00      	nop
 80029fa:	3728      	adds	r7, #40	; 0x28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40000400 	.word	0x40000400
 8002a04:	40023800 	.word	0x40023800
 8002a08:	40020400 	.word	0x40020400
 8002a0c:	40000800 	.word	0x40000800

08002a10 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a14:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <MX_USART1_UART_Init+0x58>)
 8002a16:	4a15      	ldr	r2, [pc, #84]	; (8002a6c <MX_USART1_UART_Init+0x5c>)
 8002a18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002a1a:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <MX_USART1_UART_Init+0x58>)
 8002a1c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a22:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <MX_USART1_UART_Init+0x58>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a28:	4b0f      	ldr	r3, [pc, #60]	; (8002a68 <MX_USART1_UART_Init+0x58>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a2e:	4b0e      	ldr	r3, [pc, #56]	; (8002a68 <MX_USART1_UART_Init+0x58>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a34:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <MX_USART1_UART_Init+0x58>)
 8002a36:	220c      	movs	r2, #12
 8002a38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <MX_USART1_UART_Init+0x58>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a40:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <MX_USART1_UART_Init+0x58>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a46:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <MX_USART1_UART_Init+0x58>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a4c:	4b06      	ldr	r3, [pc, #24]	; (8002a68 <MX_USART1_UART_Init+0x58>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a52:	4805      	ldr	r0, [pc, #20]	; (8002a68 <MX_USART1_UART_Init+0x58>)
 8002a54:	f003 fcae 	bl	80063b4 <HAL_UART_Init>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002a5e:	f7ff fc3f 	bl	80022e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	20008474 	.word	0x20008474
 8002a6c:	40011000 	.word	0x40011000

08002a70 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a74:	4b14      	ldr	r3, [pc, #80]	; (8002ac8 <MX_USART2_UART_Init+0x58>)
 8002a76:	4a15      	ldr	r2, [pc, #84]	; (8002acc <MX_USART2_UART_Init+0x5c>)
 8002a78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002a7a:	4b13      	ldr	r3, [pc, #76]	; (8002ac8 <MX_USART2_UART_Init+0x58>)
 8002a7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002a80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a82:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <MX_USART2_UART_Init+0x58>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a88:	4b0f      	ldr	r3, [pc, #60]	; (8002ac8 <MX_USART2_UART_Init+0x58>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ac8 <MX_USART2_UART_Init+0x58>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a94:	4b0c      	ldr	r3, [pc, #48]	; (8002ac8 <MX_USART2_UART_Init+0x58>)
 8002a96:	220c      	movs	r2, #12
 8002a98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ac8 <MX_USART2_UART_Init+0x58>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002aa0:	4b09      	ldr	r3, [pc, #36]	; (8002ac8 <MX_USART2_UART_Init+0x58>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002aa6:	4b08      	ldr	r3, [pc, #32]	; (8002ac8 <MX_USART2_UART_Init+0x58>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002aac:	4b06      	ldr	r3, [pc, #24]	; (8002ac8 <MX_USART2_UART_Init+0x58>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ab2:	4805      	ldr	r0, [pc, #20]	; (8002ac8 <MX_USART2_UART_Init+0x58>)
 8002ab4:	f003 fc7e 	bl	80063b4 <HAL_UART_Init>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002abe:	f7ff fc0f 	bl	80022e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ac2:	bf00      	nop
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	200084f8 	.word	0x200084f8
 8002acc:	40004400 	.word	0x40004400

08002ad0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08c      	sub	sp, #48	; 0x30
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad8:	f107 031c 	add.w	r3, r7, #28
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	605a      	str	r2, [r3, #4]
 8002ae2:	609a      	str	r2, [r3, #8]
 8002ae4:	60da      	str	r2, [r3, #12]
 8002ae6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a2e      	ldr	r2, [pc, #184]	; (8002ba8 <HAL_UART_MspInit+0xd8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d129      	bne.n	8002b46 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002af2:	4b2e      	ldr	r3, [pc, #184]	; (8002bac <HAL_UART_MspInit+0xdc>)
 8002af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af6:	4a2d      	ldr	r2, [pc, #180]	; (8002bac <HAL_UART_MspInit+0xdc>)
 8002af8:	f043 0310 	orr.w	r3, r3, #16
 8002afc:	6453      	str	r3, [r2, #68]	; 0x44
 8002afe:	4b2b      	ldr	r3, [pc, #172]	; (8002bac <HAL_UART_MspInit+0xdc>)
 8002b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b02:	f003 0310 	and.w	r3, r3, #16
 8002b06:	61bb      	str	r3, [r7, #24]
 8002b08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b0a:	4b28      	ldr	r3, [pc, #160]	; (8002bac <HAL_UART_MspInit+0xdc>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	4a27      	ldr	r2, [pc, #156]	; (8002bac <HAL_UART_MspInit+0xdc>)
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	6313      	str	r3, [r2, #48]	; 0x30
 8002b16:	4b25      	ldr	r3, [pc, #148]	; (8002bac <HAL_UART_MspInit+0xdc>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b22:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b28:	2302      	movs	r3, #2
 8002b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b30:	2303      	movs	r3, #3
 8002b32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b34:	2307      	movs	r3, #7
 8002b36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b38:	f107 031c 	add.w	r3, r7, #28
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	481c      	ldr	r0, [pc, #112]	; (8002bb0 <HAL_UART_MspInit+0xe0>)
 8002b40:	f001 f8be 	bl	8003cc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002b44:	e02c      	b.n	8002ba0 <HAL_UART_MspInit+0xd0>
  else if(uartHandle->Instance==USART2)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a1a      	ldr	r2, [pc, #104]	; (8002bb4 <HAL_UART_MspInit+0xe4>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d127      	bne.n	8002ba0 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b50:	4b16      	ldr	r3, [pc, #88]	; (8002bac <HAL_UART_MspInit+0xdc>)
 8002b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b54:	4a15      	ldr	r2, [pc, #84]	; (8002bac <HAL_UART_MspInit+0xdc>)
 8002b56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b5a:	6413      	str	r3, [r2, #64]	; 0x40
 8002b5c:	4b13      	ldr	r3, [pc, #76]	; (8002bac <HAL_UART_MspInit+0xdc>)
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b64:	613b      	str	r3, [r7, #16]
 8002b66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b68:	4b10      	ldr	r3, [pc, #64]	; (8002bac <HAL_UART_MspInit+0xdc>)
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6c:	4a0f      	ldr	r2, [pc, #60]	; (8002bac <HAL_UART_MspInit+0xdc>)
 8002b6e:	f043 0301 	orr.w	r3, r3, #1
 8002b72:	6313      	str	r3, [r2, #48]	; 0x30
 8002b74:	4b0d      	ldr	r3, [pc, #52]	; (8002bac <HAL_UART_MspInit+0xdc>)
 8002b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b80:	230c      	movs	r3, #12
 8002b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b84:	2302      	movs	r3, #2
 8002b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b90:	2307      	movs	r3, #7
 8002b92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b94:	f107 031c 	add.w	r3, r7, #28
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4805      	ldr	r0, [pc, #20]	; (8002bb0 <HAL_UART_MspInit+0xe0>)
 8002b9c:	f001 f890 	bl	8003cc0 <HAL_GPIO_Init>
}
 8002ba0:	bf00      	nop
 8002ba2:	3730      	adds	r7, #48	; 0x30
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40011000 	.word	0x40011000
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	40020000 	.word	0x40020000
 8002bb4:	40004400 	.word	0x40004400

08002bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002bb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bf0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bbc:	480d      	ldr	r0, [pc, #52]	; (8002bf4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bbe:	490e      	ldr	r1, [pc, #56]	; (8002bf8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002bc0:	4a0e      	ldr	r2, [pc, #56]	; (8002bfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bc4:	e002      	b.n	8002bcc <LoopCopyDataInit>

08002bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bca:	3304      	adds	r3, #4

08002bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bd0:	d3f9      	bcc.n	8002bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bd2:	4a0b      	ldr	r2, [pc, #44]	; (8002c00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bd4:	4c0b      	ldr	r4, [pc, #44]	; (8002c04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bd8:	e001      	b.n	8002bde <LoopFillZerobss>

08002bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bdc:	3204      	adds	r2, #4

08002bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002be0:	d3fb      	bcc.n	8002bda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002be2:	f7ff fd05 	bl	80025f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002be6:	f004 fc83 	bl	80074f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bea:	f7fe fb2b 	bl	8001244 <main>
  bx  lr    
 8002bee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002bf0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bf8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002bfc:	0800a364 	.word	0x0800a364
  ldr r2, =_sbss
 8002c00:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002c04:	20008584 	.word	0x20008584

08002c08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c08:	e7fe      	b.n	8002c08 <ADC_IRQHandler>

08002c0a <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d104      	bne.n	8002c22 <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c18:	b672      	cpsid	i
}
 8002c1a:	bf00      	nop
 8002c1c:	f7ff fb60 	bl	80022e0 <Error_Handler>
 8002c20:	e7fe      	b.n	8002c20 <stm32_lock_init+0x16>
  lock->flag = 0;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	701a      	strb	r2, [r3, #0]
  lock->counter = 0;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	705a      	strb	r2, [r3, #1]
}
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b084      	sub	sp, #16
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c3e:	f3ef 8310 	mrs	r3, PRIMASK
 8002c42:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c44:	68bb      	ldr	r3, [r7, #8]
  uint8_t flag = (uint8_t)(__get_PRIMASK() & 0x1); /* PRIMASK.PM */
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c4e:	b672      	cpsid	i
}
 8002c50:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002c52:	f3bf 8f4f 	dsb	sy
}
 8002c56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c58:	f3bf 8f6f 	isb	sy
}
 8002c5c:	bf00      	nop
  __disable_irq();
  __DSB();
  __ISB();
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d104      	bne.n	8002c6e <stm32_lock_acquire+0x38>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c64:	b672      	cpsid	i
}
 8002c66:	bf00      	nop
 8002c68:	f7ff fb3a 	bl	80022e0 <Error_Handler>
 8002c6c:	e7fe      	b.n	8002c6c <stm32_lock_acquire+0x36>
  if (lock->counter == 0)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	785b      	ldrb	r3, [r3, #1]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d103      	bne.n	8002c7e <stm32_lock_acquire+0x48>
  {
    lock->flag = flag;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	7bfa      	ldrb	r2, [r7, #15]
 8002c7a:	701a      	strb	r2, [r3, #0]
 8002c7c:	e008      	b.n	8002c90 <stm32_lock_acquire+0x5a>
  }
  else if (lock->counter == UINT8_MAX)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	785b      	ldrb	r3, [r3, #1]
 8002c82:	2bff      	cmp	r3, #255	; 0xff
 8002c84:	d104      	bne.n	8002c90 <stm32_lock_acquire+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002c86:	b672      	cpsid	i
}
 8002c88:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8002c8a:	f7ff fb29 	bl	80022e0 <Error_Handler>
 8002c8e:	e7fe      	b.n	8002c8e <stm32_lock_acquire+0x58>
  }
  lock->counter++;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	785b      	ldrb	r3, [r3, #1]
 8002c94:	3301      	adds	r3, #1
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	705a      	strb	r2, [r3, #1]
}
 8002c9c:	bf00      	nop
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d104      	bne.n	8002cbc <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002cb2:	b672      	cpsid	i
}
 8002cb4:	bf00      	nop
 8002cb6:	f7ff fb13 	bl	80022e0 <Error_Handler>
 8002cba:	e7fe      	b.n	8002cba <stm32_lock_release+0x16>
  if (lock->counter == 0)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	785b      	ldrb	r3, [r3, #1]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d104      	bne.n	8002cce <stm32_lock_release+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002cc4:	b672      	cpsid	i
}
 8002cc6:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8002cc8:	f7ff fb0a 	bl	80022e0 <Error_Handler>
 8002ccc:	e7fe      	b.n	8002ccc <stm32_lock_release+0x28>
  }
  lock->counter--;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	785b      	ldrb	r3, [r3, #1]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	705a      	strb	r2, [r3, #1]
  if (lock->counter == 0 && lock->flag == 0)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	785b      	ldrb	r3, [r3, #1]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d105      	bne.n	8002cee <stm32_lock_release+0x4a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <stm32_lock_release+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
 8002cea:	b662      	cpsie	i
}
 8002cec:	bf00      	nop
  {
    __enable_irq();
  }
}
 8002cee:	bf00      	nop
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d105      	bne.n	8002d10 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8002d04:	f004 fbee 	bl	80074e4 <__errno>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2216      	movs	r2, #22
 8002d0c:	601a      	str	r2, [r3, #0]
    return;
 8002d0e:	e015      	b.n	8002d3c <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8002d10:	2002      	movs	r0, #2
 8002d12:	f004 fc11 	bl	8007538 <malloc>
 8002d16:	4603      	mov	r3, r0
 8002d18:	461a      	mov	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d005      	beq.n	8002d32 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff ff6d 	bl	8002c0a <stm32_lock_init>
    return;
 8002d30:	e004      	b.n	8002d3c <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 8002d32:	b672      	cpsid	i
}
 8002d34:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8002d36:	f7ff fad3 	bl	80022e0 <Error_Handler>
 8002d3a:	e7fe      	b.n	8002d3a <__retarget_lock_init_recursive+0x44>
}
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b082      	sub	sp, #8
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d104      	bne.n	8002d5a <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002d50:	b672      	cpsid	i
}
 8002d52:	bf00      	nop
 8002d54:	f7ff fac4 	bl	80022e0 <Error_Handler>
 8002d58:	e7fe      	b.n	8002d58 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff ff6a 	bl	8002c36 <stm32_lock_acquire>
}
 8002d62:	bf00      	nop
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b082      	sub	sp, #8
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d104      	bne.n	8002d82 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002d78:	b672      	cpsid	i
}
 8002d7a:	bf00      	nop
 8002d7c:	f7ff fab0 	bl	80022e0 <Error_Handler>
 8002d80:	e7fe      	b.n	8002d80 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff ff8d 	bl	8002ca4 <stm32_lock_release>
}
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d96:	2003      	movs	r0, #3
 8002d98:	f000 fbd4 	bl	8003544 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	f000 f805 	bl	8002dac <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002da2:	f7ff faa3 	bl	80022ec <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002db4:	4b12      	ldr	r3, [pc, #72]	; (8002e00 <HAL_InitTick+0x54>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	4b12      	ldr	r3, [pc, #72]	; (8002e04 <HAL_InitTick+0x58>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f000 fbef 	bl	80035ae <HAL_SYSTICK_Config>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e00e      	b.n	8002df8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b0f      	cmp	r3, #15
 8002dde:	d80a      	bhi.n	8002df6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002de0:	2200      	movs	r2, #0
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	f04f 30ff 	mov.w	r0, #4294967295
 8002de8:	f000 fbb7 	bl	800355a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dec:	4a06      	ldr	r2, [pc, #24]	; (8002e08 <HAL_InitTick+0x5c>)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
 8002df4:	e000      	b.n	8002df8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3708      	adds	r7, #8
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	20000004 	.word	0x20000004
 8002e04:	2000000c 	.word	0x2000000c
 8002e08:	20000008 	.word	0x20000008

08002e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e10:	4b06      	ldr	r3, [pc, #24]	; (8002e2c <HAL_IncTick+0x20>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	461a      	mov	r2, r3
 8002e16:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <HAL_IncTick+0x24>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	4a04      	ldr	r2, [pc, #16]	; (8002e30 <HAL_IncTick+0x24>)
 8002e1e:	6013      	str	r3, [r2, #0]
}
 8002e20:	bf00      	nop
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	2000000c 	.word	0x2000000c
 8002e30:	2000857c 	.word	0x2000857c

08002e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  return uwTick;
 8002e38:	4b03      	ldr	r3, [pc, #12]	; (8002e48 <HAL_GetTick+0x14>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	2000857c 	.word	0x2000857c

08002e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e54:	f7ff ffee 	bl	8002e34 <HAL_GetTick>
 8002e58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e64:	d005      	beq.n	8002e72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e66:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <HAL_Delay+0x44>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4413      	add	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e72:	bf00      	nop
 8002e74:	f7ff ffde 	bl	8002e34 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d8f7      	bhi.n	8002e74 <HAL_Delay+0x28>
  {
  }
}
 8002e84:	bf00      	nop
 8002e86:	bf00      	nop
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	2000000c 	.word	0x2000000c

08002e94 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e031      	b.n	8002f0e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d109      	bne.n	8002ec6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7fe f866 	bl	8000f84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	f003 0310 	and.w	r3, r3, #16
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d116      	bne.n	8002f00 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ed6:	4b10      	ldr	r3, [pc, #64]	; (8002f18 <HAL_ADC_Init+0x84>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	f043 0202 	orr.w	r2, r3, #2
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 f964 	bl	80031b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	f023 0303 	bic.w	r3, r3, #3
 8002ef6:	f043 0201 	orr.w	r2, r3, #1
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	641a      	str	r2, [r3, #64]	; 0x40
 8002efe:	e001      	b.n	8002f04 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	ffffeefd 	.word	0xffffeefd

08002f1c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d101      	bne.n	8002f38 <HAL_ADC_ConfigChannel+0x1c>
 8002f34:	2302      	movs	r3, #2
 8002f36:	e12a      	b.n	800318e <HAL_ADC_ConfigChannel+0x272>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b09      	cmp	r3, #9
 8002f46:	d93a      	bls.n	8002fbe <HAL_ADC_ConfigChannel+0xa2>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f50:	d035      	beq.n	8002fbe <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68d9      	ldr	r1, [r3, #12]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	461a      	mov	r2, r3
 8002f60:	4613      	mov	r3, r2
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	4413      	add	r3, r2
 8002f66:	3b1e      	subs	r3, #30
 8002f68:	2207      	movs	r2, #7
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	43da      	mvns	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	400a      	ands	r2, r1
 8002f76:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a87      	ldr	r2, [pc, #540]	; (800319c <HAL_ADC_ConfigChannel+0x280>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d10a      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68d9      	ldr	r1, [r3, #12]
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	061a      	lsls	r2, r3, #24
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f96:	e035      	b.n	8003004 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68d9      	ldr	r1, [r3, #12]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	4618      	mov	r0, r3
 8002faa:	4603      	mov	r3, r0
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	4403      	add	r3, r0
 8002fb0:	3b1e      	subs	r3, #30
 8002fb2:	409a      	lsls	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fbc:	e022      	b.n	8003004 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6919      	ldr	r1, [r3, #16]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	461a      	mov	r2, r3
 8002fcc:	4613      	mov	r3, r2
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	4413      	add	r3, r2
 8002fd2:	2207      	movs	r2, #7
 8002fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd8:	43da      	mvns	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	400a      	ands	r2, r1
 8002fe0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6919      	ldr	r1, [r3, #16]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	4403      	add	r3, r0
 8002ffa:	409a      	lsls	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b06      	cmp	r3, #6
 800300a:	d824      	bhi.n	8003056 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	3b05      	subs	r3, #5
 800301e:	221f      	movs	r2, #31
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	43da      	mvns	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	400a      	ands	r2, r1
 800302c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	b29b      	uxth	r3, r3
 800303a:	4618      	mov	r0, r3
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	3b05      	subs	r3, #5
 8003048:	fa00 f203 	lsl.w	r2, r0, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	635a      	str	r2, [r3, #52]	; 0x34
 8003054:	e04c      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2b0c      	cmp	r3, #12
 800305c:	d824      	bhi.n	80030a8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	3b23      	subs	r3, #35	; 0x23
 8003070:	221f      	movs	r2, #31
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	43da      	mvns	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	400a      	ands	r2, r1
 800307e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	b29b      	uxth	r3, r3
 800308c:	4618      	mov	r0, r3
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4413      	add	r3, r2
 8003098:	3b23      	subs	r3, #35	; 0x23
 800309a:	fa00 f203 	lsl.w	r2, r0, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	631a      	str	r2, [r3, #48]	; 0x30
 80030a6:	e023      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	4613      	mov	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	3b41      	subs	r3, #65	; 0x41
 80030ba:	221f      	movs	r2, #31
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	43da      	mvns	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	400a      	ands	r2, r1
 80030c8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	4618      	mov	r0, r3
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	4613      	mov	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	3b41      	subs	r3, #65	; 0x41
 80030e4:	fa00 f203 	lsl.w	r2, r0, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a2a      	ldr	r2, [pc, #168]	; (80031a0 <HAL_ADC_ConfigChannel+0x284>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d10a      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x1f4>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003102:	d105      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003104:	4b27      	ldr	r3, [pc, #156]	; (80031a4 <HAL_ADC_ConfigChannel+0x288>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	4a26      	ldr	r2, [pc, #152]	; (80031a4 <HAL_ADC_ConfigChannel+0x288>)
 800310a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800310e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a22      	ldr	r2, [pc, #136]	; (80031a0 <HAL_ADC_ConfigChannel+0x284>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d109      	bne.n	800312e <HAL_ADC_ConfigChannel+0x212>
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b12      	cmp	r3, #18
 8003120:	d105      	bne.n	800312e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003122:	4b20      	ldr	r3, [pc, #128]	; (80031a4 <HAL_ADC_ConfigChannel+0x288>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	4a1f      	ldr	r2, [pc, #124]	; (80031a4 <HAL_ADC_ConfigChannel+0x288>)
 8003128:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800312c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a1b      	ldr	r2, [pc, #108]	; (80031a0 <HAL_ADC_ConfigChannel+0x284>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d125      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x268>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a17      	ldr	r2, [pc, #92]	; (800319c <HAL_ADC_ConfigChannel+0x280>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d003      	beq.n	800314a <HAL_ADC_ConfigChannel+0x22e>
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2b11      	cmp	r3, #17
 8003148:	d11c      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800314a:	4b16      	ldr	r3, [pc, #88]	; (80031a4 <HAL_ADC_ConfigChannel+0x288>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	4a15      	ldr	r2, [pc, #84]	; (80031a4 <HAL_ADC_ConfigChannel+0x288>)
 8003150:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003154:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a10      	ldr	r2, [pc, #64]	; (800319c <HAL_ADC_ConfigChannel+0x280>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d111      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003160:	4b11      	ldr	r3, [pc, #68]	; (80031a8 <HAL_ADC_ConfigChannel+0x28c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a11      	ldr	r2, [pc, #68]	; (80031ac <HAL_ADC_ConfigChannel+0x290>)
 8003166:	fba2 2303 	umull	r2, r3, r2, r3
 800316a:	0c9a      	lsrs	r2, r3, #18
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003176:	e002      	b.n	800317e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	3b01      	subs	r3, #1
 800317c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1f9      	bne.n	8003178 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	10000012 	.word	0x10000012
 80031a0:	40012000 	.word	0x40012000
 80031a4:	40012300 	.word	0x40012300
 80031a8:	20000004 	.word	0x20000004
 80031ac:	431bde83 	.word	0x431bde83

080031b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80031b8:	4b78      	ldr	r3, [pc, #480]	; (800339c <ADC_Init+0x1ec>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	4a77      	ldr	r2, [pc, #476]	; (800339c <ADC_Init+0x1ec>)
 80031be:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80031c2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80031c4:	4b75      	ldr	r3, [pc, #468]	; (800339c <ADC_Init+0x1ec>)
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	4973      	ldr	r1, [pc, #460]	; (800339c <ADC_Init+0x1ec>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	6859      	ldr	r1, [r3, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	021a      	lsls	r2, r3, #8
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003204:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	6859      	ldr	r1, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689a      	ldr	r2, [r3, #8]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003226:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6899      	ldr	r1, [r3, #8]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68da      	ldr	r2, [r3, #12]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323e:	4a58      	ldr	r2, [pc, #352]	; (80033a0 <ADC_Init+0x1f0>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d022      	beq.n	800328a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003252:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6899      	ldr	r1, [r3, #8]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003274:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6899      	ldr	r1, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	609a      	str	r2, [r3, #8]
 8003288:	e00f      	b.n	80032aa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003298:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0202 	bic.w	r2, r2, #2
 80032b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6899      	ldr	r1, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	005a      	lsls	r2, r3, #1
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d01b      	beq.n	8003310 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80032f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6859      	ldr	r1, [r3, #4]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	3b01      	subs	r3, #1
 8003304:	035a      	lsls	r2, r3, #13
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	605a      	str	r2, [r3, #4]
 800330e:	e007      	b.n	8003320 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800331e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800332e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	3b01      	subs	r3, #1
 800333c:	051a      	lsls	r2, r3, #20
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003354:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6899      	ldr	r1, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003362:	025a      	lsls	r2, r3, #9
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800337a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6899      	ldr	r1, [r3, #8]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	029a      	lsls	r2, r3, #10
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	609a      	str	r2, [r3, #8]
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	40012300 	.word	0x40012300
 80033a0:	0f000001 	.word	0x0f000001

080033a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033b4:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <__NVIC_SetPriorityGrouping+0x40>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033c0:	4013      	ands	r3, r2
 80033c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80033cc:	4b06      	ldr	r3, [pc, #24]	; (80033e8 <__NVIC_SetPriorityGrouping+0x44>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033d2:	4a04      	ldr	r2, [pc, #16]	; (80033e4 <__NVIC_SetPriorityGrouping+0x40>)
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	60d3      	str	r3, [r2, #12]
}
 80033d8:	bf00      	nop
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	e000ed00 	.word	0xe000ed00
 80033e8:	05fa0000 	.word	0x05fa0000

080033ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033f0:	4b04      	ldr	r3, [pc, #16]	; (8003404 <__NVIC_GetPriorityGrouping+0x18>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	0a1b      	lsrs	r3, r3, #8
 80033f6:	f003 0307 	and.w	r3, r3, #7
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	e000ed00 	.word	0xe000ed00

08003408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003416:	2b00      	cmp	r3, #0
 8003418:	db0b      	blt.n	8003432 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800341a:	79fb      	ldrb	r3, [r7, #7]
 800341c:	f003 021f 	and.w	r2, r3, #31
 8003420:	4907      	ldr	r1, [pc, #28]	; (8003440 <__NVIC_EnableIRQ+0x38>)
 8003422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003426:	095b      	lsrs	r3, r3, #5
 8003428:	2001      	movs	r0, #1
 800342a:	fa00 f202 	lsl.w	r2, r0, r2
 800342e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	e000e100 	.word	0xe000e100

08003444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	4603      	mov	r3, r0
 800344c:	6039      	str	r1, [r7, #0]
 800344e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003454:	2b00      	cmp	r3, #0
 8003456:	db0a      	blt.n	800346e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	b2da      	uxtb	r2, r3
 800345c:	490c      	ldr	r1, [pc, #48]	; (8003490 <__NVIC_SetPriority+0x4c>)
 800345e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003462:	0112      	lsls	r2, r2, #4
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	440b      	add	r3, r1
 8003468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800346c:	e00a      	b.n	8003484 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	b2da      	uxtb	r2, r3
 8003472:	4908      	ldr	r1, [pc, #32]	; (8003494 <__NVIC_SetPriority+0x50>)
 8003474:	79fb      	ldrb	r3, [r7, #7]
 8003476:	f003 030f 	and.w	r3, r3, #15
 800347a:	3b04      	subs	r3, #4
 800347c:	0112      	lsls	r2, r2, #4
 800347e:	b2d2      	uxtb	r2, r2
 8003480:	440b      	add	r3, r1
 8003482:	761a      	strb	r2, [r3, #24]
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	e000e100 	.word	0xe000e100
 8003494:	e000ed00 	.word	0xe000ed00

08003498 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003498:	b480      	push	{r7}
 800349a:	b089      	sub	sp, #36	; 0x24
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	f1c3 0307 	rsb	r3, r3, #7
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	bf28      	it	cs
 80034b6:	2304      	movcs	r3, #4
 80034b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	3304      	adds	r3, #4
 80034be:	2b06      	cmp	r3, #6
 80034c0:	d902      	bls.n	80034c8 <NVIC_EncodePriority+0x30>
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	3b03      	subs	r3, #3
 80034c6:	e000      	b.n	80034ca <NVIC_EncodePriority+0x32>
 80034c8:	2300      	movs	r3, #0
 80034ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034cc:	f04f 32ff 	mov.w	r2, #4294967295
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	43da      	mvns	r2, r3
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	401a      	ands	r2, r3
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034e0:	f04f 31ff 	mov.w	r1, #4294967295
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ea:	43d9      	mvns	r1, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f0:	4313      	orrs	r3, r2
         );
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3724      	adds	r7, #36	; 0x24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
	...

08003500 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3b01      	subs	r3, #1
 800350c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003510:	d301      	bcc.n	8003516 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003512:	2301      	movs	r3, #1
 8003514:	e00f      	b.n	8003536 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003516:	4a0a      	ldr	r2, [pc, #40]	; (8003540 <SysTick_Config+0x40>)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3b01      	subs	r3, #1
 800351c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800351e:	210f      	movs	r1, #15
 8003520:	f04f 30ff 	mov.w	r0, #4294967295
 8003524:	f7ff ff8e 	bl	8003444 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003528:	4b05      	ldr	r3, [pc, #20]	; (8003540 <SysTick_Config+0x40>)
 800352a:	2200      	movs	r2, #0
 800352c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800352e:	4b04      	ldr	r3, [pc, #16]	; (8003540 <SysTick_Config+0x40>)
 8003530:	2207      	movs	r2, #7
 8003532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	e000e010 	.word	0xe000e010

08003544 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f7ff ff29 	bl	80033a4 <__NVIC_SetPriorityGrouping>
}
 8003552:	bf00      	nop
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800355a:	b580      	push	{r7, lr}
 800355c:	b086      	sub	sp, #24
 800355e:	af00      	add	r7, sp, #0
 8003560:	4603      	mov	r3, r0
 8003562:	60b9      	str	r1, [r7, #8]
 8003564:	607a      	str	r2, [r7, #4]
 8003566:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003568:	2300      	movs	r3, #0
 800356a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800356c:	f7ff ff3e 	bl	80033ec <__NVIC_GetPriorityGrouping>
 8003570:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	68b9      	ldr	r1, [r7, #8]
 8003576:	6978      	ldr	r0, [r7, #20]
 8003578:	f7ff ff8e 	bl	8003498 <NVIC_EncodePriority>
 800357c:	4602      	mov	r2, r0
 800357e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003582:	4611      	mov	r1, r2
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff ff5d 	bl	8003444 <__NVIC_SetPriority>
}
 800358a:	bf00      	nop
 800358c:	3718      	adds	r7, #24
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b082      	sub	sp, #8
 8003596:	af00      	add	r7, sp, #0
 8003598:	4603      	mov	r3, r0
 800359a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800359c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff ff31 	bl	8003408 <__NVIC_EnableIRQ>
}
 80035a6:	bf00      	nop
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b082      	sub	sp, #8
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7ff ffa2 	bl	8003500 <SysTick_Config>
 80035bc:	4603      	mov	r3, r0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
	...

080035c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035d4:	f7ff fc2e 	bl	8002e34 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e099      	b.n	8003718 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0201 	bic.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003604:	e00f      	b.n	8003626 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003606:	f7ff fc15 	bl	8002e34 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b05      	cmp	r3, #5
 8003612:	d908      	bls.n	8003626 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2220      	movs	r2, #32
 8003618:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2203      	movs	r2, #3
 800361e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e078      	b.n	8003718 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1e8      	bne.n	8003606 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	4b38      	ldr	r3, [pc, #224]	; (8003720 <HAL_DMA_Init+0x158>)
 8003640:	4013      	ands	r3, r2
 8003642:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003652:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800365e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800366a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	4313      	orrs	r3, r2
 8003676:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	2b04      	cmp	r3, #4
 800367e:	d107      	bne.n	8003690 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003688:	4313      	orrs	r3, r2
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	4313      	orrs	r3, r2
 800368e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f023 0307 	bic.w	r3, r3, #7
 80036a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d117      	bne.n	80036ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00e      	beq.n	80036ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 fa7b 	bl	8003bc8 <DMA_CheckFifoParam>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d008      	beq.n	80036ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2240      	movs	r2, #64	; 0x40
 80036dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80036e6:	2301      	movs	r3, #1
 80036e8:	e016      	b.n	8003718 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 fa32 	bl	8003b5c <DMA_CalcBaseAndBitshift>
 80036f8:	4603      	mov	r3, r0
 80036fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003700:	223f      	movs	r2, #63	; 0x3f
 8003702:	409a      	lsls	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3718      	adds	r7, #24
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	f010803f 	.word	0xf010803f

08003724 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003730:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003732:	f7ff fb7f 	bl	8002e34 <HAL_GetTick>
 8003736:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d008      	beq.n	8003756 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2280      	movs	r2, #128	; 0x80
 8003748:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e052      	b.n	80037fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 0216 	bic.w	r2, r2, #22
 8003764:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	695a      	ldr	r2, [r3, #20]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003774:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	2b00      	cmp	r3, #0
 800377c:	d103      	bne.n	8003786 <HAL_DMA_Abort+0x62>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003782:	2b00      	cmp	r3, #0
 8003784:	d007      	beq.n	8003796 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0208 	bic.w	r2, r2, #8
 8003794:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0201 	bic.w	r2, r2, #1
 80037a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037a6:	e013      	b.n	80037d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037a8:	f7ff fb44 	bl	8002e34 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b05      	cmp	r3, #5
 80037b4:	d90c      	bls.n	80037d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2220      	movs	r2, #32
 80037ba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2203      	movs	r2, #3
 80037c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e015      	b.n	80037fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1e4      	bne.n	80037a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e2:	223f      	movs	r2, #63	; 0x3f
 80037e4:	409a      	lsls	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d004      	beq.n	8003822 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2280      	movs	r2, #128	; 0x80
 800381c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e00c      	b.n	800383c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2205      	movs	r2, #5
 8003826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f022 0201 	bic.w	r2, r2, #1
 8003838:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003850:	2300      	movs	r3, #0
 8003852:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003854:	4b92      	ldr	r3, [pc, #584]	; (8003aa0 <HAL_DMA_IRQHandler+0x258>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a92      	ldr	r2, [pc, #584]	; (8003aa4 <HAL_DMA_IRQHandler+0x25c>)
 800385a:	fba2 2303 	umull	r2, r3, r2, r3
 800385e:	0a9b      	lsrs	r3, r3, #10
 8003860:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003866:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003872:	2208      	movs	r2, #8
 8003874:	409a      	lsls	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	4013      	ands	r3, r2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d01a      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d013      	beq.n	80038b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0204 	bic.w	r2, r2, #4
 800389a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a0:	2208      	movs	r2, #8
 80038a2:	409a      	lsls	r2, r3
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ac:	f043 0201 	orr.w	r2, r3, #1
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b8:	2201      	movs	r2, #1
 80038ba:	409a      	lsls	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4013      	ands	r3, r2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d012      	beq.n	80038ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00b      	beq.n	80038ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d6:	2201      	movs	r2, #1
 80038d8:	409a      	lsls	r2, r3
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e2:	f043 0202 	orr.w	r2, r3, #2
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ee:	2204      	movs	r2, #4
 80038f0:	409a      	lsls	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4013      	ands	r3, r2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d012      	beq.n	8003920 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00b      	beq.n	8003920 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390c:	2204      	movs	r2, #4
 800390e:	409a      	lsls	r2, r3
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003918:	f043 0204 	orr.w	r2, r3, #4
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003924:	2210      	movs	r2, #16
 8003926:	409a      	lsls	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4013      	ands	r3, r2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d043      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b00      	cmp	r3, #0
 800393c:	d03c      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003942:	2210      	movs	r2, #16
 8003944:	409a      	lsls	r2, r3
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d018      	beq.n	800398a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d108      	bne.n	8003978 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	2b00      	cmp	r3, #0
 800396c:	d024      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	4798      	blx	r3
 8003976:	e01f      	b.n	80039b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800397c:	2b00      	cmp	r3, #0
 800397e:	d01b      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	4798      	blx	r3
 8003988:	e016      	b.n	80039b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003994:	2b00      	cmp	r3, #0
 8003996:	d107      	bne.n	80039a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0208 	bic.w	r2, r2, #8
 80039a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039bc:	2220      	movs	r2, #32
 80039be:	409a      	lsls	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4013      	ands	r3, r2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 808e 	beq.w	8003ae6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0310 	and.w	r3, r3, #16
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 8086 	beq.w	8003ae6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039de:	2220      	movs	r2, #32
 80039e0:	409a      	lsls	r2, r3
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b05      	cmp	r3, #5
 80039f0:	d136      	bne.n	8003a60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0216 	bic.w	r2, r2, #22
 8003a00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	695a      	ldr	r2, [r3, #20]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d103      	bne.n	8003a22 <HAL_DMA_IRQHandler+0x1da>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d007      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0208 	bic.w	r2, r2, #8
 8003a30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a36:	223f      	movs	r2, #63	; 0x3f
 8003a38:	409a      	lsls	r2, r3
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d07d      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	4798      	blx	r3
        }
        return;
 8003a5e:	e078      	b.n	8003b52 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d01c      	beq.n	8003aa8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d108      	bne.n	8003a8e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d030      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	4798      	blx	r3
 8003a8c:	e02b      	b.n	8003ae6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d027      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	4798      	blx	r3
 8003a9e:	e022      	b.n	8003ae6 <HAL_DMA_IRQHandler+0x29e>
 8003aa0:	20000004 	.word	0x20000004
 8003aa4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10f      	bne.n	8003ad6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 0210 	bic.w	r2, r2, #16
 8003ac4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d032      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d022      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2205      	movs	r2, #5
 8003afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0201 	bic.w	r2, r2, #1
 8003b10:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	3301      	adds	r3, #1
 8003b16:	60bb      	str	r3, [r7, #8]
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d307      	bcc.n	8003b2e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1f2      	bne.n	8003b12 <HAL_DMA_IRQHandler+0x2ca>
 8003b2c:	e000      	b.n	8003b30 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003b2e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d005      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	4798      	blx	r3
 8003b50:	e000      	b.n	8003b54 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003b52:	bf00      	nop
    }
  }
}
 8003b54:	3718      	adds	r7, #24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop

08003b5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	3b10      	subs	r3, #16
 8003b6c:	4a13      	ldr	r2, [pc, #76]	; (8003bbc <DMA_CalcBaseAndBitshift+0x60>)
 8003b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b72:	091b      	lsrs	r3, r3, #4
 8003b74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b76:	4a12      	ldr	r2, [pc, #72]	; (8003bc0 <DMA_CalcBaseAndBitshift+0x64>)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2b03      	cmp	r3, #3
 8003b88:	d908      	bls.n	8003b9c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	4b0c      	ldr	r3, [pc, #48]	; (8003bc4 <DMA_CalcBaseAndBitshift+0x68>)
 8003b92:	4013      	ands	r3, r2
 8003b94:	1d1a      	adds	r2, r3, #4
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	659a      	str	r2, [r3, #88]	; 0x58
 8003b9a:	e006      	b.n	8003baa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	4b08      	ldr	r3, [pc, #32]	; (8003bc4 <DMA_CalcBaseAndBitshift+0x68>)
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3714      	adds	r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	aaaaaaab 	.word	0xaaaaaaab
 8003bc0:	08009f68 	.word	0x08009f68
 8003bc4:	fffffc00 	.word	0xfffffc00

08003bc8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d11f      	bne.n	8003c22 <DMA_CheckFifoParam+0x5a>
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2b03      	cmp	r3, #3
 8003be6:	d856      	bhi.n	8003c96 <DMA_CheckFifoParam+0xce>
 8003be8:	a201      	add	r2, pc, #4	; (adr r2, 8003bf0 <DMA_CheckFifoParam+0x28>)
 8003bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bee:	bf00      	nop
 8003bf0:	08003c01 	.word	0x08003c01
 8003bf4:	08003c13 	.word	0x08003c13
 8003bf8:	08003c01 	.word	0x08003c01
 8003bfc:	08003c97 	.word	0x08003c97
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d046      	beq.n	8003c9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c10:	e043      	b.n	8003c9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c1a:	d140      	bne.n	8003c9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c20:	e03d      	b.n	8003c9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c2a:	d121      	bne.n	8003c70 <DMA_CheckFifoParam+0xa8>
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2b03      	cmp	r3, #3
 8003c30:	d837      	bhi.n	8003ca2 <DMA_CheckFifoParam+0xda>
 8003c32:	a201      	add	r2, pc, #4	; (adr r2, 8003c38 <DMA_CheckFifoParam+0x70>)
 8003c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c38:	08003c49 	.word	0x08003c49
 8003c3c:	08003c4f 	.word	0x08003c4f
 8003c40:	08003c49 	.word	0x08003c49
 8003c44:	08003c61 	.word	0x08003c61
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c4c:	e030      	b.n	8003cb0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d025      	beq.n	8003ca6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c5e:	e022      	b.n	8003ca6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c68:	d11f      	bne.n	8003caa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c6e:	e01c      	b.n	8003caa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d903      	bls.n	8003c7e <DMA_CheckFifoParam+0xb6>
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	2b03      	cmp	r3, #3
 8003c7a:	d003      	beq.n	8003c84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c7c:	e018      	b.n	8003cb0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	73fb      	strb	r3, [r7, #15]
      break;
 8003c82:	e015      	b.n	8003cb0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00e      	beq.n	8003cae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	73fb      	strb	r3, [r7, #15]
      break;
 8003c94:	e00b      	b.n	8003cae <DMA_CheckFifoParam+0xe6>
      break;
 8003c96:	bf00      	nop
 8003c98:	e00a      	b.n	8003cb0 <DMA_CheckFifoParam+0xe8>
      break;
 8003c9a:	bf00      	nop
 8003c9c:	e008      	b.n	8003cb0 <DMA_CheckFifoParam+0xe8>
      break;
 8003c9e:	bf00      	nop
 8003ca0:	e006      	b.n	8003cb0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ca2:	bf00      	nop
 8003ca4:	e004      	b.n	8003cb0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ca6:	bf00      	nop
 8003ca8:	e002      	b.n	8003cb0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003caa:	bf00      	nop
 8003cac:	e000      	b.n	8003cb0 <DMA_CheckFifoParam+0xe8>
      break;
 8003cae:	bf00      	nop
    }
  } 
  
  return status; 
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop

08003cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b089      	sub	sp, #36	; 0x24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61fb      	str	r3, [r7, #28]
 8003cde:	e175      	b.n	8003fcc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	f040 8164 	bne.w	8003fc6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d00b      	beq.n	8003d1e <HAL_GPIO_Init+0x5e>
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d007      	beq.n	8003d1e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d12:	2b11      	cmp	r3, #17
 8003d14:	d003      	beq.n	8003d1e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2b12      	cmp	r3, #18
 8003d1c:	d130      	bne.n	8003d80 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	2203      	movs	r2, #3
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	43db      	mvns	r3, r3
 8003d30:	69ba      	ldr	r2, [r7, #24]
 8003d32:	4013      	ands	r3, r2
 8003d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	68da      	ldr	r2, [r3, #12]
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d54:	2201      	movs	r2, #1
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	43db      	mvns	r3, r3
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	4013      	ands	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	091b      	lsrs	r3, r3, #4
 8003d6a:	f003 0201 	and.w	r2, r3, #1
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	2203      	movs	r2, #3
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	43db      	mvns	r3, r3
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	4013      	ands	r3, r2
 8003d96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	d003      	beq.n	8003dc0 <HAL_GPIO_Init+0x100>
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	2b12      	cmp	r3, #18
 8003dbe:	d123      	bne.n	8003e08 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	08da      	lsrs	r2, r3, #3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3208      	adds	r2, #8
 8003dc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	f003 0307 	and.w	r3, r3, #7
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	220f      	movs	r2, #15
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	4013      	ands	r3, r2
 8003de2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	08da      	lsrs	r2, r3, #3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	3208      	adds	r2, #8
 8003e02:	69b9      	ldr	r1, [r7, #24]
 8003e04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	2203      	movs	r2, #3
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	43db      	mvns	r3, r3
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f003 0203 	and.w	r2, r3, #3
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 80be 	beq.w	8003fc6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e4a:	4b66      	ldr	r3, [pc, #408]	; (8003fe4 <HAL_GPIO_Init+0x324>)
 8003e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4e:	4a65      	ldr	r2, [pc, #404]	; (8003fe4 <HAL_GPIO_Init+0x324>)
 8003e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e54:	6453      	str	r3, [r2, #68]	; 0x44
 8003e56:	4b63      	ldr	r3, [pc, #396]	; (8003fe4 <HAL_GPIO_Init+0x324>)
 8003e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003e62:	4a61      	ldr	r2, [pc, #388]	; (8003fe8 <HAL_GPIO_Init+0x328>)
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	089b      	lsrs	r3, r3, #2
 8003e68:	3302      	adds	r3, #2
 8003e6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	220f      	movs	r2, #15
 8003e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7e:	43db      	mvns	r3, r3
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	4013      	ands	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a58      	ldr	r2, [pc, #352]	; (8003fec <HAL_GPIO_Init+0x32c>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d037      	beq.n	8003efe <HAL_GPIO_Init+0x23e>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a57      	ldr	r2, [pc, #348]	; (8003ff0 <HAL_GPIO_Init+0x330>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d031      	beq.n	8003efa <HAL_GPIO_Init+0x23a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a56      	ldr	r2, [pc, #344]	; (8003ff4 <HAL_GPIO_Init+0x334>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d02b      	beq.n	8003ef6 <HAL_GPIO_Init+0x236>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a55      	ldr	r2, [pc, #340]	; (8003ff8 <HAL_GPIO_Init+0x338>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d025      	beq.n	8003ef2 <HAL_GPIO_Init+0x232>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a54      	ldr	r2, [pc, #336]	; (8003ffc <HAL_GPIO_Init+0x33c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d01f      	beq.n	8003eee <HAL_GPIO_Init+0x22e>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a53      	ldr	r2, [pc, #332]	; (8004000 <HAL_GPIO_Init+0x340>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d019      	beq.n	8003eea <HAL_GPIO_Init+0x22a>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a52      	ldr	r2, [pc, #328]	; (8004004 <HAL_GPIO_Init+0x344>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d013      	beq.n	8003ee6 <HAL_GPIO_Init+0x226>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a51      	ldr	r2, [pc, #324]	; (8004008 <HAL_GPIO_Init+0x348>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d00d      	beq.n	8003ee2 <HAL_GPIO_Init+0x222>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a50      	ldr	r2, [pc, #320]	; (800400c <HAL_GPIO_Init+0x34c>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d007      	beq.n	8003ede <HAL_GPIO_Init+0x21e>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a4f      	ldr	r2, [pc, #316]	; (8004010 <HAL_GPIO_Init+0x350>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d101      	bne.n	8003eda <HAL_GPIO_Init+0x21a>
 8003ed6:	2309      	movs	r3, #9
 8003ed8:	e012      	b.n	8003f00 <HAL_GPIO_Init+0x240>
 8003eda:	230a      	movs	r3, #10
 8003edc:	e010      	b.n	8003f00 <HAL_GPIO_Init+0x240>
 8003ede:	2308      	movs	r3, #8
 8003ee0:	e00e      	b.n	8003f00 <HAL_GPIO_Init+0x240>
 8003ee2:	2307      	movs	r3, #7
 8003ee4:	e00c      	b.n	8003f00 <HAL_GPIO_Init+0x240>
 8003ee6:	2306      	movs	r3, #6
 8003ee8:	e00a      	b.n	8003f00 <HAL_GPIO_Init+0x240>
 8003eea:	2305      	movs	r3, #5
 8003eec:	e008      	b.n	8003f00 <HAL_GPIO_Init+0x240>
 8003eee:	2304      	movs	r3, #4
 8003ef0:	e006      	b.n	8003f00 <HAL_GPIO_Init+0x240>
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e004      	b.n	8003f00 <HAL_GPIO_Init+0x240>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	e002      	b.n	8003f00 <HAL_GPIO_Init+0x240>
 8003efa:	2301      	movs	r3, #1
 8003efc:	e000      	b.n	8003f00 <HAL_GPIO_Init+0x240>
 8003efe:	2300      	movs	r3, #0
 8003f00:	69fa      	ldr	r2, [r7, #28]
 8003f02:	f002 0203 	and.w	r2, r2, #3
 8003f06:	0092      	lsls	r2, r2, #2
 8003f08:	4093      	lsls	r3, r2
 8003f0a:	69ba      	ldr	r2, [r7, #24]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003f10:	4935      	ldr	r1, [pc, #212]	; (8003fe8 <HAL_GPIO_Init+0x328>)
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	089b      	lsrs	r3, r3, #2
 8003f16:	3302      	adds	r3, #2
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f1e:	4b3d      	ldr	r3, [pc, #244]	; (8004014 <HAL_GPIO_Init+0x354>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	43db      	mvns	r3, r3
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f42:	4a34      	ldr	r2, [pc, #208]	; (8004014 <HAL_GPIO_Init+0x354>)
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f48:	4b32      	ldr	r3, [pc, #200]	; (8004014 <HAL_GPIO_Init+0x354>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	43db      	mvns	r3, r3
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	4013      	ands	r3, r2
 8003f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f6c:	4a29      	ldr	r2, [pc, #164]	; (8004014 <HAL_GPIO_Init+0x354>)
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f72:	4b28      	ldr	r3, [pc, #160]	; (8004014 <HAL_GPIO_Init+0x354>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	43db      	mvns	r3, r3
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f96:	4a1f      	ldr	r2, [pc, #124]	; (8004014 <HAL_GPIO_Init+0x354>)
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f9c:	4b1d      	ldr	r3, [pc, #116]	; (8004014 <HAL_GPIO_Init+0x354>)
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	43db      	mvns	r3, r3
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d003      	beq.n	8003fc0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fc0:	4a14      	ldr	r2, [pc, #80]	; (8004014 <HAL_GPIO_Init+0x354>)
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	61fb      	str	r3, [r7, #28]
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	2b0f      	cmp	r3, #15
 8003fd0:	f67f ae86 	bls.w	8003ce0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003fd4:	bf00      	nop
 8003fd6:	bf00      	nop
 8003fd8:	3724      	adds	r7, #36	; 0x24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	40013800 	.word	0x40013800
 8003fec:	40020000 	.word	0x40020000
 8003ff0:	40020400 	.word	0x40020400
 8003ff4:	40020800 	.word	0x40020800
 8003ff8:	40020c00 	.word	0x40020c00
 8003ffc:	40021000 	.word	0x40021000
 8004000:	40021400 	.word	0x40021400
 8004004:	40021800 	.word	0x40021800
 8004008:	40021c00 	.word	0x40021c00
 800400c:	40022000 	.word	0x40022000
 8004010:	40022400 	.word	0x40022400
 8004014:	40013c00 	.word	0x40013c00

08004018 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	460b      	mov	r3, r1
 8004022:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	691a      	ldr	r2, [r3, #16]
 8004028:	887b      	ldrh	r3, [r7, #2]
 800402a:	4013      	ands	r3, r2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004030:	2301      	movs	r3, #1
 8004032:	73fb      	strb	r3, [r7, #15]
 8004034:	e001      	b.n	800403a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004036:	2300      	movs	r3, #0
 8004038:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800403a:	7bfb      	ldrb	r3, [r7, #15]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	460b      	mov	r3, r1
 8004052:	807b      	strh	r3, [r7, #2]
 8004054:	4613      	mov	r3, r2
 8004056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004058:	787b      	ldrb	r3, [r7, #1]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800405e:	887a      	ldrh	r2, [r7, #2]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004064:	e003      	b.n	800406e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004066:	887b      	ldrh	r3, [r7, #2]
 8004068:	041a      	lsls	r2, r3, #16
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	619a      	str	r2, [r3, #24]
}
 800406e:	bf00      	nop
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
	...

0800407c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	4603      	mov	r3, r0
 8004084:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004086:	4b08      	ldr	r3, [pc, #32]	; (80040a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004088:	695a      	ldr	r2, [r3, #20]
 800408a:	88fb      	ldrh	r3, [r7, #6]
 800408c:	4013      	ands	r3, r2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d006      	beq.n	80040a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004092:	4a05      	ldr	r2, [pc, #20]	; (80040a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004094:	88fb      	ldrh	r3, [r7, #6]
 8004096:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004098:	88fb      	ldrh	r3, [r7, #6]
 800409a:	4618      	mov	r0, r3
 800409c:	f7fd fb0a 	bl	80016b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80040a0:	bf00      	nop
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	40013c00 	.word	0x40013c00

080040ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80040b2:	2300      	movs	r3, #0
 80040b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80040b6:	4b23      	ldr	r3, [pc, #140]	; (8004144 <HAL_PWREx_EnableOverDrive+0x98>)
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	4a22      	ldr	r2, [pc, #136]	; (8004144 <HAL_PWREx_EnableOverDrive+0x98>)
 80040bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040c0:	6413      	str	r3, [r2, #64]	; 0x40
 80040c2:	4b20      	ldr	r3, [pc, #128]	; (8004144 <HAL_PWREx_EnableOverDrive+0x98>)
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ca:	603b      	str	r3, [r7, #0]
 80040cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80040ce:	4b1e      	ldr	r3, [pc, #120]	; (8004148 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a1d      	ldr	r2, [pc, #116]	; (8004148 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040d8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040da:	f7fe feab 	bl	8002e34 <HAL_GetTick>
 80040de:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80040e0:	e009      	b.n	80040f6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80040e2:	f7fe fea7 	bl	8002e34 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040f0:	d901      	bls.n	80040f6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e022      	b.n	800413c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80040f6:	4b14      	ldr	r3, [pc, #80]	; (8004148 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004102:	d1ee      	bne.n	80040e2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004104:	4b10      	ldr	r3, [pc, #64]	; (8004148 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a0f      	ldr	r2, [pc, #60]	; (8004148 <HAL_PWREx_EnableOverDrive+0x9c>)
 800410a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800410e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004110:	f7fe fe90 	bl	8002e34 <HAL_GetTick>
 8004114:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004116:	e009      	b.n	800412c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004118:	f7fe fe8c 	bl	8002e34 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004126:	d901      	bls.n	800412c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e007      	b.n	800413c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800412c:	4b06      	ldr	r3, [pc, #24]	; (8004148 <HAL_PWREx_EnableOverDrive+0x9c>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004134:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004138:	d1ee      	bne.n	8004118 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40023800 	.word	0x40023800
 8004148:	40007000 	.word	0x40007000

0800414c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004154:	2300      	movs	r3, #0
 8004156:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e291      	b.n	8004686 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 8087 	beq.w	800427e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004170:	4b96      	ldr	r3, [pc, #600]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f003 030c 	and.w	r3, r3, #12
 8004178:	2b04      	cmp	r3, #4
 800417a:	d00c      	beq.n	8004196 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800417c:	4b93      	ldr	r3, [pc, #588]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f003 030c 	and.w	r3, r3, #12
 8004184:	2b08      	cmp	r3, #8
 8004186:	d112      	bne.n	80041ae <HAL_RCC_OscConfig+0x62>
 8004188:	4b90      	ldr	r3, [pc, #576]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004190:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004194:	d10b      	bne.n	80041ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004196:	4b8d      	ldr	r3, [pc, #564]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d06c      	beq.n	800427c <HAL_RCC_OscConfig+0x130>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d168      	bne.n	800427c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e26b      	b.n	8004686 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041b6:	d106      	bne.n	80041c6 <HAL_RCC_OscConfig+0x7a>
 80041b8:	4b84      	ldr	r3, [pc, #528]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a83      	ldr	r2, [pc, #524]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 80041be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041c2:	6013      	str	r3, [r2, #0]
 80041c4:	e02e      	b.n	8004224 <HAL_RCC_OscConfig+0xd8>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10c      	bne.n	80041e8 <HAL_RCC_OscConfig+0x9c>
 80041ce:	4b7f      	ldr	r3, [pc, #508]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a7e      	ldr	r2, [pc, #504]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 80041d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041d8:	6013      	str	r3, [r2, #0]
 80041da:	4b7c      	ldr	r3, [pc, #496]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a7b      	ldr	r2, [pc, #492]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 80041e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	e01d      	b.n	8004224 <HAL_RCC_OscConfig+0xd8>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041f0:	d10c      	bne.n	800420c <HAL_RCC_OscConfig+0xc0>
 80041f2:	4b76      	ldr	r3, [pc, #472]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a75      	ldr	r2, [pc, #468]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 80041f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041fc:	6013      	str	r3, [r2, #0]
 80041fe:	4b73      	ldr	r3, [pc, #460]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a72      	ldr	r2, [pc, #456]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 8004204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	e00b      	b.n	8004224 <HAL_RCC_OscConfig+0xd8>
 800420c:	4b6f      	ldr	r3, [pc, #444]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a6e      	ldr	r2, [pc, #440]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 8004212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004216:	6013      	str	r3, [r2, #0]
 8004218:	4b6c      	ldr	r3, [pc, #432]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a6b      	ldr	r2, [pc, #428]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 800421e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004222:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d013      	beq.n	8004254 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422c:	f7fe fe02 	bl	8002e34 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004234:	f7fe fdfe 	bl	8002e34 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b64      	cmp	r3, #100	; 0x64
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e21f      	b.n	8004686 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004246:	4b61      	ldr	r3, [pc, #388]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0f0      	beq.n	8004234 <HAL_RCC_OscConfig+0xe8>
 8004252:	e014      	b.n	800427e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004254:	f7fe fdee 	bl	8002e34 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800425c:	f7fe fdea 	bl	8002e34 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b64      	cmp	r3, #100	; 0x64
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e20b      	b.n	8004686 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800426e:	4b57      	ldr	r3, [pc, #348]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f0      	bne.n	800425c <HAL_RCC_OscConfig+0x110>
 800427a:	e000      	b.n	800427e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800427c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d069      	beq.n	800435e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800428a:	4b50      	ldr	r3, [pc, #320]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 030c 	and.w	r3, r3, #12
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00b      	beq.n	80042ae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004296:	4b4d      	ldr	r3, [pc, #308]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 030c 	and.w	r3, r3, #12
 800429e:	2b08      	cmp	r3, #8
 80042a0:	d11c      	bne.n	80042dc <HAL_RCC_OscConfig+0x190>
 80042a2:	4b4a      	ldr	r3, [pc, #296]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d116      	bne.n	80042dc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ae:	4b47      	ldr	r3, [pc, #284]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d005      	beq.n	80042c6 <HAL_RCC_OscConfig+0x17a>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d001      	beq.n	80042c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e1df      	b.n	8004686 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042c6:	4b41      	ldr	r3, [pc, #260]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	493d      	ldr	r1, [pc, #244]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042da:	e040      	b.n	800435e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d023      	beq.n	800432c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042e4:	4b39      	ldr	r3, [pc, #228]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a38      	ldr	r2, [pc, #224]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 80042ea:	f043 0301 	orr.w	r3, r3, #1
 80042ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f0:	f7fe fda0 	bl	8002e34 <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042f8:	f7fe fd9c 	bl	8002e34 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e1bd      	b.n	8004686 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800430a:	4b30      	ldr	r3, [pc, #192]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0f0      	beq.n	80042f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004316:	4b2d      	ldr	r3, [pc, #180]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	4929      	ldr	r1, [pc, #164]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 8004326:	4313      	orrs	r3, r2
 8004328:	600b      	str	r3, [r1, #0]
 800432a:	e018      	b.n	800435e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800432c:	4b27      	ldr	r3, [pc, #156]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a26      	ldr	r2, [pc, #152]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 8004332:	f023 0301 	bic.w	r3, r3, #1
 8004336:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004338:	f7fe fd7c 	bl	8002e34 <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004340:	f7fe fd78 	bl	8002e34 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e199      	b.n	8004686 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004352:	4b1e      	ldr	r3, [pc, #120]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1f0      	bne.n	8004340 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0308 	and.w	r3, r3, #8
 8004366:	2b00      	cmp	r3, #0
 8004368:	d038      	beq.n	80043dc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d019      	beq.n	80043a6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004372:	4b16      	ldr	r3, [pc, #88]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 8004374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004376:	4a15      	ldr	r2, [pc, #84]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 8004378:	f043 0301 	orr.w	r3, r3, #1
 800437c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437e:	f7fe fd59 	bl	8002e34 <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004384:	e008      	b.n	8004398 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004386:	f7fe fd55 	bl	8002e34 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	2b02      	cmp	r3, #2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e176      	b.n	8004686 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004398:	4b0c      	ldr	r3, [pc, #48]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 800439a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0f0      	beq.n	8004386 <HAL_RCC_OscConfig+0x23a>
 80043a4:	e01a      	b.n	80043dc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043a6:	4b09      	ldr	r3, [pc, #36]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 80043a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043aa:	4a08      	ldr	r2, [pc, #32]	; (80043cc <HAL_RCC_OscConfig+0x280>)
 80043ac:	f023 0301 	bic.w	r3, r3, #1
 80043b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b2:	f7fe fd3f 	bl	8002e34 <HAL_GetTick>
 80043b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043b8:	e00a      	b.n	80043d0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043ba:	f7fe fd3b 	bl	8002e34 <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d903      	bls.n	80043d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e15c      	b.n	8004686 <HAL_RCC_OscConfig+0x53a>
 80043cc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043d0:	4b91      	ldr	r3, [pc, #580]	; (8004618 <HAL_RCC_OscConfig+0x4cc>)
 80043d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1ee      	bne.n	80043ba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 80a4 	beq.w	8004532 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ea:	4b8b      	ldr	r3, [pc, #556]	; (8004618 <HAL_RCC_OscConfig+0x4cc>)
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10d      	bne.n	8004412 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80043f6:	4b88      	ldr	r3, [pc, #544]	; (8004618 <HAL_RCC_OscConfig+0x4cc>)
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	4a87      	ldr	r2, [pc, #540]	; (8004618 <HAL_RCC_OscConfig+0x4cc>)
 80043fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004400:	6413      	str	r3, [r2, #64]	; 0x40
 8004402:	4b85      	ldr	r3, [pc, #532]	; (8004618 <HAL_RCC_OscConfig+0x4cc>)
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800440a:	60bb      	str	r3, [r7, #8]
 800440c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800440e:	2301      	movs	r3, #1
 8004410:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004412:	4b82      	ldr	r3, [pc, #520]	; (800461c <HAL_RCC_OscConfig+0x4d0>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441a:	2b00      	cmp	r3, #0
 800441c:	d118      	bne.n	8004450 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800441e:	4b7f      	ldr	r3, [pc, #508]	; (800461c <HAL_RCC_OscConfig+0x4d0>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a7e      	ldr	r2, [pc, #504]	; (800461c <HAL_RCC_OscConfig+0x4d0>)
 8004424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004428:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800442a:	f7fe fd03 	bl	8002e34 <HAL_GetTick>
 800442e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004430:	e008      	b.n	8004444 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004432:	f7fe fcff 	bl	8002e34 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b64      	cmp	r3, #100	; 0x64
 800443e:	d901      	bls.n	8004444 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e120      	b.n	8004686 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004444:	4b75      	ldr	r3, [pc, #468]	; (800461c <HAL_RCC_OscConfig+0x4d0>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444c:	2b00      	cmp	r3, #0
 800444e:	d0f0      	beq.n	8004432 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d106      	bne.n	8004466 <HAL_RCC_OscConfig+0x31a>
 8004458:	4b6f      	ldr	r3, [pc, #444]	; (8004618 <HAL_RCC_OscConfig+0x4cc>)
 800445a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445c:	4a6e      	ldr	r2, [pc, #440]	; (8004618 <HAL_RCC_OscConfig+0x4cc>)
 800445e:	f043 0301 	orr.w	r3, r3, #1
 8004462:	6713      	str	r3, [r2, #112]	; 0x70
 8004464:	e02d      	b.n	80044c2 <HAL_RCC_OscConfig+0x376>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10c      	bne.n	8004488 <HAL_RCC_OscConfig+0x33c>
 800446e:	4b6a      	ldr	r3, [pc, #424]	; (8004618 <HAL_RCC_OscConfig+0x4cc>)
 8004470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004472:	4a69      	ldr	r2, [pc, #420]	; (8004618 <HAL_RCC_OscConfig+0x4cc>)
 8004474:	f023 0301 	bic.w	r3, r3, #1
 8004478:	6713      	str	r3, [r2, #112]	; 0x70
 800447a:	4b67      	ldr	r3, [pc, #412]	; (8004618 <HAL_RCC_OscConfig+0x4cc>)
 800447c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800447e:	4a66      	ldr	r2, [pc, #408]	; (8004618 <HAL_RCC_OscConfig+0x4cc>)
 8004480:	f023 0304 	bic.w	r3, r3, #4
 8004484:	6713      	str	r3, [r2, #112]	; 0x70
 8004486:	e01c      	b.n	80044c2 <HAL_RCC_OscConfig+0x376>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	2b05      	cmp	r3, #5
 800448e:	d10c      	bne.n	80044aa <HAL_RCC_OscConfig+0x35e>
 8004490:	4b61      	ldr	r3, [pc, #388]	; (8004618 <HAL_RCC_OscConfig+0x4cc>)
 8004492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004494:	4a60      	ldr	r2, [pc, #384]	; (8004618 <HAL_RCC_OscConfig+0x4cc>)
 8004496:	f043 0304 	orr.w	r3, r3, #4
 800449a:	6713      	str	r3, [r2, #112]	; 0x70
 800449c:	4b5e      	ldr	r3, [pc, #376]	; (8004618 <HAL_RCC_OscConfig+0x4cc>)
 800449e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a0:	4a5d      	ldr	r2, [pc, #372]	; (8004618 <HAL_RCC_OscConfig+0x4cc>)
 80044a2:	f043 0301 	orr.w	r3, r3, #1
 80044a6:	6713      	str	r3, [r2, #112]	; 0x70
 80044a8:	e00b      	b.n	80044c2 <HAL_RCC_OscConfig+0x376>
 80044aa:	4b5b      	ldr	r3, [pc, #364]	; (8004618 <HAL_RCC_OscConfig+0x4cc>)
 80044ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ae:	4a5a      	ldr	r2, [pc, #360]	; (8004618 <HAL_RCC_OscConfig+0x4cc>)
 80044b0:	f023 0301 	bic.w	r3, r3, #1
 80044b4:	6713      	str	r3, [r2, #112]	; 0x70
 80044b6:	4b58      	ldr	r3, [pc, #352]	; (8004618 <HAL_RCC_OscConfig+0x4cc>)
 80044b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ba:	4a57      	ldr	r2, [pc, #348]	; (8004618 <HAL_RCC_OscConfig+0x4cc>)
 80044bc:	f023 0304 	bic.w	r3, r3, #4
 80044c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d015      	beq.n	80044f6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ca:	f7fe fcb3 	bl	8002e34 <HAL_GetTick>
 80044ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d0:	e00a      	b.n	80044e8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044d2:	f7fe fcaf 	bl	8002e34 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d901      	bls.n	80044e8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e0ce      	b.n	8004686 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e8:	4b4b      	ldr	r3, [pc, #300]	; (8004618 <HAL_RCC_OscConfig+0x4cc>)
 80044ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0ee      	beq.n	80044d2 <HAL_RCC_OscConfig+0x386>
 80044f4:	e014      	b.n	8004520 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f6:	f7fe fc9d 	bl	8002e34 <HAL_GetTick>
 80044fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044fc:	e00a      	b.n	8004514 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044fe:	f7fe fc99 	bl	8002e34 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	f241 3288 	movw	r2, #5000	; 0x1388
 800450c:	4293      	cmp	r3, r2
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e0b8      	b.n	8004686 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004514:	4b40      	ldr	r3, [pc, #256]	; (8004618 <HAL_RCC_OscConfig+0x4cc>)
 8004516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1ee      	bne.n	80044fe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004520:	7dfb      	ldrb	r3, [r7, #23]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d105      	bne.n	8004532 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004526:	4b3c      	ldr	r3, [pc, #240]	; (8004618 <HAL_RCC_OscConfig+0x4cc>)
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	4a3b      	ldr	r2, [pc, #236]	; (8004618 <HAL_RCC_OscConfig+0x4cc>)
 800452c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004530:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 80a4 	beq.w	8004684 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800453c:	4b36      	ldr	r3, [pc, #216]	; (8004618 <HAL_RCC_OscConfig+0x4cc>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f003 030c 	and.w	r3, r3, #12
 8004544:	2b08      	cmp	r3, #8
 8004546:	d06b      	beq.n	8004620 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	2b02      	cmp	r3, #2
 800454e:	d149      	bne.n	80045e4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004550:	4b31      	ldr	r3, [pc, #196]	; (8004618 <HAL_RCC_OscConfig+0x4cc>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a30      	ldr	r2, [pc, #192]	; (8004618 <HAL_RCC_OscConfig+0x4cc>)
 8004556:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800455a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455c:	f7fe fc6a 	bl	8002e34 <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004564:	f7fe fc66 	bl	8002e34 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e087      	b.n	8004686 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004576:	4b28      	ldr	r3, [pc, #160]	; (8004618 <HAL_RCC_OscConfig+0x4cc>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1f0      	bne.n	8004564 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	69da      	ldr	r2, [r3, #28]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a1b      	ldr	r3, [r3, #32]
 800458a:	431a      	orrs	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004590:	019b      	lsls	r3, r3, #6
 8004592:	431a      	orrs	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004598:	085b      	lsrs	r3, r3, #1
 800459a:	3b01      	subs	r3, #1
 800459c:	041b      	lsls	r3, r3, #16
 800459e:	431a      	orrs	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a4:	061b      	lsls	r3, r3, #24
 80045a6:	4313      	orrs	r3, r2
 80045a8:	4a1b      	ldr	r2, [pc, #108]	; (8004618 <HAL_RCC_OscConfig+0x4cc>)
 80045aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045ae:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045b0:	4b19      	ldr	r3, [pc, #100]	; (8004618 <HAL_RCC_OscConfig+0x4cc>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a18      	ldr	r2, [pc, #96]	; (8004618 <HAL_RCC_OscConfig+0x4cc>)
 80045b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045bc:	f7fe fc3a 	bl	8002e34 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c4:	f7fe fc36 	bl	8002e34 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e057      	b.n	8004686 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045d6:	4b10      	ldr	r3, [pc, #64]	; (8004618 <HAL_RCC_OscConfig+0x4cc>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0f0      	beq.n	80045c4 <HAL_RCC_OscConfig+0x478>
 80045e2:	e04f      	b.n	8004684 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045e4:	4b0c      	ldr	r3, [pc, #48]	; (8004618 <HAL_RCC_OscConfig+0x4cc>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a0b      	ldr	r2, [pc, #44]	; (8004618 <HAL_RCC_OscConfig+0x4cc>)
 80045ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f0:	f7fe fc20 	bl	8002e34 <HAL_GetTick>
 80045f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f8:	f7fe fc1c 	bl	8002e34 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e03d      	b.n	8004686 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800460a:	4b03      	ldr	r3, [pc, #12]	; (8004618 <HAL_RCC_OscConfig+0x4cc>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1f0      	bne.n	80045f8 <HAL_RCC_OscConfig+0x4ac>
 8004616:	e035      	b.n	8004684 <HAL_RCC_OscConfig+0x538>
 8004618:	40023800 	.word	0x40023800
 800461c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004620:	4b1b      	ldr	r3, [pc, #108]	; (8004690 <HAL_RCC_OscConfig+0x544>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d028      	beq.n	8004680 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004638:	429a      	cmp	r2, r3
 800463a:	d121      	bne.n	8004680 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004646:	429a      	cmp	r2, r3
 8004648:	d11a      	bne.n	8004680 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004650:	4013      	ands	r3, r2
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004656:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004658:	4293      	cmp	r3, r2
 800465a:	d111      	bne.n	8004680 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004666:	085b      	lsrs	r3, r3, #1
 8004668:	3b01      	subs	r3, #1
 800466a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800466c:	429a      	cmp	r2, r3
 800466e:	d107      	bne.n	8004680 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800467c:	429a      	cmp	r2, r3
 800467e:	d001      	beq.n	8004684 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e000      	b.n	8004686 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	40023800 	.word	0x40023800

08004694 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e0d0      	b.n	800484e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046ac:	4b6a      	ldr	r3, [pc, #424]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 030f 	and.w	r3, r3, #15
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d910      	bls.n	80046dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ba:	4b67      	ldr	r3, [pc, #412]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f023 020f 	bic.w	r2, r3, #15
 80046c2:	4965      	ldr	r1, [pc, #404]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ca:	4b63      	ldr	r3, [pc, #396]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 030f 	and.w	r3, r3, #15
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d001      	beq.n	80046dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e0b8      	b.n	800484e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d020      	beq.n	800472a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d005      	beq.n	8004700 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046f4:	4b59      	ldr	r3, [pc, #356]	; (800485c <HAL_RCC_ClockConfig+0x1c8>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	4a58      	ldr	r2, [pc, #352]	; (800485c <HAL_RCC_ClockConfig+0x1c8>)
 80046fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0308 	and.w	r3, r3, #8
 8004708:	2b00      	cmp	r3, #0
 800470a:	d005      	beq.n	8004718 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800470c:	4b53      	ldr	r3, [pc, #332]	; (800485c <HAL_RCC_ClockConfig+0x1c8>)
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	4a52      	ldr	r2, [pc, #328]	; (800485c <HAL_RCC_ClockConfig+0x1c8>)
 8004712:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004716:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004718:	4b50      	ldr	r3, [pc, #320]	; (800485c <HAL_RCC_ClockConfig+0x1c8>)
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	494d      	ldr	r1, [pc, #308]	; (800485c <HAL_RCC_ClockConfig+0x1c8>)
 8004726:	4313      	orrs	r3, r2
 8004728:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d040      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d107      	bne.n	800474e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800473e:	4b47      	ldr	r3, [pc, #284]	; (800485c <HAL_RCC_ClockConfig+0x1c8>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d115      	bne.n	8004776 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e07f      	b.n	800484e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	2b02      	cmp	r3, #2
 8004754:	d107      	bne.n	8004766 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004756:	4b41      	ldr	r3, [pc, #260]	; (800485c <HAL_RCC_ClockConfig+0x1c8>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d109      	bne.n	8004776 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e073      	b.n	800484e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004766:	4b3d      	ldr	r3, [pc, #244]	; (800485c <HAL_RCC_ClockConfig+0x1c8>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e06b      	b.n	800484e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004776:	4b39      	ldr	r3, [pc, #228]	; (800485c <HAL_RCC_ClockConfig+0x1c8>)
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f023 0203 	bic.w	r2, r3, #3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	4936      	ldr	r1, [pc, #216]	; (800485c <HAL_RCC_ClockConfig+0x1c8>)
 8004784:	4313      	orrs	r3, r2
 8004786:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004788:	f7fe fb54 	bl	8002e34 <HAL_GetTick>
 800478c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800478e:	e00a      	b.n	80047a6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004790:	f7fe fb50 	bl	8002e34 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	f241 3288 	movw	r2, #5000	; 0x1388
 800479e:	4293      	cmp	r3, r2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e053      	b.n	800484e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a6:	4b2d      	ldr	r3, [pc, #180]	; (800485c <HAL_RCC_ClockConfig+0x1c8>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f003 020c 	and.w	r2, r3, #12
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d1eb      	bne.n	8004790 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047b8:	4b27      	ldr	r3, [pc, #156]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 030f 	and.w	r3, r3, #15
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d210      	bcs.n	80047e8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c6:	4b24      	ldr	r3, [pc, #144]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f023 020f 	bic.w	r2, r3, #15
 80047ce:	4922      	ldr	r1, [pc, #136]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d6:	4b20      	ldr	r3, [pc, #128]	; (8004858 <HAL_RCC_ClockConfig+0x1c4>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d001      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e032      	b.n	800484e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0304 	and.w	r3, r3, #4
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d008      	beq.n	8004806 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047f4:	4b19      	ldr	r3, [pc, #100]	; (800485c <HAL_RCC_ClockConfig+0x1c8>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	4916      	ldr	r1, [pc, #88]	; (800485c <HAL_RCC_ClockConfig+0x1c8>)
 8004802:	4313      	orrs	r3, r2
 8004804:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0308 	and.w	r3, r3, #8
 800480e:	2b00      	cmp	r3, #0
 8004810:	d009      	beq.n	8004826 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004812:	4b12      	ldr	r3, [pc, #72]	; (800485c <HAL_RCC_ClockConfig+0x1c8>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	490e      	ldr	r1, [pc, #56]	; (800485c <HAL_RCC_ClockConfig+0x1c8>)
 8004822:	4313      	orrs	r3, r2
 8004824:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004826:	f000 f821 	bl	800486c <HAL_RCC_GetSysClockFreq>
 800482a:	4602      	mov	r2, r0
 800482c:	4b0b      	ldr	r3, [pc, #44]	; (800485c <HAL_RCC_ClockConfig+0x1c8>)
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	091b      	lsrs	r3, r3, #4
 8004832:	f003 030f 	and.w	r3, r3, #15
 8004836:	490a      	ldr	r1, [pc, #40]	; (8004860 <HAL_RCC_ClockConfig+0x1cc>)
 8004838:	5ccb      	ldrb	r3, [r1, r3]
 800483a:	fa22 f303 	lsr.w	r3, r2, r3
 800483e:	4a09      	ldr	r2, [pc, #36]	; (8004864 <HAL_RCC_ClockConfig+0x1d0>)
 8004840:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004842:	4b09      	ldr	r3, [pc, #36]	; (8004868 <HAL_RCC_ClockConfig+0x1d4>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4618      	mov	r0, r3
 8004848:	f7fe fab0 	bl	8002dac <HAL_InitTick>

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	40023c00 	.word	0x40023c00
 800485c:	40023800 	.word	0x40023800
 8004860:	08009f50 	.word	0x08009f50
 8004864:	20000004 	.word	0x20000004
 8004868:	20000008 	.word	0x20000008

0800486c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800486c:	b5b0      	push	{r4, r5, r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004872:	2100      	movs	r1, #0
 8004874:	6079      	str	r1, [r7, #4]
 8004876:	2100      	movs	r1, #0
 8004878:	60f9      	str	r1, [r7, #12]
 800487a:	2100      	movs	r1, #0
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800487e:	2100      	movs	r1, #0
 8004880:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004882:	4952      	ldr	r1, [pc, #328]	; (80049cc <HAL_RCC_GetSysClockFreq+0x160>)
 8004884:	6889      	ldr	r1, [r1, #8]
 8004886:	f001 010c 	and.w	r1, r1, #12
 800488a:	2908      	cmp	r1, #8
 800488c:	d00d      	beq.n	80048aa <HAL_RCC_GetSysClockFreq+0x3e>
 800488e:	2908      	cmp	r1, #8
 8004890:	f200 8094 	bhi.w	80049bc <HAL_RCC_GetSysClockFreq+0x150>
 8004894:	2900      	cmp	r1, #0
 8004896:	d002      	beq.n	800489e <HAL_RCC_GetSysClockFreq+0x32>
 8004898:	2904      	cmp	r1, #4
 800489a:	d003      	beq.n	80048a4 <HAL_RCC_GetSysClockFreq+0x38>
 800489c:	e08e      	b.n	80049bc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800489e:	4b4c      	ldr	r3, [pc, #304]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x164>)
 80048a0:	60bb      	str	r3, [r7, #8]
      break;
 80048a2:	e08e      	b.n	80049c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048a4:	4b4b      	ldr	r3, [pc, #300]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80048a6:	60bb      	str	r3, [r7, #8]
      break;
 80048a8:	e08b      	b.n	80049c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048aa:	4948      	ldr	r1, [pc, #288]	; (80049cc <HAL_RCC_GetSysClockFreq+0x160>)
 80048ac:	6849      	ldr	r1, [r1, #4]
 80048ae:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80048b2:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80048b4:	4945      	ldr	r1, [pc, #276]	; (80049cc <HAL_RCC_GetSysClockFreq+0x160>)
 80048b6:	6849      	ldr	r1, [r1, #4]
 80048b8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80048bc:	2900      	cmp	r1, #0
 80048be:	d024      	beq.n	800490a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048c0:	4942      	ldr	r1, [pc, #264]	; (80049cc <HAL_RCC_GetSysClockFreq+0x160>)
 80048c2:	6849      	ldr	r1, [r1, #4]
 80048c4:	0989      	lsrs	r1, r1, #6
 80048c6:	4608      	mov	r0, r1
 80048c8:	f04f 0100 	mov.w	r1, #0
 80048cc:	f240 14ff 	movw	r4, #511	; 0x1ff
 80048d0:	f04f 0500 	mov.w	r5, #0
 80048d4:	ea00 0204 	and.w	r2, r0, r4
 80048d8:	ea01 0305 	and.w	r3, r1, r5
 80048dc:	493d      	ldr	r1, [pc, #244]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80048de:	fb01 f003 	mul.w	r0, r1, r3
 80048e2:	2100      	movs	r1, #0
 80048e4:	fb01 f102 	mul.w	r1, r1, r2
 80048e8:	1844      	adds	r4, r0, r1
 80048ea:	493a      	ldr	r1, [pc, #232]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x168>)
 80048ec:	fba2 0101 	umull	r0, r1, r2, r1
 80048f0:	1863      	adds	r3, r4, r1
 80048f2:	4619      	mov	r1, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	461a      	mov	r2, r3
 80048f8:	f04f 0300 	mov.w	r3, #0
 80048fc:	f7fc f974 	bl	8000be8 <__aeabi_uldivmod>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4613      	mov	r3, r2
 8004906:	60fb      	str	r3, [r7, #12]
 8004908:	e04a      	b.n	80049a0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800490a:	4b30      	ldr	r3, [pc, #192]	; (80049cc <HAL_RCC_GetSysClockFreq+0x160>)
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	099b      	lsrs	r3, r3, #6
 8004910:	461a      	mov	r2, r3
 8004912:	f04f 0300 	mov.w	r3, #0
 8004916:	f240 10ff 	movw	r0, #511	; 0x1ff
 800491a:	f04f 0100 	mov.w	r1, #0
 800491e:	ea02 0400 	and.w	r4, r2, r0
 8004922:	ea03 0501 	and.w	r5, r3, r1
 8004926:	4620      	mov	r0, r4
 8004928:	4629      	mov	r1, r5
 800492a:	f04f 0200 	mov.w	r2, #0
 800492e:	f04f 0300 	mov.w	r3, #0
 8004932:	014b      	lsls	r3, r1, #5
 8004934:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004938:	0142      	lsls	r2, r0, #5
 800493a:	4610      	mov	r0, r2
 800493c:	4619      	mov	r1, r3
 800493e:	1b00      	subs	r0, r0, r4
 8004940:	eb61 0105 	sbc.w	r1, r1, r5
 8004944:	f04f 0200 	mov.w	r2, #0
 8004948:	f04f 0300 	mov.w	r3, #0
 800494c:	018b      	lsls	r3, r1, #6
 800494e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004952:	0182      	lsls	r2, r0, #6
 8004954:	1a12      	subs	r2, r2, r0
 8004956:	eb63 0301 	sbc.w	r3, r3, r1
 800495a:	f04f 0000 	mov.w	r0, #0
 800495e:	f04f 0100 	mov.w	r1, #0
 8004962:	00d9      	lsls	r1, r3, #3
 8004964:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004968:	00d0      	lsls	r0, r2, #3
 800496a:	4602      	mov	r2, r0
 800496c:	460b      	mov	r3, r1
 800496e:	1912      	adds	r2, r2, r4
 8004970:	eb45 0303 	adc.w	r3, r5, r3
 8004974:	f04f 0000 	mov.w	r0, #0
 8004978:	f04f 0100 	mov.w	r1, #0
 800497c:	0299      	lsls	r1, r3, #10
 800497e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004982:	0290      	lsls	r0, r2, #10
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
 8004988:	4610      	mov	r0, r2
 800498a:	4619      	mov	r1, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	461a      	mov	r2, r3
 8004990:	f04f 0300 	mov.w	r3, #0
 8004994:	f7fc f928 	bl	8000be8 <__aeabi_uldivmod>
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	4613      	mov	r3, r2
 800499e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80049a0:	4b0a      	ldr	r3, [pc, #40]	; (80049cc <HAL_RCC_GetSysClockFreq+0x160>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	0c1b      	lsrs	r3, r3, #16
 80049a6:	f003 0303 	and.w	r3, r3, #3
 80049aa:	3301      	adds	r3, #1
 80049ac:	005b      	lsls	r3, r3, #1
 80049ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80049b0:	68fa      	ldr	r2, [r7, #12]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b8:	60bb      	str	r3, [r7, #8]
      break;
 80049ba:	e002      	b.n	80049c2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049bc:	4b04      	ldr	r3, [pc, #16]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x164>)
 80049be:	60bb      	str	r3, [r7, #8]
      break;
 80049c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049c2:	68bb      	ldr	r3, [r7, #8]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bdb0      	pop	{r4, r5, r7, pc}
 80049cc:	40023800 	.word	0x40023800
 80049d0:	00f42400 	.word	0x00f42400
 80049d4:	017d7840 	.word	0x017d7840

080049d8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049d8:	b480      	push	{r7}
 80049da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049dc:	4b03      	ldr	r3, [pc, #12]	; (80049ec <HAL_RCC_GetHCLKFreq+0x14>)
 80049de:	681b      	ldr	r3, [r3, #0]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	20000004 	.word	0x20000004

080049f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049f4:	f7ff fff0 	bl	80049d8 <HAL_RCC_GetHCLKFreq>
 80049f8:	4602      	mov	r2, r0
 80049fa:	4b05      	ldr	r3, [pc, #20]	; (8004a10 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	0a9b      	lsrs	r3, r3, #10
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	4903      	ldr	r1, [pc, #12]	; (8004a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a06:	5ccb      	ldrb	r3, [r1, r3]
 8004a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	40023800 	.word	0x40023800
 8004a14:	08009f60 	.word	0x08009f60

08004a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a1c:	f7ff ffdc 	bl	80049d8 <HAL_RCC_GetHCLKFreq>
 8004a20:	4602      	mov	r2, r0
 8004a22:	4b05      	ldr	r3, [pc, #20]	; (8004a38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	0b5b      	lsrs	r3, r3, #13
 8004a28:	f003 0307 	and.w	r3, r3, #7
 8004a2c:	4903      	ldr	r1, [pc, #12]	; (8004a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a2e:	5ccb      	ldrb	r3, [r1, r3]
 8004a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	40023800 	.word	0x40023800
 8004a3c:	08009f60 	.word	0x08009f60

08004a40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b088      	sub	sp, #32
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004a50:	2300      	movs	r3, #0
 8004a52:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004a54:	2300      	movs	r3, #0
 8004a56:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d012      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a68:	4b69      	ldr	r3, [pc, #420]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	4a68      	ldr	r2, [pc, #416]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a6e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004a72:	6093      	str	r3, [r2, #8]
 8004a74:	4b66      	ldr	r3, [pc, #408]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7c:	4964      	ldr	r1, [pc, #400]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d017      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a9a:	4b5d      	ldr	r3, [pc, #372]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aa0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa8:	4959      	ldr	r1, [pc, #356]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ab8:	d101      	bne.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004aba:	2301      	movs	r3, #1
 8004abc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d017      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ad6:	4b4e      	ldr	r3, [pc, #312]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004adc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae4:	494a      	ldr	r1, [pc, #296]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004af4:	d101      	bne.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004af6:	2301      	movs	r3, #1
 8004af8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004b02:	2301      	movs	r3, #1
 8004b04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004b12:	2301      	movs	r3, #1
 8004b14:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0320 	and.w	r3, r3, #32
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f000 808b 	beq.w	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b24:	4b3a      	ldr	r3, [pc, #232]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b28:	4a39      	ldr	r2, [pc, #228]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b2e:	6413      	str	r3, [r2, #64]	; 0x40
 8004b30:	4b37      	ldr	r3, [pc, #220]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b38:	60bb      	str	r3, [r7, #8]
 8004b3a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b3c:	4b35      	ldr	r3, [pc, #212]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a34      	ldr	r2, [pc, #208]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b48:	f7fe f974 	bl	8002e34 <HAL_GetTick>
 8004b4c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b50:	f7fe f970 	bl	8002e34 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b64      	cmp	r3, #100	; 0x64
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e357      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b62:	4b2c      	ldr	r3, [pc, #176]	; (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d0f0      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b6e:	4b28      	ldr	r3, [pc, #160]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b76:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d035      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d02e      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b8c:	4b20      	ldr	r3, [pc, #128]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b94:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b96:	4b1e      	ldr	r3, [pc, #120]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9a:	4a1d      	ldr	r2, [pc, #116]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ba0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ba2:	4b1b      	ldr	r3, [pc, #108]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba6:	4a1a      	ldr	r2, [pc, #104]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ba8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004bae:	4a18      	ldr	r2, [pc, #96]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004bb4:	4b16      	ldr	r3, [pc, #88]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d114      	bne.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc0:	f7fe f938 	bl	8002e34 <HAL_GetTick>
 8004bc4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bc6:	e00a      	b.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bc8:	f7fe f934 	bl	8002e34 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e319      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bde:	4b0c      	ldr	r3, [pc, #48]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d0ee      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bf6:	d111      	bne.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004bf8:	4b05      	ldr	r3, [pc, #20]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c04:	4b04      	ldr	r3, [pc, #16]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c06:	400b      	ands	r3, r1
 8004c08:	4901      	ldr	r1, [pc, #4]	; (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	608b      	str	r3, [r1, #8]
 8004c0e:	e00b      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004c10:	40023800 	.word	0x40023800
 8004c14:	40007000 	.word	0x40007000
 8004c18:	0ffffcff 	.word	0x0ffffcff
 8004c1c:	4bb1      	ldr	r3, [pc, #708]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	4ab0      	ldr	r2, [pc, #704]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c22:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004c26:	6093      	str	r3, [r2, #8]
 8004c28:	4bae      	ldr	r3, [pc, #696]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c34:	49ab      	ldr	r1, [pc, #684]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0310 	and.w	r3, r3, #16
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d010      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c46:	4ba7      	ldr	r3, [pc, #668]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c4c:	4aa5      	ldr	r2, [pc, #660]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c52:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004c56:	4ba3      	ldr	r3, [pc, #652]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c58:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c60:	49a0      	ldr	r1, [pc, #640]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00a      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c74:	4b9b      	ldr	r3, [pc, #620]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c82:	4998      	ldr	r1, [pc, #608]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00a      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c96:	4b93      	ldr	r3, [pc, #588]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ca4:	498f      	ldr	r1, [pc, #572]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00a      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004cb8:	4b8a      	ldr	r3, [pc, #552]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cc6:	4987      	ldr	r1, [pc, #540]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00a      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004cda:	4b82      	ldr	r3, [pc, #520]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce8:	497e      	ldr	r1, [pc, #504]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00a      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cfc:	4b79      	ldr	r3, [pc, #484]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d02:	f023 0203 	bic.w	r2, r3, #3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0a:	4976      	ldr	r1, [pc, #472]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00a      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d1e:	4b71      	ldr	r3, [pc, #452]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d24:	f023 020c 	bic.w	r2, r3, #12
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d2c:	496d      	ldr	r1, [pc, #436]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00a      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d40:	4b68      	ldr	r3, [pc, #416]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d46:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d4e:	4965      	ldr	r1, [pc, #404]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00a      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d62:	4b60      	ldr	r3, [pc, #384]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d68:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d70:	495c      	ldr	r1, [pc, #368]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00a      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d84:	4b57      	ldr	r3, [pc, #348]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d92:	4954      	ldr	r1, [pc, #336]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00a      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004da6:	4b4f      	ldr	r3, [pc, #316]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db4:	494b      	ldr	r1, [pc, #300]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00a      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004dc8:	4b46      	ldr	r3, [pc, #280]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dd6:	4943      	ldr	r1, [pc, #268]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004dea:	4b3e      	ldr	r3, [pc, #248]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004df8:	493a      	ldr	r1, [pc, #232]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00a      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e0c:	4b35      	ldr	r3, [pc, #212]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e12:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e1a:	4932      	ldr	r1, [pc, #200]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d011      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004e2e:	4b2d      	ldr	r3, [pc, #180]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e34:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e3c:	4929      	ldr	r1, [pc, #164]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e4c:	d101      	bne.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0308 	and.w	r3, r3, #8
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e6e:	4b1d      	ldr	r3, [pc, #116]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e74:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e7c:	4919      	ldr	r1, [pc, #100]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00b      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e90:	4b14      	ldr	r3, [pc, #80]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e96:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ea0:	4910      	ldr	r1, [pc, #64]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d006      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f000 80d9 	beq.w	800506e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ebc:	4b09      	ldr	r3, [pc, #36]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a08      	ldr	r2, [pc, #32]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ec2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ec6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec8:	f7fd ffb4 	bl	8002e34 <HAL_GetTick>
 8004ecc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ece:	e00b      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ed0:	f7fd ffb0 	bl	8002e34 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b64      	cmp	r3, #100	; 0x64
 8004edc:	d904      	bls.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e197      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004ee2:	bf00      	nop
 8004ee4:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ee8:	4b6c      	ldr	r3, [pc, #432]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1ed      	bne.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d021      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d11d      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f08:	4b64      	ldr	r3, [pc, #400]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f0e:	0c1b      	lsrs	r3, r3, #16
 8004f10:	f003 0303 	and.w	r3, r3, #3
 8004f14:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f16:	4b61      	ldr	r3, [pc, #388]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f1c:	0e1b      	lsrs	r3, r3, #24
 8004f1e:	f003 030f 	and.w	r3, r3, #15
 8004f22:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	019a      	lsls	r2, r3, #6
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	041b      	lsls	r3, r3, #16
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	061b      	lsls	r3, r3, #24
 8004f34:	431a      	orrs	r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	071b      	lsls	r3, r3, #28
 8004f3c:	4957      	ldr	r1, [pc, #348]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d004      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f58:	d00a      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d02e      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f6e:	d129      	bne.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f70:	4b4a      	ldr	r3, [pc, #296]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f76:	0c1b      	lsrs	r3, r3, #16
 8004f78:	f003 0303 	and.w	r3, r3, #3
 8004f7c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f7e:	4b47      	ldr	r3, [pc, #284]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f84:	0f1b      	lsrs	r3, r3, #28
 8004f86:	f003 0307 	and.w	r3, r3, #7
 8004f8a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	019a      	lsls	r2, r3, #6
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	041b      	lsls	r3, r3, #16
 8004f96:	431a      	orrs	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	061b      	lsls	r3, r3, #24
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	071b      	lsls	r3, r3, #28
 8004fa4:	493d      	ldr	r1, [pc, #244]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004fac:	4b3b      	ldr	r3, [pc, #236]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fb2:	f023 021f 	bic.w	r2, r3, #31
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	4937      	ldr	r1, [pc, #220]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d01d      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004fd0:	4b32      	ldr	r3, [pc, #200]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fd6:	0e1b      	lsrs	r3, r3, #24
 8004fd8:	f003 030f 	and.w	r3, r3, #15
 8004fdc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004fde:	4b2f      	ldr	r3, [pc, #188]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fe4:	0f1b      	lsrs	r3, r3, #28
 8004fe6:	f003 0307 	and.w	r3, r3, #7
 8004fea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	019a      	lsls	r2, r3, #6
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	041b      	lsls	r3, r3, #16
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	061b      	lsls	r3, r3, #24
 8004ffe:	431a      	orrs	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	071b      	lsls	r3, r3, #28
 8005004:	4925      	ldr	r1, [pc, #148]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005006:	4313      	orrs	r3, r2
 8005008:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d011      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	019a      	lsls	r2, r3, #6
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	041b      	lsls	r3, r3, #16
 8005024:	431a      	orrs	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	061b      	lsls	r3, r3, #24
 800502c:	431a      	orrs	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	071b      	lsls	r3, r3, #28
 8005034:	4919      	ldr	r1, [pc, #100]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005036:	4313      	orrs	r3, r2
 8005038:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800503c:	4b17      	ldr	r3, [pc, #92]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a16      	ldr	r2, [pc, #88]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005042:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005046:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005048:	f7fd fef4 	bl	8002e34 <HAL_GetTick>
 800504c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800504e:	e008      	b.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005050:	f7fd fef0 	bl	8002e34 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b64      	cmp	r3, #100	; 0x64
 800505c:	d901      	bls.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e0d7      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005062:	4b0e      	ldr	r3, [pc, #56]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d0f0      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	2b01      	cmp	r3, #1
 8005072:	f040 80cd 	bne.w	8005210 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005076:	4b09      	ldr	r3, [pc, #36]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a08      	ldr	r2, [pc, #32]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800507c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005080:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005082:	f7fd fed7 	bl	8002e34 <HAL_GetTick>
 8005086:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005088:	e00a      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800508a:	f7fd fed3 	bl	8002e34 <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	2b64      	cmp	r3, #100	; 0x64
 8005096:	d903      	bls.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e0ba      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800509c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80050a0:	4b5e      	ldr	r3, [pc, #376]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050ac:	d0ed      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d009      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d02e      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d12a      	bne.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80050d6:	4b51      	ldr	r3, [pc, #324]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050dc:	0c1b      	lsrs	r3, r3, #16
 80050de:	f003 0303 	and.w	r3, r3, #3
 80050e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80050e4:	4b4d      	ldr	r3, [pc, #308]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ea:	0f1b      	lsrs	r3, r3, #28
 80050ec:	f003 0307 	and.w	r3, r3, #7
 80050f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	019a      	lsls	r2, r3, #6
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	041b      	lsls	r3, r3, #16
 80050fc:	431a      	orrs	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	699b      	ldr	r3, [r3, #24]
 8005102:	061b      	lsls	r3, r3, #24
 8005104:	431a      	orrs	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	071b      	lsls	r3, r3, #28
 800510a:	4944      	ldr	r1, [pc, #272]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800510c:	4313      	orrs	r3, r2
 800510e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005112:	4b42      	ldr	r3, [pc, #264]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005114:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005118:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005120:	3b01      	subs	r3, #1
 8005122:	021b      	lsls	r3, r3, #8
 8005124:	493d      	ldr	r1, [pc, #244]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005126:	4313      	orrs	r3, r2
 8005128:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d022      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800513c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005140:	d11d      	bne.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005142:	4b36      	ldr	r3, [pc, #216]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005148:	0e1b      	lsrs	r3, r3, #24
 800514a:	f003 030f 	and.w	r3, r3, #15
 800514e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005150:	4b32      	ldr	r3, [pc, #200]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005156:	0f1b      	lsrs	r3, r3, #28
 8005158:	f003 0307 	and.w	r3, r3, #7
 800515c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	019a      	lsls	r2, r3, #6
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	041b      	lsls	r3, r3, #16
 800516a:	431a      	orrs	r2, r3
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	061b      	lsls	r3, r3, #24
 8005170:	431a      	orrs	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	071b      	lsls	r3, r3, #28
 8005176:	4929      	ldr	r1, [pc, #164]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005178:	4313      	orrs	r3, r2
 800517a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0308 	and.w	r3, r3, #8
 8005186:	2b00      	cmp	r3, #0
 8005188:	d028      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800518a:	4b24      	ldr	r3, [pc, #144]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800518c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005190:	0e1b      	lsrs	r3, r3, #24
 8005192:	f003 030f 	and.w	r3, r3, #15
 8005196:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005198:	4b20      	ldr	r3, [pc, #128]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800519a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800519e:	0c1b      	lsrs	r3, r3, #16
 80051a0:	f003 0303 	and.w	r3, r3, #3
 80051a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	019a      	lsls	r2, r3, #6
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	041b      	lsls	r3, r3, #16
 80051b0:	431a      	orrs	r2, r3
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	061b      	lsls	r3, r3, #24
 80051b6:	431a      	orrs	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	69db      	ldr	r3, [r3, #28]
 80051bc:	071b      	lsls	r3, r3, #28
 80051be:	4917      	ldr	r1, [pc, #92]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80051c6:	4b15      	ldr	r3, [pc, #84]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d4:	4911      	ldr	r1, [pc, #68]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80051dc:	4b0f      	ldr	r3, [pc, #60]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a0e      	ldr	r2, [pc, #56]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80051e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051e8:	f7fd fe24 	bl	8002e34 <HAL_GetTick>
 80051ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051ee:	e008      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80051f0:	f7fd fe20 	bl	8002e34 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b64      	cmp	r3, #100	; 0x64
 80051fc:	d901      	bls.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e007      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005202:	4b06      	ldr	r3, [pc, #24]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800520a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800520e:	d1ef      	bne.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3720      	adds	r7, #32
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	40023800 	.word	0x40023800

08005220 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e049      	b.n	80052c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d106      	bne.n	800524c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7fd fb52 	bl	80028f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	3304      	adds	r3, #4
 800525c:	4619      	mov	r1, r3
 800525e:	4610      	mov	r0, r2
 8005260:	f000 fcd8 	bl	8005c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3708      	adds	r7, #8
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
	...

080052d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d001      	beq.n	80052e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e054      	b.n	8005392 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2202      	movs	r2, #2
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68da      	ldr	r2, [r3, #12]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f042 0201 	orr.w	r2, r2, #1
 80052fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a26      	ldr	r2, [pc, #152]	; (80053a0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d022      	beq.n	8005350 <HAL_TIM_Base_Start_IT+0x80>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005312:	d01d      	beq.n	8005350 <HAL_TIM_Base_Start_IT+0x80>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a22      	ldr	r2, [pc, #136]	; (80053a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d018      	beq.n	8005350 <HAL_TIM_Base_Start_IT+0x80>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a21      	ldr	r2, [pc, #132]	; (80053a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d013      	beq.n	8005350 <HAL_TIM_Base_Start_IT+0x80>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a1f      	ldr	r2, [pc, #124]	; (80053ac <HAL_TIM_Base_Start_IT+0xdc>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d00e      	beq.n	8005350 <HAL_TIM_Base_Start_IT+0x80>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a1e      	ldr	r2, [pc, #120]	; (80053b0 <HAL_TIM_Base_Start_IT+0xe0>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d009      	beq.n	8005350 <HAL_TIM_Base_Start_IT+0x80>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a1c      	ldr	r2, [pc, #112]	; (80053b4 <HAL_TIM_Base_Start_IT+0xe4>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d004      	beq.n	8005350 <HAL_TIM_Base_Start_IT+0x80>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a1b      	ldr	r2, [pc, #108]	; (80053b8 <HAL_TIM_Base_Start_IT+0xe8>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d115      	bne.n	800537c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	4b19      	ldr	r3, [pc, #100]	; (80053bc <HAL_TIM_Base_Start_IT+0xec>)
 8005358:	4013      	ands	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2b06      	cmp	r3, #6
 8005360:	d015      	beq.n	800538e <HAL_TIM_Base_Start_IT+0xbe>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005368:	d011      	beq.n	800538e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f042 0201 	orr.w	r2, r2, #1
 8005378:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800537a:	e008      	b.n	800538e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f042 0201 	orr.w	r2, r2, #1
 800538a:	601a      	str	r2, [r3, #0]
 800538c:	e000      	b.n	8005390 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800538e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	40010000 	.word	0x40010000
 80053a4:	40000400 	.word	0x40000400
 80053a8:	40000800 	.word	0x40000800
 80053ac:	40000c00 	.word	0x40000c00
 80053b0:	40010400 	.word	0x40010400
 80053b4:	40014000 	.word	0x40014000
 80053b8:	40001800 	.word	0x40001800
 80053bc:	00010007 	.word	0x00010007

080053c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e049      	b.n	8005466 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d106      	bne.n	80053ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7fd fa40 	bl	800286c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	3304      	adds	r3, #4
 80053fc:	4619      	mov	r1, r3
 80053fe:	4610      	mov	r0, r2
 8005400:	f000 fc08 	bl	8005c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3708      	adds	r7, #8
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
	...

08005470 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d109      	bne.n	8005494 <HAL_TIM_PWM_Start+0x24>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b01      	cmp	r3, #1
 800548a:	bf14      	ite	ne
 800548c:	2301      	movne	r3, #1
 800548e:	2300      	moveq	r3, #0
 8005490:	b2db      	uxtb	r3, r3
 8005492:	e03c      	b.n	800550e <HAL_TIM_PWM_Start+0x9e>
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	2b04      	cmp	r3, #4
 8005498:	d109      	bne.n	80054ae <HAL_TIM_PWM_Start+0x3e>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	bf14      	ite	ne
 80054a6:	2301      	movne	r3, #1
 80054a8:	2300      	moveq	r3, #0
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	e02f      	b.n	800550e <HAL_TIM_PWM_Start+0x9e>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d109      	bne.n	80054c8 <HAL_TIM_PWM_Start+0x58>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b01      	cmp	r3, #1
 80054be:	bf14      	ite	ne
 80054c0:	2301      	movne	r3, #1
 80054c2:	2300      	moveq	r3, #0
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	e022      	b.n	800550e <HAL_TIM_PWM_Start+0x9e>
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	2b0c      	cmp	r3, #12
 80054cc:	d109      	bne.n	80054e2 <HAL_TIM_PWM_Start+0x72>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	bf14      	ite	ne
 80054da:	2301      	movne	r3, #1
 80054dc:	2300      	moveq	r3, #0
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	e015      	b.n	800550e <HAL_TIM_PWM_Start+0x9e>
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	2b10      	cmp	r3, #16
 80054e6:	d109      	bne.n	80054fc <HAL_TIM_PWM_Start+0x8c>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	bf14      	ite	ne
 80054f4:	2301      	movne	r3, #1
 80054f6:	2300      	moveq	r3, #0
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	e008      	b.n	800550e <HAL_TIM_PWM_Start+0x9e>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b01      	cmp	r3, #1
 8005506:	bf14      	ite	ne
 8005508:	2301      	movne	r3, #1
 800550a:	2300      	moveq	r3, #0
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e092      	b.n	800563c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d104      	bne.n	8005526 <HAL_TIM_PWM_Start+0xb6>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2202      	movs	r2, #2
 8005520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005524:	e023      	b.n	800556e <HAL_TIM_PWM_Start+0xfe>
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	2b04      	cmp	r3, #4
 800552a:	d104      	bne.n	8005536 <HAL_TIM_PWM_Start+0xc6>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2202      	movs	r2, #2
 8005530:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005534:	e01b      	b.n	800556e <HAL_TIM_PWM_Start+0xfe>
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b08      	cmp	r3, #8
 800553a:	d104      	bne.n	8005546 <HAL_TIM_PWM_Start+0xd6>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2202      	movs	r2, #2
 8005540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005544:	e013      	b.n	800556e <HAL_TIM_PWM_Start+0xfe>
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	2b0c      	cmp	r3, #12
 800554a:	d104      	bne.n	8005556 <HAL_TIM_PWM_Start+0xe6>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2202      	movs	r2, #2
 8005550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005554:	e00b      	b.n	800556e <HAL_TIM_PWM_Start+0xfe>
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	2b10      	cmp	r3, #16
 800555a:	d104      	bne.n	8005566 <HAL_TIM_PWM_Start+0xf6>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2202      	movs	r2, #2
 8005560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005564:	e003      	b.n	800556e <HAL_TIM_PWM_Start+0xfe>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2202      	movs	r2, #2
 800556a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2201      	movs	r2, #1
 8005574:	6839      	ldr	r1, [r7, #0]
 8005576:	4618      	mov	r0, r3
 8005578:	f000 fe4a 	bl	8006210 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a30      	ldr	r2, [pc, #192]	; (8005644 <HAL_TIM_PWM_Start+0x1d4>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d004      	beq.n	8005590 <HAL_TIM_PWM_Start+0x120>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a2f      	ldr	r2, [pc, #188]	; (8005648 <HAL_TIM_PWM_Start+0x1d8>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d101      	bne.n	8005594 <HAL_TIM_PWM_Start+0x124>
 8005590:	2301      	movs	r3, #1
 8005592:	e000      	b.n	8005596 <HAL_TIM_PWM_Start+0x126>
 8005594:	2300      	movs	r3, #0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d007      	beq.n	80055aa <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a25      	ldr	r2, [pc, #148]	; (8005644 <HAL_TIM_PWM_Start+0x1d4>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d022      	beq.n	80055fa <HAL_TIM_PWM_Start+0x18a>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055bc:	d01d      	beq.n	80055fa <HAL_TIM_PWM_Start+0x18a>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a22      	ldr	r2, [pc, #136]	; (800564c <HAL_TIM_PWM_Start+0x1dc>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d018      	beq.n	80055fa <HAL_TIM_PWM_Start+0x18a>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a20      	ldr	r2, [pc, #128]	; (8005650 <HAL_TIM_PWM_Start+0x1e0>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d013      	beq.n	80055fa <HAL_TIM_PWM_Start+0x18a>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a1f      	ldr	r2, [pc, #124]	; (8005654 <HAL_TIM_PWM_Start+0x1e4>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d00e      	beq.n	80055fa <HAL_TIM_PWM_Start+0x18a>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a19      	ldr	r2, [pc, #100]	; (8005648 <HAL_TIM_PWM_Start+0x1d8>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d009      	beq.n	80055fa <HAL_TIM_PWM_Start+0x18a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a1b      	ldr	r2, [pc, #108]	; (8005658 <HAL_TIM_PWM_Start+0x1e8>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d004      	beq.n	80055fa <HAL_TIM_PWM_Start+0x18a>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a19      	ldr	r2, [pc, #100]	; (800565c <HAL_TIM_PWM_Start+0x1ec>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d115      	bne.n	8005626 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	689a      	ldr	r2, [r3, #8]
 8005600:	4b17      	ldr	r3, [pc, #92]	; (8005660 <HAL_TIM_PWM_Start+0x1f0>)
 8005602:	4013      	ands	r3, r2
 8005604:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2b06      	cmp	r3, #6
 800560a:	d015      	beq.n	8005638 <HAL_TIM_PWM_Start+0x1c8>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005612:	d011      	beq.n	8005638 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f042 0201 	orr.w	r2, r2, #1
 8005622:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005624:	e008      	b.n	8005638 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f042 0201 	orr.w	r2, r2, #1
 8005634:	601a      	str	r2, [r3, #0]
 8005636:	e000      	b.n	800563a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005638:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	40010000 	.word	0x40010000
 8005648:	40010400 	.word	0x40010400
 800564c:	40000400 	.word	0x40000400
 8005650:	40000800 	.word	0x40000800
 8005654:	40000c00 	.word	0x40000c00
 8005658:	40014000 	.word	0x40014000
 800565c:	40001800 	.word	0x40001800
 8005660:	00010007 	.word	0x00010007

08005664 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2200      	movs	r2, #0
 8005674:	6839      	ldr	r1, [r7, #0]
 8005676:	4618      	mov	r0, r3
 8005678:	f000 fdca 	bl	8006210 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a36      	ldr	r2, [pc, #216]	; (800575c <HAL_TIM_PWM_Stop+0xf8>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d004      	beq.n	8005690 <HAL_TIM_PWM_Stop+0x2c>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a35      	ldr	r2, [pc, #212]	; (8005760 <HAL_TIM_PWM_Stop+0xfc>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d101      	bne.n	8005694 <HAL_TIM_PWM_Stop+0x30>
 8005690:	2301      	movs	r3, #1
 8005692:	e000      	b.n	8005696 <HAL_TIM_PWM_Stop+0x32>
 8005694:	2300      	movs	r3, #0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d017      	beq.n	80056ca <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	6a1a      	ldr	r2, [r3, #32]
 80056a0:	f241 1311 	movw	r3, #4369	; 0x1111
 80056a4:	4013      	ands	r3, r2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10f      	bne.n	80056ca <HAL_TIM_PWM_Stop+0x66>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6a1a      	ldr	r2, [r3, #32]
 80056b0:	f240 4344 	movw	r3, #1092	; 0x444
 80056b4:	4013      	ands	r3, r2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d107      	bne.n	80056ca <HAL_TIM_PWM_Stop+0x66>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056c8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6a1a      	ldr	r2, [r3, #32]
 80056d0:	f241 1311 	movw	r3, #4369	; 0x1111
 80056d4:	4013      	ands	r3, r2
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10f      	bne.n	80056fa <HAL_TIM_PWM_Stop+0x96>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6a1a      	ldr	r2, [r3, #32]
 80056e0:	f240 4344 	movw	r3, #1092	; 0x444
 80056e4:	4013      	ands	r3, r2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d107      	bne.n	80056fa <HAL_TIM_PWM_Stop+0x96>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f022 0201 	bic.w	r2, r2, #1
 80056f8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d104      	bne.n	800570a <HAL_TIM_PWM_Stop+0xa6>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005708:	e023      	b.n	8005752 <HAL_TIM_PWM_Stop+0xee>
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	2b04      	cmp	r3, #4
 800570e:	d104      	bne.n	800571a <HAL_TIM_PWM_Stop+0xb6>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005718:	e01b      	b.n	8005752 <HAL_TIM_PWM_Stop+0xee>
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	2b08      	cmp	r3, #8
 800571e:	d104      	bne.n	800572a <HAL_TIM_PWM_Stop+0xc6>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005728:	e013      	b.n	8005752 <HAL_TIM_PWM_Stop+0xee>
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	2b0c      	cmp	r3, #12
 800572e:	d104      	bne.n	800573a <HAL_TIM_PWM_Stop+0xd6>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005738:	e00b      	b.n	8005752 <HAL_TIM_PWM_Stop+0xee>
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b10      	cmp	r3, #16
 800573e:	d104      	bne.n	800574a <HAL_TIM_PWM_Stop+0xe6>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005748:	e003      	b.n	8005752 <HAL_TIM_PWM_Stop+0xee>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3708      	adds	r7, #8
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	40010000 	.word	0x40010000
 8005760:	40010400 	.word	0x40010400

08005764 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	2b02      	cmp	r3, #2
 8005778:	d122      	bne.n	80057c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b02      	cmp	r3, #2
 8005786:	d11b      	bne.n	80057c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f06f 0202 	mvn.w	r2, #2
 8005790:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	f003 0303 	and.w	r3, r3, #3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 fa16 	bl	8005bd8 <HAL_TIM_IC_CaptureCallback>
 80057ac:	e005      	b.n	80057ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 fa08 	bl	8005bc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 fa19 	bl	8005bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	f003 0304 	and.w	r3, r3, #4
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	d122      	bne.n	8005814 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f003 0304 	and.w	r3, r3, #4
 80057d8:	2b04      	cmp	r3, #4
 80057da:	d11b      	bne.n	8005814 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f06f 0204 	mvn.w	r2, #4
 80057e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2202      	movs	r2, #2
 80057ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f9ec 	bl	8005bd8 <HAL_TIM_IC_CaptureCallback>
 8005800:	e005      	b.n	800580e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f9de 	bl	8005bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 f9ef 	bl	8005bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	f003 0308 	and.w	r3, r3, #8
 800581e:	2b08      	cmp	r3, #8
 8005820:	d122      	bne.n	8005868 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	f003 0308 	and.w	r3, r3, #8
 800582c:	2b08      	cmp	r3, #8
 800582e:	d11b      	bne.n	8005868 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f06f 0208 	mvn.w	r2, #8
 8005838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2204      	movs	r2, #4
 800583e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	69db      	ldr	r3, [r3, #28]
 8005846:	f003 0303 	and.w	r3, r3, #3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f9c2 	bl	8005bd8 <HAL_TIM_IC_CaptureCallback>
 8005854:	e005      	b.n	8005862 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f9b4 	bl	8005bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 f9c5 	bl	8005bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	f003 0310 	and.w	r3, r3, #16
 8005872:	2b10      	cmp	r3, #16
 8005874:	d122      	bne.n	80058bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f003 0310 	and.w	r3, r3, #16
 8005880:	2b10      	cmp	r3, #16
 8005882:	d11b      	bne.n	80058bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f06f 0210 	mvn.w	r2, #16
 800588c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2208      	movs	r2, #8
 8005892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f998 	bl	8005bd8 <HAL_TIM_IC_CaptureCallback>
 80058a8:	e005      	b.n	80058b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f98a 	bl	8005bc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 f99b 	bl	8005bec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d10e      	bne.n	80058e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d107      	bne.n	80058e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f06f 0201 	mvn.w	r2, #1
 80058e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7fb fedc 	bl	80016a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f2:	2b80      	cmp	r3, #128	; 0x80
 80058f4:	d10e      	bne.n	8005914 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005900:	2b80      	cmp	r3, #128	; 0x80
 8005902:	d107      	bne.n	8005914 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800590c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 fd3c 	bl	800638c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800591e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005922:	d10e      	bne.n	8005942 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592e:	2b80      	cmp	r3, #128	; 0x80
 8005930:	d107      	bne.n	8005942 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800593a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 fd2f 	bl	80063a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594c:	2b40      	cmp	r3, #64	; 0x40
 800594e:	d10e      	bne.n	800596e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800595a:	2b40      	cmp	r3, #64	; 0x40
 800595c:	d107      	bne.n	800596e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 f949 	bl	8005c00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	f003 0320 	and.w	r3, r3, #32
 8005978:	2b20      	cmp	r3, #32
 800597a:	d10e      	bne.n	800599a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	f003 0320 	and.w	r3, r3, #32
 8005986:	2b20      	cmp	r3, #32
 8005988:	d107      	bne.n	800599a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f06f 0220 	mvn.w	r2, #32
 8005992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 fcef 	bl	8006378 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800599a:	bf00      	nop
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
	...

080059a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d101      	bne.n	80059be <HAL_TIM_PWM_ConfigChannel+0x1a>
 80059ba:	2302      	movs	r3, #2
 80059bc:	e0fd      	b.n	8005bba <HAL_TIM_PWM_ConfigChannel+0x216>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b14      	cmp	r3, #20
 80059ca:	f200 80f0 	bhi.w	8005bae <HAL_TIM_PWM_ConfigChannel+0x20a>
 80059ce:	a201      	add	r2, pc, #4	; (adr r2, 80059d4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80059d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d4:	08005a29 	.word	0x08005a29
 80059d8:	08005baf 	.word	0x08005baf
 80059dc:	08005baf 	.word	0x08005baf
 80059e0:	08005baf 	.word	0x08005baf
 80059e4:	08005a69 	.word	0x08005a69
 80059e8:	08005baf 	.word	0x08005baf
 80059ec:	08005baf 	.word	0x08005baf
 80059f0:	08005baf 	.word	0x08005baf
 80059f4:	08005aab 	.word	0x08005aab
 80059f8:	08005baf 	.word	0x08005baf
 80059fc:	08005baf 	.word	0x08005baf
 8005a00:	08005baf 	.word	0x08005baf
 8005a04:	08005aeb 	.word	0x08005aeb
 8005a08:	08005baf 	.word	0x08005baf
 8005a0c:	08005baf 	.word	0x08005baf
 8005a10:	08005baf 	.word	0x08005baf
 8005a14:	08005b2d 	.word	0x08005b2d
 8005a18:	08005baf 	.word	0x08005baf
 8005a1c:	08005baf 	.word	0x08005baf
 8005a20:	08005baf 	.word	0x08005baf
 8005a24:	08005b6d 	.word	0x08005b6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68b9      	ldr	r1, [r7, #8]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 f990 	bl	8005d54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	699a      	ldr	r2, [r3, #24]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f042 0208 	orr.w	r2, r2, #8
 8005a42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	699a      	ldr	r2, [r3, #24]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f022 0204 	bic.w	r2, r2, #4
 8005a52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6999      	ldr	r1, [r3, #24]
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	691a      	ldr	r2, [r3, #16]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	619a      	str	r2, [r3, #24]
      break;
 8005a66:	e0a3      	b.n	8005bb0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68b9      	ldr	r1, [r7, #8]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 f9e2 	bl	8005e38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	699a      	ldr	r2, [r3, #24]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	699a      	ldr	r2, [r3, #24]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6999      	ldr	r1, [r3, #24]
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	021a      	lsls	r2, r3, #8
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	619a      	str	r2, [r3, #24]
      break;
 8005aa8:	e082      	b.n	8005bb0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68b9      	ldr	r1, [r7, #8]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f000 fa39 	bl	8005f28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	69da      	ldr	r2, [r3, #28]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f042 0208 	orr.w	r2, r2, #8
 8005ac4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	69da      	ldr	r2, [r3, #28]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f022 0204 	bic.w	r2, r2, #4
 8005ad4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	69d9      	ldr	r1, [r3, #28]
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	691a      	ldr	r2, [r3, #16]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	61da      	str	r2, [r3, #28]
      break;
 8005ae8:	e062      	b.n	8005bb0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68b9      	ldr	r1, [r7, #8]
 8005af0:	4618      	mov	r0, r3
 8005af2:	f000 fa8f 	bl	8006014 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	69da      	ldr	r2, [r3, #28]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	69da      	ldr	r2, [r3, #28]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	69d9      	ldr	r1, [r3, #28]
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	021a      	lsls	r2, r3, #8
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	430a      	orrs	r2, r1
 8005b28:	61da      	str	r2, [r3, #28]
      break;
 8005b2a:	e041      	b.n	8005bb0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68b9      	ldr	r1, [r7, #8]
 8005b32:	4618      	mov	r0, r3
 8005b34:	f000 fac6 	bl	80060c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f042 0208 	orr.w	r2, r2, #8
 8005b46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f022 0204 	bic.w	r2, r2, #4
 8005b56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	691a      	ldr	r2, [r3, #16]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	430a      	orrs	r2, r1
 8005b68:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005b6a:	e021      	b.n	8005bb0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68b9      	ldr	r1, [r7, #8]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f000 faf8 	bl	8006168 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	021a      	lsls	r2, r3, #8
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005bac:	e000      	b.n	8005bb0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005bae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop

08005bc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b083      	sub	sp, #12
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a40      	ldr	r2, [pc, #256]	; (8005d28 <TIM_Base_SetConfig+0x114>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d013      	beq.n	8005c54 <TIM_Base_SetConfig+0x40>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c32:	d00f      	beq.n	8005c54 <TIM_Base_SetConfig+0x40>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a3d      	ldr	r2, [pc, #244]	; (8005d2c <TIM_Base_SetConfig+0x118>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d00b      	beq.n	8005c54 <TIM_Base_SetConfig+0x40>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a3c      	ldr	r2, [pc, #240]	; (8005d30 <TIM_Base_SetConfig+0x11c>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d007      	beq.n	8005c54 <TIM_Base_SetConfig+0x40>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a3b      	ldr	r2, [pc, #236]	; (8005d34 <TIM_Base_SetConfig+0x120>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d003      	beq.n	8005c54 <TIM_Base_SetConfig+0x40>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a3a      	ldr	r2, [pc, #232]	; (8005d38 <TIM_Base_SetConfig+0x124>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d108      	bne.n	8005c66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a2f      	ldr	r2, [pc, #188]	; (8005d28 <TIM_Base_SetConfig+0x114>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d02b      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c74:	d027      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a2c      	ldr	r2, [pc, #176]	; (8005d2c <TIM_Base_SetConfig+0x118>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d023      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a2b      	ldr	r2, [pc, #172]	; (8005d30 <TIM_Base_SetConfig+0x11c>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d01f      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a2a      	ldr	r2, [pc, #168]	; (8005d34 <TIM_Base_SetConfig+0x120>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d01b      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a29      	ldr	r2, [pc, #164]	; (8005d38 <TIM_Base_SetConfig+0x124>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d017      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a28      	ldr	r2, [pc, #160]	; (8005d3c <TIM_Base_SetConfig+0x128>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d013      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a27      	ldr	r2, [pc, #156]	; (8005d40 <TIM_Base_SetConfig+0x12c>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d00f      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a26      	ldr	r2, [pc, #152]	; (8005d44 <TIM_Base_SetConfig+0x130>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d00b      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a25      	ldr	r2, [pc, #148]	; (8005d48 <TIM_Base_SetConfig+0x134>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d007      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a24      	ldr	r2, [pc, #144]	; (8005d4c <TIM_Base_SetConfig+0x138>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d003      	beq.n	8005cc6 <TIM_Base_SetConfig+0xb2>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4a23      	ldr	r2, [pc, #140]	; (8005d50 <TIM_Base_SetConfig+0x13c>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d108      	bne.n	8005cd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ccc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	689a      	ldr	r2, [r3, #8]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a0a      	ldr	r2, [pc, #40]	; (8005d28 <TIM_Base_SetConfig+0x114>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d003      	beq.n	8005d0c <TIM_Base_SetConfig+0xf8>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a0c      	ldr	r2, [pc, #48]	; (8005d38 <TIM_Base_SetConfig+0x124>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d103      	bne.n	8005d14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	691a      	ldr	r2, [r3, #16]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	615a      	str	r2, [r3, #20]
}
 8005d1a:	bf00      	nop
 8005d1c:	3714      	adds	r7, #20
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	40010000 	.word	0x40010000
 8005d2c:	40000400 	.word	0x40000400
 8005d30:	40000800 	.word	0x40000800
 8005d34:	40000c00 	.word	0x40000c00
 8005d38:	40010400 	.word	0x40010400
 8005d3c:	40014000 	.word	0x40014000
 8005d40:	40014400 	.word	0x40014400
 8005d44:	40014800 	.word	0x40014800
 8005d48:	40001800 	.word	0x40001800
 8005d4c:	40001c00 	.word	0x40001c00
 8005d50:	40002000 	.word	0x40002000

08005d54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b087      	sub	sp, #28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	f023 0201 	bic.w	r2, r3, #1
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	4b2b      	ldr	r3, [pc, #172]	; (8005e2c <TIM_OC1_SetConfig+0xd8>)
 8005d80:	4013      	ands	r3, r2
 8005d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f023 0303 	bic.w	r3, r3, #3
 8005d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f023 0302 	bic.w	r3, r3, #2
 8005d9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a21      	ldr	r2, [pc, #132]	; (8005e30 <TIM_OC1_SetConfig+0xdc>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d003      	beq.n	8005db8 <TIM_OC1_SetConfig+0x64>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a20      	ldr	r2, [pc, #128]	; (8005e34 <TIM_OC1_SetConfig+0xe0>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d10c      	bne.n	8005dd2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	f023 0308 	bic.w	r3, r3, #8
 8005dbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	68db      	ldr	r3, [r3, #12]
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f023 0304 	bic.w	r3, r3, #4
 8005dd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a16      	ldr	r2, [pc, #88]	; (8005e30 <TIM_OC1_SetConfig+0xdc>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d003      	beq.n	8005de2 <TIM_OC1_SetConfig+0x8e>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a15      	ldr	r2, [pc, #84]	; (8005e34 <TIM_OC1_SetConfig+0xe0>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d111      	bne.n	8005e06 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005de8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005df0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	695b      	ldr	r3, [r3, #20]
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	693a      	ldr	r2, [r7, #16]
 8005e0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	621a      	str	r2, [r3, #32]
}
 8005e20:	bf00      	nop
 8005e22:	371c      	adds	r7, #28
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	fffeff8f 	.word	0xfffeff8f
 8005e30:	40010000 	.word	0x40010000
 8005e34:	40010400 	.word	0x40010400

08005e38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	f023 0210 	bic.w	r2, r3, #16
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	4b2e      	ldr	r3, [pc, #184]	; (8005f1c <TIM_OC2_SetConfig+0xe4>)
 8005e64:	4013      	ands	r3, r2
 8005e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	021b      	lsls	r3, r3, #8
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	f023 0320 	bic.w	r3, r3, #32
 8005e82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	011b      	lsls	r3, r3, #4
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a23      	ldr	r2, [pc, #140]	; (8005f20 <TIM_OC2_SetConfig+0xe8>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d003      	beq.n	8005ea0 <TIM_OC2_SetConfig+0x68>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a22      	ldr	r2, [pc, #136]	; (8005f24 <TIM_OC2_SetConfig+0xec>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d10d      	bne.n	8005ebc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	011b      	lsls	r3, r3, #4
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a18      	ldr	r2, [pc, #96]	; (8005f20 <TIM_OC2_SetConfig+0xe8>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d003      	beq.n	8005ecc <TIM_OC2_SetConfig+0x94>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a17      	ldr	r2, [pc, #92]	; (8005f24 <TIM_OC2_SetConfig+0xec>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d113      	bne.n	8005ef4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ed2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005eda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	621a      	str	r2, [r3, #32]
}
 8005f0e:	bf00      	nop
 8005f10:	371c      	adds	r7, #28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	feff8fff 	.word	0xfeff8fff
 8005f20:	40010000 	.word	0x40010000
 8005f24:	40010400 	.word	0x40010400

08005f28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b087      	sub	sp, #28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	69db      	ldr	r3, [r3, #28]
 8005f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	4b2d      	ldr	r3, [pc, #180]	; (8006008 <TIM_OC3_SetConfig+0xe0>)
 8005f54:	4013      	ands	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f023 0303 	bic.w	r3, r3, #3
 8005f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	021b      	lsls	r3, r3, #8
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a22      	ldr	r2, [pc, #136]	; (800600c <TIM_OC3_SetConfig+0xe4>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d003      	beq.n	8005f8e <TIM_OC3_SetConfig+0x66>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a21      	ldr	r2, [pc, #132]	; (8006010 <TIM_OC3_SetConfig+0xe8>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d10d      	bne.n	8005faa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	021b      	lsls	r3, r3, #8
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a17      	ldr	r2, [pc, #92]	; (800600c <TIM_OC3_SetConfig+0xe4>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d003      	beq.n	8005fba <TIM_OC3_SetConfig+0x92>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a16      	ldr	r2, [pc, #88]	; (8006010 <TIM_OC3_SetConfig+0xe8>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d113      	bne.n	8005fe2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	011b      	lsls	r3, r3, #4
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	011b      	lsls	r3, r3, #4
 8005fdc:	693a      	ldr	r2, [r7, #16]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	685a      	ldr	r2, [r3, #4]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	621a      	str	r2, [r3, #32]
}
 8005ffc:	bf00      	nop
 8005ffe:	371c      	adds	r7, #28
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr
 8006008:	fffeff8f 	.word	0xfffeff8f
 800600c:	40010000 	.word	0x40010000
 8006010:	40010400 	.word	0x40010400

08006014 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006014:	b480      	push	{r7}
 8006016:	b087      	sub	sp, #28
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	4b1e      	ldr	r3, [pc, #120]	; (80060b8 <TIM_OC4_SetConfig+0xa4>)
 8006040:	4013      	ands	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800604a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	021b      	lsls	r3, r3, #8
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	4313      	orrs	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800605e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	031b      	lsls	r3, r3, #12
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	4313      	orrs	r3, r2
 800606a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a13      	ldr	r2, [pc, #76]	; (80060bc <TIM_OC4_SetConfig+0xa8>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d003      	beq.n	800607c <TIM_OC4_SetConfig+0x68>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a12      	ldr	r2, [pc, #72]	; (80060c0 <TIM_OC4_SetConfig+0xac>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d109      	bne.n	8006090 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006082:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	695b      	ldr	r3, [r3, #20]
 8006088:	019b      	lsls	r3, r3, #6
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	4313      	orrs	r3, r2
 800608e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	697a      	ldr	r2, [r7, #20]
 8006094:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	685a      	ldr	r2, [r3, #4]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	621a      	str	r2, [r3, #32]
}
 80060aa:	bf00      	nop
 80060ac:	371c      	adds	r7, #28
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	feff8fff 	.word	0xfeff8fff
 80060bc:	40010000 	.word	0x40010000
 80060c0:	40010400 	.word	0x40010400

080060c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b087      	sub	sp, #28
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a1b      	ldr	r3, [r3, #32]
 80060de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	4b1b      	ldr	r3, [pc, #108]	; (800615c <TIM_OC5_SetConfig+0x98>)
 80060f0:	4013      	ands	r3, r2
 80060f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006104:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	041b      	lsls	r3, r3, #16
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	4313      	orrs	r3, r2
 8006110:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a12      	ldr	r2, [pc, #72]	; (8006160 <TIM_OC5_SetConfig+0x9c>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d003      	beq.n	8006122 <TIM_OC5_SetConfig+0x5e>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a11      	ldr	r2, [pc, #68]	; (8006164 <TIM_OC5_SetConfig+0xa0>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d109      	bne.n	8006136 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006128:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	021b      	lsls	r3, r3, #8
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	4313      	orrs	r3, r2
 8006134:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	621a      	str	r2, [r3, #32]
}
 8006150:	bf00      	nop
 8006152:	371c      	adds	r7, #28
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr
 800615c:	fffeff8f 	.word	0xfffeff8f
 8006160:	40010000 	.word	0x40010000
 8006164:	40010400 	.word	0x40010400

08006168 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006168:	b480      	push	{r7}
 800616a:	b087      	sub	sp, #28
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800618e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006190:	68fa      	ldr	r2, [r7, #12]
 8006192:	4b1c      	ldr	r3, [pc, #112]	; (8006204 <TIM_OC6_SetConfig+0x9c>)
 8006194:	4013      	ands	r3, r2
 8006196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	021b      	lsls	r3, r3, #8
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	051b      	lsls	r3, r3, #20
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a13      	ldr	r2, [pc, #76]	; (8006208 <TIM_OC6_SetConfig+0xa0>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d003      	beq.n	80061c8 <TIM_OC6_SetConfig+0x60>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a12      	ldr	r2, [pc, #72]	; (800620c <TIM_OC6_SetConfig+0xa4>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d109      	bne.n	80061dc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	029b      	lsls	r3, r3, #10
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	4313      	orrs	r3, r2
 80061da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	621a      	str	r2, [r3, #32]
}
 80061f6:	bf00      	nop
 80061f8:	371c      	adds	r7, #28
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	feff8fff 	.word	0xfeff8fff
 8006208:	40010000 	.word	0x40010000
 800620c:	40010400 	.word	0x40010400

08006210 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006210:	b480      	push	{r7}
 8006212:	b087      	sub	sp, #28
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	f003 031f 	and.w	r3, r3, #31
 8006222:	2201      	movs	r2, #1
 8006224:	fa02 f303 	lsl.w	r3, r2, r3
 8006228:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6a1a      	ldr	r2, [r3, #32]
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	43db      	mvns	r3, r3
 8006232:	401a      	ands	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6a1a      	ldr	r2, [r3, #32]
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	f003 031f 	and.w	r3, r3, #31
 8006242:	6879      	ldr	r1, [r7, #4]
 8006244:	fa01 f303 	lsl.w	r3, r1, r3
 8006248:	431a      	orrs	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	621a      	str	r2, [r3, #32]
}
 800624e:	bf00      	nop
 8006250:	371c      	adds	r7, #28
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
	...

0800625c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800626c:	2b01      	cmp	r3, #1
 800626e:	d101      	bne.n	8006274 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006270:	2302      	movs	r3, #2
 8006272:	e06d      	b.n	8006350 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2202      	movs	r2, #2
 8006280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a30      	ldr	r2, [pc, #192]	; (800635c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d004      	beq.n	80062a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a2f      	ldr	r2, [pc, #188]	; (8006360 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d108      	bne.n	80062ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80062ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a20      	ldr	r2, [pc, #128]	; (800635c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d022      	beq.n	8006324 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062e6:	d01d      	beq.n	8006324 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a1d      	ldr	r2, [pc, #116]	; (8006364 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d018      	beq.n	8006324 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a1c      	ldr	r2, [pc, #112]	; (8006368 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d013      	beq.n	8006324 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a1a      	ldr	r2, [pc, #104]	; (800636c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d00e      	beq.n	8006324 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a15      	ldr	r2, [pc, #84]	; (8006360 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d009      	beq.n	8006324 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a16      	ldr	r2, [pc, #88]	; (8006370 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d004      	beq.n	8006324 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a15      	ldr	r2, [pc, #84]	; (8006374 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d10c      	bne.n	800633e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800632a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	4313      	orrs	r3, r2
 8006334:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2201      	movs	r2, #1
 8006342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3714      	adds	r7, #20
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr
 800635c:	40010000 	.word	0x40010000
 8006360:	40010400 	.word	0x40010400
 8006364:	40000400 	.word	0x40000400
 8006368:	40000800 	.word	0x40000800
 800636c:	40000c00 	.word	0x40000c00
 8006370:	40014000 	.word	0x40014000
 8006374:	40001800 	.word	0x40001800

08006378 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d101      	bne.n	80063c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e040      	b.n	8006448 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d106      	bne.n	80063dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f7fc fb7a 	bl	8002ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2224      	movs	r2, #36	; 0x24
 80063e0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f022 0201 	bic.w	r2, r2, #1
 80063f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 fb08 	bl	8006a08 <UART_SetConfig>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d101      	bne.n	8006402 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e022      	b.n	8006448 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006406:	2b00      	cmp	r3, #0
 8006408:	d002      	beq.n	8006410 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 fd5e 	bl	8006ecc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800641e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689a      	ldr	r2, [r3, #8]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800642e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f042 0201 	orr.w	r2, r2, #1
 800643e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 fde5 	bl	8007010 <UART_CheckIdleState>
 8006446:	4603      	mov	r3, r0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3708      	adds	r7, #8
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b08a      	sub	sp, #40	; 0x28
 8006454:	af02      	add	r7, sp, #8
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	603b      	str	r3, [r7, #0]
 800645c:	4613      	mov	r3, r2
 800645e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006464:	2b20      	cmp	r3, #32
 8006466:	f040 8081 	bne.w	800656c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d002      	beq.n	8006476 <HAL_UART_Transmit+0x26>
 8006470:	88fb      	ldrh	r3, [r7, #6]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e079      	b.n	800656e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006480:	2b01      	cmp	r3, #1
 8006482:	d101      	bne.n	8006488 <HAL_UART_Transmit+0x38>
 8006484:	2302      	movs	r3, #2
 8006486:	e072      	b.n	800656e <HAL_UART_Transmit+0x11e>
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2221      	movs	r2, #33	; 0x21
 800649c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800649e:	f7fc fcc9 	bl	8002e34 <HAL_GetTick>
 80064a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	88fa      	ldrh	r2, [r7, #6]
 80064a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	88fa      	ldrh	r2, [r7, #6]
 80064b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064bc:	d108      	bne.n	80064d0 <HAL_UART_Transmit+0x80>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d104      	bne.n	80064d0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80064c6:	2300      	movs	r3, #0
 80064c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	61bb      	str	r3, [r7, #24]
 80064ce:	e003      	b.n	80064d8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064d4:	2300      	movs	r3, #0
 80064d6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80064e0:	e02c      	b.n	800653c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	9300      	str	r3, [sp, #0]
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	2200      	movs	r2, #0
 80064ea:	2180      	movs	r1, #128	; 0x80
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f000 fdc2 	bl	8007076 <UART_WaitOnFlagUntilTimeout>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d001      	beq.n	80064fc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e038      	b.n	800656e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10b      	bne.n	800651a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	881b      	ldrh	r3, [r3, #0]
 8006506:	461a      	mov	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006510:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	3302      	adds	r3, #2
 8006516:	61bb      	str	r3, [r7, #24]
 8006518:	e007      	b.n	800652a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	781a      	ldrb	r2, [r3, #0]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	3301      	adds	r3, #1
 8006528:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006530:	b29b      	uxth	r3, r3
 8006532:	3b01      	subs	r3, #1
 8006534:	b29a      	uxth	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006542:	b29b      	uxth	r3, r3
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1cc      	bne.n	80064e2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	2200      	movs	r2, #0
 8006550:	2140      	movs	r1, #64	; 0x40
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f000 fd8f 	bl	8007076 <UART_WaitOnFlagUntilTimeout>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d001      	beq.n	8006562 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e005      	b.n	800656e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2220      	movs	r2, #32
 8006566:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006568:	2300      	movs	r3, #0
 800656a:	e000      	b.n	800656e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800656c:	2302      	movs	r3, #2
  }
}
 800656e:	4618      	mov	r0, r3
 8006570:	3720      	adds	r7, #32
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b084      	sub	sp, #16
 800657a:	af00      	add	r7, sp, #0
 800657c:	60f8      	str	r0, [r7, #12]
 800657e:	60b9      	str	r1, [r7, #8]
 8006580:	4613      	mov	r3, r2
 8006582:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006588:	2b20      	cmp	r3, #32
 800658a:	d12c      	bne.n	80065e6 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d002      	beq.n	8006598 <HAL_UART_Receive_IT+0x22>
 8006592:	88fb      	ldrh	r3, [r7, #6]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d101      	bne.n	800659c <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e025      	b.n	80065e8 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d101      	bne.n	80065aa <HAL_UART_Receive_IT+0x34>
 80065a6:	2302      	movs	r3, #2
 80065a8:	e01e      	b.n	80065e8 <HAL_UART_Receive_IT+0x72>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d007      	beq.n	80065d6 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80065d4:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80065d6:	88fb      	ldrh	r3, [r7, #6]
 80065d8:	461a      	mov	r2, r3
 80065da:	68b9      	ldr	r1, [r7, #8]
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f000 fdc7 	bl	8007170 <UART_Start_Receive_IT>
 80065e2:	4603      	mov	r3, r0
 80065e4:	e000      	b.n	80065e8 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 80065e6:	2302      	movs	r3, #2
  }
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b088      	sub	sp, #32
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006610:	69fa      	ldr	r2, [r7, #28]
 8006612:	f640 030f 	movw	r3, #2063	; 0x80f
 8006616:	4013      	ands	r3, r2
 8006618:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d113      	bne.n	8006648 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	f003 0320 	and.w	r3, r3, #32
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00e      	beq.n	8006648 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	f003 0320 	and.w	r3, r3, #32
 8006630:	2b00      	cmp	r3, #0
 8006632:	d009      	beq.n	8006648 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006638:	2b00      	cmp	r3, #0
 800663a:	f000 81b9 	beq.w	80069b0 <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	4798      	blx	r3
      }
      return;
 8006646:	e1b3      	b.n	80069b0 <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 80e3 	beq.w	8006816 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b00      	cmp	r3, #0
 8006658:	d105      	bne.n	8006666 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800665a:	69ba      	ldr	r2, [r7, #24]
 800665c:	4ba5      	ldr	r3, [pc, #660]	; (80068f4 <HAL_UART_IRQHandler+0x304>)
 800665e:	4013      	ands	r3, r2
 8006660:	2b00      	cmp	r3, #0
 8006662:	f000 80d8 	beq.w	8006816 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	2b00      	cmp	r3, #0
 800666e:	d010      	beq.n	8006692 <HAL_UART_IRQHandler+0xa2>
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00b      	beq.n	8006692 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2201      	movs	r2, #1
 8006680:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006688:	f043 0201 	orr.w	r2, r3, #1
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	f003 0302 	and.w	r3, r3, #2
 8006698:	2b00      	cmp	r3, #0
 800669a:	d010      	beq.n	80066be <HAL_UART_IRQHandler+0xce>
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	f003 0301 	and.w	r3, r3, #1
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00b      	beq.n	80066be <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2202      	movs	r2, #2
 80066ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066b4:	f043 0204 	orr.w	r2, r3, #4
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	f003 0304 	and.w	r3, r3, #4
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d010      	beq.n	80066ea <HAL_UART_IRQHandler+0xfa>
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00b      	beq.n	80066ea <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2204      	movs	r2, #4
 80066d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066e0:	f043 0202 	orr.w	r2, r3, #2
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80066ea:	69fb      	ldr	r3, [r7, #28]
 80066ec:	f003 0308 	and.w	r3, r3, #8
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d015      	beq.n	8006720 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	f003 0320 	and.w	r3, r3, #32
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d104      	bne.n	8006708 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00b      	beq.n	8006720 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2208      	movs	r2, #8
 800670e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006716:	f043 0208 	orr.w	r2, r3, #8
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006726:	2b00      	cmp	r3, #0
 8006728:	d011      	beq.n	800674e <HAL_UART_IRQHandler+0x15e>
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00c      	beq.n	800674e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800673c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006744:	f043 0220 	orr.w	r2, r3, #32
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006754:	2b00      	cmp	r3, #0
 8006756:	f000 812d 	beq.w	80069b4 <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	f003 0320 	and.w	r3, r3, #32
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00c      	beq.n	800677e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006764:	69bb      	ldr	r3, [r7, #24]
 8006766:	f003 0320 	and.w	r3, r3, #32
 800676a:	2b00      	cmp	r3, #0
 800676c:	d007      	beq.n	800677e <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006772:	2b00      	cmp	r3, #0
 8006774:	d003      	beq.n	800677e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006784:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006790:	2b40      	cmp	r3, #64	; 0x40
 8006792:	d004      	beq.n	800679e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800679a:	2b00      	cmp	r3, #0
 800679c:	d031      	beq.n	8006802 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f000 fd6e 	bl	8007280 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ae:	2b40      	cmp	r3, #64	; 0x40
 80067b0:	d123      	bne.n	80067fa <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	689a      	ldr	r2, [r3, #8]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067c0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d013      	beq.n	80067f2 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ce:	4a4a      	ldr	r2, [pc, #296]	; (80068f8 <HAL_UART_IRQHandler+0x308>)
 80067d0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7fd f814 	bl	8003804 <HAL_DMA_Abort_IT>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d017      	beq.n	8006812 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80067ec:	4610      	mov	r0, r2
 80067ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067f0:	e00f      	b.n	8006812 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 f8f2 	bl	80069dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067f8:	e00b      	b.n	8006812 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f8ee 	bl	80069dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006800:	e007      	b.n	8006812 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f8ea 	bl	80069dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006810:	e0d0      	b.n	80069b4 <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006812:	bf00      	nop
    return;
 8006814:	e0ce      	b.n	80069b4 <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800681a:	2b01      	cmp	r3, #1
 800681c:	f040 80a7 	bne.w	800696e <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	f003 0310 	and.w	r3, r3, #16
 8006826:	2b00      	cmp	r3, #0
 8006828:	f000 80a1 	beq.w	800696e <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	f003 0310 	and.w	r3, r3, #16
 8006832:	2b00      	cmp	r3, #0
 8006834:	f000 809b 	beq.w	800696e <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2210      	movs	r2, #16
 800683e:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800684a:	2b40      	cmp	r3, #64	; 0x40
 800684c:	d156      	bne.n	80068fc <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	685b      	ldr	r3, [r3, #4]
 8006856:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8006858:	893b      	ldrh	r3, [r7, #8]
 800685a:	2b00      	cmp	r3, #0
 800685c:	f000 80ac 	beq.w	80069b8 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006866:	893a      	ldrh	r2, [r7, #8]
 8006868:	429a      	cmp	r2, r3
 800686a:	f080 80a5 	bcs.w	80069b8 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	893a      	ldrh	r2, [r7, #8]
 8006872:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800687a:	69db      	ldr	r3, [r3, #28]
 800687c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006880:	d02a      	beq.n	80068d8 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006890:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	689a      	ldr	r2, [r3, #8]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f022 0201 	bic.w	r2, r2, #1
 80068a0:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	689a      	ldr	r2, [r3, #8]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068b0:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2220      	movs	r2, #32
 80068b6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f022 0210 	bic.w	r2, r2, #16
 80068cc:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7fc ff26 	bl	8003724 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	4619      	mov	r1, r3
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 f87f 	bl	80069f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80068f2:	e061      	b.n	80069b8 <HAL_UART_IRQHandler+0x3c8>
 80068f4:	04000120 	.word	0x04000120
 80068f8:	080072df 	.word	0x080072df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006908:	b29b      	uxth	r3, r3
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006914:	b29b      	uxth	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d050      	beq.n	80069bc <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 800691a:	897b      	ldrh	r3, [r7, #10]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d04d      	beq.n	80069bc <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800692e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	689a      	ldr	r2, [r3, #8]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f022 0201 	bic.w	r2, r2, #1
 800693e:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2220      	movs	r2, #32
 8006944:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f022 0210 	bic.w	r2, r2, #16
 8006960:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006962:	897b      	ldrh	r3, [r7, #10]
 8006964:	4619      	mov	r1, r3
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f842 	bl	80069f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800696c:	e026      	b.n	80069bc <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00d      	beq.n	8006994 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800697e:	2b00      	cmp	r3, #0
 8006980:	d008      	beq.n	8006994 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006986:	2b00      	cmp	r3, #0
 8006988:	d01a      	beq.n	80069c0 <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	4798      	blx	r3
    }
    return;
 8006992:	e015      	b.n	80069c0 <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699a:	2b00      	cmp	r3, #0
 800699c:	d011      	beq.n	80069c2 <HAL_UART_IRQHandler+0x3d2>
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00c      	beq.n	80069c2 <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 fcae 	bl	800730a <UART_EndTransmit_IT>
    return;
 80069ae:	e008      	b.n	80069c2 <HAL_UART_IRQHandler+0x3d2>
      return;
 80069b0:	bf00      	nop
 80069b2:	e006      	b.n	80069c2 <HAL_UART_IRQHandler+0x3d2>
    return;
 80069b4:	bf00      	nop
 80069b6:	e004      	b.n	80069c2 <HAL_UART_IRQHandler+0x3d2>
      return;
 80069b8:	bf00      	nop
 80069ba:	e002      	b.n	80069c2 <HAL_UART_IRQHandler+0x3d2>
      return;
 80069bc:	bf00      	nop
 80069be:	e000      	b.n	80069c2 <HAL_UART_IRQHandler+0x3d2>
    return;
 80069c0:	bf00      	nop
  }

}
 80069c2:	3720      	adds	r7, #32
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80069d0:	bf00      	nop
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr

080069dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80069e4:	bf00      	nop
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b083      	sub	sp, #12
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	460b      	mov	r3, r1
 80069fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069fc:	bf00      	nop
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b088      	sub	sp, #32
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a10:	2300      	movs	r3, #0
 8006a12:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	689a      	ldr	r2, [r3, #8]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	431a      	orrs	r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	431a      	orrs	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	69db      	ldr	r3, [r3, #28]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	4ba7      	ldr	r3, [pc, #668]	; (8006cd0 <UART_SetConfig+0x2c8>)
 8006a34:	4013      	ands	r3, r2
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	6812      	ldr	r2, [r2, #0]
 8006a3a:	6979      	ldr	r1, [r7, #20]
 8006a3c:	430b      	orrs	r3, r1
 8006a3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68da      	ldr	r2, [r3, #12]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	430a      	orrs	r2, r1
 8006a54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a1b      	ldr	r3, [r3, #32]
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	430a      	orrs	r2, r1
 8006a78:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a95      	ldr	r2, [pc, #596]	; (8006cd4 <UART_SetConfig+0x2cc>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d120      	bne.n	8006ac6 <UART_SetConfig+0xbe>
 8006a84:	4b94      	ldr	r3, [pc, #592]	; (8006cd8 <UART_SetConfig+0x2d0>)
 8006a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a8a:	f003 0303 	and.w	r3, r3, #3
 8006a8e:	2b03      	cmp	r3, #3
 8006a90:	d816      	bhi.n	8006ac0 <UART_SetConfig+0xb8>
 8006a92:	a201      	add	r2, pc, #4	; (adr r2, 8006a98 <UART_SetConfig+0x90>)
 8006a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a98:	08006aa9 	.word	0x08006aa9
 8006a9c:	08006ab5 	.word	0x08006ab5
 8006aa0:	08006aaf 	.word	0x08006aaf
 8006aa4:	08006abb 	.word	0x08006abb
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	77fb      	strb	r3, [r7, #31]
 8006aac:	e14f      	b.n	8006d4e <UART_SetConfig+0x346>
 8006aae:	2302      	movs	r3, #2
 8006ab0:	77fb      	strb	r3, [r7, #31]
 8006ab2:	e14c      	b.n	8006d4e <UART_SetConfig+0x346>
 8006ab4:	2304      	movs	r3, #4
 8006ab6:	77fb      	strb	r3, [r7, #31]
 8006ab8:	e149      	b.n	8006d4e <UART_SetConfig+0x346>
 8006aba:	2308      	movs	r3, #8
 8006abc:	77fb      	strb	r3, [r7, #31]
 8006abe:	e146      	b.n	8006d4e <UART_SetConfig+0x346>
 8006ac0:	2310      	movs	r3, #16
 8006ac2:	77fb      	strb	r3, [r7, #31]
 8006ac4:	e143      	b.n	8006d4e <UART_SetConfig+0x346>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a84      	ldr	r2, [pc, #528]	; (8006cdc <UART_SetConfig+0x2d4>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d132      	bne.n	8006b36 <UART_SetConfig+0x12e>
 8006ad0:	4b81      	ldr	r3, [pc, #516]	; (8006cd8 <UART_SetConfig+0x2d0>)
 8006ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ad6:	f003 030c 	and.w	r3, r3, #12
 8006ada:	2b0c      	cmp	r3, #12
 8006adc:	d828      	bhi.n	8006b30 <UART_SetConfig+0x128>
 8006ade:	a201      	add	r2, pc, #4	; (adr r2, 8006ae4 <UART_SetConfig+0xdc>)
 8006ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae4:	08006b19 	.word	0x08006b19
 8006ae8:	08006b31 	.word	0x08006b31
 8006aec:	08006b31 	.word	0x08006b31
 8006af0:	08006b31 	.word	0x08006b31
 8006af4:	08006b25 	.word	0x08006b25
 8006af8:	08006b31 	.word	0x08006b31
 8006afc:	08006b31 	.word	0x08006b31
 8006b00:	08006b31 	.word	0x08006b31
 8006b04:	08006b1f 	.word	0x08006b1f
 8006b08:	08006b31 	.word	0x08006b31
 8006b0c:	08006b31 	.word	0x08006b31
 8006b10:	08006b31 	.word	0x08006b31
 8006b14:	08006b2b 	.word	0x08006b2b
 8006b18:	2300      	movs	r3, #0
 8006b1a:	77fb      	strb	r3, [r7, #31]
 8006b1c:	e117      	b.n	8006d4e <UART_SetConfig+0x346>
 8006b1e:	2302      	movs	r3, #2
 8006b20:	77fb      	strb	r3, [r7, #31]
 8006b22:	e114      	b.n	8006d4e <UART_SetConfig+0x346>
 8006b24:	2304      	movs	r3, #4
 8006b26:	77fb      	strb	r3, [r7, #31]
 8006b28:	e111      	b.n	8006d4e <UART_SetConfig+0x346>
 8006b2a:	2308      	movs	r3, #8
 8006b2c:	77fb      	strb	r3, [r7, #31]
 8006b2e:	e10e      	b.n	8006d4e <UART_SetConfig+0x346>
 8006b30:	2310      	movs	r3, #16
 8006b32:	77fb      	strb	r3, [r7, #31]
 8006b34:	e10b      	b.n	8006d4e <UART_SetConfig+0x346>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a69      	ldr	r2, [pc, #420]	; (8006ce0 <UART_SetConfig+0x2d8>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d120      	bne.n	8006b82 <UART_SetConfig+0x17a>
 8006b40:	4b65      	ldr	r3, [pc, #404]	; (8006cd8 <UART_SetConfig+0x2d0>)
 8006b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b46:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b4a:	2b30      	cmp	r3, #48	; 0x30
 8006b4c:	d013      	beq.n	8006b76 <UART_SetConfig+0x16e>
 8006b4e:	2b30      	cmp	r3, #48	; 0x30
 8006b50:	d814      	bhi.n	8006b7c <UART_SetConfig+0x174>
 8006b52:	2b20      	cmp	r3, #32
 8006b54:	d009      	beq.n	8006b6a <UART_SetConfig+0x162>
 8006b56:	2b20      	cmp	r3, #32
 8006b58:	d810      	bhi.n	8006b7c <UART_SetConfig+0x174>
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d002      	beq.n	8006b64 <UART_SetConfig+0x15c>
 8006b5e:	2b10      	cmp	r3, #16
 8006b60:	d006      	beq.n	8006b70 <UART_SetConfig+0x168>
 8006b62:	e00b      	b.n	8006b7c <UART_SetConfig+0x174>
 8006b64:	2300      	movs	r3, #0
 8006b66:	77fb      	strb	r3, [r7, #31]
 8006b68:	e0f1      	b.n	8006d4e <UART_SetConfig+0x346>
 8006b6a:	2302      	movs	r3, #2
 8006b6c:	77fb      	strb	r3, [r7, #31]
 8006b6e:	e0ee      	b.n	8006d4e <UART_SetConfig+0x346>
 8006b70:	2304      	movs	r3, #4
 8006b72:	77fb      	strb	r3, [r7, #31]
 8006b74:	e0eb      	b.n	8006d4e <UART_SetConfig+0x346>
 8006b76:	2308      	movs	r3, #8
 8006b78:	77fb      	strb	r3, [r7, #31]
 8006b7a:	e0e8      	b.n	8006d4e <UART_SetConfig+0x346>
 8006b7c:	2310      	movs	r3, #16
 8006b7e:	77fb      	strb	r3, [r7, #31]
 8006b80:	e0e5      	b.n	8006d4e <UART_SetConfig+0x346>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a57      	ldr	r2, [pc, #348]	; (8006ce4 <UART_SetConfig+0x2dc>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d120      	bne.n	8006bce <UART_SetConfig+0x1c6>
 8006b8c:	4b52      	ldr	r3, [pc, #328]	; (8006cd8 <UART_SetConfig+0x2d0>)
 8006b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006b96:	2bc0      	cmp	r3, #192	; 0xc0
 8006b98:	d013      	beq.n	8006bc2 <UART_SetConfig+0x1ba>
 8006b9a:	2bc0      	cmp	r3, #192	; 0xc0
 8006b9c:	d814      	bhi.n	8006bc8 <UART_SetConfig+0x1c0>
 8006b9e:	2b80      	cmp	r3, #128	; 0x80
 8006ba0:	d009      	beq.n	8006bb6 <UART_SetConfig+0x1ae>
 8006ba2:	2b80      	cmp	r3, #128	; 0x80
 8006ba4:	d810      	bhi.n	8006bc8 <UART_SetConfig+0x1c0>
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d002      	beq.n	8006bb0 <UART_SetConfig+0x1a8>
 8006baa:	2b40      	cmp	r3, #64	; 0x40
 8006bac:	d006      	beq.n	8006bbc <UART_SetConfig+0x1b4>
 8006bae:	e00b      	b.n	8006bc8 <UART_SetConfig+0x1c0>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	77fb      	strb	r3, [r7, #31]
 8006bb4:	e0cb      	b.n	8006d4e <UART_SetConfig+0x346>
 8006bb6:	2302      	movs	r3, #2
 8006bb8:	77fb      	strb	r3, [r7, #31]
 8006bba:	e0c8      	b.n	8006d4e <UART_SetConfig+0x346>
 8006bbc:	2304      	movs	r3, #4
 8006bbe:	77fb      	strb	r3, [r7, #31]
 8006bc0:	e0c5      	b.n	8006d4e <UART_SetConfig+0x346>
 8006bc2:	2308      	movs	r3, #8
 8006bc4:	77fb      	strb	r3, [r7, #31]
 8006bc6:	e0c2      	b.n	8006d4e <UART_SetConfig+0x346>
 8006bc8:	2310      	movs	r3, #16
 8006bca:	77fb      	strb	r3, [r7, #31]
 8006bcc:	e0bf      	b.n	8006d4e <UART_SetConfig+0x346>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a45      	ldr	r2, [pc, #276]	; (8006ce8 <UART_SetConfig+0x2e0>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d125      	bne.n	8006c24 <UART_SetConfig+0x21c>
 8006bd8:	4b3f      	ldr	r3, [pc, #252]	; (8006cd8 <UART_SetConfig+0x2d0>)
 8006bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006be2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006be6:	d017      	beq.n	8006c18 <UART_SetConfig+0x210>
 8006be8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bec:	d817      	bhi.n	8006c1e <UART_SetConfig+0x216>
 8006bee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bf2:	d00b      	beq.n	8006c0c <UART_SetConfig+0x204>
 8006bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bf8:	d811      	bhi.n	8006c1e <UART_SetConfig+0x216>
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d003      	beq.n	8006c06 <UART_SetConfig+0x1fe>
 8006bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c02:	d006      	beq.n	8006c12 <UART_SetConfig+0x20a>
 8006c04:	e00b      	b.n	8006c1e <UART_SetConfig+0x216>
 8006c06:	2300      	movs	r3, #0
 8006c08:	77fb      	strb	r3, [r7, #31]
 8006c0a:	e0a0      	b.n	8006d4e <UART_SetConfig+0x346>
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	77fb      	strb	r3, [r7, #31]
 8006c10:	e09d      	b.n	8006d4e <UART_SetConfig+0x346>
 8006c12:	2304      	movs	r3, #4
 8006c14:	77fb      	strb	r3, [r7, #31]
 8006c16:	e09a      	b.n	8006d4e <UART_SetConfig+0x346>
 8006c18:	2308      	movs	r3, #8
 8006c1a:	77fb      	strb	r3, [r7, #31]
 8006c1c:	e097      	b.n	8006d4e <UART_SetConfig+0x346>
 8006c1e:	2310      	movs	r3, #16
 8006c20:	77fb      	strb	r3, [r7, #31]
 8006c22:	e094      	b.n	8006d4e <UART_SetConfig+0x346>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a30      	ldr	r2, [pc, #192]	; (8006cec <UART_SetConfig+0x2e4>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d125      	bne.n	8006c7a <UART_SetConfig+0x272>
 8006c2e:	4b2a      	ldr	r3, [pc, #168]	; (8006cd8 <UART_SetConfig+0x2d0>)
 8006c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c3c:	d017      	beq.n	8006c6e <UART_SetConfig+0x266>
 8006c3e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c42:	d817      	bhi.n	8006c74 <UART_SetConfig+0x26c>
 8006c44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c48:	d00b      	beq.n	8006c62 <UART_SetConfig+0x25a>
 8006c4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c4e:	d811      	bhi.n	8006c74 <UART_SetConfig+0x26c>
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d003      	beq.n	8006c5c <UART_SetConfig+0x254>
 8006c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c58:	d006      	beq.n	8006c68 <UART_SetConfig+0x260>
 8006c5a:	e00b      	b.n	8006c74 <UART_SetConfig+0x26c>
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	77fb      	strb	r3, [r7, #31]
 8006c60:	e075      	b.n	8006d4e <UART_SetConfig+0x346>
 8006c62:	2302      	movs	r3, #2
 8006c64:	77fb      	strb	r3, [r7, #31]
 8006c66:	e072      	b.n	8006d4e <UART_SetConfig+0x346>
 8006c68:	2304      	movs	r3, #4
 8006c6a:	77fb      	strb	r3, [r7, #31]
 8006c6c:	e06f      	b.n	8006d4e <UART_SetConfig+0x346>
 8006c6e:	2308      	movs	r3, #8
 8006c70:	77fb      	strb	r3, [r7, #31]
 8006c72:	e06c      	b.n	8006d4e <UART_SetConfig+0x346>
 8006c74:	2310      	movs	r3, #16
 8006c76:	77fb      	strb	r3, [r7, #31]
 8006c78:	e069      	b.n	8006d4e <UART_SetConfig+0x346>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a1c      	ldr	r2, [pc, #112]	; (8006cf0 <UART_SetConfig+0x2e8>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d137      	bne.n	8006cf4 <UART_SetConfig+0x2ec>
 8006c84:	4b14      	ldr	r3, [pc, #80]	; (8006cd8 <UART_SetConfig+0x2d0>)
 8006c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c8a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006c8e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c92:	d017      	beq.n	8006cc4 <UART_SetConfig+0x2bc>
 8006c94:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c98:	d817      	bhi.n	8006cca <UART_SetConfig+0x2c2>
 8006c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c9e:	d00b      	beq.n	8006cb8 <UART_SetConfig+0x2b0>
 8006ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ca4:	d811      	bhi.n	8006cca <UART_SetConfig+0x2c2>
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d003      	beq.n	8006cb2 <UART_SetConfig+0x2aa>
 8006caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cae:	d006      	beq.n	8006cbe <UART_SetConfig+0x2b6>
 8006cb0:	e00b      	b.n	8006cca <UART_SetConfig+0x2c2>
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	77fb      	strb	r3, [r7, #31]
 8006cb6:	e04a      	b.n	8006d4e <UART_SetConfig+0x346>
 8006cb8:	2302      	movs	r3, #2
 8006cba:	77fb      	strb	r3, [r7, #31]
 8006cbc:	e047      	b.n	8006d4e <UART_SetConfig+0x346>
 8006cbe:	2304      	movs	r3, #4
 8006cc0:	77fb      	strb	r3, [r7, #31]
 8006cc2:	e044      	b.n	8006d4e <UART_SetConfig+0x346>
 8006cc4:	2308      	movs	r3, #8
 8006cc6:	77fb      	strb	r3, [r7, #31]
 8006cc8:	e041      	b.n	8006d4e <UART_SetConfig+0x346>
 8006cca:	2310      	movs	r3, #16
 8006ccc:	77fb      	strb	r3, [r7, #31]
 8006cce:	e03e      	b.n	8006d4e <UART_SetConfig+0x346>
 8006cd0:	efff69f3 	.word	0xefff69f3
 8006cd4:	40011000 	.word	0x40011000
 8006cd8:	40023800 	.word	0x40023800
 8006cdc:	40004400 	.word	0x40004400
 8006ce0:	40004800 	.word	0x40004800
 8006ce4:	40004c00 	.word	0x40004c00
 8006ce8:	40005000 	.word	0x40005000
 8006cec:	40011400 	.word	0x40011400
 8006cf0:	40007800 	.word	0x40007800
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a71      	ldr	r2, [pc, #452]	; (8006ec0 <UART_SetConfig+0x4b8>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d125      	bne.n	8006d4a <UART_SetConfig+0x342>
 8006cfe:	4b71      	ldr	r3, [pc, #452]	; (8006ec4 <UART_SetConfig+0x4bc>)
 8006d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006d08:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006d0c:	d017      	beq.n	8006d3e <UART_SetConfig+0x336>
 8006d0e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006d12:	d817      	bhi.n	8006d44 <UART_SetConfig+0x33c>
 8006d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d18:	d00b      	beq.n	8006d32 <UART_SetConfig+0x32a>
 8006d1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d1e:	d811      	bhi.n	8006d44 <UART_SetConfig+0x33c>
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d003      	beq.n	8006d2c <UART_SetConfig+0x324>
 8006d24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d28:	d006      	beq.n	8006d38 <UART_SetConfig+0x330>
 8006d2a:	e00b      	b.n	8006d44 <UART_SetConfig+0x33c>
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	77fb      	strb	r3, [r7, #31]
 8006d30:	e00d      	b.n	8006d4e <UART_SetConfig+0x346>
 8006d32:	2302      	movs	r3, #2
 8006d34:	77fb      	strb	r3, [r7, #31]
 8006d36:	e00a      	b.n	8006d4e <UART_SetConfig+0x346>
 8006d38:	2304      	movs	r3, #4
 8006d3a:	77fb      	strb	r3, [r7, #31]
 8006d3c:	e007      	b.n	8006d4e <UART_SetConfig+0x346>
 8006d3e:	2308      	movs	r3, #8
 8006d40:	77fb      	strb	r3, [r7, #31]
 8006d42:	e004      	b.n	8006d4e <UART_SetConfig+0x346>
 8006d44:	2310      	movs	r3, #16
 8006d46:	77fb      	strb	r3, [r7, #31]
 8006d48:	e001      	b.n	8006d4e <UART_SetConfig+0x346>
 8006d4a:	2310      	movs	r3, #16
 8006d4c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	69db      	ldr	r3, [r3, #28]
 8006d52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d56:	d15b      	bne.n	8006e10 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8006d58:	7ffb      	ldrb	r3, [r7, #31]
 8006d5a:	2b08      	cmp	r3, #8
 8006d5c:	d827      	bhi.n	8006dae <UART_SetConfig+0x3a6>
 8006d5e:	a201      	add	r2, pc, #4	; (adr r2, 8006d64 <UART_SetConfig+0x35c>)
 8006d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d64:	08006d89 	.word	0x08006d89
 8006d68:	08006d91 	.word	0x08006d91
 8006d6c:	08006d99 	.word	0x08006d99
 8006d70:	08006daf 	.word	0x08006daf
 8006d74:	08006d9f 	.word	0x08006d9f
 8006d78:	08006daf 	.word	0x08006daf
 8006d7c:	08006daf 	.word	0x08006daf
 8006d80:	08006daf 	.word	0x08006daf
 8006d84:	08006da7 	.word	0x08006da7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d88:	f7fd fe32 	bl	80049f0 <HAL_RCC_GetPCLK1Freq>
 8006d8c:	61b8      	str	r0, [r7, #24]
        break;
 8006d8e:	e013      	b.n	8006db8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d90:	f7fd fe42 	bl	8004a18 <HAL_RCC_GetPCLK2Freq>
 8006d94:	61b8      	str	r0, [r7, #24]
        break;
 8006d96:	e00f      	b.n	8006db8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d98:	4b4b      	ldr	r3, [pc, #300]	; (8006ec8 <UART_SetConfig+0x4c0>)
 8006d9a:	61bb      	str	r3, [r7, #24]
        break;
 8006d9c:	e00c      	b.n	8006db8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d9e:	f7fd fd65 	bl	800486c <HAL_RCC_GetSysClockFreq>
 8006da2:	61b8      	str	r0, [r7, #24]
        break;
 8006da4:	e008      	b.n	8006db8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006daa:	61bb      	str	r3, [r7, #24]
        break;
 8006dac:	e004      	b.n	8006db8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006dae:	2300      	movs	r3, #0
 8006db0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	77bb      	strb	r3, [r7, #30]
        break;
 8006db6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d074      	beq.n	8006ea8 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	005a      	lsls	r2, r3, #1
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	085b      	lsrs	r3, r3, #1
 8006dc8:	441a      	add	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	2b0f      	cmp	r3, #15
 8006dda:	d916      	bls.n	8006e0a <UART_SetConfig+0x402>
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006de2:	d212      	bcs.n	8006e0a <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	f023 030f 	bic.w	r3, r3, #15
 8006dec:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	085b      	lsrs	r3, r3, #1
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	f003 0307 	and.w	r3, r3, #7
 8006df8:	b29a      	uxth	r2, r3
 8006dfa:	89fb      	ldrh	r3, [r7, #14]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	89fa      	ldrh	r2, [r7, #14]
 8006e06:	60da      	str	r2, [r3, #12]
 8006e08:	e04e      	b.n	8006ea8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	77bb      	strb	r3, [r7, #30]
 8006e0e:	e04b      	b.n	8006ea8 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e10:	7ffb      	ldrb	r3, [r7, #31]
 8006e12:	2b08      	cmp	r3, #8
 8006e14:	d827      	bhi.n	8006e66 <UART_SetConfig+0x45e>
 8006e16:	a201      	add	r2, pc, #4	; (adr r2, 8006e1c <UART_SetConfig+0x414>)
 8006e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1c:	08006e41 	.word	0x08006e41
 8006e20:	08006e49 	.word	0x08006e49
 8006e24:	08006e51 	.word	0x08006e51
 8006e28:	08006e67 	.word	0x08006e67
 8006e2c:	08006e57 	.word	0x08006e57
 8006e30:	08006e67 	.word	0x08006e67
 8006e34:	08006e67 	.word	0x08006e67
 8006e38:	08006e67 	.word	0x08006e67
 8006e3c:	08006e5f 	.word	0x08006e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e40:	f7fd fdd6 	bl	80049f0 <HAL_RCC_GetPCLK1Freq>
 8006e44:	61b8      	str	r0, [r7, #24]
        break;
 8006e46:	e013      	b.n	8006e70 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e48:	f7fd fde6 	bl	8004a18 <HAL_RCC_GetPCLK2Freq>
 8006e4c:	61b8      	str	r0, [r7, #24]
        break;
 8006e4e:	e00f      	b.n	8006e70 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e50:	4b1d      	ldr	r3, [pc, #116]	; (8006ec8 <UART_SetConfig+0x4c0>)
 8006e52:	61bb      	str	r3, [r7, #24]
        break;
 8006e54:	e00c      	b.n	8006e70 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e56:	f7fd fd09 	bl	800486c <HAL_RCC_GetSysClockFreq>
 8006e5a:	61b8      	str	r0, [r7, #24]
        break;
 8006e5c:	e008      	b.n	8006e70 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e62:	61bb      	str	r3, [r7, #24]
        break;
 8006e64:	e004      	b.n	8006e70 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006e66:	2300      	movs	r3, #0
 8006e68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	77bb      	strb	r3, [r7, #30]
        break;
 8006e6e:	bf00      	nop
    }

    if (pclk != 0U)
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d018      	beq.n	8006ea8 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	085a      	lsrs	r2, r3, #1
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	441a      	add	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	2b0f      	cmp	r3, #15
 8006e90:	d908      	bls.n	8006ea4 <UART_SetConfig+0x49c>
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e98:	d204      	bcs.n	8006ea4 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	60da      	str	r2, [r3, #12]
 8006ea2:	e001      	b.n	8006ea8 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006eb4:	7fbb      	ldrb	r3, [r7, #30]
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3720      	adds	r7, #32
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}
 8006ebe:	bf00      	nop
 8006ec0:	40007c00 	.word	0x40007c00
 8006ec4:	40023800 	.word	0x40023800
 8006ec8:	00f42400 	.word	0x00f42400

08006ecc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed8:	f003 0301 	and.w	r3, r3, #1
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00a      	beq.n	8006ef6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efa:	f003 0302 	and.w	r3, r3, #2
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00a      	beq.n	8006f18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	430a      	orrs	r2, r1
 8006f16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1c:	f003 0304 	and.w	r3, r3, #4
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00a      	beq.n	8006f3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	430a      	orrs	r2, r1
 8006f38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3e:	f003 0308 	and.w	r3, r3, #8
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00a      	beq.n	8006f5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	430a      	orrs	r2, r1
 8006f5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f60:	f003 0310 	and.w	r3, r3, #16
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00a      	beq.n	8006f7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	430a      	orrs	r2, r1
 8006f7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f82:	f003 0320 	and.w	r3, r3, #32
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00a      	beq.n	8006fa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	689b      	ldr	r3, [r3, #8]
 8006f90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	430a      	orrs	r2, r1
 8006f9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d01a      	beq.n	8006fe2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	430a      	orrs	r2, r1
 8006fc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fca:	d10a      	bne.n	8006fe2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00a      	beq.n	8007004 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	430a      	orrs	r2, r1
 8007002:	605a      	str	r2, [r3, #4]
  }
}
 8007004:	bf00      	nop
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b086      	sub	sp, #24
 8007014:	af02      	add	r7, sp, #8
 8007016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007020:	f7fb ff08 	bl	8002e34 <HAL_GetTick>
 8007024:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 0308 	and.w	r3, r3, #8
 8007030:	2b08      	cmp	r3, #8
 8007032:	d10e      	bne.n	8007052 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007034:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007038:	9300      	str	r3, [sp, #0]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2200      	movs	r2, #0
 800703e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f817 	bl	8007076 <UART_WaitOnFlagUntilTimeout>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d001      	beq.n	8007052 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e00d      	b.n	800706e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2220      	movs	r2, #32
 8007056:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2220      	movs	r2, #32
 800705c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b084      	sub	sp, #16
 800707a:	af00      	add	r7, sp, #0
 800707c:	60f8      	str	r0, [r7, #12]
 800707e:	60b9      	str	r1, [r7, #8]
 8007080:	603b      	str	r3, [r7, #0]
 8007082:	4613      	mov	r3, r2
 8007084:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007086:	e05e      	b.n	8007146 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800708e:	d05a      	beq.n	8007146 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007090:	f7fb fed0 	bl	8002e34 <HAL_GetTick>
 8007094:	4602      	mov	r2, r0
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	69ba      	ldr	r2, [r7, #24]
 800709c:	429a      	cmp	r2, r3
 800709e:	d302      	bcc.n	80070a6 <UART_WaitOnFlagUntilTimeout+0x30>
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d11b      	bne.n	80070de <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80070b4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	689a      	ldr	r2, [r3, #8]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f022 0201 	bic.w	r2, r2, #1
 80070c4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2220      	movs	r2, #32
 80070ca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2220      	movs	r2, #32
 80070d0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80070da:	2303      	movs	r3, #3
 80070dc:	e043      	b.n	8007166 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0304 	and.w	r3, r3, #4
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d02c      	beq.n	8007146 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	69db      	ldr	r3, [r3, #28]
 80070f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070fa:	d124      	bne.n	8007146 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007104:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007114:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	689a      	ldr	r2, [r3, #8]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f022 0201 	bic.w	r2, r2, #1
 8007124:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2220      	movs	r2, #32
 800712a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2220      	movs	r2, #32
 8007130:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2220      	movs	r2, #32
 8007136:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e00f      	b.n	8007166 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	69da      	ldr	r2, [r3, #28]
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	4013      	ands	r3, r2
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	429a      	cmp	r2, r3
 8007154:	bf0c      	ite	eq
 8007156:	2301      	moveq	r3, #1
 8007158:	2300      	movne	r3, #0
 800715a:	b2db      	uxtb	r3, r3
 800715c:	461a      	mov	r2, r3
 800715e:	79fb      	ldrb	r3, [r7, #7]
 8007160:	429a      	cmp	r2, r3
 8007162:	d091      	beq.n	8007088 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007164:	2300      	movs	r3, #0
}
 8007166:	4618      	mov	r0, r3
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
	...

08007170 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007170:	b480      	push	{r7}
 8007172:	b085      	sub	sp, #20
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	4613      	mov	r3, r2
 800717c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	68ba      	ldr	r2, [r7, #8]
 8007182:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	88fa      	ldrh	r2, [r7, #6]
 8007188:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	88fa      	ldrh	r2, [r7, #6]
 8007190:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2200      	movs	r2, #0
 8007198:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071a2:	d10e      	bne.n	80071c2 <UART_Start_Receive_IT+0x52>
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d105      	bne.n	80071b8 <UART_Start_Receive_IT+0x48>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f240 12ff 	movw	r2, #511	; 0x1ff
 80071b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071b6:	e02d      	b.n	8007214 <UART_Start_Receive_IT+0xa4>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	22ff      	movs	r2, #255	; 0xff
 80071bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071c0:	e028      	b.n	8007214 <UART_Start_Receive_IT+0xa4>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10d      	bne.n	80071e6 <UART_Start_Receive_IT+0x76>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d104      	bne.n	80071dc <UART_Start_Receive_IT+0x6c>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	22ff      	movs	r2, #255	; 0xff
 80071d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071da:	e01b      	b.n	8007214 <UART_Start_Receive_IT+0xa4>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	227f      	movs	r2, #127	; 0x7f
 80071e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80071e4:	e016      	b.n	8007214 <UART_Start_Receive_IT+0xa4>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071ee:	d10d      	bne.n	800720c <UART_Start_Receive_IT+0x9c>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d104      	bne.n	8007202 <UART_Start_Receive_IT+0x92>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	227f      	movs	r2, #127	; 0x7f
 80071fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007200:	e008      	b.n	8007214 <UART_Start_Receive_IT+0xa4>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	223f      	movs	r2, #63	; 0x3f
 8007206:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800720a:	e003      	b.n	8007214 <UART_Start_Receive_IT+0xa4>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2222      	movs	r2, #34	; 0x22
 8007220:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	689a      	ldr	r2, [r3, #8]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f042 0201 	orr.w	r2, r2, #1
 8007230:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800723a:	d107      	bne.n	800724c <UART_Start_Receive_IT+0xdc>
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d103      	bne.n	800724c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	4a0c      	ldr	r2, [pc, #48]	; (8007278 <UART_Start_Receive_IT+0x108>)
 8007248:	665a      	str	r2, [r3, #100]	; 0x64
 800724a:	e002      	b.n	8007252 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	4a0b      	ldr	r2, [pc, #44]	; (800727c <UART_Start_Receive_IT+0x10c>)
 8007250:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8007268:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3714      	adds	r7, #20
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr
 8007278:	08007411 	.word	0x08007411
 800727c:	0800733d 	.word	0x0800733d

08007280 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007296:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	689a      	ldr	r2, [r3, #8]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f022 0201 	bic.w	r2, r2, #1
 80072a6:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d107      	bne.n	80072c0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f022 0210 	bic.w	r2, r2, #16
 80072be:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2220      	movs	r2, #32
 80072c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80072d2:	bf00      	nop
 80072d4:	370c      	adds	r7, #12
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr

080072de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80072de:	b580      	push	{r7, lr}
 80072e0:	b084      	sub	sp, #16
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f7ff fb6d 	bl	80069dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007302:	bf00      	nop
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800730a:	b580      	push	{r7, lr}
 800730c:	b082      	sub	sp, #8
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007320:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2220      	movs	r2, #32
 8007326:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7ff fb4a 	bl	80069c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007334:	bf00      	nop
 8007336:	3708      	adds	r7, #8
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b084      	sub	sp, #16
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800734a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007350:	2b22      	cmp	r3, #34	; 0x22
 8007352:	d151      	bne.n	80073f8 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800735c:	89bb      	ldrh	r3, [r7, #12]
 800735e:	b2d9      	uxtb	r1, r3
 8007360:	89fb      	ldrh	r3, [r7, #14]
 8007362:	b2da      	uxtb	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007368:	400a      	ands	r2, r1
 800736a:	b2d2      	uxtb	r2, r2
 800736c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007372:	1c5a      	adds	r2, r3, #1
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800737e:	b29b      	uxth	r3, r3
 8007380:	3b01      	subs	r3, #1
 8007382:	b29a      	uxth	r2, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007390:	b29b      	uxth	r3, r3
 8007392:	2b00      	cmp	r3, #0
 8007394:	d138      	bne.n	8007408 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80073a4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	689a      	ldr	r2, [r3, #8]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f022 0201 	bic.w	r2, r2, #1
 80073b4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2220      	movs	r2, #32
 80073ba:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d10f      	bne.n	80073ea <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f022 0210 	bic.w	r2, r2, #16
 80073d8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80073e0:	4619      	mov	r1, r3
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f7ff fb04 	bl	80069f0 <HAL_UARTEx_RxEventCallback>
 80073e8:	e002      	b.n	80073f0 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7fa f924 	bl	8001638 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80073f6:	e007      	b.n	8007408 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	699a      	ldr	r2, [r3, #24]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f042 0208 	orr.w	r2, r2, #8
 8007406:	619a      	str	r2, [r3, #24]
}
 8007408:	bf00      	nop
 800740a:	3710      	adds	r7, #16
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800741e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007424:	2b22      	cmp	r3, #34	; 0x22
 8007426:	d151      	bne.n	80074cc <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007434:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8007436:	89ba      	ldrh	r2, [r7, #12]
 8007438:	89fb      	ldrh	r3, [r7, #14]
 800743a:	4013      	ands	r3, r2
 800743c:	b29a      	uxth	r2, r3
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007446:	1c9a      	adds	r2, r3, #2
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007452:	b29b      	uxth	r3, r3
 8007454:	3b01      	subs	r3, #1
 8007456:	b29a      	uxth	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007464:	b29b      	uxth	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	d138      	bne.n	80074dc <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007478:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	689a      	ldr	r2, [r3, #8]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f022 0201 	bic.w	r2, r2, #1
 8007488:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2220      	movs	r2, #32
 800748e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800749a:	2b01      	cmp	r3, #1
 800749c:	d10f      	bne.n	80074be <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f022 0210 	bic.w	r2, r2, #16
 80074ac:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80074b4:	4619      	mov	r1, r3
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7ff fa9a 	bl	80069f0 <HAL_UARTEx_RxEventCallback>
 80074bc:	e002      	b.n	80074c4 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f7fa f8ba 	bl	8001638 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80074ca:	e007      	b.n	80074dc <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	699a      	ldr	r2, [r3, #24]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f042 0208 	orr.w	r2, r2, #8
 80074da:	619a      	str	r2, [r3, #24]
}
 80074dc:	bf00      	nop
 80074de:	3710      	adds	r7, #16
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <__errno>:
 80074e4:	4b01      	ldr	r3, [pc, #4]	; (80074ec <__errno+0x8>)
 80074e6:	6818      	ldr	r0, [r3, #0]
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	20000010 	.word	0x20000010

080074f0 <__libc_init_array>:
 80074f0:	b570      	push	{r4, r5, r6, lr}
 80074f2:	4d0d      	ldr	r5, [pc, #52]	; (8007528 <__libc_init_array+0x38>)
 80074f4:	4c0d      	ldr	r4, [pc, #52]	; (800752c <__libc_init_array+0x3c>)
 80074f6:	1b64      	subs	r4, r4, r5
 80074f8:	10a4      	asrs	r4, r4, #2
 80074fa:	2600      	movs	r6, #0
 80074fc:	42a6      	cmp	r6, r4
 80074fe:	d109      	bne.n	8007514 <__libc_init_array+0x24>
 8007500:	4d0b      	ldr	r5, [pc, #44]	; (8007530 <__libc_init_array+0x40>)
 8007502:	4c0c      	ldr	r4, [pc, #48]	; (8007534 <__libc_init_array+0x44>)
 8007504:	f002 fd02 	bl	8009f0c <_init>
 8007508:	1b64      	subs	r4, r4, r5
 800750a:	10a4      	asrs	r4, r4, #2
 800750c:	2600      	movs	r6, #0
 800750e:	42a6      	cmp	r6, r4
 8007510:	d105      	bne.n	800751e <__libc_init_array+0x2e>
 8007512:	bd70      	pop	{r4, r5, r6, pc}
 8007514:	f855 3b04 	ldr.w	r3, [r5], #4
 8007518:	4798      	blx	r3
 800751a:	3601      	adds	r6, #1
 800751c:	e7ee      	b.n	80074fc <__libc_init_array+0xc>
 800751e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007522:	4798      	blx	r3
 8007524:	3601      	adds	r6, #1
 8007526:	e7f2      	b.n	800750e <__libc_init_array+0x1e>
 8007528:	0800a35c 	.word	0x0800a35c
 800752c:	0800a35c 	.word	0x0800a35c
 8007530:	0800a35c 	.word	0x0800a35c
 8007534:	0800a360 	.word	0x0800a360

08007538 <malloc>:
 8007538:	4b02      	ldr	r3, [pc, #8]	; (8007544 <malloc+0xc>)
 800753a:	4601      	mov	r1, r0
 800753c:	6818      	ldr	r0, [r3, #0]
 800753e:	f000 b85b 	b.w	80075f8 <_malloc_r>
 8007542:	bf00      	nop
 8007544:	20000010 	.word	0x20000010

08007548 <memset>:
 8007548:	4402      	add	r2, r0
 800754a:	4603      	mov	r3, r0
 800754c:	4293      	cmp	r3, r2
 800754e:	d100      	bne.n	8007552 <memset+0xa>
 8007550:	4770      	bx	lr
 8007552:	f803 1b01 	strb.w	r1, [r3], #1
 8007556:	e7f9      	b.n	800754c <memset+0x4>

08007558 <_free_r>:
 8007558:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800755a:	2900      	cmp	r1, #0
 800755c:	d048      	beq.n	80075f0 <_free_r+0x98>
 800755e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007562:	9001      	str	r0, [sp, #4]
 8007564:	2b00      	cmp	r3, #0
 8007566:	f1a1 0404 	sub.w	r4, r1, #4
 800756a:	bfb8      	it	lt
 800756c:	18e4      	addlt	r4, r4, r3
 800756e:	f001 fcaf 	bl	8008ed0 <__malloc_lock>
 8007572:	4a20      	ldr	r2, [pc, #128]	; (80075f4 <_free_r+0x9c>)
 8007574:	9801      	ldr	r0, [sp, #4]
 8007576:	6813      	ldr	r3, [r2, #0]
 8007578:	4615      	mov	r5, r2
 800757a:	b933      	cbnz	r3, 800758a <_free_r+0x32>
 800757c:	6063      	str	r3, [r4, #4]
 800757e:	6014      	str	r4, [r2, #0]
 8007580:	b003      	add	sp, #12
 8007582:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007586:	f001 bca9 	b.w	8008edc <__malloc_unlock>
 800758a:	42a3      	cmp	r3, r4
 800758c:	d90b      	bls.n	80075a6 <_free_r+0x4e>
 800758e:	6821      	ldr	r1, [r4, #0]
 8007590:	1862      	adds	r2, r4, r1
 8007592:	4293      	cmp	r3, r2
 8007594:	bf04      	itt	eq
 8007596:	681a      	ldreq	r2, [r3, #0]
 8007598:	685b      	ldreq	r3, [r3, #4]
 800759a:	6063      	str	r3, [r4, #4]
 800759c:	bf04      	itt	eq
 800759e:	1852      	addeq	r2, r2, r1
 80075a0:	6022      	streq	r2, [r4, #0]
 80075a2:	602c      	str	r4, [r5, #0]
 80075a4:	e7ec      	b.n	8007580 <_free_r+0x28>
 80075a6:	461a      	mov	r2, r3
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	b10b      	cbz	r3, 80075b0 <_free_r+0x58>
 80075ac:	42a3      	cmp	r3, r4
 80075ae:	d9fa      	bls.n	80075a6 <_free_r+0x4e>
 80075b0:	6811      	ldr	r1, [r2, #0]
 80075b2:	1855      	adds	r5, r2, r1
 80075b4:	42a5      	cmp	r5, r4
 80075b6:	d10b      	bne.n	80075d0 <_free_r+0x78>
 80075b8:	6824      	ldr	r4, [r4, #0]
 80075ba:	4421      	add	r1, r4
 80075bc:	1854      	adds	r4, r2, r1
 80075be:	42a3      	cmp	r3, r4
 80075c0:	6011      	str	r1, [r2, #0]
 80075c2:	d1dd      	bne.n	8007580 <_free_r+0x28>
 80075c4:	681c      	ldr	r4, [r3, #0]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	6053      	str	r3, [r2, #4]
 80075ca:	4421      	add	r1, r4
 80075cc:	6011      	str	r1, [r2, #0]
 80075ce:	e7d7      	b.n	8007580 <_free_r+0x28>
 80075d0:	d902      	bls.n	80075d8 <_free_r+0x80>
 80075d2:	230c      	movs	r3, #12
 80075d4:	6003      	str	r3, [r0, #0]
 80075d6:	e7d3      	b.n	8007580 <_free_r+0x28>
 80075d8:	6825      	ldr	r5, [r4, #0]
 80075da:	1961      	adds	r1, r4, r5
 80075dc:	428b      	cmp	r3, r1
 80075de:	bf04      	itt	eq
 80075e0:	6819      	ldreq	r1, [r3, #0]
 80075e2:	685b      	ldreq	r3, [r3, #4]
 80075e4:	6063      	str	r3, [r4, #4]
 80075e6:	bf04      	itt	eq
 80075e8:	1949      	addeq	r1, r1, r5
 80075ea:	6021      	streq	r1, [r4, #0]
 80075ec:	6054      	str	r4, [r2, #4]
 80075ee:	e7c7      	b.n	8007580 <_free_r+0x28>
 80075f0:	b003      	add	sp, #12
 80075f2:	bd30      	pop	{r4, r5, pc}
 80075f4:	2000020c 	.word	0x2000020c

080075f8 <_malloc_r>:
 80075f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075fa:	1ccd      	adds	r5, r1, #3
 80075fc:	f025 0503 	bic.w	r5, r5, #3
 8007600:	3508      	adds	r5, #8
 8007602:	2d0c      	cmp	r5, #12
 8007604:	bf38      	it	cc
 8007606:	250c      	movcc	r5, #12
 8007608:	2d00      	cmp	r5, #0
 800760a:	4606      	mov	r6, r0
 800760c:	db01      	blt.n	8007612 <_malloc_r+0x1a>
 800760e:	42a9      	cmp	r1, r5
 8007610:	d903      	bls.n	800761a <_malloc_r+0x22>
 8007612:	230c      	movs	r3, #12
 8007614:	6033      	str	r3, [r6, #0]
 8007616:	2000      	movs	r0, #0
 8007618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800761a:	f001 fc59 	bl	8008ed0 <__malloc_lock>
 800761e:	4921      	ldr	r1, [pc, #132]	; (80076a4 <_malloc_r+0xac>)
 8007620:	680a      	ldr	r2, [r1, #0]
 8007622:	4614      	mov	r4, r2
 8007624:	b99c      	cbnz	r4, 800764e <_malloc_r+0x56>
 8007626:	4f20      	ldr	r7, [pc, #128]	; (80076a8 <_malloc_r+0xb0>)
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	b923      	cbnz	r3, 8007636 <_malloc_r+0x3e>
 800762c:	4621      	mov	r1, r4
 800762e:	4630      	mov	r0, r6
 8007630:	f000 fcbe 	bl	8007fb0 <_sbrk_r>
 8007634:	6038      	str	r0, [r7, #0]
 8007636:	4629      	mov	r1, r5
 8007638:	4630      	mov	r0, r6
 800763a:	f000 fcb9 	bl	8007fb0 <_sbrk_r>
 800763e:	1c43      	adds	r3, r0, #1
 8007640:	d123      	bne.n	800768a <_malloc_r+0x92>
 8007642:	230c      	movs	r3, #12
 8007644:	6033      	str	r3, [r6, #0]
 8007646:	4630      	mov	r0, r6
 8007648:	f001 fc48 	bl	8008edc <__malloc_unlock>
 800764c:	e7e3      	b.n	8007616 <_malloc_r+0x1e>
 800764e:	6823      	ldr	r3, [r4, #0]
 8007650:	1b5b      	subs	r3, r3, r5
 8007652:	d417      	bmi.n	8007684 <_malloc_r+0x8c>
 8007654:	2b0b      	cmp	r3, #11
 8007656:	d903      	bls.n	8007660 <_malloc_r+0x68>
 8007658:	6023      	str	r3, [r4, #0]
 800765a:	441c      	add	r4, r3
 800765c:	6025      	str	r5, [r4, #0]
 800765e:	e004      	b.n	800766a <_malloc_r+0x72>
 8007660:	6863      	ldr	r3, [r4, #4]
 8007662:	42a2      	cmp	r2, r4
 8007664:	bf0c      	ite	eq
 8007666:	600b      	streq	r3, [r1, #0]
 8007668:	6053      	strne	r3, [r2, #4]
 800766a:	4630      	mov	r0, r6
 800766c:	f001 fc36 	bl	8008edc <__malloc_unlock>
 8007670:	f104 000b 	add.w	r0, r4, #11
 8007674:	1d23      	adds	r3, r4, #4
 8007676:	f020 0007 	bic.w	r0, r0, #7
 800767a:	1ac2      	subs	r2, r0, r3
 800767c:	d0cc      	beq.n	8007618 <_malloc_r+0x20>
 800767e:	1a1b      	subs	r3, r3, r0
 8007680:	50a3      	str	r3, [r4, r2]
 8007682:	e7c9      	b.n	8007618 <_malloc_r+0x20>
 8007684:	4622      	mov	r2, r4
 8007686:	6864      	ldr	r4, [r4, #4]
 8007688:	e7cc      	b.n	8007624 <_malloc_r+0x2c>
 800768a:	1cc4      	adds	r4, r0, #3
 800768c:	f024 0403 	bic.w	r4, r4, #3
 8007690:	42a0      	cmp	r0, r4
 8007692:	d0e3      	beq.n	800765c <_malloc_r+0x64>
 8007694:	1a21      	subs	r1, r4, r0
 8007696:	4630      	mov	r0, r6
 8007698:	f000 fc8a 	bl	8007fb0 <_sbrk_r>
 800769c:	3001      	adds	r0, #1
 800769e:	d1dd      	bne.n	800765c <_malloc_r+0x64>
 80076a0:	e7cf      	b.n	8007642 <_malloc_r+0x4a>
 80076a2:	bf00      	nop
 80076a4:	2000020c 	.word	0x2000020c
 80076a8:	20000210 	.word	0x20000210

080076ac <__cvt>:
 80076ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076b0:	ec55 4b10 	vmov	r4, r5, d0
 80076b4:	2d00      	cmp	r5, #0
 80076b6:	460e      	mov	r6, r1
 80076b8:	4619      	mov	r1, r3
 80076ba:	462b      	mov	r3, r5
 80076bc:	bfbb      	ittet	lt
 80076be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80076c2:	461d      	movlt	r5, r3
 80076c4:	2300      	movge	r3, #0
 80076c6:	232d      	movlt	r3, #45	; 0x2d
 80076c8:	700b      	strb	r3, [r1, #0]
 80076ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80076d0:	4691      	mov	r9, r2
 80076d2:	f023 0820 	bic.w	r8, r3, #32
 80076d6:	bfbc      	itt	lt
 80076d8:	4622      	movlt	r2, r4
 80076da:	4614      	movlt	r4, r2
 80076dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80076e0:	d005      	beq.n	80076ee <__cvt+0x42>
 80076e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80076e6:	d100      	bne.n	80076ea <__cvt+0x3e>
 80076e8:	3601      	adds	r6, #1
 80076ea:	2102      	movs	r1, #2
 80076ec:	e000      	b.n	80076f0 <__cvt+0x44>
 80076ee:	2103      	movs	r1, #3
 80076f0:	ab03      	add	r3, sp, #12
 80076f2:	9301      	str	r3, [sp, #4]
 80076f4:	ab02      	add	r3, sp, #8
 80076f6:	9300      	str	r3, [sp, #0]
 80076f8:	ec45 4b10 	vmov	d0, r4, r5
 80076fc:	4653      	mov	r3, sl
 80076fe:	4632      	mov	r2, r6
 8007700:	f000 fcf2 	bl	80080e8 <_dtoa_r>
 8007704:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007708:	4607      	mov	r7, r0
 800770a:	d102      	bne.n	8007712 <__cvt+0x66>
 800770c:	f019 0f01 	tst.w	r9, #1
 8007710:	d022      	beq.n	8007758 <__cvt+0xac>
 8007712:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007716:	eb07 0906 	add.w	r9, r7, r6
 800771a:	d110      	bne.n	800773e <__cvt+0x92>
 800771c:	783b      	ldrb	r3, [r7, #0]
 800771e:	2b30      	cmp	r3, #48	; 0x30
 8007720:	d10a      	bne.n	8007738 <__cvt+0x8c>
 8007722:	2200      	movs	r2, #0
 8007724:	2300      	movs	r3, #0
 8007726:	4620      	mov	r0, r4
 8007728:	4629      	mov	r1, r5
 800772a:	f7f9 f9ed 	bl	8000b08 <__aeabi_dcmpeq>
 800772e:	b918      	cbnz	r0, 8007738 <__cvt+0x8c>
 8007730:	f1c6 0601 	rsb	r6, r6, #1
 8007734:	f8ca 6000 	str.w	r6, [sl]
 8007738:	f8da 3000 	ldr.w	r3, [sl]
 800773c:	4499      	add	r9, r3
 800773e:	2200      	movs	r2, #0
 8007740:	2300      	movs	r3, #0
 8007742:	4620      	mov	r0, r4
 8007744:	4629      	mov	r1, r5
 8007746:	f7f9 f9df 	bl	8000b08 <__aeabi_dcmpeq>
 800774a:	b108      	cbz	r0, 8007750 <__cvt+0xa4>
 800774c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007750:	2230      	movs	r2, #48	; 0x30
 8007752:	9b03      	ldr	r3, [sp, #12]
 8007754:	454b      	cmp	r3, r9
 8007756:	d307      	bcc.n	8007768 <__cvt+0xbc>
 8007758:	9b03      	ldr	r3, [sp, #12]
 800775a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800775c:	1bdb      	subs	r3, r3, r7
 800775e:	4638      	mov	r0, r7
 8007760:	6013      	str	r3, [r2, #0]
 8007762:	b004      	add	sp, #16
 8007764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007768:	1c59      	adds	r1, r3, #1
 800776a:	9103      	str	r1, [sp, #12]
 800776c:	701a      	strb	r2, [r3, #0]
 800776e:	e7f0      	b.n	8007752 <__cvt+0xa6>

08007770 <__exponent>:
 8007770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007772:	4603      	mov	r3, r0
 8007774:	2900      	cmp	r1, #0
 8007776:	bfb8      	it	lt
 8007778:	4249      	neglt	r1, r1
 800777a:	f803 2b02 	strb.w	r2, [r3], #2
 800777e:	bfb4      	ite	lt
 8007780:	222d      	movlt	r2, #45	; 0x2d
 8007782:	222b      	movge	r2, #43	; 0x2b
 8007784:	2909      	cmp	r1, #9
 8007786:	7042      	strb	r2, [r0, #1]
 8007788:	dd2a      	ble.n	80077e0 <__exponent+0x70>
 800778a:	f10d 0407 	add.w	r4, sp, #7
 800778e:	46a4      	mov	ip, r4
 8007790:	270a      	movs	r7, #10
 8007792:	46a6      	mov	lr, r4
 8007794:	460a      	mov	r2, r1
 8007796:	fb91 f6f7 	sdiv	r6, r1, r7
 800779a:	fb07 1516 	mls	r5, r7, r6, r1
 800779e:	3530      	adds	r5, #48	; 0x30
 80077a0:	2a63      	cmp	r2, #99	; 0x63
 80077a2:	f104 34ff 	add.w	r4, r4, #4294967295
 80077a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80077aa:	4631      	mov	r1, r6
 80077ac:	dcf1      	bgt.n	8007792 <__exponent+0x22>
 80077ae:	3130      	adds	r1, #48	; 0x30
 80077b0:	f1ae 0502 	sub.w	r5, lr, #2
 80077b4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80077b8:	1c44      	adds	r4, r0, #1
 80077ba:	4629      	mov	r1, r5
 80077bc:	4561      	cmp	r1, ip
 80077be:	d30a      	bcc.n	80077d6 <__exponent+0x66>
 80077c0:	f10d 0209 	add.w	r2, sp, #9
 80077c4:	eba2 020e 	sub.w	r2, r2, lr
 80077c8:	4565      	cmp	r5, ip
 80077ca:	bf88      	it	hi
 80077cc:	2200      	movhi	r2, #0
 80077ce:	4413      	add	r3, r2
 80077d0:	1a18      	subs	r0, r3, r0
 80077d2:	b003      	add	sp, #12
 80077d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077da:	f804 2f01 	strb.w	r2, [r4, #1]!
 80077de:	e7ed      	b.n	80077bc <__exponent+0x4c>
 80077e0:	2330      	movs	r3, #48	; 0x30
 80077e2:	3130      	adds	r1, #48	; 0x30
 80077e4:	7083      	strb	r3, [r0, #2]
 80077e6:	70c1      	strb	r1, [r0, #3]
 80077e8:	1d03      	adds	r3, r0, #4
 80077ea:	e7f1      	b.n	80077d0 <__exponent+0x60>

080077ec <_printf_float>:
 80077ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f0:	ed2d 8b02 	vpush	{d8}
 80077f4:	b08d      	sub	sp, #52	; 0x34
 80077f6:	460c      	mov	r4, r1
 80077f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80077fc:	4616      	mov	r6, r2
 80077fe:	461f      	mov	r7, r3
 8007800:	4605      	mov	r5, r0
 8007802:	f001 fb53 	bl	8008eac <_localeconv_r>
 8007806:	f8d0 a000 	ldr.w	sl, [r0]
 800780a:	4650      	mov	r0, sl
 800780c:	f7f8 fd00 	bl	8000210 <strlen>
 8007810:	2300      	movs	r3, #0
 8007812:	930a      	str	r3, [sp, #40]	; 0x28
 8007814:	6823      	ldr	r3, [r4, #0]
 8007816:	9305      	str	r3, [sp, #20]
 8007818:	f8d8 3000 	ldr.w	r3, [r8]
 800781c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007820:	3307      	adds	r3, #7
 8007822:	f023 0307 	bic.w	r3, r3, #7
 8007826:	f103 0208 	add.w	r2, r3, #8
 800782a:	f8c8 2000 	str.w	r2, [r8]
 800782e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007832:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007836:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800783a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800783e:	9307      	str	r3, [sp, #28]
 8007840:	f8cd 8018 	str.w	r8, [sp, #24]
 8007844:	ee08 0a10 	vmov	s16, r0
 8007848:	4b9f      	ldr	r3, [pc, #636]	; (8007ac8 <_printf_float+0x2dc>)
 800784a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800784e:	f04f 32ff 	mov.w	r2, #4294967295
 8007852:	f7f9 f98b 	bl	8000b6c <__aeabi_dcmpun>
 8007856:	bb88      	cbnz	r0, 80078bc <_printf_float+0xd0>
 8007858:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800785c:	4b9a      	ldr	r3, [pc, #616]	; (8007ac8 <_printf_float+0x2dc>)
 800785e:	f04f 32ff 	mov.w	r2, #4294967295
 8007862:	f7f9 f965 	bl	8000b30 <__aeabi_dcmple>
 8007866:	bb48      	cbnz	r0, 80078bc <_printf_float+0xd0>
 8007868:	2200      	movs	r2, #0
 800786a:	2300      	movs	r3, #0
 800786c:	4640      	mov	r0, r8
 800786e:	4649      	mov	r1, r9
 8007870:	f7f9 f954 	bl	8000b1c <__aeabi_dcmplt>
 8007874:	b110      	cbz	r0, 800787c <_printf_float+0x90>
 8007876:	232d      	movs	r3, #45	; 0x2d
 8007878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800787c:	4b93      	ldr	r3, [pc, #588]	; (8007acc <_printf_float+0x2e0>)
 800787e:	4894      	ldr	r0, [pc, #592]	; (8007ad0 <_printf_float+0x2e4>)
 8007880:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007884:	bf94      	ite	ls
 8007886:	4698      	movls	r8, r3
 8007888:	4680      	movhi	r8, r0
 800788a:	2303      	movs	r3, #3
 800788c:	6123      	str	r3, [r4, #16]
 800788e:	9b05      	ldr	r3, [sp, #20]
 8007890:	f023 0204 	bic.w	r2, r3, #4
 8007894:	6022      	str	r2, [r4, #0]
 8007896:	f04f 0900 	mov.w	r9, #0
 800789a:	9700      	str	r7, [sp, #0]
 800789c:	4633      	mov	r3, r6
 800789e:	aa0b      	add	r2, sp, #44	; 0x2c
 80078a0:	4621      	mov	r1, r4
 80078a2:	4628      	mov	r0, r5
 80078a4:	f000 f9d8 	bl	8007c58 <_printf_common>
 80078a8:	3001      	adds	r0, #1
 80078aa:	f040 8090 	bne.w	80079ce <_printf_float+0x1e2>
 80078ae:	f04f 30ff 	mov.w	r0, #4294967295
 80078b2:	b00d      	add	sp, #52	; 0x34
 80078b4:	ecbd 8b02 	vpop	{d8}
 80078b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078bc:	4642      	mov	r2, r8
 80078be:	464b      	mov	r3, r9
 80078c0:	4640      	mov	r0, r8
 80078c2:	4649      	mov	r1, r9
 80078c4:	f7f9 f952 	bl	8000b6c <__aeabi_dcmpun>
 80078c8:	b140      	cbz	r0, 80078dc <_printf_float+0xf0>
 80078ca:	464b      	mov	r3, r9
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	bfbc      	itt	lt
 80078d0:	232d      	movlt	r3, #45	; 0x2d
 80078d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80078d6:	487f      	ldr	r0, [pc, #508]	; (8007ad4 <_printf_float+0x2e8>)
 80078d8:	4b7f      	ldr	r3, [pc, #508]	; (8007ad8 <_printf_float+0x2ec>)
 80078da:	e7d1      	b.n	8007880 <_printf_float+0x94>
 80078dc:	6863      	ldr	r3, [r4, #4]
 80078de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80078e2:	9206      	str	r2, [sp, #24]
 80078e4:	1c5a      	adds	r2, r3, #1
 80078e6:	d13f      	bne.n	8007968 <_printf_float+0x17c>
 80078e8:	2306      	movs	r3, #6
 80078ea:	6063      	str	r3, [r4, #4]
 80078ec:	9b05      	ldr	r3, [sp, #20]
 80078ee:	6861      	ldr	r1, [r4, #4]
 80078f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80078f4:	2300      	movs	r3, #0
 80078f6:	9303      	str	r3, [sp, #12]
 80078f8:	ab0a      	add	r3, sp, #40	; 0x28
 80078fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80078fe:	ab09      	add	r3, sp, #36	; 0x24
 8007900:	ec49 8b10 	vmov	d0, r8, r9
 8007904:	9300      	str	r3, [sp, #0]
 8007906:	6022      	str	r2, [r4, #0]
 8007908:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800790c:	4628      	mov	r0, r5
 800790e:	f7ff fecd 	bl	80076ac <__cvt>
 8007912:	9b06      	ldr	r3, [sp, #24]
 8007914:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007916:	2b47      	cmp	r3, #71	; 0x47
 8007918:	4680      	mov	r8, r0
 800791a:	d108      	bne.n	800792e <_printf_float+0x142>
 800791c:	1cc8      	adds	r0, r1, #3
 800791e:	db02      	blt.n	8007926 <_printf_float+0x13a>
 8007920:	6863      	ldr	r3, [r4, #4]
 8007922:	4299      	cmp	r1, r3
 8007924:	dd41      	ble.n	80079aa <_printf_float+0x1be>
 8007926:	f1ab 0b02 	sub.w	fp, fp, #2
 800792a:	fa5f fb8b 	uxtb.w	fp, fp
 800792e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007932:	d820      	bhi.n	8007976 <_printf_float+0x18a>
 8007934:	3901      	subs	r1, #1
 8007936:	465a      	mov	r2, fp
 8007938:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800793c:	9109      	str	r1, [sp, #36]	; 0x24
 800793e:	f7ff ff17 	bl	8007770 <__exponent>
 8007942:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007944:	1813      	adds	r3, r2, r0
 8007946:	2a01      	cmp	r2, #1
 8007948:	4681      	mov	r9, r0
 800794a:	6123      	str	r3, [r4, #16]
 800794c:	dc02      	bgt.n	8007954 <_printf_float+0x168>
 800794e:	6822      	ldr	r2, [r4, #0]
 8007950:	07d2      	lsls	r2, r2, #31
 8007952:	d501      	bpl.n	8007958 <_printf_float+0x16c>
 8007954:	3301      	adds	r3, #1
 8007956:	6123      	str	r3, [r4, #16]
 8007958:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800795c:	2b00      	cmp	r3, #0
 800795e:	d09c      	beq.n	800789a <_printf_float+0xae>
 8007960:	232d      	movs	r3, #45	; 0x2d
 8007962:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007966:	e798      	b.n	800789a <_printf_float+0xae>
 8007968:	9a06      	ldr	r2, [sp, #24]
 800796a:	2a47      	cmp	r2, #71	; 0x47
 800796c:	d1be      	bne.n	80078ec <_printf_float+0x100>
 800796e:	2b00      	cmp	r3, #0
 8007970:	d1bc      	bne.n	80078ec <_printf_float+0x100>
 8007972:	2301      	movs	r3, #1
 8007974:	e7b9      	b.n	80078ea <_printf_float+0xfe>
 8007976:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800797a:	d118      	bne.n	80079ae <_printf_float+0x1c2>
 800797c:	2900      	cmp	r1, #0
 800797e:	6863      	ldr	r3, [r4, #4]
 8007980:	dd0b      	ble.n	800799a <_printf_float+0x1ae>
 8007982:	6121      	str	r1, [r4, #16]
 8007984:	b913      	cbnz	r3, 800798c <_printf_float+0x1a0>
 8007986:	6822      	ldr	r2, [r4, #0]
 8007988:	07d0      	lsls	r0, r2, #31
 800798a:	d502      	bpl.n	8007992 <_printf_float+0x1a6>
 800798c:	3301      	adds	r3, #1
 800798e:	440b      	add	r3, r1
 8007990:	6123      	str	r3, [r4, #16]
 8007992:	65a1      	str	r1, [r4, #88]	; 0x58
 8007994:	f04f 0900 	mov.w	r9, #0
 8007998:	e7de      	b.n	8007958 <_printf_float+0x16c>
 800799a:	b913      	cbnz	r3, 80079a2 <_printf_float+0x1b6>
 800799c:	6822      	ldr	r2, [r4, #0]
 800799e:	07d2      	lsls	r2, r2, #31
 80079a0:	d501      	bpl.n	80079a6 <_printf_float+0x1ba>
 80079a2:	3302      	adds	r3, #2
 80079a4:	e7f4      	b.n	8007990 <_printf_float+0x1a4>
 80079a6:	2301      	movs	r3, #1
 80079a8:	e7f2      	b.n	8007990 <_printf_float+0x1a4>
 80079aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80079ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079b0:	4299      	cmp	r1, r3
 80079b2:	db05      	blt.n	80079c0 <_printf_float+0x1d4>
 80079b4:	6823      	ldr	r3, [r4, #0]
 80079b6:	6121      	str	r1, [r4, #16]
 80079b8:	07d8      	lsls	r0, r3, #31
 80079ba:	d5ea      	bpl.n	8007992 <_printf_float+0x1a6>
 80079bc:	1c4b      	adds	r3, r1, #1
 80079be:	e7e7      	b.n	8007990 <_printf_float+0x1a4>
 80079c0:	2900      	cmp	r1, #0
 80079c2:	bfd4      	ite	le
 80079c4:	f1c1 0202 	rsble	r2, r1, #2
 80079c8:	2201      	movgt	r2, #1
 80079ca:	4413      	add	r3, r2
 80079cc:	e7e0      	b.n	8007990 <_printf_float+0x1a4>
 80079ce:	6823      	ldr	r3, [r4, #0]
 80079d0:	055a      	lsls	r2, r3, #21
 80079d2:	d407      	bmi.n	80079e4 <_printf_float+0x1f8>
 80079d4:	6923      	ldr	r3, [r4, #16]
 80079d6:	4642      	mov	r2, r8
 80079d8:	4631      	mov	r1, r6
 80079da:	4628      	mov	r0, r5
 80079dc:	47b8      	blx	r7
 80079de:	3001      	adds	r0, #1
 80079e0:	d12c      	bne.n	8007a3c <_printf_float+0x250>
 80079e2:	e764      	b.n	80078ae <_printf_float+0xc2>
 80079e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80079e8:	f240 80e0 	bls.w	8007bac <_printf_float+0x3c0>
 80079ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80079f0:	2200      	movs	r2, #0
 80079f2:	2300      	movs	r3, #0
 80079f4:	f7f9 f888 	bl	8000b08 <__aeabi_dcmpeq>
 80079f8:	2800      	cmp	r0, #0
 80079fa:	d034      	beq.n	8007a66 <_printf_float+0x27a>
 80079fc:	4a37      	ldr	r2, [pc, #220]	; (8007adc <_printf_float+0x2f0>)
 80079fe:	2301      	movs	r3, #1
 8007a00:	4631      	mov	r1, r6
 8007a02:	4628      	mov	r0, r5
 8007a04:	47b8      	blx	r7
 8007a06:	3001      	adds	r0, #1
 8007a08:	f43f af51 	beq.w	80078ae <_printf_float+0xc2>
 8007a0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a10:	429a      	cmp	r2, r3
 8007a12:	db02      	blt.n	8007a1a <_printf_float+0x22e>
 8007a14:	6823      	ldr	r3, [r4, #0]
 8007a16:	07d8      	lsls	r0, r3, #31
 8007a18:	d510      	bpl.n	8007a3c <_printf_float+0x250>
 8007a1a:	ee18 3a10 	vmov	r3, s16
 8007a1e:	4652      	mov	r2, sl
 8007a20:	4631      	mov	r1, r6
 8007a22:	4628      	mov	r0, r5
 8007a24:	47b8      	blx	r7
 8007a26:	3001      	adds	r0, #1
 8007a28:	f43f af41 	beq.w	80078ae <_printf_float+0xc2>
 8007a2c:	f04f 0800 	mov.w	r8, #0
 8007a30:	f104 091a 	add.w	r9, r4, #26
 8007a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a36:	3b01      	subs	r3, #1
 8007a38:	4543      	cmp	r3, r8
 8007a3a:	dc09      	bgt.n	8007a50 <_printf_float+0x264>
 8007a3c:	6823      	ldr	r3, [r4, #0]
 8007a3e:	079b      	lsls	r3, r3, #30
 8007a40:	f100 8105 	bmi.w	8007c4e <_printf_float+0x462>
 8007a44:	68e0      	ldr	r0, [r4, #12]
 8007a46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a48:	4298      	cmp	r0, r3
 8007a4a:	bfb8      	it	lt
 8007a4c:	4618      	movlt	r0, r3
 8007a4e:	e730      	b.n	80078b2 <_printf_float+0xc6>
 8007a50:	2301      	movs	r3, #1
 8007a52:	464a      	mov	r2, r9
 8007a54:	4631      	mov	r1, r6
 8007a56:	4628      	mov	r0, r5
 8007a58:	47b8      	blx	r7
 8007a5a:	3001      	adds	r0, #1
 8007a5c:	f43f af27 	beq.w	80078ae <_printf_float+0xc2>
 8007a60:	f108 0801 	add.w	r8, r8, #1
 8007a64:	e7e6      	b.n	8007a34 <_printf_float+0x248>
 8007a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	dc39      	bgt.n	8007ae0 <_printf_float+0x2f4>
 8007a6c:	4a1b      	ldr	r2, [pc, #108]	; (8007adc <_printf_float+0x2f0>)
 8007a6e:	2301      	movs	r3, #1
 8007a70:	4631      	mov	r1, r6
 8007a72:	4628      	mov	r0, r5
 8007a74:	47b8      	blx	r7
 8007a76:	3001      	adds	r0, #1
 8007a78:	f43f af19 	beq.w	80078ae <_printf_float+0xc2>
 8007a7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a80:	4313      	orrs	r3, r2
 8007a82:	d102      	bne.n	8007a8a <_printf_float+0x29e>
 8007a84:	6823      	ldr	r3, [r4, #0]
 8007a86:	07d9      	lsls	r1, r3, #31
 8007a88:	d5d8      	bpl.n	8007a3c <_printf_float+0x250>
 8007a8a:	ee18 3a10 	vmov	r3, s16
 8007a8e:	4652      	mov	r2, sl
 8007a90:	4631      	mov	r1, r6
 8007a92:	4628      	mov	r0, r5
 8007a94:	47b8      	blx	r7
 8007a96:	3001      	adds	r0, #1
 8007a98:	f43f af09 	beq.w	80078ae <_printf_float+0xc2>
 8007a9c:	f04f 0900 	mov.w	r9, #0
 8007aa0:	f104 0a1a 	add.w	sl, r4, #26
 8007aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aa6:	425b      	negs	r3, r3
 8007aa8:	454b      	cmp	r3, r9
 8007aaa:	dc01      	bgt.n	8007ab0 <_printf_float+0x2c4>
 8007aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aae:	e792      	b.n	80079d6 <_printf_float+0x1ea>
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	4652      	mov	r2, sl
 8007ab4:	4631      	mov	r1, r6
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	47b8      	blx	r7
 8007aba:	3001      	adds	r0, #1
 8007abc:	f43f aef7 	beq.w	80078ae <_printf_float+0xc2>
 8007ac0:	f109 0901 	add.w	r9, r9, #1
 8007ac4:	e7ee      	b.n	8007aa4 <_printf_float+0x2b8>
 8007ac6:	bf00      	nop
 8007ac8:	7fefffff 	.word	0x7fefffff
 8007acc:	08009f74 	.word	0x08009f74
 8007ad0:	08009f78 	.word	0x08009f78
 8007ad4:	08009f80 	.word	0x08009f80
 8007ad8:	08009f7c 	.word	0x08009f7c
 8007adc:	08009f84 	.word	0x08009f84
 8007ae0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ae2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	bfa8      	it	ge
 8007ae8:	461a      	movge	r2, r3
 8007aea:	2a00      	cmp	r2, #0
 8007aec:	4691      	mov	r9, r2
 8007aee:	dc37      	bgt.n	8007b60 <_printf_float+0x374>
 8007af0:	f04f 0b00 	mov.w	fp, #0
 8007af4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007af8:	f104 021a 	add.w	r2, r4, #26
 8007afc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007afe:	9305      	str	r3, [sp, #20]
 8007b00:	eba3 0309 	sub.w	r3, r3, r9
 8007b04:	455b      	cmp	r3, fp
 8007b06:	dc33      	bgt.n	8007b70 <_printf_float+0x384>
 8007b08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	db3b      	blt.n	8007b88 <_printf_float+0x39c>
 8007b10:	6823      	ldr	r3, [r4, #0]
 8007b12:	07da      	lsls	r2, r3, #31
 8007b14:	d438      	bmi.n	8007b88 <_printf_float+0x39c>
 8007b16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b18:	9b05      	ldr	r3, [sp, #20]
 8007b1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	eba2 0901 	sub.w	r9, r2, r1
 8007b22:	4599      	cmp	r9, r3
 8007b24:	bfa8      	it	ge
 8007b26:	4699      	movge	r9, r3
 8007b28:	f1b9 0f00 	cmp.w	r9, #0
 8007b2c:	dc35      	bgt.n	8007b9a <_printf_float+0x3ae>
 8007b2e:	f04f 0800 	mov.w	r8, #0
 8007b32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b36:	f104 0a1a 	add.w	sl, r4, #26
 8007b3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b3e:	1a9b      	subs	r3, r3, r2
 8007b40:	eba3 0309 	sub.w	r3, r3, r9
 8007b44:	4543      	cmp	r3, r8
 8007b46:	f77f af79 	ble.w	8007a3c <_printf_float+0x250>
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	4652      	mov	r2, sl
 8007b4e:	4631      	mov	r1, r6
 8007b50:	4628      	mov	r0, r5
 8007b52:	47b8      	blx	r7
 8007b54:	3001      	adds	r0, #1
 8007b56:	f43f aeaa 	beq.w	80078ae <_printf_float+0xc2>
 8007b5a:	f108 0801 	add.w	r8, r8, #1
 8007b5e:	e7ec      	b.n	8007b3a <_printf_float+0x34e>
 8007b60:	4613      	mov	r3, r2
 8007b62:	4631      	mov	r1, r6
 8007b64:	4642      	mov	r2, r8
 8007b66:	4628      	mov	r0, r5
 8007b68:	47b8      	blx	r7
 8007b6a:	3001      	adds	r0, #1
 8007b6c:	d1c0      	bne.n	8007af0 <_printf_float+0x304>
 8007b6e:	e69e      	b.n	80078ae <_printf_float+0xc2>
 8007b70:	2301      	movs	r3, #1
 8007b72:	4631      	mov	r1, r6
 8007b74:	4628      	mov	r0, r5
 8007b76:	9205      	str	r2, [sp, #20]
 8007b78:	47b8      	blx	r7
 8007b7a:	3001      	adds	r0, #1
 8007b7c:	f43f ae97 	beq.w	80078ae <_printf_float+0xc2>
 8007b80:	9a05      	ldr	r2, [sp, #20]
 8007b82:	f10b 0b01 	add.w	fp, fp, #1
 8007b86:	e7b9      	b.n	8007afc <_printf_float+0x310>
 8007b88:	ee18 3a10 	vmov	r3, s16
 8007b8c:	4652      	mov	r2, sl
 8007b8e:	4631      	mov	r1, r6
 8007b90:	4628      	mov	r0, r5
 8007b92:	47b8      	blx	r7
 8007b94:	3001      	adds	r0, #1
 8007b96:	d1be      	bne.n	8007b16 <_printf_float+0x32a>
 8007b98:	e689      	b.n	80078ae <_printf_float+0xc2>
 8007b9a:	9a05      	ldr	r2, [sp, #20]
 8007b9c:	464b      	mov	r3, r9
 8007b9e:	4442      	add	r2, r8
 8007ba0:	4631      	mov	r1, r6
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	47b8      	blx	r7
 8007ba6:	3001      	adds	r0, #1
 8007ba8:	d1c1      	bne.n	8007b2e <_printf_float+0x342>
 8007baa:	e680      	b.n	80078ae <_printf_float+0xc2>
 8007bac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bae:	2a01      	cmp	r2, #1
 8007bb0:	dc01      	bgt.n	8007bb6 <_printf_float+0x3ca>
 8007bb2:	07db      	lsls	r3, r3, #31
 8007bb4:	d538      	bpl.n	8007c28 <_printf_float+0x43c>
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	4642      	mov	r2, r8
 8007bba:	4631      	mov	r1, r6
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	47b8      	blx	r7
 8007bc0:	3001      	adds	r0, #1
 8007bc2:	f43f ae74 	beq.w	80078ae <_printf_float+0xc2>
 8007bc6:	ee18 3a10 	vmov	r3, s16
 8007bca:	4652      	mov	r2, sl
 8007bcc:	4631      	mov	r1, r6
 8007bce:	4628      	mov	r0, r5
 8007bd0:	47b8      	blx	r7
 8007bd2:	3001      	adds	r0, #1
 8007bd4:	f43f ae6b 	beq.w	80078ae <_printf_float+0xc2>
 8007bd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007bdc:	2200      	movs	r2, #0
 8007bde:	2300      	movs	r3, #0
 8007be0:	f7f8 ff92 	bl	8000b08 <__aeabi_dcmpeq>
 8007be4:	b9d8      	cbnz	r0, 8007c1e <_printf_float+0x432>
 8007be6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007be8:	f108 0201 	add.w	r2, r8, #1
 8007bec:	3b01      	subs	r3, #1
 8007bee:	4631      	mov	r1, r6
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	47b8      	blx	r7
 8007bf4:	3001      	adds	r0, #1
 8007bf6:	d10e      	bne.n	8007c16 <_printf_float+0x42a>
 8007bf8:	e659      	b.n	80078ae <_printf_float+0xc2>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	4652      	mov	r2, sl
 8007bfe:	4631      	mov	r1, r6
 8007c00:	4628      	mov	r0, r5
 8007c02:	47b8      	blx	r7
 8007c04:	3001      	adds	r0, #1
 8007c06:	f43f ae52 	beq.w	80078ae <_printf_float+0xc2>
 8007c0a:	f108 0801 	add.w	r8, r8, #1
 8007c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c10:	3b01      	subs	r3, #1
 8007c12:	4543      	cmp	r3, r8
 8007c14:	dcf1      	bgt.n	8007bfa <_printf_float+0x40e>
 8007c16:	464b      	mov	r3, r9
 8007c18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007c1c:	e6dc      	b.n	80079d8 <_printf_float+0x1ec>
 8007c1e:	f04f 0800 	mov.w	r8, #0
 8007c22:	f104 0a1a 	add.w	sl, r4, #26
 8007c26:	e7f2      	b.n	8007c0e <_printf_float+0x422>
 8007c28:	2301      	movs	r3, #1
 8007c2a:	4642      	mov	r2, r8
 8007c2c:	e7df      	b.n	8007bee <_printf_float+0x402>
 8007c2e:	2301      	movs	r3, #1
 8007c30:	464a      	mov	r2, r9
 8007c32:	4631      	mov	r1, r6
 8007c34:	4628      	mov	r0, r5
 8007c36:	47b8      	blx	r7
 8007c38:	3001      	adds	r0, #1
 8007c3a:	f43f ae38 	beq.w	80078ae <_printf_float+0xc2>
 8007c3e:	f108 0801 	add.w	r8, r8, #1
 8007c42:	68e3      	ldr	r3, [r4, #12]
 8007c44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c46:	1a5b      	subs	r3, r3, r1
 8007c48:	4543      	cmp	r3, r8
 8007c4a:	dcf0      	bgt.n	8007c2e <_printf_float+0x442>
 8007c4c:	e6fa      	b.n	8007a44 <_printf_float+0x258>
 8007c4e:	f04f 0800 	mov.w	r8, #0
 8007c52:	f104 0919 	add.w	r9, r4, #25
 8007c56:	e7f4      	b.n	8007c42 <_printf_float+0x456>

08007c58 <_printf_common>:
 8007c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c5c:	4616      	mov	r6, r2
 8007c5e:	4699      	mov	r9, r3
 8007c60:	688a      	ldr	r2, [r1, #8]
 8007c62:	690b      	ldr	r3, [r1, #16]
 8007c64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	bfb8      	it	lt
 8007c6c:	4613      	movlt	r3, r2
 8007c6e:	6033      	str	r3, [r6, #0]
 8007c70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c74:	4607      	mov	r7, r0
 8007c76:	460c      	mov	r4, r1
 8007c78:	b10a      	cbz	r2, 8007c7e <_printf_common+0x26>
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	6033      	str	r3, [r6, #0]
 8007c7e:	6823      	ldr	r3, [r4, #0]
 8007c80:	0699      	lsls	r1, r3, #26
 8007c82:	bf42      	ittt	mi
 8007c84:	6833      	ldrmi	r3, [r6, #0]
 8007c86:	3302      	addmi	r3, #2
 8007c88:	6033      	strmi	r3, [r6, #0]
 8007c8a:	6825      	ldr	r5, [r4, #0]
 8007c8c:	f015 0506 	ands.w	r5, r5, #6
 8007c90:	d106      	bne.n	8007ca0 <_printf_common+0x48>
 8007c92:	f104 0a19 	add.w	sl, r4, #25
 8007c96:	68e3      	ldr	r3, [r4, #12]
 8007c98:	6832      	ldr	r2, [r6, #0]
 8007c9a:	1a9b      	subs	r3, r3, r2
 8007c9c:	42ab      	cmp	r3, r5
 8007c9e:	dc26      	bgt.n	8007cee <_printf_common+0x96>
 8007ca0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007ca4:	1e13      	subs	r3, r2, #0
 8007ca6:	6822      	ldr	r2, [r4, #0]
 8007ca8:	bf18      	it	ne
 8007caa:	2301      	movne	r3, #1
 8007cac:	0692      	lsls	r2, r2, #26
 8007cae:	d42b      	bmi.n	8007d08 <_printf_common+0xb0>
 8007cb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cb4:	4649      	mov	r1, r9
 8007cb6:	4638      	mov	r0, r7
 8007cb8:	47c0      	blx	r8
 8007cba:	3001      	adds	r0, #1
 8007cbc:	d01e      	beq.n	8007cfc <_printf_common+0xa4>
 8007cbe:	6823      	ldr	r3, [r4, #0]
 8007cc0:	68e5      	ldr	r5, [r4, #12]
 8007cc2:	6832      	ldr	r2, [r6, #0]
 8007cc4:	f003 0306 	and.w	r3, r3, #6
 8007cc8:	2b04      	cmp	r3, #4
 8007cca:	bf08      	it	eq
 8007ccc:	1aad      	subeq	r5, r5, r2
 8007cce:	68a3      	ldr	r3, [r4, #8]
 8007cd0:	6922      	ldr	r2, [r4, #16]
 8007cd2:	bf0c      	ite	eq
 8007cd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cd8:	2500      	movne	r5, #0
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	bfc4      	itt	gt
 8007cde:	1a9b      	subgt	r3, r3, r2
 8007ce0:	18ed      	addgt	r5, r5, r3
 8007ce2:	2600      	movs	r6, #0
 8007ce4:	341a      	adds	r4, #26
 8007ce6:	42b5      	cmp	r5, r6
 8007ce8:	d11a      	bne.n	8007d20 <_printf_common+0xc8>
 8007cea:	2000      	movs	r0, #0
 8007cec:	e008      	b.n	8007d00 <_printf_common+0xa8>
 8007cee:	2301      	movs	r3, #1
 8007cf0:	4652      	mov	r2, sl
 8007cf2:	4649      	mov	r1, r9
 8007cf4:	4638      	mov	r0, r7
 8007cf6:	47c0      	blx	r8
 8007cf8:	3001      	adds	r0, #1
 8007cfa:	d103      	bne.n	8007d04 <_printf_common+0xac>
 8007cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d04:	3501      	adds	r5, #1
 8007d06:	e7c6      	b.n	8007c96 <_printf_common+0x3e>
 8007d08:	18e1      	adds	r1, r4, r3
 8007d0a:	1c5a      	adds	r2, r3, #1
 8007d0c:	2030      	movs	r0, #48	; 0x30
 8007d0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d12:	4422      	add	r2, r4
 8007d14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d1c:	3302      	adds	r3, #2
 8007d1e:	e7c7      	b.n	8007cb0 <_printf_common+0x58>
 8007d20:	2301      	movs	r3, #1
 8007d22:	4622      	mov	r2, r4
 8007d24:	4649      	mov	r1, r9
 8007d26:	4638      	mov	r0, r7
 8007d28:	47c0      	blx	r8
 8007d2a:	3001      	adds	r0, #1
 8007d2c:	d0e6      	beq.n	8007cfc <_printf_common+0xa4>
 8007d2e:	3601      	adds	r6, #1
 8007d30:	e7d9      	b.n	8007ce6 <_printf_common+0x8e>
	...

08007d34 <_printf_i>:
 8007d34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d38:	460c      	mov	r4, r1
 8007d3a:	4691      	mov	r9, r2
 8007d3c:	7e27      	ldrb	r7, [r4, #24]
 8007d3e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007d40:	2f78      	cmp	r7, #120	; 0x78
 8007d42:	4680      	mov	r8, r0
 8007d44:	469a      	mov	sl, r3
 8007d46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d4a:	d807      	bhi.n	8007d5c <_printf_i+0x28>
 8007d4c:	2f62      	cmp	r7, #98	; 0x62
 8007d4e:	d80a      	bhi.n	8007d66 <_printf_i+0x32>
 8007d50:	2f00      	cmp	r7, #0
 8007d52:	f000 80d8 	beq.w	8007f06 <_printf_i+0x1d2>
 8007d56:	2f58      	cmp	r7, #88	; 0x58
 8007d58:	f000 80a3 	beq.w	8007ea2 <_printf_i+0x16e>
 8007d5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007d60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d64:	e03a      	b.n	8007ddc <_printf_i+0xa8>
 8007d66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d6a:	2b15      	cmp	r3, #21
 8007d6c:	d8f6      	bhi.n	8007d5c <_printf_i+0x28>
 8007d6e:	a001      	add	r0, pc, #4	; (adr r0, 8007d74 <_printf_i+0x40>)
 8007d70:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007d74:	08007dcd 	.word	0x08007dcd
 8007d78:	08007de1 	.word	0x08007de1
 8007d7c:	08007d5d 	.word	0x08007d5d
 8007d80:	08007d5d 	.word	0x08007d5d
 8007d84:	08007d5d 	.word	0x08007d5d
 8007d88:	08007d5d 	.word	0x08007d5d
 8007d8c:	08007de1 	.word	0x08007de1
 8007d90:	08007d5d 	.word	0x08007d5d
 8007d94:	08007d5d 	.word	0x08007d5d
 8007d98:	08007d5d 	.word	0x08007d5d
 8007d9c:	08007d5d 	.word	0x08007d5d
 8007da0:	08007eed 	.word	0x08007eed
 8007da4:	08007e11 	.word	0x08007e11
 8007da8:	08007ecf 	.word	0x08007ecf
 8007dac:	08007d5d 	.word	0x08007d5d
 8007db0:	08007d5d 	.word	0x08007d5d
 8007db4:	08007f0f 	.word	0x08007f0f
 8007db8:	08007d5d 	.word	0x08007d5d
 8007dbc:	08007e11 	.word	0x08007e11
 8007dc0:	08007d5d 	.word	0x08007d5d
 8007dc4:	08007d5d 	.word	0x08007d5d
 8007dc8:	08007ed7 	.word	0x08007ed7
 8007dcc:	680b      	ldr	r3, [r1, #0]
 8007dce:	1d1a      	adds	r2, r3, #4
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	600a      	str	r2, [r1, #0]
 8007dd4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007dd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e0a3      	b.n	8007f28 <_printf_i+0x1f4>
 8007de0:	6825      	ldr	r5, [r4, #0]
 8007de2:	6808      	ldr	r0, [r1, #0]
 8007de4:	062e      	lsls	r6, r5, #24
 8007de6:	f100 0304 	add.w	r3, r0, #4
 8007dea:	d50a      	bpl.n	8007e02 <_printf_i+0xce>
 8007dec:	6805      	ldr	r5, [r0, #0]
 8007dee:	600b      	str	r3, [r1, #0]
 8007df0:	2d00      	cmp	r5, #0
 8007df2:	da03      	bge.n	8007dfc <_printf_i+0xc8>
 8007df4:	232d      	movs	r3, #45	; 0x2d
 8007df6:	426d      	negs	r5, r5
 8007df8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dfc:	485e      	ldr	r0, [pc, #376]	; (8007f78 <_printf_i+0x244>)
 8007dfe:	230a      	movs	r3, #10
 8007e00:	e019      	b.n	8007e36 <_printf_i+0x102>
 8007e02:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007e06:	6805      	ldr	r5, [r0, #0]
 8007e08:	600b      	str	r3, [r1, #0]
 8007e0a:	bf18      	it	ne
 8007e0c:	b22d      	sxthne	r5, r5
 8007e0e:	e7ef      	b.n	8007df0 <_printf_i+0xbc>
 8007e10:	680b      	ldr	r3, [r1, #0]
 8007e12:	6825      	ldr	r5, [r4, #0]
 8007e14:	1d18      	adds	r0, r3, #4
 8007e16:	6008      	str	r0, [r1, #0]
 8007e18:	0628      	lsls	r0, r5, #24
 8007e1a:	d501      	bpl.n	8007e20 <_printf_i+0xec>
 8007e1c:	681d      	ldr	r5, [r3, #0]
 8007e1e:	e002      	b.n	8007e26 <_printf_i+0xf2>
 8007e20:	0669      	lsls	r1, r5, #25
 8007e22:	d5fb      	bpl.n	8007e1c <_printf_i+0xe8>
 8007e24:	881d      	ldrh	r5, [r3, #0]
 8007e26:	4854      	ldr	r0, [pc, #336]	; (8007f78 <_printf_i+0x244>)
 8007e28:	2f6f      	cmp	r7, #111	; 0x6f
 8007e2a:	bf0c      	ite	eq
 8007e2c:	2308      	moveq	r3, #8
 8007e2e:	230a      	movne	r3, #10
 8007e30:	2100      	movs	r1, #0
 8007e32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e36:	6866      	ldr	r6, [r4, #4]
 8007e38:	60a6      	str	r6, [r4, #8]
 8007e3a:	2e00      	cmp	r6, #0
 8007e3c:	bfa2      	ittt	ge
 8007e3e:	6821      	ldrge	r1, [r4, #0]
 8007e40:	f021 0104 	bicge.w	r1, r1, #4
 8007e44:	6021      	strge	r1, [r4, #0]
 8007e46:	b90d      	cbnz	r5, 8007e4c <_printf_i+0x118>
 8007e48:	2e00      	cmp	r6, #0
 8007e4a:	d04d      	beq.n	8007ee8 <_printf_i+0x1b4>
 8007e4c:	4616      	mov	r6, r2
 8007e4e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e52:	fb03 5711 	mls	r7, r3, r1, r5
 8007e56:	5dc7      	ldrb	r7, [r0, r7]
 8007e58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e5c:	462f      	mov	r7, r5
 8007e5e:	42bb      	cmp	r3, r7
 8007e60:	460d      	mov	r5, r1
 8007e62:	d9f4      	bls.n	8007e4e <_printf_i+0x11a>
 8007e64:	2b08      	cmp	r3, #8
 8007e66:	d10b      	bne.n	8007e80 <_printf_i+0x14c>
 8007e68:	6823      	ldr	r3, [r4, #0]
 8007e6a:	07df      	lsls	r7, r3, #31
 8007e6c:	d508      	bpl.n	8007e80 <_printf_i+0x14c>
 8007e6e:	6923      	ldr	r3, [r4, #16]
 8007e70:	6861      	ldr	r1, [r4, #4]
 8007e72:	4299      	cmp	r1, r3
 8007e74:	bfde      	ittt	le
 8007e76:	2330      	movle	r3, #48	; 0x30
 8007e78:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e7c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007e80:	1b92      	subs	r2, r2, r6
 8007e82:	6122      	str	r2, [r4, #16]
 8007e84:	f8cd a000 	str.w	sl, [sp]
 8007e88:	464b      	mov	r3, r9
 8007e8a:	aa03      	add	r2, sp, #12
 8007e8c:	4621      	mov	r1, r4
 8007e8e:	4640      	mov	r0, r8
 8007e90:	f7ff fee2 	bl	8007c58 <_printf_common>
 8007e94:	3001      	adds	r0, #1
 8007e96:	d14c      	bne.n	8007f32 <_printf_i+0x1fe>
 8007e98:	f04f 30ff 	mov.w	r0, #4294967295
 8007e9c:	b004      	add	sp, #16
 8007e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ea2:	4835      	ldr	r0, [pc, #212]	; (8007f78 <_printf_i+0x244>)
 8007ea4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ea8:	6823      	ldr	r3, [r4, #0]
 8007eaa:	680e      	ldr	r6, [r1, #0]
 8007eac:	061f      	lsls	r7, r3, #24
 8007eae:	f856 5b04 	ldr.w	r5, [r6], #4
 8007eb2:	600e      	str	r6, [r1, #0]
 8007eb4:	d514      	bpl.n	8007ee0 <_printf_i+0x1ac>
 8007eb6:	07d9      	lsls	r1, r3, #31
 8007eb8:	bf44      	itt	mi
 8007eba:	f043 0320 	orrmi.w	r3, r3, #32
 8007ebe:	6023      	strmi	r3, [r4, #0]
 8007ec0:	b91d      	cbnz	r5, 8007eca <_printf_i+0x196>
 8007ec2:	6823      	ldr	r3, [r4, #0]
 8007ec4:	f023 0320 	bic.w	r3, r3, #32
 8007ec8:	6023      	str	r3, [r4, #0]
 8007eca:	2310      	movs	r3, #16
 8007ecc:	e7b0      	b.n	8007e30 <_printf_i+0xfc>
 8007ece:	6823      	ldr	r3, [r4, #0]
 8007ed0:	f043 0320 	orr.w	r3, r3, #32
 8007ed4:	6023      	str	r3, [r4, #0]
 8007ed6:	2378      	movs	r3, #120	; 0x78
 8007ed8:	4828      	ldr	r0, [pc, #160]	; (8007f7c <_printf_i+0x248>)
 8007eda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ede:	e7e3      	b.n	8007ea8 <_printf_i+0x174>
 8007ee0:	065e      	lsls	r6, r3, #25
 8007ee2:	bf48      	it	mi
 8007ee4:	b2ad      	uxthmi	r5, r5
 8007ee6:	e7e6      	b.n	8007eb6 <_printf_i+0x182>
 8007ee8:	4616      	mov	r6, r2
 8007eea:	e7bb      	b.n	8007e64 <_printf_i+0x130>
 8007eec:	680b      	ldr	r3, [r1, #0]
 8007eee:	6826      	ldr	r6, [r4, #0]
 8007ef0:	6960      	ldr	r0, [r4, #20]
 8007ef2:	1d1d      	adds	r5, r3, #4
 8007ef4:	600d      	str	r5, [r1, #0]
 8007ef6:	0635      	lsls	r5, r6, #24
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	d501      	bpl.n	8007f00 <_printf_i+0x1cc>
 8007efc:	6018      	str	r0, [r3, #0]
 8007efe:	e002      	b.n	8007f06 <_printf_i+0x1d2>
 8007f00:	0671      	lsls	r1, r6, #25
 8007f02:	d5fb      	bpl.n	8007efc <_printf_i+0x1c8>
 8007f04:	8018      	strh	r0, [r3, #0]
 8007f06:	2300      	movs	r3, #0
 8007f08:	6123      	str	r3, [r4, #16]
 8007f0a:	4616      	mov	r6, r2
 8007f0c:	e7ba      	b.n	8007e84 <_printf_i+0x150>
 8007f0e:	680b      	ldr	r3, [r1, #0]
 8007f10:	1d1a      	adds	r2, r3, #4
 8007f12:	600a      	str	r2, [r1, #0]
 8007f14:	681e      	ldr	r6, [r3, #0]
 8007f16:	6862      	ldr	r2, [r4, #4]
 8007f18:	2100      	movs	r1, #0
 8007f1a:	4630      	mov	r0, r6
 8007f1c:	f7f8 f980 	bl	8000220 <memchr>
 8007f20:	b108      	cbz	r0, 8007f26 <_printf_i+0x1f2>
 8007f22:	1b80      	subs	r0, r0, r6
 8007f24:	6060      	str	r0, [r4, #4]
 8007f26:	6863      	ldr	r3, [r4, #4]
 8007f28:	6123      	str	r3, [r4, #16]
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f30:	e7a8      	b.n	8007e84 <_printf_i+0x150>
 8007f32:	6923      	ldr	r3, [r4, #16]
 8007f34:	4632      	mov	r2, r6
 8007f36:	4649      	mov	r1, r9
 8007f38:	4640      	mov	r0, r8
 8007f3a:	47d0      	blx	sl
 8007f3c:	3001      	adds	r0, #1
 8007f3e:	d0ab      	beq.n	8007e98 <_printf_i+0x164>
 8007f40:	6823      	ldr	r3, [r4, #0]
 8007f42:	079b      	lsls	r3, r3, #30
 8007f44:	d413      	bmi.n	8007f6e <_printf_i+0x23a>
 8007f46:	68e0      	ldr	r0, [r4, #12]
 8007f48:	9b03      	ldr	r3, [sp, #12]
 8007f4a:	4298      	cmp	r0, r3
 8007f4c:	bfb8      	it	lt
 8007f4e:	4618      	movlt	r0, r3
 8007f50:	e7a4      	b.n	8007e9c <_printf_i+0x168>
 8007f52:	2301      	movs	r3, #1
 8007f54:	4632      	mov	r2, r6
 8007f56:	4649      	mov	r1, r9
 8007f58:	4640      	mov	r0, r8
 8007f5a:	47d0      	blx	sl
 8007f5c:	3001      	adds	r0, #1
 8007f5e:	d09b      	beq.n	8007e98 <_printf_i+0x164>
 8007f60:	3501      	adds	r5, #1
 8007f62:	68e3      	ldr	r3, [r4, #12]
 8007f64:	9903      	ldr	r1, [sp, #12]
 8007f66:	1a5b      	subs	r3, r3, r1
 8007f68:	42ab      	cmp	r3, r5
 8007f6a:	dcf2      	bgt.n	8007f52 <_printf_i+0x21e>
 8007f6c:	e7eb      	b.n	8007f46 <_printf_i+0x212>
 8007f6e:	2500      	movs	r5, #0
 8007f70:	f104 0619 	add.w	r6, r4, #25
 8007f74:	e7f5      	b.n	8007f62 <_printf_i+0x22e>
 8007f76:	bf00      	nop
 8007f78:	08009f86 	.word	0x08009f86
 8007f7c:	08009f97 	.word	0x08009f97

08007f80 <iprintf>:
 8007f80:	b40f      	push	{r0, r1, r2, r3}
 8007f82:	4b0a      	ldr	r3, [pc, #40]	; (8007fac <iprintf+0x2c>)
 8007f84:	b513      	push	{r0, r1, r4, lr}
 8007f86:	681c      	ldr	r4, [r3, #0]
 8007f88:	b124      	cbz	r4, 8007f94 <iprintf+0x14>
 8007f8a:	69a3      	ldr	r3, [r4, #24]
 8007f8c:	b913      	cbnz	r3, 8007f94 <iprintf+0x14>
 8007f8e:	4620      	mov	r0, r4
 8007f90:	f000 feee 	bl	8008d70 <__sinit>
 8007f94:	ab05      	add	r3, sp, #20
 8007f96:	9a04      	ldr	r2, [sp, #16]
 8007f98:	68a1      	ldr	r1, [r4, #8]
 8007f9a:	9301      	str	r3, [sp, #4]
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	f001 fb59 	bl	8009654 <_vfiprintf_r>
 8007fa2:	b002      	add	sp, #8
 8007fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fa8:	b004      	add	sp, #16
 8007faa:	4770      	bx	lr
 8007fac:	20000010 	.word	0x20000010

08007fb0 <_sbrk_r>:
 8007fb0:	b538      	push	{r3, r4, r5, lr}
 8007fb2:	4d06      	ldr	r5, [pc, #24]	; (8007fcc <_sbrk_r+0x1c>)
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	4604      	mov	r4, r0
 8007fb8:	4608      	mov	r0, r1
 8007fba:	602b      	str	r3, [r5, #0]
 8007fbc:	f7fa fae2 	bl	8002584 <_sbrk>
 8007fc0:	1c43      	adds	r3, r0, #1
 8007fc2:	d102      	bne.n	8007fca <_sbrk_r+0x1a>
 8007fc4:	682b      	ldr	r3, [r5, #0]
 8007fc6:	b103      	cbz	r3, 8007fca <_sbrk_r+0x1a>
 8007fc8:	6023      	str	r3, [r4, #0]
 8007fca:	bd38      	pop	{r3, r4, r5, pc}
 8007fcc:	20008580 	.word	0x20008580

08007fd0 <quorem>:
 8007fd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd4:	6903      	ldr	r3, [r0, #16]
 8007fd6:	690c      	ldr	r4, [r1, #16]
 8007fd8:	42a3      	cmp	r3, r4
 8007fda:	4607      	mov	r7, r0
 8007fdc:	f2c0 8081 	blt.w	80080e2 <quorem+0x112>
 8007fe0:	3c01      	subs	r4, #1
 8007fe2:	f101 0814 	add.w	r8, r1, #20
 8007fe6:	f100 0514 	add.w	r5, r0, #20
 8007fea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007fee:	9301      	str	r3, [sp, #4]
 8007ff0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007ff4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008000:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008004:	fbb2 f6f3 	udiv	r6, r2, r3
 8008008:	d331      	bcc.n	800806e <quorem+0x9e>
 800800a:	f04f 0e00 	mov.w	lr, #0
 800800e:	4640      	mov	r0, r8
 8008010:	46ac      	mov	ip, r5
 8008012:	46f2      	mov	sl, lr
 8008014:	f850 2b04 	ldr.w	r2, [r0], #4
 8008018:	b293      	uxth	r3, r2
 800801a:	fb06 e303 	mla	r3, r6, r3, lr
 800801e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008022:	b29b      	uxth	r3, r3
 8008024:	ebaa 0303 	sub.w	r3, sl, r3
 8008028:	0c12      	lsrs	r2, r2, #16
 800802a:	f8dc a000 	ldr.w	sl, [ip]
 800802e:	fb06 e202 	mla	r2, r6, r2, lr
 8008032:	fa13 f38a 	uxtah	r3, r3, sl
 8008036:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800803a:	fa1f fa82 	uxth.w	sl, r2
 800803e:	f8dc 2000 	ldr.w	r2, [ip]
 8008042:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008046:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800804a:	b29b      	uxth	r3, r3
 800804c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008050:	4581      	cmp	r9, r0
 8008052:	f84c 3b04 	str.w	r3, [ip], #4
 8008056:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800805a:	d2db      	bcs.n	8008014 <quorem+0x44>
 800805c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008060:	b92b      	cbnz	r3, 800806e <quorem+0x9e>
 8008062:	9b01      	ldr	r3, [sp, #4]
 8008064:	3b04      	subs	r3, #4
 8008066:	429d      	cmp	r5, r3
 8008068:	461a      	mov	r2, r3
 800806a:	d32e      	bcc.n	80080ca <quorem+0xfa>
 800806c:	613c      	str	r4, [r7, #16]
 800806e:	4638      	mov	r0, r7
 8008070:	f001 f9b8 	bl	80093e4 <__mcmp>
 8008074:	2800      	cmp	r0, #0
 8008076:	db24      	blt.n	80080c2 <quorem+0xf2>
 8008078:	3601      	adds	r6, #1
 800807a:	4628      	mov	r0, r5
 800807c:	f04f 0c00 	mov.w	ip, #0
 8008080:	f858 2b04 	ldr.w	r2, [r8], #4
 8008084:	f8d0 e000 	ldr.w	lr, [r0]
 8008088:	b293      	uxth	r3, r2
 800808a:	ebac 0303 	sub.w	r3, ip, r3
 800808e:	0c12      	lsrs	r2, r2, #16
 8008090:	fa13 f38e 	uxtah	r3, r3, lr
 8008094:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008098:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800809c:	b29b      	uxth	r3, r3
 800809e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080a2:	45c1      	cmp	r9, r8
 80080a4:	f840 3b04 	str.w	r3, [r0], #4
 80080a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80080ac:	d2e8      	bcs.n	8008080 <quorem+0xb0>
 80080ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080b6:	b922      	cbnz	r2, 80080c2 <quorem+0xf2>
 80080b8:	3b04      	subs	r3, #4
 80080ba:	429d      	cmp	r5, r3
 80080bc:	461a      	mov	r2, r3
 80080be:	d30a      	bcc.n	80080d6 <quorem+0x106>
 80080c0:	613c      	str	r4, [r7, #16]
 80080c2:	4630      	mov	r0, r6
 80080c4:	b003      	add	sp, #12
 80080c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ca:	6812      	ldr	r2, [r2, #0]
 80080cc:	3b04      	subs	r3, #4
 80080ce:	2a00      	cmp	r2, #0
 80080d0:	d1cc      	bne.n	800806c <quorem+0x9c>
 80080d2:	3c01      	subs	r4, #1
 80080d4:	e7c7      	b.n	8008066 <quorem+0x96>
 80080d6:	6812      	ldr	r2, [r2, #0]
 80080d8:	3b04      	subs	r3, #4
 80080da:	2a00      	cmp	r2, #0
 80080dc:	d1f0      	bne.n	80080c0 <quorem+0xf0>
 80080de:	3c01      	subs	r4, #1
 80080e0:	e7eb      	b.n	80080ba <quorem+0xea>
 80080e2:	2000      	movs	r0, #0
 80080e4:	e7ee      	b.n	80080c4 <quorem+0xf4>
	...

080080e8 <_dtoa_r>:
 80080e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ec:	ed2d 8b02 	vpush	{d8}
 80080f0:	ec57 6b10 	vmov	r6, r7, d0
 80080f4:	b095      	sub	sp, #84	; 0x54
 80080f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80080f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80080fc:	9105      	str	r1, [sp, #20]
 80080fe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008102:	4604      	mov	r4, r0
 8008104:	9209      	str	r2, [sp, #36]	; 0x24
 8008106:	930f      	str	r3, [sp, #60]	; 0x3c
 8008108:	b975      	cbnz	r5, 8008128 <_dtoa_r+0x40>
 800810a:	2010      	movs	r0, #16
 800810c:	f7ff fa14 	bl	8007538 <malloc>
 8008110:	4602      	mov	r2, r0
 8008112:	6260      	str	r0, [r4, #36]	; 0x24
 8008114:	b920      	cbnz	r0, 8008120 <_dtoa_r+0x38>
 8008116:	4bb2      	ldr	r3, [pc, #712]	; (80083e0 <_dtoa_r+0x2f8>)
 8008118:	21ea      	movs	r1, #234	; 0xea
 800811a:	48b2      	ldr	r0, [pc, #712]	; (80083e4 <_dtoa_r+0x2fc>)
 800811c:	f001 fce0 	bl	8009ae0 <__assert_func>
 8008120:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008124:	6005      	str	r5, [r0, #0]
 8008126:	60c5      	str	r5, [r0, #12]
 8008128:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800812a:	6819      	ldr	r1, [r3, #0]
 800812c:	b151      	cbz	r1, 8008144 <_dtoa_r+0x5c>
 800812e:	685a      	ldr	r2, [r3, #4]
 8008130:	604a      	str	r2, [r1, #4]
 8008132:	2301      	movs	r3, #1
 8008134:	4093      	lsls	r3, r2
 8008136:	608b      	str	r3, [r1, #8]
 8008138:	4620      	mov	r0, r4
 800813a:	f000 ff15 	bl	8008f68 <_Bfree>
 800813e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008140:	2200      	movs	r2, #0
 8008142:	601a      	str	r2, [r3, #0]
 8008144:	1e3b      	subs	r3, r7, #0
 8008146:	bfb9      	ittee	lt
 8008148:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800814c:	9303      	strlt	r3, [sp, #12]
 800814e:	2300      	movge	r3, #0
 8008150:	f8c8 3000 	strge.w	r3, [r8]
 8008154:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008158:	4ba3      	ldr	r3, [pc, #652]	; (80083e8 <_dtoa_r+0x300>)
 800815a:	bfbc      	itt	lt
 800815c:	2201      	movlt	r2, #1
 800815e:	f8c8 2000 	strlt.w	r2, [r8]
 8008162:	ea33 0309 	bics.w	r3, r3, r9
 8008166:	d11b      	bne.n	80081a0 <_dtoa_r+0xb8>
 8008168:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800816a:	f242 730f 	movw	r3, #9999	; 0x270f
 800816e:	6013      	str	r3, [r2, #0]
 8008170:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008174:	4333      	orrs	r3, r6
 8008176:	f000 857a 	beq.w	8008c6e <_dtoa_r+0xb86>
 800817a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800817c:	b963      	cbnz	r3, 8008198 <_dtoa_r+0xb0>
 800817e:	4b9b      	ldr	r3, [pc, #620]	; (80083ec <_dtoa_r+0x304>)
 8008180:	e024      	b.n	80081cc <_dtoa_r+0xe4>
 8008182:	4b9b      	ldr	r3, [pc, #620]	; (80083f0 <_dtoa_r+0x308>)
 8008184:	9300      	str	r3, [sp, #0]
 8008186:	3308      	adds	r3, #8
 8008188:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800818a:	6013      	str	r3, [r2, #0]
 800818c:	9800      	ldr	r0, [sp, #0]
 800818e:	b015      	add	sp, #84	; 0x54
 8008190:	ecbd 8b02 	vpop	{d8}
 8008194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008198:	4b94      	ldr	r3, [pc, #592]	; (80083ec <_dtoa_r+0x304>)
 800819a:	9300      	str	r3, [sp, #0]
 800819c:	3303      	adds	r3, #3
 800819e:	e7f3      	b.n	8008188 <_dtoa_r+0xa0>
 80081a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80081a4:	2200      	movs	r2, #0
 80081a6:	ec51 0b17 	vmov	r0, r1, d7
 80081aa:	2300      	movs	r3, #0
 80081ac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80081b0:	f7f8 fcaa 	bl	8000b08 <__aeabi_dcmpeq>
 80081b4:	4680      	mov	r8, r0
 80081b6:	b158      	cbz	r0, 80081d0 <_dtoa_r+0xe8>
 80081b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80081ba:	2301      	movs	r3, #1
 80081bc:	6013      	str	r3, [r2, #0]
 80081be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f000 8551 	beq.w	8008c68 <_dtoa_r+0xb80>
 80081c6:	488b      	ldr	r0, [pc, #556]	; (80083f4 <_dtoa_r+0x30c>)
 80081c8:	6018      	str	r0, [r3, #0]
 80081ca:	1e43      	subs	r3, r0, #1
 80081cc:	9300      	str	r3, [sp, #0]
 80081ce:	e7dd      	b.n	800818c <_dtoa_r+0xa4>
 80081d0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80081d4:	aa12      	add	r2, sp, #72	; 0x48
 80081d6:	a913      	add	r1, sp, #76	; 0x4c
 80081d8:	4620      	mov	r0, r4
 80081da:	f001 f9a7 	bl	800952c <__d2b>
 80081de:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80081e2:	4683      	mov	fp, r0
 80081e4:	2d00      	cmp	r5, #0
 80081e6:	d07c      	beq.n	80082e2 <_dtoa_r+0x1fa>
 80081e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081ea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80081ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081f2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80081f6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80081fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80081fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008202:	4b7d      	ldr	r3, [pc, #500]	; (80083f8 <_dtoa_r+0x310>)
 8008204:	2200      	movs	r2, #0
 8008206:	4630      	mov	r0, r6
 8008208:	4639      	mov	r1, r7
 800820a:	f7f8 f85d 	bl	80002c8 <__aeabi_dsub>
 800820e:	a36e      	add	r3, pc, #440	; (adr r3, 80083c8 <_dtoa_r+0x2e0>)
 8008210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008214:	f7f8 fa10 	bl	8000638 <__aeabi_dmul>
 8008218:	a36d      	add	r3, pc, #436	; (adr r3, 80083d0 <_dtoa_r+0x2e8>)
 800821a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821e:	f7f8 f855 	bl	80002cc <__adddf3>
 8008222:	4606      	mov	r6, r0
 8008224:	4628      	mov	r0, r5
 8008226:	460f      	mov	r7, r1
 8008228:	f7f8 f99c 	bl	8000564 <__aeabi_i2d>
 800822c:	a36a      	add	r3, pc, #424	; (adr r3, 80083d8 <_dtoa_r+0x2f0>)
 800822e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008232:	f7f8 fa01 	bl	8000638 <__aeabi_dmul>
 8008236:	4602      	mov	r2, r0
 8008238:	460b      	mov	r3, r1
 800823a:	4630      	mov	r0, r6
 800823c:	4639      	mov	r1, r7
 800823e:	f7f8 f845 	bl	80002cc <__adddf3>
 8008242:	4606      	mov	r6, r0
 8008244:	460f      	mov	r7, r1
 8008246:	f7f8 fca7 	bl	8000b98 <__aeabi_d2iz>
 800824a:	2200      	movs	r2, #0
 800824c:	4682      	mov	sl, r0
 800824e:	2300      	movs	r3, #0
 8008250:	4630      	mov	r0, r6
 8008252:	4639      	mov	r1, r7
 8008254:	f7f8 fc62 	bl	8000b1c <__aeabi_dcmplt>
 8008258:	b148      	cbz	r0, 800826e <_dtoa_r+0x186>
 800825a:	4650      	mov	r0, sl
 800825c:	f7f8 f982 	bl	8000564 <__aeabi_i2d>
 8008260:	4632      	mov	r2, r6
 8008262:	463b      	mov	r3, r7
 8008264:	f7f8 fc50 	bl	8000b08 <__aeabi_dcmpeq>
 8008268:	b908      	cbnz	r0, 800826e <_dtoa_r+0x186>
 800826a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800826e:	f1ba 0f16 	cmp.w	sl, #22
 8008272:	d854      	bhi.n	800831e <_dtoa_r+0x236>
 8008274:	4b61      	ldr	r3, [pc, #388]	; (80083fc <_dtoa_r+0x314>)
 8008276:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800827a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008282:	f7f8 fc4b 	bl	8000b1c <__aeabi_dcmplt>
 8008286:	2800      	cmp	r0, #0
 8008288:	d04b      	beq.n	8008322 <_dtoa_r+0x23a>
 800828a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800828e:	2300      	movs	r3, #0
 8008290:	930e      	str	r3, [sp, #56]	; 0x38
 8008292:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008294:	1b5d      	subs	r5, r3, r5
 8008296:	1e6b      	subs	r3, r5, #1
 8008298:	9304      	str	r3, [sp, #16]
 800829a:	bf43      	ittte	mi
 800829c:	2300      	movmi	r3, #0
 800829e:	f1c5 0801 	rsbmi	r8, r5, #1
 80082a2:	9304      	strmi	r3, [sp, #16]
 80082a4:	f04f 0800 	movpl.w	r8, #0
 80082a8:	f1ba 0f00 	cmp.w	sl, #0
 80082ac:	db3b      	blt.n	8008326 <_dtoa_r+0x23e>
 80082ae:	9b04      	ldr	r3, [sp, #16]
 80082b0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80082b4:	4453      	add	r3, sl
 80082b6:	9304      	str	r3, [sp, #16]
 80082b8:	2300      	movs	r3, #0
 80082ba:	9306      	str	r3, [sp, #24]
 80082bc:	9b05      	ldr	r3, [sp, #20]
 80082be:	2b09      	cmp	r3, #9
 80082c0:	d869      	bhi.n	8008396 <_dtoa_r+0x2ae>
 80082c2:	2b05      	cmp	r3, #5
 80082c4:	bfc4      	itt	gt
 80082c6:	3b04      	subgt	r3, #4
 80082c8:	9305      	strgt	r3, [sp, #20]
 80082ca:	9b05      	ldr	r3, [sp, #20]
 80082cc:	f1a3 0302 	sub.w	r3, r3, #2
 80082d0:	bfcc      	ite	gt
 80082d2:	2500      	movgt	r5, #0
 80082d4:	2501      	movle	r5, #1
 80082d6:	2b03      	cmp	r3, #3
 80082d8:	d869      	bhi.n	80083ae <_dtoa_r+0x2c6>
 80082da:	e8df f003 	tbb	[pc, r3]
 80082de:	4e2c      	.short	0x4e2c
 80082e0:	5a4c      	.short	0x5a4c
 80082e2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80082e6:	441d      	add	r5, r3
 80082e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80082ec:	2b20      	cmp	r3, #32
 80082ee:	bfc1      	itttt	gt
 80082f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80082f4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80082f8:	fa09 f303 	lslgt.w	r3, r9, r3
 80082fc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008300:	bfda      	itte	le
 8008302:	f1c3 0320 	rsble	r3, r3, #32
 8008306:	fa06 f003 	lslle.w	r0, r6, r3
 800830a:	4318      	orrgt	r0, r3
 800830c:	f7f8 f91a 	bl	8000544 <__aeabi_ui2d>
 8008310:	2301      	movs	r3, #1
 8008312:	4606      	mov	r6, r0
 8008314:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008318:	3d01      	subs	r5, #1
 800831a:	9310      	str	r3, [sp, #64]	; 0x40
 800831c:	e771      	b.n	8008202 <_dtoa_r+0x11a>
 800831e:	2301      	movs	r3, #1
 8008320:	e7b6      	b.n	8008290 <_dtoa_r+0x1a8>
 8008322:	900e      	str	r0, [sp, #56]	; 0x38
 8008324:	e7b5      	b.n	8008292 <_dtoa_r+0x1aa>
 8008326:	f1ca 0300 	rsb	r3, sl, #0
 800832a:	9306      	str	r3, [sp, #24]
 800832c:	2300      	movs	r3, #0
 800832e:	eba8 080a 	sub.w	r8, r8, sl
 8008332:	930d      	str	r3, [sp, #52]	; 0x34
 8008334:	e7c2      	b.n	80082bc <_dtoa_r+0x1d4>
 8008336:	2300      	movs	r3, #0
 8008338:	9308      	str	r3, [sp, #32]
 800833a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800833c:	2b00      	cmp	r3, #0
 800833e:	dc39      	bgt.n	80083b4 <_dtoa_r+0x2cc>
 8008340:	f04f 0901 	mov.w	r9, #1
 8008344:	f8cd 9004 	str.w	r9, [sp, #4]
 8008348:	464b      	mov	r3, r9
 800834a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800834e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008350:	2200      	movs	r2, #0
 8008352:	6042      	str	r2, [r0, #4]
 8008354:	2204      	movs	r2, #4
 8008356:	f102 0614 	add.w	r6, r2, #20
 800835a:	429e      	cmp	r6, r3
 800835c:	6841      	ldr	r1, [r0, #4]
 800835e:	d92f      	bls.n	80083c0 <_dtoa_r+0x2d8>
 8008360:	4620      	mov	r0, r4
 8008362:	f000 fdc1 	bl	8008ee8 <_Balloc>
 8008366:	9000      	str	r0, [sp, #0]
 8008368:	2800      	cmp	r0, #0
 800836a:	d14b      	bne.n	8008404 <_dtoa_r+0x31c>
 800836c:	4b24      	ldr	r3, [pc, #144]	; (8008400 <_dtoa_r+0x318>)
 800836e:	4602      	mov	r2, r0
 8008370:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008374:	e6d1      	b.n	800811a <_dtoa_r+0x32>
 8008376:	2301      	movs	r3, #1
 8008378:	e7de      	b.n	8008338 <_dtoa_r+0x250>
 800837a:	2300      	movs	r3, #0
 800837c:	9308      	str	r3, [sp, #32]
 800837e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008380:	eb0a 0903 	add.w	r9, sl, r3
 8008384:	f109 0301 	add.w	r3, r9, #1
 8008388:	2b01      	cmp	r3, #1
 800838a:	9301      	str	r3, [sp, #4]
 800838c:	bfb8      	it	lt
 800838e:	2301      	movlt	r3, #1
 8008390:	e7dd      	b.n	800834e <_dtoa_r+0x266>
 8008392:	2301      	movs	r3, #1
 8008394:	e7f2      	b.n	800837c <_dtoa_r+0x294>
 8008396:	2501      	movs	r5, #1
 8008398:	2300      	movs	r3, #0
 800839a:	9305      	str	r3, [sp, #20]
 800839c:	9508      	str	r5, [sp, #32]
 800839e:	f04f 39ff 	mov.w	r9, #4294967295
 80083a2:	2200      	movs	r2, #0
 80083a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80083a8:	2312      	movs	r3, #18
 80083aa:	9209      	str	r2, [sp, #36]	; 0x24
 80083ac:	e7cf      	b.n	800834e <_dtoa_r+0x266>
 80083ae:	2301      	movs	r3, #1
 80083b0:	9308      	str	r3, [sp, #32]
 80083b2:	e7f4      	b.n	800839e <_dtoa_r+0x2b6>
 80083b4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80083b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80083bc:	464b      	mov	r3, r9
 80083be:	e7c6      	b.n	800834e <_dtoa_r+0x266>
 80083c0:	3101      	adds	r1, #1
 80083c2:	6041      	str	r1, [r0, #4]
 80083c4:	0052      	lsls	r2, r2, #1
 80083c6:	e7c6      	b.n	8008356 <_dtoa_r+0x26e>
 80083c8:	636f4361 	.word	0x636f4361
 80083cc:	3fd287a7 	.word	0x3fd287a7
 80083d0:	8b60c8b3 	.word	0x8b60c8b3
 80083d4:	3fc68a28 	.word	0x3fc68a28
 80083d8:	509f79fb 	.word	0x509f79fb
 80083dc:	3fd34413 	.word	0x3fd34413
 80083e0:	08009fb5 	.word	0x08009fb5
 80083e4:	08009fcc 	.word	0x08009fcc
 80083e8:	7ff00000 	.word	0x7ff00000
 80083ec:	08009fb1 	.word	0x08009fb1
 80083f0:	08009fa8 	.word	0x08009fa8
 80083f4:	08009f85 	.word	0x08009f85
 80083f8:	3ff80000 	.word	0x3ff80000
 80083fc:	0800a128 	.word	0x0800a128
 8008400:	0800a02b 	.word	0x0800a02b
 8008404:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008406:	9a00      	ldr	r2, [sp, #0]
 8008408:	601a      	str	r2, [r3, #0]
 800840a:	9b01      	ldr	r3, [sp, #4]
 800840c:	2b0e      	cmp	r3, #14
 800840e:	f200 80ad 	bhi.w	800856c <_dtoa_r+0x484>
 8008412:	2d00      	cmp	r5, #0
 8008414:	f000 80aa 	beq.w	800856c <_dtoa_r+0x484>
 8008418:	f1ba 0f00 	cmp.w	sl, #0
 800841c:	dd36      	ble.n	800848c <_dtoa_r+0x3a4>
 800841e:	4ac3      	ldr	r2, [pc, #780]	; (800872c <_dtoa_r+0x644>)
 8008420:	f00a 030f 	and.w	r3, sl, #15
 8008424:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008428:	ed93 7b00 	vldr	d7, [r3]
 800842c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008430:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008434:	eeb0 8a47 	vmov.f32	s16, s14
 8008438:	eef0 8a67 	vmov.f32	s17, s15
 800843c:	d016      	beq.n	800846c <_dtoa_r+0x384>
 800843e:	4bbc      	ldr	r3, [pc, #752]	; (8008730 <_dtoa_r+0x648>)
 8008440:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008444:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008448:	f7f8 fa20 	bl	800088c <__aeabi_ddiv>
 800844c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008450:	f007 070f 	and.w	r7, r7, #15
 8008454:	2503      	movs	r5, #3
 8008456:	4eb6      	ldr	r6, [pc, #728]	; (8008730 <_dtoa_r+0x648>)
 8008458:	b957      	cbnz	r7, 8008470 <_dtoa_r+0x388>
 800845a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800845e:	ec53 2b18 	vmov	r2, r3, d8
 8008462:	f7f8 fa13 	bl	800088c <__aeabi_ddiv>
 8008466:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800846a:	e029      	b.n	80084c0 <_dtoa_r+0x3d8>
 800846c:	2502      	movs	r5, #2
 800846e:	e7f2      	b.n	8008456 <_dtoa_r+0x36e>
 8008470:	07f9      	lsls	r1, r7, #31
 8008472:	d508      	bpl.n	8008486 <_dtoa_r+0x39e>
 8008474:	ec51 0b18 	vmov	r0, r1, d8
 8008478:	e9d6 2300 	ldrd	r2, r3, [r6]
 800847c:	f7f8 f8dc 	bl	8000638 <__aeabi_dmul>
 8008480:	ec41 0b18 	vmov	d8, r0, r1
 8008484:	3501      	adds	r5, #1
 8008486:	107f      	asrs	r7, r7, #1
 8008488:	3608      	adds	r6, #8
 800848a:	e7e5      	b.n	8008458 <_dtoa_r+0x370>
 800848c:	f000 80a6 	beq.w	80085dc <_dtoa_r+0x4f4>
 8008490:	f1ca 0600 	rsb	r6, sl, #0
 8008494:	4ba5      	ldr	r3, [pc, #660]	; (800872c <_dtoa_r+0x644>)
 8008496:	4fa6      	ldr	r7, [pc, #664]	; (8008730 <_dtoa_r+0x648>)
 8008498:	f006 020f 	and.w	r2, r6, #15
 800849c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80084a8:	f7f8 f8c6 	bl	8000638 <__aeabi_dmul>
 80084ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084b0:	1136      	asrs	r6, r6, #4
 80084b2:	2300      	movs	r3, #0
 80084b4:	2502      	movs	r5, #2
 80084b6:	2e00      	cmp	r6, #0
 80084b8:	f040 8085 	bne.w	80085c6 <_dtoa_r+0x4de>
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d1d2      	bne.n	8008466 <_dtoa_r+0x37e>
 80084c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	f000 808c 	beq.w	80085e0 <_dtoa_r+0x4f8>
 80084c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80084cc:	4b99      	ldr	r3, [pc, #612]	; (8008734 <_dtoa_r+0x64c>)
 80084ce:	2200      	movs	r2, #0
 80084d0:	4630      	mov	r0, r6
 80084d2:	4639      	mov	r1, r7
 80084d4:	f7f8 fb22 	bl	8000b1c <__aeabi_dcmplt>
 80084d8:	2800      	cmp	r0, #0
 80084da:	f000 8081 	beq.w	80085e0 <_dtoa_r+0x4f8>
 80084de:	9b01      	ldr	r3, [sp, #4]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d07d      	beq.n	80085e0 <_dtoa_r+0x4f8>
 80084e4:	f1b9 0f00 	cmp.w	r9, #0
 80084e8:	dd3c      	ble.n	8008564 <_dtoa_r+0x47c>
 80084ea:	f10a 33ff 	add.w	r3, sl, #4294967295
 80084ee:	9307      	str	r3, [sp, #28]
 80084f0:	2200      	movs	r2, #0
 80084f2:	4b91      	ldr	r3, [pc, #580]	; (8008738 <_dtoa_r+0x650>)
 80084f4:	4630      	mov	r0, r6
 80084f6:	4639      	mov	r1, r7
 80084f8:	f7f8 f89e 	bl	8000638 <__aeabi_dmul>
 80084fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008500:	3501      	adds	r5, #1
 8008502:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008506:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800850a:	4628      	mov	r0, r5
 800850c:	f7f8 f82a 	bl	8000564 <__aeabi_i2d>
 8008510:	4632      	mov	r2, r6
 8008512:	463b      	mov	r3, r7
 8008514:	f7f8 f890 	bl	8000638 <__aeabi_dmul>
 8008518:	4b88      	ldr	r3, [pc, #544]	; (800873c <_dtoa_r+0x654>)
 800851a:	2200      	movs	r2, #0
 800851c:	f7f7 fed6 	bl	80002cc <__adddf3>
 8008520:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008528:	9303      	str	r3, [sp, #12]
 800852a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800852c:	2b00      	cmp	r3, #0
 800852e:	d15c      	bne.n	80085ea <_dtoa_r+0x502>
 8008530:	4b83      	ldr	r3, [pc, #524]	; (8008740 <_dtoa_r+0x658>)
 8008532:	2200      	movs	r2, #0
 8008534:	4630      	mov	r0, r6
 8008536:	4639      	mov	r1, r7
 8008538:	f7f7 fec6 	bl	80002c8 <__aeabi_dsub>
 800853c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008540:	4606      	mov	r6, r0
 8008542:	460f      	mov	r7, r1
 8008544:	f7f8 fb08 	bl	8000b58 <__aeabi_dcmpgt>
 8008548:	2800      	cmp	r0, #0
 800854a:	f040 8296 	bne.w	8008a7a <_dtoa_r+0x992>
 800854e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008552:	4630      	mov	r0, r6
 8008554:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008558:	4639      	mov	r1, r7
 800855a:	f7f8 fadf 	bl	8000b1c <__aeabi_dcmplt>
 800855e:	2800      	cmp	r0, #0
 8008560:	f040 8288 	bne.w	8008a74 <_dtoa_r+0x98c>
 8008564:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008568:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800856c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800856e:	2b00      	cmp	r3, #0
 8008570:	f2c0 8158 	blt.w	8008824 <_dtoa_r+0x73c>
 8008574:	f1ba 0f0e 	cmp.w	sl, #14
 8008578:	f300 8154 	bgt.w	8008824 <_dtoa_r+0x73c>
 800857c:	4b6b      	ldr	r3, [pc, #428]	; (800872c <_dtoa_r+0x644>)
 800857e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008582:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008588:	2b00      	cmp	r3, #0
 800858a:	f280 80e3 	bge.w	8008754 <_dtoa_r+0x66c>
 800858e:	9b01      	ldr	r3, [sp, #4]
 8008590:	2b00      	cmp	r3, #0
 8008592:	f300 80df 	bgt.w	8008754 <_dtoa_r+0x66c>
 8008596:	f040 826d 	bne.w	8008a74 <_dtoa_r+0x98c>
 800859a:	4b69      	ldr	r3, [pc, #420]	; (8008740 <_dtoa_r+0x658>)
 800859c:	2200      	movs	r2, #0
 800859e:	4640      	mov	r0, r8
 80085a0:	4649      	mov	r1, r9
 80085a2:	f7f8 f849 	bl	8000638 <__aeabi_dmul>
 80085a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085aa:	f7f8 facb 	bl	8000b44 <__aeabi_dcmpge>
 80085ae:	9e01      	ldr	r6, [sp, #4]
 80085b0:	4637      	mov	r7, r6
 80085b2:	2800      	cmp	r0, #0
 80085b4:	f040 8243 	bne.w	8008a3e <_dtoa_r+0x956>
 80085b8:	9d00      	ldr	r5, [sp, #0]
 80085ba:	2331      	movs	r3, #49	; 0x31
 80085bc:	f805 3b01 	strb.w	r3, [r5], #1
 80085c0:	f10a 0a01 	add.w	sl, sl, #1
 80085c4:	e23f      	b.n	8008a46 <_dtoa_r+0x95e>
 80085c6:	07f2      	lsls	r2, r6, #31
 80085c8:	d505      	bpl.n	80085d6 <_dtoa_r+0x4ee>
 80085ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085ce:	f7f8 f833 	bl	8000638 <__aeabi_dmul>
 80085d2:	3501      	adds	r5, #1
 80085d4:	2301      	movs	r3, #1
 80085d6:	1076      	asrs	r6, r6, #1
 80085d8:	3708      	adds	r7, #8
 80085da:	e76c      	b.n	80084b6 <_dtoa_r+0x3ce>
 80085dc:	2502      	movs	r5, #2
 80085de:	e76f      	b.n	80084c0 <_dtoa_r+0x3d8>
 80085e0:	9b01      	ldr	r3, [sp, #4]
 80085e2:	f8cd a01c 	str.w	sl, [sp, #28]
 80085e6:	930c      	str	r3, [sp, #48]	; 0x30
 80085e8:	e78d      	b.n	8008506 <_dtoa_r+0x41e>
 80085ea:	9900      	ldr	r1, [sp, #0]
 80085ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 80085ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80085f0:	4b4e      	ldr	r3, [pc, #312]	; (800872c <_dtoa_r+0x644>)
 80085f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80085f6:	4401      	add	r1, r0
 80085f8:	9102      	str	r1, [sp, #8]
 80085fa:	9908      	ldr	r1, [sp, #32]
 80085fc:	eeb0 8a47 	vmov.f32	s16, s14
 8008600:	eef0 8a67 	vmov.f32	s17, s15
 8008604:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008608:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800860c:	2900      	cmp	r1, #0
 800860e:	d045      	beq.n	800869c <_dtoa_r+0x5b4>
 8008610:	494c      	ldr	r1, [pc, #304]	; (8008744 <_dtoa_r+0x65c>)
 8008612:	2000      	movs	r0, #0
 8008614:	f7f8 f93a 	bl	800088c <__aeabi_ddiv>
 8008618:	ec53 2b18 	vmov	r2, r3, d8
 800861c:	f7f7 fe54 	bl	80002c8 <__aeabi_dsub>
 8008620:	9d00      	ldr	r5, [sp, #0]
 8008622:	ec41 0b18 	vmov	d8, r0, r1
 8008626:	4639      	mov	r1, r7
 8008628:	4630      	mov	r0, r6
 800862a:	f7f8 fab5 	bl	8000b98 <__aeabi_d2iz>
 800862e:	900c      	str	r0, [sp, #48]	; 0x30
 8008630:	f7f7 ff98 	bl	8000564 <__aeabi_i2d>
 8008634:	4602      	mov	r2, r0
 8008636:	460b      	mov	r3, r1
 8008638:	4630      	mov	r0, r6
 800863a:	4639      	mov	r1, r7
 800863c:	f7f7 fe44 	bl	80002c8 <__aeabi_dsub>
 8008640:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008642:	3330      	adds	r3, #48	; 0x30
 8008644:	f805 3b01 	strb.w	r3, [r5], #1
 8008648:	ec53 2b18 	vmov	r2, r3, d8
 800864c:	4606      	mov	r6, r0
 800864e:	460f      	mov	r7, r1
 8008650:	f7f8 fa64 	bl	8000b1c <__aeabi_dcmplt>
 8008654:	2800      	cmp	r0, #0
 8008656:	d165      	bne.n	8008724 <_dtoa_r+0x63c>
 8008658:	4632      	mov	r2, r6
 800865a:	463b      	mov	r3, r7
 800865c:	4935      	ldr	r1, [pc, #212]	; (8008734 <_dtoa_r+0x64c>)
 800865e:	2000      	movs	r0, #0
 8008660:	f7f7 fe32 	bl	80002c8 <__aeabi_dsub>
 8008664:	ec53 2b18 	vmov	r2, r3, d8
 8008668:	f7f8 fa58 	bl	8000b1c <__aeabi_dcmplt>
 800866c:	2800      	cmp	r0, #0
 800866e:	f040 80b9 	bne.w	80087e4 <_dtoa_r+0x6fc>
 8008672:	9b02      	ldr	r3, [sp, #8]
 8008674:	429d      	cmp	r5, r3
 8008676:	f43f af75 	beq.w	8008564 <_dtoa_r+0x47c>
 800867a:	4b2f      	ldr	r3, [pc, #188]	; (8008738 <_dtoa_r+0x650>)
 800867c:	ec51 0b18 	vmov	r0, r1, d8
 8008680:	2200      	movs	r2, #0
 8008682:	f7f7 ffd9 	bl	8000638 <__aeabi_dmul>
 8008686:	4b2c      	ldr	r3, [pc, #176]	; (8008738 <_dtoa_r+0x650>)
 8008688:	ec41 0b18 	vmov	d8, r0, r1
 800868c:	2200      	movs	r2, #0
 800868e:	4630      	mov	r0, r6
 8008690:	4639      	mov	r1, r7
 8008692:	f7f7 ffd1 	bl	8000638 <__aeabi_dmul>
 8008696:	4606      	mov	r6, r0
 8008698:	460f      	mov	r7, r1
 800869a:	e7c4      	b.n	8008626 <_dtoa_r+0x53e>
 800869c:	ec51 0b17 	vmov	r0, r1, d7
 80086a0:	f7f7 ffca 	bl	8000638 <__aeabi_dmul>
 80086a4:	9b02      	ldr	r3, [sp, #8]
 80086a6:	9d00      	ldr	r5, [sp, #0]
 80086a8:	930c      	str	r3, [sp, #48]	; 0x30
 80086aa:	ec41 0b18 	vmov	d8, r0, r1
 80086ae:	4639      	mov	r1, r7
 80086b0:	4630      	mov	r0, r6
 80086b2:	f7f8 fa71 	bl	8000b98 <__aeabi_d2iz>
 80086b6:	9011      	str	r0, [sp, #68]	; 0x44
 80086b8:	f7f7 ff54 	bl	8000564 <__aeabi_i2d>
 80086bc:	4602      	mov	r2, r0
 80086be:	460b      	mov	r3, r1
 80086c0:	4630      	mov	r0, r6
 80086c2:	4639      	mov	r1, r7
 80086c4:	f7f7 fe00 	bl	80002c8 <__aeabi_dsub>
 80086c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086ca:	3330      	adds	r3, #48	; 0x30
 80086cc:	f805 3b01 	strb.w	r3, [r5], #1
 80086d0:	9b02      	ldr	r3, [sp, #8]
 80086d2:	429d      	cmp	r5, r3
 80086d4:	4606      	mov	r6, r0
 80086d6:	460f      	mov	r7, r1
 80086d8:	f04f 0200 	mov.w	r2, #0
 80086dc:	d134      	bne.n	8008748 <_dtoa_r+0x660>
 80086de:	4b19      	ldr	r3, [pc, #100]	; (8008744 <_dtoa_r+0x65c>)
 80086e0:	ec51 0b18 	vmov	r0, r1, d8
 80086e4:	f7f7 fdf2 	bl	80002cc <__adddf3>
 80086e8:	4602      	mov	r2, r0
 80086ea:	460b      	mov	r3, r1
 80086ec:	4630      	mov	r0, r6
 80086ee:	4639      	mov	r1, r7
 80086f0:	f7f8 fa32 	bl	8000b58 <__aeabi_dcmpgt>
 80086f4:	2800      	cmp	r0, #0
 80086f6:	d175      	bne.n	80087e4 <_dtoa_r+0x6fc>
 80086f8:	ec53 2b18 	vmov	r2, r3, d8
 80086fc:	4911      	ldr	r1, [pc, #68]	; (8008744 <_dtoa_r+0x65c>)
 80086fe:	2000      	movs	r0, #0
 8008700:	f7f7 fde2 	bl	80002c8 <__aeabi_dsub>
 8008704:	4602      	mov	r2, r0
 8008706:	460b      	mov	r3, r1
 8008708:	4630      	mov	r0, r6
 800870a:	4639      	mov	r1, r7
 800870c:	f7f8 fa06 	bl	8000b1c <__aeabi_dcmplt>
 8008710:	2800      	cmp	r0, #0
 8008712:	f43f af27 	beq.w	8008564 <_dtoa_r+0x47c>
 8008716:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008718:	1e6b      	subs	r3, r5, #1
 800871a:	930c      	str	r3, [sp, #48]	; 0x30
 800871c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008720:	2b30      	cmp	r3, #48	; 0x30
 8008722:	d0f8      	beq.n	8008716 <_dtoa_r+0x62e>
 8008724:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008728:	e04a      	b.n	80087c0 <_dtoa_r+0x6d8>
 800872a:	bf00      	nop
 800872c:	0800a128 	.word	0x0800a128
 8008730:	0800a100 	.word	0x0800a100
 8008734:	3ff00000 	.word	0x3ff00000
 8008738:	40240000 	.word	0x40240000
 800873c:	401c0000 	.word	0x401c0000
 8008740:	40140000 	.word	0x40140000
 8008744:	3fe00000 	.word	0x3fe00000
 8008748:	4baf      	ldr	r3, [pc, #700]	; (8008a08 <_dtoa_r+0x920>)
 800874a:	f7f7 ff75 	bl	8000638 <__aeabi_dmul>
 800874e:	4606      	mov	r6, r0
 8008750:	460f      	mov	r7, r1
 8008752:	e7ac      	b.n	80086ae <_dtoa_r+0x5c6>
 8008754:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008758:	9d00      	ldr	r5, [sp, #0]
 800875a:	4642      	mov	r2, r8
 800875c:	464b      	mov	r3, r9
 800875e:	4630      	mov	r0, r6
 8008760:	4639      	mov	r1, r7
 8008762:	f7f8 f893 	bl	800088c <__aeabi_ddiv>
 8008766:	f7f8 fa17 	bl	8000b98 <__aeabi_d2iz>
 800876a:	9002      	str	r0, [sp, #8]
 800876c:	f7f7 fefa 	bl	8000564 <__aeabi_i2d>
 8008770:	4642      	mov	r2, r8
 8008772:	464b      	mov	r3, r9
 8008774:	f7f7 ff60 	bl	8000638 <__aeabi_dmul>
 8008778:	4602      	mov	r2, r0
 800877a:	460b      	mov	r3, r1
 800877c:	4630      	mov	r0, r6
 800877e:	4639      	mov	r1, r7
 8008780:	f7f7 fda2 	bl	80002c8 <__aeabi_dsub>
 8008784:	9e02      	ldr	r6, [sp, #8]
 8008786:	9f01      	ldr	r7, [sp, #4]
 8008788:	3630      	adds	r6, #48	; 0x30
 800878a:	f805 6b01 	strb.w	r6, [r5], #1
 800878e:	9e00      	ldr	r6, [sp, #0]
 8008790:	1bae      	subs	r6, r5, r6
 8008792:	42b7      	cmp	r7, r6
 8008794:	4602      	mov	r2, r0
 8008796:	460b      	mov	r3, r1
 8008798:	d137      	bne.n	800880a <_dtoa_r+0x722>
 800879a:	f7f7 fd97 	bl	80002cc <__adddf3>
 800879e:	4642      	mov	r2, r8
 80087a0:	464b      	mov	r3, r9
 80087a2:	4606      	mov	r6, r0
 80087a4:	460f      	mov	r7, r1
 80087a6:	f7f8 f9d7 	bl	8000b58 <__aeabi_dcmpgt>
 80087aa:	b9c8      	cbnz	r0, 80087e0 <_dtoa_r+0x6f8>
 80087ac:	4642      	mov	r2, r8
 80087ae:	464b      	mov	r3, r9
 80087b0:	4630      	mov	r0, r6
 80087b2:	4639      	mov	r1, r7
 80087b4:	f7f8 f9a8 	bl	8000b08 <__aeabi_dcmpeq>
 80087b8:	b110      	cbz	r0, 80087c0 <_dtoa_r+0x6d8>
 80087ba:	9b02      	ldr	r3, [sp, #8]
 80087bc:	07d9      	lsls	r1, r3, #31
 80087be:	d40f      	bmi.n	80087e0 <_dtoa_r+0x6f8>
 80087c0:	4620      	mov	r0, r4
 80087c2:	4659      	mov	r1, fp
 80087c4:	f000 fbd0 	bl	8008f68 <_Bfree>
 80087c8:	2300      	movs	r3, #0
 80087ca:	702b      	strb	r3, [r5, #0]
 80087cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087ce:	f10a 0001 	add.w	r0, sl, #1
 80087d2:	6018      	str	r0, [r3, #0]
 80087d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	f43f acd8 	beq.w	800818c <_dtoa_r+0xa4>
 80087dc:	601d      	str	r5, [r3, #0]
 80087de:	e4d5      	b.n	800818c <_dtoa_r+0xa4>
 80087e0:	f8cd a01c 	str.w	sl, [sp, #28]
 80087e4:	462b      	mov	r3, r5
 80087e6:	461d      	mov	r5, r3
 80087e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087ec:	2a39      	cmp	r2, #57	; 0x39
 80087ee:	d108      	bne.n	8008802 <_dtoa_r+0x71a>
 80087f0:	9a00      	ldr	r2, [sp, #0]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d1f7      	bne.n	80087e6 <_dtoa_r+0x6fe>
 80087f6:	9a07      	ldr	r2, [sp, #28]
 80087f8:	9900      	ldr	r1, [sp, #0]
 80087fa:	3201      	adds	r2, #1
 80087fc:	9207      	str	r2, [sp, #28]
 80087fe:	2230      	movs	r2, #48	; 0x30
 8008800:	700a      	strb	r2, [r1, #0]
 8008802:	781a      	ldrb	r2, [r3, #0]
 8008804:	3201      	adds	r2, #1
 8008806:	701a      	strb	r2, [r3, #0]
 8008808:	e78c      	b.n	8008724 <_dtoa_r+0x63c>
 800880a:	4b7f      	ldr	r3, [pc, #508]	; (8008a08 <_dtoa_r+0x920>)
 800880c:	2200      	movs	r2, #0
 800880e:	f7f7 ff13 	bl	8000638 <__aeabi_dmul>
 8008812:	2200      	movs	r2, #0
 8008814:	2300      	movs	r3, #0
 8008816:	4606      	mov	r6, r0
 8008818:	460f      	mov	r7, r1
 800881a:	f7f8 f975 	bl	8000b08 <__aeabi_dcmpeq>
 800881e:	2800      	cmp	r0, #0
 8008820:	d09b      	beq.n	800875a <_dtoa_r+0x672>
 8008822:	e7cd      	b.n	80087c0 <_dtoa_r+0x6d8>
 8008824:	9a08      	ldr	r2, [sp, #32]
 8008826:	2a00      	cmp	r2, #0
 8008828:	f000 80c4 	beq.w	80089b4 <_dtoa_r+0x8cc>
 800882c:	9a05      	ldr	r2, [sp, #20]
 800882e:	2a01      	cmp	r2, #1
 8008830:	f300 80a8 	bgt.w	8008984 <_dtoa_r+0x89c>
 8008834:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008836:	2a00      	cmp	r2, #0
 8008838:	f000 80a0 	beq.w	800897c <_dtoa_r+0x894>
 800883c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008840:	9e06      	ldr	r6, [sp, #24]
 8008842:	4645      	mov	r5, r8
 8008844:	9a04      	ldr	r2, [sp, #16]
 8008846:	2101      	movs	r1, #1
 8008848:	441a      	add	r2, r3
 800884a:	4620      	mov	r0, r4
 800884c:	4498      	add	r8, r3
 800884e:	9204      	str	r2, [sp, #16]
 8008850:	f000 fc46 	bl	80090e0 <__i2b>
 8008854:	4607      	mov	r7, r0
 8008856:	2d00      	cmp	r5, #0
 8008858:	dd0b      	ble.n	8008872 <_dtoa_r+0x78a>
 800885a:	9b04      	ldr	r3, [sp, #16]
 800885c:	2b00      	cmp	r3, #0
 800885e:	dd08      	ble.n	8008872 <_dtoa_r+0x78a>
 8008860:	42ab      	cmp	r3, r5
 8008862:	9a04      	ldr	r2, [sp, #16]
 8008864:	bfa8      	it	ge
 8008866:	462b      	movge	r3, r5
 8008868:	eba8 0803 	sub.w	r8, r8, r3
 800886c:	1aed      	subs	r5, r5, r3
 800886e:	1ad3      	subs	r3, r2, r3
 8008870:	9304      	str	r3, [sp, #16]
 8008872:	9b06      	ldr	r3, [sp, #24]
 8008874:	b1fb      	cbz	r3, 80088b6 <_dtoa_r+0x7ce>
 8008876:	9b08      	ldr	r3, [sp, #32]
 8008878:	2b00      	cmp	r3, #0
 800887a:	f000 809f 	beq.w	80089bc <_dtoa_r+0x8d4>
 800887e:	2e00      	cmp	r6, #0
 8008880:	dd11      	ble.n	80088a6 <_dtoa_r+0x7be>
 8008882:	4639      	mov	r1, r7
 8008884:	4632      	mov	r2, r6
 8008886:	4620      	mov	r0, r4
 8008888:	f000 fce6 	bl	8009258 <__pow5mult>
 800888c:	465a      	mov	r2, fp
 800888e:	4601      	mov	r1, r0
 8008890:	4607      	mov	r7, r0
 8008892:	4620      	mov	r0, r4
 8008894:	f000 fc3a 	bl	800910c <__multiply>
 8008898:	4659      	mov	r1, fp
 800889a:	9007      	str	r0, [sp, #28]
 800889c:	4620      	mov	r0, r4
 800889e:	f000 fb63 	bl	8008f68 <_Bfree>
 80088a2:	9b07      	ldr	r3, [sp, #28]
 80088a4:	469b      	mov	fp, r3
 80088a6:	9b06      	ldr	r3, [sp, #24]
 80088a8:	1b9a      	subs	r2, r3, r6
 80088aa:	d004      	beq.n	80088b6 <_dtoa_r+0x7ce>
 80088ac:	4659      	mov	r1, fp
 80088ae:	4620      	mov	r0, r4
 80088b0:	f000 fcd2 	bl	8009258 <__pow5mult>
 80088b4:	4683      	mov	fp, r0
 80088b6:	2101      	movs	r1, #1
 80088b8:	4620      	mov	r0, r4
 80088ba:	f000 fc11 	bl	80090e0 <__i2b>
 80088be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	4606      	mov	r6, r0
 80088c4:	dd7c      	ble.n	80089c0 <_dtoa_r+0x8d8>
 80088c6:	461a      	mov	r2, r3
 80088c8:	4601      	mov	r1, r0
 80088ca:	4620      	mov	r0, r4
 80088cc:	f000 fcc4 	bl	8009258 <__pow5mult>
 80088d0:	9b05      	ldr	r3, [sp, #20]
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	4606      	mov	r6, r0
 80088d6:	dd76      	ble.n	80089c6 <_dtoa_r+0x8de>
 80088d8:	2300      	movs	r3, #0
 80088da:	9306      	str	r3, [sp, #24]
 80088dc:	6933      	ldr	r3, [r6, #16]
 80088de:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80088e2:	6918      	ldr	r0, [r3, #16]
 80088e4:	f000 fbac 	bl	8009040 <__hi0bits>
 80088e8:	f1c0 0020 	rsb	r0, r0, #32
 80088ec:	9b04      	ldr	r3, [sp, #16]
 80088ee:	4418      	add	r0, r3
 80088f0:	f010 001f 	ands.w	r0, r0, #31
 80088f4:	f000 8086 	beq.w	8008a04 <_dtoa_r+0x91c>
 80088f8:	f1c0 0320 	rsb	r3, r0, #32
 80088fc:	2b04      	cmp	r3, #4
 80088fe:	dd7f      	ble.n	8008a00 <_dtoa_r+0x918>
 8008900:	f1c0 001c 	rsb	r0, r0, #28
 8008904:	9b04      	ldr	r3, [sp, #16]
 8008906:	4403      	add	r3, r0
 8008908:	4480      	add	r8, r0
 800890a:	4405      	add	r5, r0
 800890c:	9304      	str	r3, [sp, #16]
 800890e:	f1b8 0f00 	cmp.w	r8, #0
 8008912:	dd05      	ble.n	8008920 <_dtoa_r+0x838>
 8008914:	4659      	mov	r1, fp
 8008916:	4642      	mov	r2, r8
 8008918:	4620      	mov	r0, r4
 800891a:	f000 fcf7 	bl	800930c <__lshift>
 800891e:	4683      	mov	fp, r0
 8008920:	9b04      	ldr	r3, [sp, #16]
 8008922:	2b00      	cmp	r3, #0
 8008924:	dd05      	ble.n	8008932 <_dtoa_r+0x84a>
 8008926:	4631      	mov	r1, r6
 8008928:	461a      	mov	r2, r3
 800892a:	4620      	mov	r0, r4
 800892c:	f000 fcee 	bl	800930c <__lshift>
 8008930:	4606      	mov	r6, r0
 8008932:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008934:	2b00      	cmp	r3, #0
 8008936:	d069      	beq.n	8008a0c <_dtoa_r+0x924>
 8008938:	4631      	mov	r1, r6
 800893a:	4658      	mov	r0, fp
 800893c:	f000 fd52 	bl	80093e4 <__mcmp>
 8008940:	2800      	cmp	r0, #0
 8008942:	da63      	bge.n	8008a0c <_dtoa_r+0x924>
 8008944:	2300      	movs	r3, #0
 8008946:	4659      	mov	r1, fp
 8008948:	220a      	movs	r2, #10
 800894a:	4620      	mov	r0, r4
 800894c:	f000 fb2e 	bl	8008fac <__multadd>
 8008950:	9b08      	ldr	r3, [sp, #32]
 8008952:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008956:	4683      	mov	fp, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	f000 818f 	beq.w	8008c7c <_dtoa_r+0xb94>
 800895e:	4639      	mov	r1, r7
 8008960:	2300      	movs	r3, #0
 8008962:	220a      	movs	r2, #10
 8008964:	4620      	mov	r0, r4
 8008966:	f000 fb21 	bl	8008fac <__multadd>
 800896a:	f1b9 0f00 	cmp.w	r9, #0
 800896e:	4607      	mov	r7, r0
 8008970:	f300 808e 	bgt.w	8008a90 <_dtoa_r+0x9a8>
 8008974:	9b05      	ldr	r3, [sp, #20]
 8008976:	2b02      	cmp	r3, #2
 8008978:	dc50      	bgt.n	8008a1c <_dtoa_r+0x934>
 800897a:	e089      	b.n	8008a90 <_dtoa_r+0x9a8>
 800897c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800897e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008982:	e75d      	b.n	8008840 <_dtoa_r+0x758>
 8008984:	9b01      	ldr	r3, [sp, #4]
 8008986:	1e5e      	subs	r6, r3, #1
 8008988:	9b06      	ldr	r3, [sp, #24]
 800898a:	42b3      	cmp	r3, r6
 800898c:	bfbf      	itttt	lt
 800898e:	9b06      	ldrlt	r3, [sp, #24]
 8008990:	9606      	strlt	r6, [sp, #24]
 8008992:	1af2      	sublt	r2, r6, r3
 8008994:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008996:	bfb6      	itet	lt
 8008998:	189b      	addlt	r3, r3, r2
 800899a:	1b9e      	subge	r6, r3, r6
 800899c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800899e:	9b01      	ldr	r3, [sp, #4]
 80089a0:	bfb8      	it	lt
 80089a2:	2600      	movlt	r6, #0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	bfb5      	itete	lt
 80089a8:	eba8 0503 	sublt.w	r5, r8, r3
 80089ac:	9b01      	ldrge	r3, [sp, #4]
 80089ae:	2300      	movlt	r3, #0
 80089b0:	4645      	movge	r5, r8
 80089b2:	e747      	b.n	8008844 <_dtoa_r+0x75c>
 80089b4:	9e06      	ldr	r6, [sp, #24]
 80089b6:	9f08      	ldr	r7, [sp, #32]
 80089b8:	4645      	mov	r5, r8
 80089ba:	e74c      	b.n	8008856 <_dtoa_r+0x76e>
 80089bc:	9a06      	ldr	r2, [sp, #24]
 80089be:	e775      	b.n	80088ac <_dtoa_r+0x7c4>
 80089c0:	9b05      	ldr	r3, [sp, #20]
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	dc18      	bgt.n	80089f8 <_dtoa_r+0x910>
 80089c6:	9b02      	ldr	r3, [sp, #8]
 80089c8:	b9b3      	cbnz	r3, 80089f8 <_dtoa_r+0x910>
 80089ca:	9b03      	ldr	r3, [sp, #12]
 80089cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089d0:	b9a3      	cbnz	r3, 80089fc <_dtoa_r+0x914>
 80089d2:	9b03      	ldr	r3, [sp, #12]
 80089d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80089d8:	0d1b      	lsrs	r3, r3, #20
 80089da:	051b      	lsls	r3, r3, #20
 80089dc:	b12b      	cbz	r3, 80089ea <_dtoa_r+0x902>
 80089de:	9b04      	ldr	r3, [sp, #16]
 80089e0:	3301      	adds	r3, #1
 80089e2:	9304      	str	r3, [sp, #16]
 80089e4:	f108 0801 	add.w	r8, r8, #1
 80089e8:	2301      	movs	r3, #1
 80089ea:	9306      	str	r3, [sp, #24]
 80089ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	f47f af74 	bne.w	80088dc <_dtoa_r+0x7f4>
 80089f4:	2001      	movs	r0, #1
 80089f6:	e779      	b.n	80088ec <_dtoa_r+0x804>
 80089f8:	2300      	movs	r3, #0
 80089fa:	e7f6      	b.n	80089ea <_dtoa_r+0x902>
 80089fc:	9b02      	ldr	r3, [sp, #8]
 80089fe:	e7f4      	b.n	80089ea <_dtoa_r+0x902>
 8008a00:	d085      	beq.n	800890e <_dtoa_r+0x826>
 8008a02:	4618      	mov	r0, r3
 8008a04:	301c      	adds	r0, #28
 8008a06:	e77d      	b.n	8008904 <_dtoa_r+0x81c>
 8008a08:	40240000 	.word	0x40240000
 8008a0c:	9b01      	ldr	r3, [sp, #4]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	dc38      	bgt.n	8008a84 <_dtoa_r+0x99c>
 8008a12:	9b05      	ldr	r3, [sp, #20]
 8008a14:	2b02      	cmp	r3, #2
 8008a16:	dd35      	ble.n	8008a84 <_dtoa_r+0x99c>
 8008a18:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008a1c:	f1b9 0f00 	cmp.w	r9, #0
 8008a20:	d10d      	bne.n	8008a3e <_dtoa_r+0x956>
 8008a22:	4631      	mov	r1, r6
 8008a24:	464b      	mov	r3, r9
 8008a26:	2205      	movs	r2, #5
 8008a28:	4620      	mov	r0, r4
 8008a2a:	f000 fabf 	bl	8008fac <__multadd>
 8008a2e:	4601      	mov	r1, r0
 8008a30:	4606      	mov	r6, r0
 8008a32:	4658      	mov	r0, fp
 8008a34:	f000 fcd6 	bl	80093e4 <__mcmp>
 8008a38:	2800      	cmp	r0, #0
 8008a3a:	f73f adbd 	bgt.w	80085b8 <_dtoa_r+0x4d0>
 8008a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a40:	9d00      	ldr	r5, [sp, #0]
 8008a42:	ea6f 0a03 	mvn.w	sl, r3
 8008a46:	f04f 0800 	mov.w	r8, #0
 8008a4a:	4631      	mov	r1, r6
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	f000 fa8b 	bl	8008f68 <_Bfree>
 8008a52:	2f00      	cmp	r7, #0
 8008a54:	f43f aeb4 	beq.w	80087c0 <_dtoa_r+0x6d8>
 8008a58:	f1b8 0f00 	cmp.w	r8, #0
 8008a5c:	d005      	beq.n	8008a6a <_dtoa_r+0x982>
 8008a5e:	45b8      	cmp	r8, r7
 8008a60:	d003      	beq.n	8008a6a <_dtoa_r+0x982>
 8008a62:	4641      	mov	r1, r8
 8008a64:	4620      	mov	r0, r4
 8008a66:	f000 fa7f 	bl	8008f68 <_Bfree>
 8008a6a:	4639      	mov	r1, r7
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	f000 fa7b 	bl	8008f68 <_Bfree>
 8008a72:	e6a5      	b.n	80087c0 <_dtoa_r+0x6d8>
 8008a74:	2600      	movs	r6, #0
 8008a76:	4637      	mov	r7, r6
 8008a78:	e7e1      	b.n	8008a3e <_dtoa_r+0x956>
 8008a7a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008a7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008a80:	4637      	mov	r7, r6
 8008a82:	e599      	b.n	80085b8 <_dtoa_r+0x4d0>
 8008a84:	9b08      	ldr	r3, [sp, #32]
 8008a86:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	f000 80fd 	beq.w	8008c8a <_dtoa_r+0xba2>
 8008a90:	2d00      	cmp	r5, #0
 8008a92:	dd05      	ble.n	8008aa0 <_dtoa_r+0x9b8>
 8008a94:	4639      	mov	r1, r7
 8008a96:	462a      	mov	r2, r5
 8008a98:	4620      	mov	r0, r4
 8008a9a:	f000 fc37 	bl	800930c <__lshift>
 8008a9e:	4607      	mov	r7, r0
 8008aa0:	9b06      	ldr	r3, [sp, #24]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d05c      	beq.n	8008b60 <_dtoa_r+0xa78>
 8008aa6:	6879      	ldr	r1, [r7, #4]
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	f000 fa1d 	bl	8008ee8 <_Balloc>
 8008aae:	4605      	mov	r5, r0
 8008ab0:	b928      	cbnz	r0, 8008abe <_dtoa_r+0x9d6>
 8008ab2:	4b80      	ldr	r3, [pc, #512]	; (8008cb4 <_dtoa_r+0xbcc>)
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008aba:	f7ff bb2e 	b.w	800811a <_dtoa_r+0x32>
 8008abe:	693a      	ldr	r2, [r7, #16]
 8008ac0:	3202      	adds	r2, #2
 8008ac2:	0092      	lsls	r2, r2, #2
 8008ac4:	f107 010c 	add.w	r1, r7, #12
 8008ac8:	300c      	adds	r0, #12
 8008aca:	f000 f9f3 	bl	8008eb4 <memcpy>
 8008ace:	2201      	movs	r2, #1
 8008ad0:	4629      	mov	r1, r5
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	f000 fc1a 	bl	800930c <__lshift>
 8008ad8:	9b00      	ldr	r3, [sp, #0]
 8008ada:	3301      	adds	r3, #1
 8008adc:	9301      	str	r3, [sp, #4]
 8008ade:	9b00      	ldr	r3, [sp, #0]
 8008ae0:	444b      	add	r3, r9
 8008ae2:	9307      	str	r3, [sp, #28]
 8008ae4:	9b02      	ldr	r3, [sp, #8]
 8008ae6:	f003 0301 	and.w	r3, r3, #1
 8008aea:	46b8      	mov	r8, r7
 8008aec:	9306      	str	r3, [sp, #24]
 8008aee:	4607      	mov	r7, r0
 8008af0:	9b01      	ldr	r3, [sp, #4]
 8008af2:	4631      	mov	r1, r6
 8008af4:	3b01      	subs	r3, #1
 8008af6:	4658      	mov	r0, fp
 8008af8:	9302      	str	r3, [sp, #8]
 8008afa:	f7ff fa69 	bl	8007fd0 <quorem>
 8008afe:	4603      	mov	r3, r0
 8008b00:	3330      	adds	r3, #48	; 0x30
 8008b02:	9004      	str	r0, [sp, #16]
 8008b04:	4641      	mov	r1, r8
 8008b06:	4658      	mov	r0, fp
 8008b08:	9308      	str	r3, [sp, #32]
 8008b0a:	f000 fc6b 	bl	80093e4 <__mcmp>
 8008b0e:	463a      	mov	r2, r7
 8008b10:	4681      	mov	r9, r0
 8008b12:	4631      	mov	r1, r6
 8008b14:	4620      	mov	r0, r4
 8008b16:	f000 fc81 	bl	800941c <__mdiff>
 8008b1a:	68c2      	ldr	r2, [r0, #12]
 8008b1c:	9b08      	ldr	r3, [sp, #32]
 8008b1e:	4605      	mov	r5, r0
 8008b20:	bb02      	cbnz	r2, 8008b64 <_dtoa_r+0xa7c>
 8008b22:	4601      	mov	r1, r0
 8008b24:	4658      	mov	r0, fp
 8008b26:	f000 fc5d 	bl	80093e4 <__mcmp>
 8008b2a:	9b08      	ldr	r3, [sp, #32]
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	4629      	mov	r1, r5
 8008b30:	4620      	mov	r0, r4
 8008b32:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008b36:	f000 fa17 	bl	8008f68 <_Bfree>
 8008b3a:	9b05      	ldr	r3, [sp, #20]
 8008b3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b3e:	9d01      	ldr	r5, [sp, #4]
 8008b40:	ea43 0102 	orr.w	r1, r3, r2
 8008b44:	9b06      	ldr	r3, [sp, #24]
 8008b46:	430b      	orrs	r3, r1
 8008b48:	9b08      	ldr	r3, [sp, #32]
 8008b4a:	d10d      	bne.n	8008b68 <_dtoa_r+0xa80>
 8008b4c:	2b39      	cmp	r3, #57	; 0x39
 8008b4e:	d029      	beq.n	8008ba4 <_dtoa_r+0xabc>
 8008b50:	f1b9 0f00 	cmp.w	r9, #0
 8008b54:	dd01      	ble.n	8008b5a <_dtoa_r+0xa72>
 8008b56:	9b04      	ldr	r3, [sp, #16]
 8008b58:	3331      	adds	r3, #49	; 0x31
 8008b5a:	9a02      	ldr	r2, [sp, #8]
 8008b5c:	7013      	strb	r3, [r2, #0]
 8008b5e:	e774      	b.n	8008a4a <_dtoa_r+0x962>
 8008b60:	4638      	mov	r0, r7
 8008b62:	e7b9      	b.n	8008ad8 <_dtoa_r+0x9f0>
 8008b64:	2201      	movs	r2, #1
 8008b66:	e7e2      	b.n	8008b2e <_dtoa_r+0xa46>
 8008b68:	f1b9 0f00 	cmp.w	r9, #0
 8008b6c:	db06      	blt.n	8008b7c <_dtoa_r+0xa94>
 8008b6e:	9905      	ldr	r1, [sp, #20]
 8008b70:	ea41 0909 	orr.w	r9, r1, r9
 8008b74:	9906      	ldr	r1, [sp, #24]
 8008b76:	ea59 0101 	orrs.w	r1, r9, r1
 8008b7a:	d120      	bne.n	8008bbe <_dtoa_r+0xad6>
 8008b7c:	2a00      	cmp	r2, #0
 8008b7e:	ddec      	ble.n	8008b5a <_dtoa_r+0xa72>
 8008b80:	4659      	mov	r1, fp
 8008b82:	2201      	movs	r2, #1
 8008b84:	4620      	mov	r0, r4
 8008b86:	9301      	str	r3, [sp, #4]
 8008b88:	f000 fbc0 	bl	800930c <__lshift>
 8008b8c:	4631      	mov	r1, r6
 8008b8e:	4683      	mov	fp, r0
 8008b90:	f000 fc28 	bl	80093e4 <__mcmp>
 8008b94:	2800      	cmp	r0, #0
 8008b96:	9b01      	ldr	r3, [sp, #4]
 8008b98:	dc02      	bgt.n	8008ba0 <_dtoa_r+0xab8>
 8008b9a:	d1de      	bne.n	8008b5a <_dtoa_r+0xa72>
 8008b9c:	07da      	lsls	r2, r3, #31
 8008b9e:	d5dc      	bpl.n	8008b5a <_dtoa_r+0xa72>
 8008ba0:	2b39      	cmp	r3, #57	; 0x39
 8008ba2:	d1d8      	bne.n	8008b56 <_dtoa_r+0xa6e>
 8008ba4:	9a02      	ldr	r2, [sp, #8]
 8008ba6:	2339      	movs	r3, #57	; 0x39
 8008ba8:	7013      	strb	r3, [r2, #0]
 8008baa:	462b      	mov	r3, r5
 8008bac:	461d      	mov	r5, r3
 8008bae:	3b01      	subs	r3, #1
 8008bb0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008bb4:	2a39      	cmp	r2, #57	; 0x39
 8008bb6:	d050      	beq.n	8008c5a <_dtoa_r+0xb72>
 8008bb8:	3201      	adds	r2, #1
 8008bba:	701a      	strb	r2, [r3, #0]
 8008bbc:	e745      	b.n	8008a4a <_dtoa_r+0x962>
 8008bbe:	2a00      	cmp	r2, #0
 8008bc0:	dd03      	ble.n	8008bca <_dtoa_r+0xae2>
 8008bc2:	2b39      	cmp	r3, #57	; 0x39
 8008bc4:	d0ee      	beq.n	8008ba4 <_dtoa_r+0xabc>
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	e7c7      	b.n	8008b5a <_dtoa_r+0xa72>
 8008bca:	9a01      	ldr	r2, [sp, #4]
 8008bcc:	9907      	ldr	r1, [sp, #28]
 8008bce:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008bd2:	428a      	cmp	r2, r1
 8008bd4:	d02a      	beq.n	8008c2c <_dtoa_r+0xb44>
 8008bd6:	4659      	mov	r1, fp
 8008bd8:	2300      	movs	r3, #0
 8008bda:	220a      	movs	r2, #10
 8008bdc:	4620      	mov	r0, r4
 8008bde:	f000 f9e5 	bl	8008fac <__multadd>
 8008be2:	45b8      	cmp	r8, r7
 8008be4:	4683      	mov	fp, r0
 8008be6:	f04f 0300 	mov.w	r3, #0
 8008bea:	f04f 020a 	mov.w	r2, #10
 8008bee:	4641      	mov	r1, r8
 8008bf0:	4620      	mov	r0, r4
 8008bf2:	d107      	bne.n	8008c04 <_dtoa_r+0xb1c>
 8008bf4:	f000 f9da 	bl	8008fac <__multadd>
 8008bf8:	4680      	mov	r8, r0
 8008bfa:	4607      	mov	r7, r0
 8008bfc:	9b01      	ldr	r3, [sp, #4]
 8008bfe:	3301      	adds	r3, #1
 8008c00:	9301      	str	r3, [sp, #4]
 8008c02:	e775      	b.n	8008af0 <_dtoa_r+0xa08>
 8008c04:	f000 f9d2 	bl	8008fac <__multadd>
 8008c08:	4639      	mov	r1, r7
 8008c0a:	4680      	mov	r8, r0
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	220a      	movs	r2, #10
 8008c10:	4620      	mov	r0, r4
 8008c12:	f000 f9cb 	bl	8008fac <__multadd>
 8008c16:	4607      	mov	r7, r0
 8008c18:	e7f0      	b.n	8008bfc <_dtoa_r+0xb14>
 8008c1a:	f1b9 0f00 	cmp.w	r9, #0
 8008c1e:	9a00      	ldr	r2, [sp, #0]
 8008c20:	bfcc      	ite	gt
 8008c22:	464d      	movgt	r5, r9
 8008c24:	2501      	movle	r5, #1
 8008c26:	4415      	add	r5, r2
 8008c28:	f04f 0800 	mov.w	r8, #0
 8008c2c:	4659      	mov	r1, fp
 8008c2e:	2201      	movs	r2, #1
 8008c30:	4620      	mov	r0, r4
 8008c32:	9301      	str	r3, [sp, #4]
 8008c34:	f000 fb6a 	bl	800930c <__lshift>
 8008c38:	4631      	mov	r1, r6
 8008c3a:	4683      	mov	fp, r0
 8008c3c:	f000 fbd2 	bl	80093e4 <__mcmp>
 8008c40:	2800      	cmp	r0, #0
 8008c42:	dcb2      	bgt.n	8008baa <_dtoa_r+0xac2>
 8008c44:	d102      	bne.n	8008c4c <_dtoa_r+0xb64>
 8008c46:	9b01      	ldr	r3, [sp, #4]
 8008c48:	07db      	lsls	r3, r3, #31
 8008c4a:	d4ae      	bmi.n	8008baa <_dtoa_r+0xac2>
 8008c4c:	462b      	mov	r3, r5
 8008c4e:	461d      	mov	r5, r3
 8008c50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c54:	2a30      	cmp	r2, #48	; 0x30
 8008c56:	d0fa      	beq.n	8008c4e <_dtoa_r+0xb66>
 8008c58:	e6f7      	b.n	8008a4a <_dtoa_r+0x962>
 8008c5a:	9a00      	ldr	r2, [sp, #0]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d1a5      	bne.n	8008bac <_dtoa_r+0xac4>
 8008c60:	f10a 0a01 	add.w	sl, sl, #1
 8008c64:	2331      	movs	r3, #49	; 0x31
 8008c66:	e779      	b.n	8008b5c <_dtoa_r+0xa74>
 8008c68:	4b13      	ldr	r3, [pc, #76]	; (8008cb8 <_dtoa_r+0xbd0>)
 8008c6a:	f7ff baaf 	b.w	80081cc <_dtoa_r+0xe4>
 8008c6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	f47f aa86 	bne.w	8008182 <_dtoa_r+0x9a>
 8008c76:	4b11      	ldr	r3, [pc, #68]	; (8008cbc <_dtoa_r+0xbd4>)
 8008c78:	f7ff baa8 	b.w	80081cc <_dtoa_r+0xe4>
 8008c7c:	f1b9 0f00 	cmp.w	r9, #0
 8008c80:	dc03      	bgt.n	8008c8a <_dtoa_r+0xba2>
 8008c82:	9b05      	ldr	r3, [sp, #20]
 8008c84:	2b02      	cmp	r3, #2
 8008c86:	f73f aec9 	bgt.w	8008a1c <_dtoa_r+0x934>
 8008c8a:	9d00      	ldr	r5, [sp, #0]
 8008c8c:	4631      	mov	r1, r6
 8008c8e:	4658      	mov	r0, fp
 8008c90:	f7ff f99e 	bl	8007fd0 <quorem>
 8008c94:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008c98:	f805 3b01 	strb.w	r3, [r5], #1
 8008c9c:	9a00      	ldr	r2, [sp, #0]
 8008c9e:	1aaa      	subs	r2, r5, r2
 8008ca0:	4591      	cmp	r9, r2
 8008ca2:	ddba      	ble.n	8008c1a <_dtoa_r+0xb32>
 8008ca4:	4659      	mov	r1, fp
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	220a      	movs	r2, #10
 8008caa:	4620      	mov	r0, r4
 8008cac:	f000 f97e 	bl	8008fac <__multadd>
 8008cb0:	4683      	mov	fp, r0
 8008cb2:	e7eb      	b.n	8008c8c <_dtoa_r+0xba4>
 8008cb4:	0800a02b 	.word	0x0800a02b
 8008cb8:	08009f84 	.word	0x08009f84
 8008cbc:	08009fa8 	.word	0x08009fa8

08008cc0 <std>:
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	b510      	push	{r4, lr}
 8008cc4:	4604      	mov	r4, r0
 8008cc6:	e9c0 3300 	strd	r3, r3, [r0]
 8008cca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cce:	6083      	str	r3, [r0, #8]
 8008cd0:	8181      	strh	r1, [r0, #12]
 8008cd2:	6643      	str	r3, [r0, #100]	; 0x64
 8008cd4:	81c2      	strh	r2, [r0, #14]
 8008cd6:	6183      	str	r3, [r0, #24]
 8008cd8:	4619      	mov	r1, r3
 8008cda:	2208      	movs	r2, #8
 8008cdc:	305c      	adds	r0, #92	; 0x5c
 8008cde:	f7fe fc33 	bl	8007548 <memset>
 8008ce2:	4b05      	ldr	r3, [pc, #20]	; (8008cf8 <std+0x38>)
 8008ce4:	6263      	str	r3, [r4, #36]	; 0x24
 8008ce6:	4b05      	ldr	r3, [pc, #20]	; (8008cfc <std+0x3c>)
 8008ce8:	62a3      	str	r3, [r4, #40]	; 0x28
 8008cea:	4b05      	ldr	r3, [pc, #20]	; (8008d00 <std+0x40>)
 8008cec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008cee:	4b05      	ldr	r3, [pc, #20]	; (8008d04 <std+0x44>)
 8008cf0:	6224      	str	r4, [r4, #32]
 8008cf2:	6323      	str	r3, [r4, #48]	; 0x30
 8008cf4:	bd10      	pop	{r4, pc}
 8008cf6:	bf00      	nop
 8008cf8:	080098b5 	.word	0x080098b5
 8008cfc:	080098d7 	.word	0x080098d7
 8008d00:	0800990f 	.word	0x0800990f
 8008d04:	08009933 	.word	0x08009933

08008d08 <_cleanup_r>:
 8008d08:	4901      	ldr	r1, [pc, #4]	; (8008d10 <_cleanup_r+0x8>)
 8008d0a:	f000 b8af 	b.w	8008e6c <_fwalk_reent>
 8008d0e:	bf00      	nop
 8008d10:	08009c49 	.word	0x08009c49

08008d14 <__sfmoreglue>:
 8008d14:	b570      	push	{r4, r5, r6, lr}
 8008d16:	1e4a      	subs	r2, r1, #1
 8008d18:	2568      	movs	r5, #104	; 0x68
 8008d1a:	4355      	muls	r5, r2
 8008d1c:	460e      	mov	r6, r1
 8008d1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d22:	f7fe fc69 	bl	80075f8 <_malloc_r>
 8008d26:	4604      	mov	r4, r0
 8008d28:	b140      	cbz	r0, 8008d3c <__sfmoreglue+0x28>
 8008d2a:	2100      	movs	r1, #0
 8008d2c:	e9c0 1600 	strd	r1, r6, [r0]
 8008d30:	300c      	adds	r0, #12
 8008d32:	60a0      	str	r0, [r4, #8]
 8008d34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d38:	f7fe fc06 	bl	8007548 <memset>
 8008d3c:	4620      	mov	r0, r4
 8008d3e:	bd70      	pop	{r4, r5, r6, pc}

08008d40 <__sfp_lock_acquire>:
 8008d40:	4801      	ldr	r0, [pc, #4]	; (8008d48 <__sfp_lock_acquire+0x8>)
 8008d42:	f7f9 bffe 	b.w	8002d42 <__retarget_lock_acquire_recursive>
 8008d46:	bf00      	nop
 8008d48:	20000204 	.word	0x20000204

08008d4c <__sfp_lock_release>:
 8008d4c:	4801      	ldr	r0, [pc, #4]	; (8008d54 <__sfp_lock_release+0x8>)
 8008d4e:	f7fa b80c 	b.w	8002d6a <__retarget_lock_release_recursive>
 8008d52:	bf00      	nop
 8008d54:	20000204 	.word	0x20000204

08008d58 <__sinit_lock_acquire>:
 8008d58:	4801      	ldr	r0, [pc, #4]	; (8008d60 <__sinit_lock_acquire+0x8>)
 8008d5a:	f7f9 bff2 	b.w	8002d42 <__retarget_lock_acquire_recursive>
 8008d5e:	bf00      	nop
 8008d60:	20000200 	.word	0x20000200

08008d64 <__sinit_lock_release>:
 8008d64:	4801      	ldr	r0, [pc, #4]	; (8008d6c <__sinit_lock_release+0x8>)
 8008d66:	f7fa b800 	b.w	8002d6a <__retarget_lock_release_recursive>
 8008d6a:	bf00      	nop
 8008d6c:	20000200 	.word	0x20000200

08008d70 <__sinit>:
 8008d70:	b510      	push	{r4, lr}
 8008d72:	4604      	mov	r4, r0
 8008d74:	f7ff fff0 	bl	8008d58 <__sinit_lock_acquire>
 8008d78:	69a3      	ldr	r3, [r4, #24]
 8008d7a:	b11b      	cbz	r3, 8008d84 <__sinit+0x14>
 8008d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d80:	f7ff bff0 	b.w	8008d64 <__sinit_lock_release>
 8008d84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008d88:	6523      	str	r3, [r4, #80]	; 0x50
 8008d8a:	4b13      	ldr	r3, [pc, #76]	; (8008dd8 <__sinit+0x68>)
 8008d8c:	4a13      	ldr	r2, [pc, #76]	; (8008ddc <__sinit+0x6c>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d92:	42a3      	cmp	r3, r4
 8008d94:	bf04      	itt	eq
 8008d96:	2301      	moveq	r3, #1
 8008d98:	61a3      	streq	r3, [r4, #24]
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	f000 f820 	bl	8008de0 <__sfp>
 8008da0:	6060      	str	r0, [r4, #4]
 8008da2:	4620      	mov	r0, r4
 8008da4:	f000 f81c 	bl	8008de0 <__sfp>
 8008da8:	60a0      	str	r0, [r4, #8]
 8008daa:	4620      	mov	r0, r4
 8008dac:	f000 f818 	bl	8008de0 <__sfp>
 8008db0:	2200      	movs	r2, #0
 8008db2:	60e0      	str	r0, [r4, #12]
 8008db4:	2104      	movs	r1, #4
 8008db6:	6860      	ldr	r0, [r4, #4]
 8008db8:	f7ff ff82 	bl	8008cc0 <std>
 8008dbc:	68a0      	ldr	r0, [r4, #8]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	2109      	movs	r1, #9
 8008dc2:	f7ff ff7d 	bl	8008cc0 <std>
 8008dc6:	68e0      	ldr	r0, [r4, #12]
 8008dc8:	2202      	movs	r2, #2
 8008dca:	2112      	movs	r1, #18
 8008dcc:	f7ff ff78 	bl	8008cc0 <std>
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	61a3      	str	r3, [r4, #24]
 8008dd4:	e7d2      	b.n	8008d7c <__sinit+0xc>
 8008dd6:	bf00      	nop
 8008dd8:	08009f70 	.word	0x08009f70
 8008ddc:	08008d09 	.word	0x08008d09

08008de0 <__sfp>:
 8008de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008de2:	4607      	mov	r7, r0
 8008de4:	f7ff ffac 	bl	8008d40 <__sfp_lock_acquire>
 8008de8:	4b1e      	ldr	r3, [pc, #120]	; (8008e64 <__sfp+0x84>)
 8008dea:	681e      	ldr	r6, [r3, #0]
 8008dec:	69b3      	ldr	r3, [r6, #24]
 8008dee:	b913      	cbnz	r3, 8008df6 <__sfp+0x16>
 8008df0:	4630      	mov	r0, r6
 8008df2:	f7ff ffbd 	bl	8008d70 <__sinit>
 8008df6:	3648      	adds	r6, #72	; 0x48
 8008df8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	d503      	bpl.n	8008e08 <__sfp+0x28>
 8008e00:	6833      	ldr	r3, [r6, #0]
 8008e02:	b30b      	cbz	r3, 8008e48 <__sfp+0x68>
 8008e04:	6836      	ldr	r6, [r6, #0]
 8008e06:	e7f7      	b.n	8008df8 <__sfp+0x18>
 8008e08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e0c:	b9d5      	cbnz	r5, 8008e44 <__sfp+0x64>
 8008e0e:	4b16      	ldr	r3, [pc, #88]	; (8008e68 <__sfp+0x88>)
 8008e10:	60e3      	str	r3, [r4, #12]
 8008e12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e16:	6665      	str	r5, [r4, #100]	; 0x64
 8008e18:	f7f9 ff6d 	bl	8002cf6 <__retarget_lock_init_recursive>
 8008e1c:	f7ff ff96 	bl	8008d4c <__sfp_lock_release>
 8008e20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008e24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008e28:	6025      	str	r5, [r4, #0]
 8008e2a:	61a5      	str	r5, [r4, #24]
 8008e2c:	2208      	movs	r2, #8
 8008e2e:	4629      	mov	r1, r5
 8008e30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e34:	f7fe fb88 	bl	8007548 <memset>
 8008e38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008e3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008e40:	4620      	mov	r0, r4
 8008e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e44:	3468      	adds	r4, #104	; 0x68
 8008e46:	e7d9      	b.n	8008dfc <__sfp+0x1c>
 8008e48:	2104      	movs	r1, #4
 8008e4a:	4638      	mov	r0, r7
 8008e4c:	f7ff ff62 	bl	8008d14 <__sfmoreglue>
 8008e50:	4604      	mov	r4, r0
 8008e52:	6030      	str	r0, [r6, #0]
 8008e54:	2800      	cmp	r0, #0
 8008e56:	d1d5      	bne.n	8008e04 <__sfp+0x24>
 8008e58:	f7ff ff78 	bl	8008d4c <__sfp_lock_release>
 8008e5c:	230c      	movs	r3, #12
 8008e5e:	603b      	str	r3, [r7, #0]
 8008e60:	e7ee      	b.n	8008e40 <__sfp+0x60>
 8008e62:	bf00      	nop
 8008e64:	08009f70 	.word	0x08009f70
 8008e68:	ffff0001 	.word	0xffff0001

08008e6c <_fwalk_reent>:
 8008e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e70:	4606      	mov	r6, r0
 8008e72:	4688      	mov	r8, r1
 8008e74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e78:	2700      	movs	r7, #0
 8008e7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e7e:	f1b9 0901 	subs.w	r9, r9, #1
 8008e82:	d505      	bpl.n	8008e90 <_fwalk_reent+0x24>
 8008e84:	6824      	ldr	r4, [r4, #0]
 8008e86:	2c00      	cmp	r4, #0
 8008e88:	d1f7      	bne.n	8008e7a <_fwalk_reent+0xe>
 8008e8a:	4638      	mov	r0, r7
 8008e8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e90:	89ab      	ldrh	r3, [r5, #12]
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d907      	bls.n	8008ea6 <_fwalk_reent+0x3a>
 8008e96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	d003      	beq.n	8008ea6 <_fwalk_reent+0x3a>
 8008e9e:	4629      	mov	r1, r5
 8008ea0:	4630      	mov	r0, r6
 8008ea2:	47c0      	blx	r8
 8008ea4:	4307      	orrs	r7, r0
 8008ea6:	3568      	adds	r5, #104	; 0x68
 8008ea8:	e7e9      	b.n	8008e7e <_fwalk_reent+0x12>
	...

08008eac <_localeconv_r>:
 8008eac:	4800      	ldr	r0, [pc, #0]	; (8008eb0 <_localeconv_r+0x4>)
 8008eae:	4770      	bx	lr
 8008eb0:	20000164 	.word	0x20000164

08008eb4 <memcpy>:
 8008eb4:	440a      	add	r2, r1
 8008eb6:	4291      	cmp	r1, r2
 8008eb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ebc:	d100      	bne.n	8008ec0 <memcpy+0xc>
 8008ebe:	4770      	bx	lr
 8008ec0:	b510      	push	{r4, lr}
 8008ec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ec6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008eca:	4291      	cmp	r1, r2
 8008ecc:	d1f9      	bne.n	8008ec2 <memcpy+0xe>
 8008ece:	bd10      	pop	{r4, pc}

08008ed0 <__malloc_lock>:
 8008ed0:	4801      	ldr	r0, [pc, #4]	; (8008ed8 <__malloc_lock+0x8>)
 8008ed2:	f7f9 bf36 	b.w	8002d42 <__retarget_lock_acquire_recursive>
 8008ed6:	bf00      	nop
 8008ed8:	20000208 	.word	0x20000208

08008edc <__malloc_unlock>:
 8008edc:	4801      	ldr	r0, [pc, #4]	; (8008ee4 <__malloc_unlock+0x8>)
 8008ede:	f7f9 bf44 	b.w	8002d6a <__retarget_lock_release_recursive>
 8008ee2:	bf00      	nop
 8008ee4:	20000208 	.word	0x20000208

08008ee8 <_Balloc>:
 8008ee8:	b570      	push	{r4, r5, r6, lr}
 8008eea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008eec:	4604      	mov	r4, r0
 8008eee:	460d      	mov	r5, r1
 8008ef0:	b976      	cbnz	r6, 8008f10 <_Balloc+0x28>
 8008ef2:	2010      	movs	r0, #16
 8008ef4:	f7fe fb20 	bl	8007538 <malloc>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	6260      	str	r0, [r4, #36]	; 0x24
 8008efc:	b920      	cbnz	r0, 8008f08 <_Balloc+0x20>
 8008efe:	4b18      	ldr	r3, [pc, #96]	; (8008f60 <_Balloc+0x78>)
 8008f00:	4818      	ldr	r0, [pc, #96]	; (8008f64 <_Balloc+0x7c>)
 8008f02:	2166      	movs	r1, #102	; 0x66
 8008f04:	f000 fdec 	bl	8009ae0 <__assert_func>
 8008f08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f0c:	6006      	str	r6, [r0, #0]
 8008f0e:	60c6      	str	r6, [r0, #12]
 8008f10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008f12:	68f3      	ldr	r3, [r6, #12]
 8008f14:	b183      	cbz	r3, 8008f38 <_Balloc+0x50>
 8008f16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f18:	68db      	ldr	r3, [r3, #12]
 8008f1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f1e:	b9b8      	cbnz	r0, 8008f50 <_Balloc+0x68>
 8008f20:	2101      	movs	r1, #1
 8008f22:	fa01 f605 	lsl.w	r6, r1, r5
 8008f26:	1d72      	adds	r2, r6, #5
 8008f28:	0092      	lsls	r2, r2, #2
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	f000 fb5a 	bl	80095e4 <_calloc_r>
 8008f30:	b160      	cbz	r0, 8008f4c <_Balloc+0x64>
 8008f32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f36:	e00e      	b.n	8008f56 <_Balloc+0x6e>
 8008f38:	2221      	movs	r2, #33	; 0x21
 8008f3a:	2104      	movs	r1, #4
 8008f3c:	4620      	mov	r0, r4
 8008f3e:	f000 fb51 	bl	80095e4 <_calloc_r>
 8008f42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f44:	60f0      	str	r0, [r6, #12]
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d1e4      	bne.n	8008f16 <_Balloc+0x2e>
 8008f4c:	2000      	movs	r0, #0
 8008f4e:	bd70      	pop	{r4, r5, r6, pc}
 8008f50:	6802      	ldr	r2, [r0, #0]
 8008f52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f56:	2300      	movs	r3, #0
 8008f58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f5c:	e7f7      	b.n	8008f4e <_Balloc+0x66>
 8008f5e:	bf00      	nop
 8008f60:	08009fb5 	.word	0x08009fb5
 8008f64:	0800a09c 	.word	0x0800a09c

08008f68 <_Bfree>:
 8008f68:	b570      	push	{r4, r5, r6, lr}
 8008f6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f6c:	4605      	mov	r5, r0
 8008f6e:	460c      	mov	r4, r1
 8008f70:	b976      	cbnz	r6, 8008f90 <_Bfree+0x28>
 8008f72:	2010      	movs	r0, #16
 8008f74:	f7fe fae0 	bl	8007538 <malloc>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	6268      	str	r0, [r5, #36]	; 0x24
 8008f7c:	b920      	cbnz	r0, 8008f88 <_Bfree+0x20>
 8008f7e:	4b09      	ldr	r3, [pc, #36]	; (8008fa4 <_Bfree+0x3c>)
 8008f80:	4809      	ldr	r0, [pc, #36]	; (8008fa8 <_Bfree+0x40>)
 8008f82:	218a      	movs	r1, #138	; 0x8a
 8008f84:	f000 fdac 	bl	8009ae0 <__assert_func>
 8008f88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f8c:	6006      	str	r6, [r0, #0]
 8008f8e:	60c6      	str	r6, [r0, #12]
 8008f90:	b13c      	cbz	r4, 8008fa2 <_Bfree+0x3a>
 8008f92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008f94:	6862      	ldr	r2, [r4, #4]
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f9c:	6021      	str	r1, [r4, #0]
 8008f9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008fa2:	bd70      	pop	{r4, r5, r6, pc}
 8008fa4:	08009fb5 	.word	0x08009fb5
 8008fa8:	0800a09c 	.word	0x0800a09c

08008fac <__multadd>:
 8008fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fb0:	690e      	ldr	r6, [r1, #16]
 8008fb2:	4607      	mov	r7, r0
 8008fb4:	4698      	mov	r8, r3
 8008fb6:	460c      	mov	r4, r1
 8008fb8:	f101 0014 	add.w	r0, r1, #20
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	6805      	ldr	r5, [r0, #0]
 8008fc0:	b2a9      	uxth	r1, r5
 8008fc2:	fb02 8101 	mla	r1, r2, r1, r8
 8008fc6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008fca:	0c2d      	lsrs	r5, r5, #16
 8008fcc:	fb02 c505 	mla	r5, r2, r5, ip
 8008fd0:	b289      	uxth	r1, r1
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008fd8:	429e      	cmp	r6, r3
 8008fda:	f840 1b04 	str.w	r1, [r0], #4
 8008fde:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008fe2:	dcec      	bgt.n	8008fbe <__multadd+0x12>
 8008fe4:	f1b8 0f00 	cmp.w	r8, #0
 8008fe8:	d022      	beq.n	8009030 <__multadd+0x84>
 8008fea:	68a3      	ldr	r3, [r4, #8]
 8008fec:	42b3      	cmp	r3, r6
 8008fee:	dc19      	bgt.n	8009024 <__multadd+0x78>
 8008ff0:	6861      	ldr	r1, [r4, #4]
 8008ff2:	4638      	mov	r0, r7
 8008ff4:	3101      	adds	r1, #1
 8008ff6:	f7ff ff77 	bl	8008ee8 <_Balloc>
 8008ffa:	4605      	mov	r5, r0
 8008ffc:	b928      	cbnz	r0, 800900a <__multadd+0x5e>
 8008ffe:	4602      	mov	r2, r0
 8009000:	4b0d      	ldr	r3, [pc, #52]	; (8009038 <__multadd+0x8c>)
 8009002:	480e      	ldr	r0, [pc, #56]	; (800903c <__multadd+0x90>)
 8009004:	21b5      	movs	r1, #181	; 0xb5
 8009006:	f000 fd6b 	bl	8009ae0 <__assert_func>
 800900a:	6922      	ldr	r2, [r4, #16]
 800900c:	3202      	adds	r2, #2
 800900e:	f104 010c 	add.w	r1, r4, #12
 8009012:	0092      	lsls	r2, r2, #2
 8009014:	300c      	adds	r0, #12
 8009016:	f7ff ff4d 	bl	8008eb4 <memcpy>
 800901a:	4621      	mov	r1, r4
 800901c:	4638      	mov	r0, r7
 800901e:	f7ff ffa3 	bl	8008f68 <_Bfree>
 8009022:	462c      	mov	r4, r5
 8009024:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009028:	3601      	adds	r6, #1
 800902a:	f8c3 8014 	str.w	r8, [r3, #20]
 800902e:	6126      	str	r6, [r4, #16]
 8009030:	4620      	mov	r0, r4
 8009032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009036:	bf00      	nop
 8009038:	0800a02b 	.word	0x0800a02b
 800903c:	0800a09c 	.word	0x0800a09c

08009040 <__hi0bits>:
 8009040:	0c03      	lsrs	r3, r0, #16
 8009042:	041b      	lsls	r3, r3, #16
 8009044:	b9d3      	cbnz	r3, 800907c <__hi0bits+0x3c>
 8009046:	0400      	lsls	r0, r0, #16
 8009048:	2310      	movs	r3, #16
 800904a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800904e:	bf04      	itt	eq
 8009050:	0200      	lsleq	r0, r0, #8
 8009052:	3308      	addeq	r3, #8
 8009054:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009058:	bf04      	itt	eq
 800905a:	0100      	lsleq	r0, r0, #4
 800905c:	3304      	addeq	r3, #4
 800905e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009062:	bf04      	itt	eq
 8009064:	0080      	lsleq	r0, r0, #2
 8009066:	3302      	addeq	r3, #2
 8009068:	2800      	cmp	r0, #0
 800906a:	db05      	blt.n	8009078 <__hi0bits+0x38>
 800906c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009070:	f103 0301 	add.w	r3, r3, #1
 8009074:	bf08      	it	eq
 8009076:	2320      	moveq	r3, #32
 8009078:	4618      	mov	r0, r3
 800907a:	4770      	bx	lr
 800907c:	2300      	movs	r3, #0
 800907e:	e7e4      	b.n	800904a <__hi0bits+0xa>

08009080 <__lo0bits>:
 8009080:	6803      	ldr	r3, [r0, #0]
 8009082:	f013 0207 	ands.w	r2, r3, #7
 8009086:	4601      	mov	r1, r0
 8009088:	d00b      	beq.n	80090a2 <__lo0bits+0x22>
 800908a:	07da      	lsls	r2, r3, #31
 800908c:	d424      	bmi.n	80090d8 <__lo0bits+0x58>
 800908e:	0798      	lsls	r0, r3, #30
 8009090:	bf49      	itett	mi
 8009092:	085b      	lsrmi	r3, r3, #1
 8009094:	089b      	lsrpl	r3, r3, #2
 8009096:	2001      	movmi	r0, #1
 8009098:	600b      	strmi	r3, [r1, #0]
 800909a:	bf5c      	itt	pl
 800909c:	600b      	strpl	r3, [r1, #0]
 800909e:	2002      	movpl	r0, #2
 80090a0:	4770      	bx	lr
 80090a2:	b298      	uxth	r0, r3
 80090a4:	b9b0      	cbnz	r0, 80090d4 <__lo0bits+0x54>
 80090a6:	0c1b      	lsrs	r3, r3, #16
 80090a8:	2010      	movs	r0, #16
 80090aa:	f013 0fff 	tst.w	r3, #255	; 0xff
 80090ae:	bf04      	itt	eq
 80090b0:	0a1b      	lsreq	r3, r3, #8
 80090b2:	3008      	addeq	r0, #8
 80090b4:	071a      	lsls	r2, r3, #28
 80090b6:	bf04      	itt	eq
 80090b8:	091b      	lsreq	r3, r3, #4
 80090ba:	3004      	addeq	r0, #4
 80090bc:	079a      	lsls	r2, r3, #30
 80090be:	bf04      	itt	eq
 80090c0:	089b      	lsreq	r3, r3, #2
 80090c2:	3002      	addeq	r0, #2
 80090c4:	07da      	lsls	r2, r3, #31
 80090c6:	d403      	bmi.n	80090d0 <__lo0bits+0x50>
 80090c8:	085b      	lsrs	r3, r3, #1
 80090ca:	f100 0001 	add.w	r0, r0, #1
 80090ce:	d005      	beq.n	80090dc <__lo0bits+0x5c>
 80090d0:	600b      	str	r3, [r1, #0]
 80090d2:	4770      	bx	lr
 80090d4:	4610      	mov	r0, r2
 80090d6:	e7e8      	b.n	80090aa <__lo0bits+0x2a>
 80090d8:	2000      	movs	r0, #0
 80090da:	4770      	bx	lr
 80090dc:	2020      	movs	r0, #32
 80090de:	4770      	bx	lr

080090e0 <__i2b>:
 80090e0:	b510      	push	{r4, lr}
 80090e2:	460c      	mov	r4, r1
 80090e4:	2101      	movs	r1, #1
 80090e6:	f7ff feff 	bl	8008ee8 <_Balloc>
 80090ea:	4602      	mov	r2, r0
 80090ec:	b928      	cbnz	r0, 80090fa <__i2b+0x1a>
 80090ee:	4b05      	ldr	r3, [pc, #20]	; (8009104 <__i2b+0x24>)
 80090f0:	4805      	ldr	r0, [pc, #20]	; (8009108 <__i2b+0x28>)
 80090f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80090f6:	f000 fcf3 	bl	8009ae0 <__assert_func>
 80090fa:	2301      	movs	r3, #1
 80090fc:	6144      	str	r4, [r0, #20]
 80090fe:	6103      	str	r3, [r0, #16]
 8009100:	bd10      	pop	{r4, pc}
 8009102:	bf00      	nop
 8009104:	0800a02b 	.word	0x0800a02b
 8009108:	0800a09c 	.word	0x0800a09c

0800910c <__multiply>:
 800910c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009110:	4614      	mov	r4, r2
 8009112:	690a      	ldr	r2, [r1, #16]
 8009114:	6923      	ldr	r3, [r4, #16]
 8009116:	429a      	cmp	r2, r3
 8009118:	bfb8      	it	lt
 800911a:	460b      	movlt	r3, r1
 800911c:	460d      	mov	r5, r1
 800911e:	bfbc      	itt	lt
 8009120:	4625      	movlt	r5, r4
 8009122:	461c      	movlt	r4, r3
 8009124:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009128:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800912c:	68ab      	ldr	r3, [r5, #8]
 800912e:	6869      	ldr	r1, [r5, #4]
 8009130:	eb0a 0709 	add.w	r7, sl, r9
 8009134:	42bb      	cmp	r3, r7
 8009136:	b085      	sub	sp, #20
 8009138:	bfb8      	it	lt
 800913a:	3101      	addlt	r1, #1
 800913c:	f7ff fed4 	bl	8008ee8 <_Balloc>
 8009140:	b930      	cbnz	r0, 8009150 <__multiply+0x44>
 8009142:	4602      	mov	r2, r0
 8009144:	4b42      	ldr	r3, [pc, #264]	; (8009250 <__multiply+0x144>)
 8009146:	4843      	ldr	r0, [pc, #268]	; (8009254 <__multiply+0x148>)
 8009148:	f240 115d 	movw	r1, #349	; 0x15d
 800914c:	f000 fcc8 	bl	8009ae0 <__assert_func>
 8009150:	f100 0614 	add.w	r6, r0, #20
 8009154:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009158:	4633      	mov	r3, r6
 800915a:	2200      	movs	r2, #0
 800915c:	4543      	cmp	r3, r8
 800915e:	d31e      	bcc.n	800919e <__multiply+0x92>
 8009160:	f105 0c14 	add.w	ip, r5, #20
 8009164:	f104 0314 	add.w	r3, r4, #20
 8009168:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800916c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009170:	9202      	str	r2, [sp, #8]
 8009172:	ebac 0205 	sub.w	r2, ip, r5
 8009176:	3a15      	subs	r2, #21
 8009178:	f022 0203 	bic.w	r2, r2, #3
 800917c:	3204      	adds	r2, #4
 800917e:	f105 0115 	add.w	r1, r5, #21
 8009182:	458c      	cmp	ip, r1
 8009184:	bf38      	it	cc
 8009186:	2204      	movcc	r2, #4
 8009188:	9201      	str	r2, [sp, #4]
 800918a:	9a02      	ldr	r2, [sp, #8]
 800918c:	9303      	str	r3, [sp, #12]
 800918e:	429a      	cmp	r2, r3
 8009190:	d808      	bhi.n	80091a4 <__multiply+0x98>
 8009192:	2f00      	cmp	r7, #0
 8009194:	dc55      	bgt.n	8009242 <__multiply+0x136>
 8009196:	6107      	str	r7, [r0, #16]
 8009198:	b005      	add	sp, #20
 800919a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800919e:	f843 2b04 	str.w	r2, [r3], #4
 80091a2:	e7db      	b.n	800915c <__multiply+0x50>
 80091a4:	f8b3 a000 	ldrh.w	sl, [r3]
 80091a8:	f1ba 0f00 	cmp.w	sl, #0
 80091ac:	d020      	beq.n	80091f0 <__multiply+0xe4>
 80091ae:	f105 0e14 	add.w	lr, r5, #20
 80091b2:	46b1      	mov	r9, r6
 80091b4:	2200      	movs	r2, #0
 80091b6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80091ba:	f8d9 b000 	ldr.w	fp, [r9]
 80091be:	b2a1      	uxth	r1, r4
 80091c0:	fa1f fb8b 	uxth.w	fp, fp
 80091c4:	fb0a b101 	mla	r1, sl, r1, fp
 80091c8:	4411      	add	r1, r2
 80091ca:	f8d9 2000 	ldr.w	r2, [r9]
 80091ce:	0c24      	lsrs	r4, r4, #16
 80091d0:	0c12      	lsrs	r2, r2, #16
 80091d2:	fb0a 2404 	mla	r4, sl, r4, r2
 80091d6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80091da:	b289      	uxth	r1, r1
 80091dc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80091e0:	45f4      	cmp	ip, lr
 80091e2:	f849 1b04 	str.w	r1, [r9], #4
 80091e6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80091ea:	d8e4      	bhi.n	80091b6 <__multiply+0xaa>
 80091ec:	9901      	ldr	r1, [sp, #4]
 80091ee:	5072      	str	r2, [r6, r1]
 80091f0:	9a03      	ldr	r2, [sp, #12]
 80091f2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80091f6:	3304      	adds	r3, #4
 80091f8:	f1b9 0f00 	cmp.w	r9, #0
 80091fc:	d01f      	beq.n	800923e <__multiply+0x132>
 80091fe:	6834      	ldr	r4, [r6, #0]
 8009200:	f105 0114 	add.w	r1, r5, #20
 8009204:	46b6      	mov	lr, r6
 8009206:	f04f 0a00 	mov.w	sl, #0
 800920a:	880a      	ldrh	r2, [r1, #0]
 800920c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009210:	fb09 b202 	mla	r2, r9, r2, fp
 8009214:	4492      	add	sl, r2
 8009216:	b2a4      	uxth	r4, r4
 8009218:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800921c:	f84e 4b04 	str.w	r4, [lr], #4
 8009220:	f851 4b04 	ldr.w	r4, [r1], #4
 8009224:	f8be 2000 	ldrh.w	r2, [lr]
 8009228:	0c24      	lsrs	r4, r4, #16
 800922a:	fb09 2404 	mla	r4, r9, r4, r2
 800922e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009232:	458c      	cmp	ip, r1
 8009234:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009238:	d8e7      	bhi.n	800920a <__multiply+0xfe>
 800923a:	9a01      	ldr	r2, [sp, #4]
 800923c:	50b4      	str	r4, [r6, r2]
 800923e:	3604      	adds	r6, #4
 8009240:	e7a3      	b.n	800918a <__multiply+0x7e>
 8009242:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009246:	2b00      	cmp	r3, #0
 8009248:	d1a5      	bne.n	8009196 <__multiply+0x8a>
 800924a:	3f01      	subs	r7, #1
 800924c:	e7a1      	b.n	8009192 <__multiply+0x86>
 800924e:	bf00      	nop
 8009250:	0800a02b 	.word	0x0800a02b
 8009254:	0800a09c 	.word	0x0800a09c

08009258 <__pow5mult>:
 8009258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800925c:	4615      	mov	r5, r2
 800925e:	f012 0203 	ands.w	r2, r2, #3
 8009262:	4606      	mov	r6, r0
 8009264:	460f      	mov	r7, r1
 8009266:	d007      	beq.n	8009278 <__pow5mult+0x20>
 8009268:	4c25      	ldr	r4, [pc, #148]	; (8009300 <__pow5mult+0xa8>)
 800926a:	3a01      	subs	r2, #1
 800926c:	2300      	movs	r3, #0
 800926e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009272:	f7ff fe9b 	bl	8008fac <__multadd>
 8009276:	4607      	mov	r7, r0
 8009278:	10ad      	asrs	r5, r5, #2
 800927a:	d03d      	beq.n	80092f8 <__pow5mult+0xa0>
 800927c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800927e:	b97c      	cbnz	r4, 80092a0 <__pow5mult+0x48>
 8009280:	2010      	movs	r0, #16
 8009282:	f7fe f959 	bl	8007538 <malloc>
 8009286:	4602      	mov	r2, r0
 8009288:	6270      	str	r0, [r6, #36]	; 0x24
 800928a:	b928      	cbnz	r0, 8009298 <__pow5mult+0x40>
 800928c:	4b1d      	ldr	r3, [pc, #116]	; (8009304 <__pow5mult+0xac>)
 800928e:	481e      	ldr	r0, [pc, #120]	; (8009308 <__pow5mult+0xb0>)
 8009290:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009294:	f000 fc24 	bl	8009ae0 <__assert_func>
 8009298:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800929c:	6004      	str	r4, [r0, #0]
 800929e:	60c4      	str	r4, [r0, #12]
 80092a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80092a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80092a8:	b94c      	cbnz	r4, 80092be <__pow5mult+0x66>
 80092aa:	f240 2171 	movw	r1, #625	; 0x271
 80092ae:	4630      	mov	r0, r6
 80092b0:	f7ff ff16 	bl	80090e0 <__i2b>
 80092b4:	2300      	movs	r3, #0
 80092b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80092ba:	4604      	mov	r4, r0
 80092bc:	6003      	str	r3, [r0, #0]
 80092be:	f04f 0900 	mov.w	r9, #0
 80092c2:	07eb      	lsls	r3, r5, #31
 80092c4:	d50a      	bpl.n	80092dc <__pow5mult+0x84>
 80092c6:	4639      	mov	r1, r7
 80092c8:	4622      	mov	r2, r4
 80092ca:	4630      	mov	r0, r6
 80092cc:	f7ff ff1e 	bl	800910c <__multiply>
 80092d0:	4639      	mov	r1, r7
 80092d2:	4680      	mov	r8, r0
 80092d4:	4630      	mov	r0, r6
 80092d6:	f7ff fe47 	bl	8008f68 <_Bfree>
 80092da:	4647      	mov	r7, r8
 80092dc:	106d      	asrs	r5, r5, #1
 80092de:	d00b      	beq.n	80092f8 <__pow5mult+0xa0>
 80092e0:	6820      	ldr	r0, [r4, #0]
 80092e2:	b938      	cbnz	r0, 80092f4 <__pow5mult+0x9c>
 80092e4:	4622      	mov	r2, r4
 80092e6:	4621      	mov	r1, r4
 80092e8:	4630      	mov	r0, r6
 80092ea:	f7ff ff0f 	bl	800910c <__multiply>
 80092ee:	6020      	str	r0, [r4, #0]
 80092f0:	f8c0 9000 	str.w	r9, [r0]
 80092f4:	4604      	mov	r4, r0
 80092f6:	e7e4      	b.n	80092c2 <__pow5mult+0x6a>
 80092f8:	4638      	mov	r0, r7
 80092fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092fe:	bf00      	nop
 8009300:	0800a1f0 	.word	0x0800a1f0
 8009304:	08009fb5 	.word	0x08009fb5
 8009308:	0800a09c 	.word	0x0800a09c

0800930c <__lshift>:
 800930c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009310:	460c      	mov	r4, r1
 8009312:	6849      	ldr	r1, [r1, #4]
 8009314:	6923      	ldr	r3, [r4, #16]
 8009316:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800931a:	68a3      	ldr	r3, [r4, #8]
 800931c:	4607      	mov	r7, r0
 800931e:	4691      	mov	r9, r2
 8009320:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009324:	f108 0601 	add.w	r6, r8, #1
 8009328:	42b3      	cmp	r3, r6
 800932a:	db0b      	blt.n	8009344 <__lshift+0x38>
 800932c:	4638      	mov	r0, r7
 800932e:	f7ff fddb 	bl	8008ee8 <_Balloc>
 8009332:	4605      	mov	r5, r0
 8009334:	b948      	cbnz	r0, 800934a <__lshift+0x3e>
 8009336:	4602      	mov	r2, r0
 8009338:	4b28      	ldr	r3, [pc, #160]	; (80093dc <__lshift+0xd0>)
 800933a:	4829      	ldr	r0, [pc, #164]	; (80093e0 <__lshift+0xd4>)
 800933c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009340:	f000 fbce 	bl	8009ae0 <__assert_func>
 8009344:	3101      	adds	r1, #1
 8009346:	005b      	lsls	r3, r3, #1
 8009348:	e7ee      	b.n	8009328 <__lshift+0x1c>
 800934a:	2300      	movs	r3, #0
 800934c:	f100 0114 	add.w	r1, r0, #20
 8009350:	f100 0210 	add.w	r2, r0, #16
 8009354:	4618      	mov	r0, r3
 8009356:	4553      	cmp	r3, sl
 8009358:	db33      	blt.n	80093c2 <__lshift+0xb6>
 800935a:	6920      	ldr	r0, [r4, #16]
 800935c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009360:	f104 0314 	add.w	r3, r4, #20
 8009364:	f019 091f 	ands.w	r9, r9, #31
 8009368:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800936c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009370:	d02b      	beq.n	80093ca <__lshift+0xbe>
 8009372:	f1c9 0e20 	rsb	lr, r9, #32
 8009376:	468a      	mov	sl, r1
 8009378:	2200      	movs	r2, #0
 800937a:	6818      	ldr	r0, [r3, #0]
 800937c:	fa00 f009 	lsl.w	r0, r0, r9
 8009380:	4302      	orrs	r2, r0
 8009382:	f84a 2b04 	str.w	r2, [sl], #4
 8009386:	f853 2b04 	ldr.w	r2, [r3], #4
 800938a:	459c      	cmp	ip, r3
 800938c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009390:	d8f3      	bhi.n	800937a <__lshift+0x6e>
 8009392:	ebac 0304 	sub.w	r3, ip, r4
 8009396:	3b15      	subs	r3, #21
 8009398:	f023 0303 	bic.w	r3, r3, #3
 800939c:	3304      	adds	r3, #4
 800939e:	f104 0015 	add.w	r0, r4, #21
 80093a2:	4584      	cmp	ip, r0
 80093a4:	bf38      	it	cc
 80093a6:	2304      	movcc	r3, #4
 80093a8:	50ca      	str	r2, [r1, r3]
 80093aa:	b10a      	cbz	r2, 80093b0 <__lshift+0xa4>
 80093ac:	f108 0602 	add.w	r6, r8, #2
 80093b0:	3e01      	subs	r6, #1
 80093b2:	4638      	mov	r0, r7
 80093b4:	612e      	str	r6, [r5, #16]
 80093b6:	4621      	mov	r1, r4
 80093b8:	f7ff fdd6 	bl	8008f68 <_Bfree>
 80093bc:	4628      	mov	r0, r5
 80093be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80093c6:	3301      	adds	r3, #1
 80093c8:	e7c5      	b.n	8009356 <__lshift+0x4a>
 80093ca:	3904      	subs	r1, #4
 80093cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80093d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80093d4:	459c      	cmp	ip, r3
 80093d6:	d8f9      	bhi.n	80093cc <__lshift+0xc0>
 80093d8:	e7ea      	b.n	80093b0 <__lshift+0xa4>
 80093da:	bf00      	nop
 80093dc:	0800a02b 	.word	0x0800a02b
 80093e0:	0800a09c 	.word	0x0800a09c

080093e4 <__mcmp>:
 80093e4:	b530      	push	{r4, r5, lr}
 80093e6:	6902      	ldr	r2, [r0, #16]
 80093e8:	690c      	ldr	r4, [r1, #16]
 80093ea:	1b12      	subs	r2, r2, r4
 80093ec:	d10e      	bne.n	800940c <__mcmp+0x28>
 80093ee:	f100 0314 	add.w	r3, r0, #20
 80093f2:	3114      	adds	r1, #20
 80093f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80093f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80093fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009400:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009404:	42a5      	cmp	r5, r4
 8009406:	d003      	beq.n	8009410 <__mcmp+0x2c>
 8009408:	d305      	bcc.n	8009416 <__mcmp+0x32>
 800940a:	2201      	movs	r2, #1
 800940c:	4610      	mov	r0, r2
 800940e:	bd30      	pop	{r4, r5, pc}
 8009410:	4283      	cmp	r3, r0
 8009412:	d3f3      	bcc.n	80093fc <__mcmp+0x18>
 8009414:	e7fa      	b.n	800940c <__mcmp+0x28>
 8009416:	f04f 32ff 	mov.w	r2, #4294967295
 800941a:	e7f7      	b.n	800940c <__mcmp+0x28>

0800941c <__mdiff>:
 800941c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009420:	460c      	mov	r4, r1
 8009422:	4606      	mov	r6, r0
 8009424:	4611      	mov	r1, r2
 8009426:	4620      	mov	r0, r4
 8009428:	4617      	mov	r7, r2
 800942a:	f7ff ffdb 	bl	80093e4 <__mcmp>
 800942e:	1e05      	subs	r5, r0, #0
 8009430:	d110      	bne.n	8009454 <__mdiff+0x38>
 8009432:	4629      	mov	r1, r5
 8009434:	4630      	mov	r0, r6
 8009436:	f7ff fd57 	bl	8008ee8 <_Balloc>
 800943a:	b930      	cbnz	r0, 800944a <__mdiff+0x2e>
 800943c:	4b39      	ldr	r3, [pc, #228]	; (8009524 <__mdiff+0x108>)
 800943e:	4602      	mov	r2, r0
 8009440:	f240 2132 	movw	r1, #562	; 0x232
 8009444:	4838      	ldr	r0, [pc, #224]	; (8009528 <__mdiff+0x10c>)
 8009446:	f000 fb4b 	bl	8009ae0 <__assert_func>
 800944a:	2301      	movs	r3, #1
 800944c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009450:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009454:	bfa4      	itt	ge
 8009456:	463b      	movge	r3, r7
 8009458:	4627      	movge	r7, r4
 800945a:	4630      	mov	r0, r6
 800945c:	6879      	ldr	r1, [r7, #4]
 800945e:	bfa6      	itte	ge
 8009460:	461c      	movge	r4, r3
 8009462:	2500      	movge	r5, #0
 8009464:	2501      	movlt	r5, #1
 8009466:	f7ff fd3f 	bl	8008ee8 <_Balloc>
 800946a:	b920      	cbnz	r0, 8009476 <__mdiff+0x5a>
 800946c:	4b2d      	ldr	r3, [pc, #180]	; (8009524 <__mdiff+0x108>)
 800946e:	4602      	mov	r2, r0
 8009470:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009474:	e7e6      	b.n	8009444 <__mdiff+0x28>
 8009476:	693e      	ldr	r6, [r7, #16]
 8009478:	60c5      	str	r5, [r0, #12]
 800947a:	6925      	ldr	r5, [r4, #16]
 800947c:	f107 0114 	add.w	r1, r7, #20
 8009480:	f104 0914 	add.w	r9, r4, #20
 8009484:	f100 0e14 	add.w	lr, r0, #20
 8009488:	f107 0210 	add.w	r2, r7, #16
 800948c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009490:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009494:	46f2      	mov	sl, lr
 8009496:	2700      	movs	r7, #0
 8009498:	f859 3b04 	ldr.w	r3, [r9], #4
 800949c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80094a0:	fa1f f883 	uxth.w	r8, r3
 80094a4:	fa17 f78b 	uxtah	r7, r7, fp
 80094a8:	0c1b      	lsrs	r3, r3, #16
 80094aa:	eba7 0808 	sub.w	r8, r7, r8
 80094ae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80094b2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80094b6:	fa1f f888 	uxth.w	r8, r8
 80094ba:	141f      	asrs	r7, r3, #16
 80094bc:	454d      	cmp	r5, r9
 80094be:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80094c2:	f84a 3b04 	str.w	r3, [sl], #4
 80094c6:	d8e7      	bhi.n	8009498 <__mdiff+0x7c>
 80094c8:	1b2b      	subs	r3, r5, r4
 80094ca:	3b15      	subs	r3, #21
 80094cc:	f023 0303 	bic.w	r3, r3, #3
 80094d0:	3304      	adds	r3, #4
 80094d2:	3415      	adds	r4, #21
 80094d4:	42a5      	cmp	r5, r4
 80094d6:	bf38      	it	cc
 80094d8:	2304      	movcc	r3, #4
 80094da:	4419      	add	r1, r3
 80094dc:	4473      	add	r3, lr
 80094de:	469e      	mov	lr, r3
 80094e0:	460d      	mov	r5, r1
 80094e2:	4565      	cmp	r5, ip
 80094e4:	d30e      	bcc.n	8009504 <__mdiff+0xe8>
 80094e6:	f10c 0203 	add.w	r2, ip, #3
 80094ea:	1a52      	subs	r2, r2, r1
 80094ec:	f022 0203 	bic.w	r2, r2, #3
 80094f0:	3903      	subs	r1, #3
 80094f2:	458c      	cmp	ip, r1
 80094f4:	bf38      	it	cc
 80094f6:	2200      	movcc	r2, #0
 80094f8:	441a      	add	r2, r3
 80094fa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80094fe:	b17b      	cbz	r3, 8009520 <__mdiff+0x104>
 8009500:	6106      	str	r6, [r0, #16]
 8009502:	e7a5      	b.n	8009450 <__mdiff+0x34>
 8009504:	f855 8b04 	ldr.w	r8, [r5], #4
 8009508:	fa17 f488 	uxtah	r4, r7, r8
 800950c:	1422      	asrs	r2, r4, #16
 800950e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009512:	b2a4      	uxth	r4, r4
 8009514:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009518:	f84e 4b04 	str.w	r4, [lr], #4
 800951c:	1417      	asrs	r7, r2, #16
 800951e:	e7e0      	b.n	80094e2 <__mdiff+0xc6>
 8009520:	3e01      	subs	r6, #1
 8009522:	e7ea      	b.n	80094fa <__mdiff+0xde>
 8009524:	0800a02b 	.word	0x0800a02b
 8009528:	0800a09c 	.word	0x0800a09c

0800952c <__d2b>:
 800952c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009530:	4689      	mov	r9, r1
 8009532:	2101      	movs	r1, #1
 8009534:	ec57 6b10 	vmov	r6, r7, d0
 8009538:	4690      	mov	r8, r2
 800953a:	f7ff fcd5 	bl	8008ee8 <_Balloc>
 800953e:	4604      	mov	r4, r0
 8009540:	b930      	cbnz	r0, 8009550 <__d2b+0x24>
 8009542:	4602      	mov	r2, r0
 8009544:	4b25      	ldr	r3, [pc, #148]	; (80095dc <__d2b+0xb0>)
 8009546:	4826      	ldr	r0, [pc, #152]	; (80095e0 <__d2b+0xb4>)
 8009548:	f240 310a 	movw	r1, #778	; 0x30a
 800954c:	f000 fac8 	bl	8009ae0 <__assert_func>
 8009550:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009554:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009558:	bb35      	cbnz	r5, 80095a8 <__d2b+0x7c>
 800955a:	2e00      	cmp	r6, #0
 800955c:	9301      	str	r3, [sp, #4]
 800955e:	d028      	beq.n	80095b2 <__d2b+0x86>
 8009560:	4668      	mov	r0, sp
 8009562:	9600      	str	r6, [sp, #0]
 8009564:	f7ff fd8c 	bl	8009080 <__lo0bits>
 8009568:	9900      	ldr	r1, [sp, #0]
 800956a:	b300      	cbz	r0, 80095ae <__d2b+0x82>
 800956c:	9a01      	ldr	r2, [sp, #4]
 800956e:	f1c0 0320 	rsb	r3, r0, #32
 8009572:	fa02 f303 	lsl.w	r3, r2, r3
 8009576:	430b      	orrs	r3, r1
 8009578:	40c2      	lsrs	r2, r0
 800957a:	6163      	str	r3, [r4, #20]
 800957c:	9201      	str	r2, [sp, #4]
 800957e:	9b01      	ldr	r3, [sp, #4]
 8009580:	61a3      	str	r3, [r4, #24]
 8009582:	2b00      	cmp	r3, #0
 8009584:	bf14      	ite	ne
 8009586:	2202      	movne	r2, #2
 8009588:	2201      	moveq	r2, #1
 800958a:	6122      	str	r2, [r4, #16]
 800958c:	b1d5      	cbz	r5, 80095c4 <__d2b+0x98>
 800958e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009592:	4405      	add	r5, r0
 8009594:	f8c9 5000 	str.w	r5, [r9]
 8009598:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800959c:	f8c8 0000 	str.w	r0, [r8]
 80095a0:	4620      	mov	r0, r4
 80095a2:	b003      	add	sp, #12
 80095a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095ac:	e7d5      	b.n	800955a <__d2b+0x2e>
 80095ae:	6161      	str	r1, [r4, #20]
 80095b0:	e7e5      	b.n	800957e <__d2b+0x52>
 80095b2:	a801      	add	r0, sp, #4
 80095b4:	f7ff fd64 	bl	8009080 <__lo0bits>
 80095b8:	9b01      	ldr	r3, [sp, #4]
 80095ba:	6163      	str	r3, [r4, #20]
 80095bc:	2201      	movs	r2, #1
 80095be:	6122      	str	r2, [r4, #16]
 80095c0:	3020      	adds	r0, #32
 80095c2:	e7e3      	b.n	800958c <__d2b+0x60>
 80095c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80095c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80095cc:	f8c9 0000 	str.w	r0, [r9]
 80095d0:	6918      	ldr	r0, [r3, #16]
 80095d2:	f7ff fd35 	bl	8009040 <__hi0bits>
 80095d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80095da:	e7df      	b.n	800959c <__d2b+0x70>
 80095dc:	0800a02b 	.word	0x0800a02b
 80095e0:	0800a09c 	.word	0x0800a09c

080095e4 <_calloc_r>:
 80095e4:	b513      	push	{r0, r1, r4, lr}
 80095e6:	434a      	muls	r2, r1
 80095e8:	4611      	mov	r1, r2
 80095ea:	9201      	str	r2, [sp, #4]
 80095ec:	f7fe f804 	bl	80075f8 <_malloc_r>
 80095f0:	4604      	mov	r4, r0
 80095f2:	b118      	cbz	r0, 80095fc <_calloc_r+0x18>
 80095f4:	9a01      	ldr	r2, [sp, #4]
 80095f6:	2100      	movs	r1, #0
 80095f8:	f7fd ffa6 	bl	8007548 <memset>
 80095fc:	4620      	mov	r0, r4
 80095fe:	b002      	add	sp, #8
 8009600:	bd10      	pop	{r4, pc}

08009602 <__sfputc_r>:
 8009602:	6893      	ldr	r3, [r2, #8]
 8009604:	3b01      	subs	r3, #1
 8009606:	2b00      	cmp	r3, #0
 8009608:	b410      	push	{r4}
 800960a:	6093      	str	r3, [r2, #8]
 800960c:	da08      	bge.n	8009620 <__sfputc_r+0x1e>
 800960e:	6994      	ldr	r4, [r2, #24]
 8009610:	42a3      	cmp	r3, r4
 8009612:	db01      	blt.n	8009618 <__sfputc_r+0x16>
 8009614:	290a      	cmp	r1, #10
 8009616:	d103      	bne.n	8009620 <__sfputc_r+0x1e>
 8009618:	f85d 4b04 	ldr.w	r4, [sp], #4
 800961c:	f000 b98e 	b.w	800993c <__swbuf_r>
 8009620:	6813      	ldr	r3, [r2, #0]
 8009622:	1c58      	adds	r0, r3, #1
 8009624:	6010      	str	r0, [r2, #0]
 8009626:	7019      	strb	r1, [r3, #0]
 8009628:	4608      	mov	r0, r1
 800962a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800962e:	4770      	bx	lr

08009630 <__sfputs_r>:
 8009630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009632:	4606      	mov	r6, r0
 8009634:	460f      	mov	r7, r1
 8009636:	4614      	mov	r4, r2
 8009638:	18d5      	adds	r5, r2, r3
 800963a:	42ac      	cmp	r4, r5
 800963c:	d101      	bne.n	8009642 <__sfputs_r+0x12>
 800963e:	2000      	movs	r0, #0
 8009640:	e007      	b.n	8009652 <__sfputs_r+0x22>
 8009642:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009646:	463a      	mov	r2, r7
 8009648:	4630      	mov	r0, r6
 800964a:	f7ff ffda 	bl	8009602 <__sfputc_r>
 800964e:	1c43      	adds	r3, r0, #1
 8009650:	d1f3      	bne.n	800963a <__sfputs_r+0xa>
 8009652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009654 <_vfiprintf_r>:
 8009654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009658:	460d      	mov	r5, r1
 800965a:	b09d      	sub	sp, #116	; 0x74
 800965c:	4614      	mov	r4, r2
 800965e:	4698      	mov	r8, r3
 8009660:	4606      	mov	r6, r0
 8009662:	b118      	cbz	r0, 800966c <_vfiprintf_r+0x18>
 8009664:	6983      	ldr	r3, [r0, #24]
 8009666:	b90b      	cbnz	r3, 800966c <_vfiprintf_r+0x18>
 8009668:	f7ff fb82 	bl	8008d70 <__sinit>
 800966c:	4b89      	ldr	r3, [pc, #548]	; (8009894 <_vfiprintf_r+0x240>)
 800966e:	429d      	cmp	r5, r3
 8009670:	d11b      	bne.n	80096aa <_vfiprintf_r+0x56>
 8009672:	6875      	ldr	r5, [r6, #4]
 8009674:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009676:	07d9      	lsls	r1, r3, #31
 8009678:	d405      	bmi.n	8009686 <_vfiprintf_r+0x32>
 800967a:	89ab      	ldrh	r3, [r5, #12]
 800967c:	059a      	lsls	r2, r3, #22
 800967e:	d402      	bmi.n	8009686 <_vfiprintf_r+0x32>
 8009680:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009682:	f7f9 fb5e 	bl	8002d42 <__retarget_lock_acquire_recursive>
 8009686:	89ab      	ldrh	r3, [r5, #12]
 8009688:	071b      	lsls	r3, r3, #28
 800968a:	d501      	bpl.n	8009690 <_vfiprintf_r+0x3c>
 800968c:	692b      	ldr	r3, [r5, #16]
 800968e:	b9eb      	cbnz	r3, 80096cc <_vfiprintf_r+0x78>
 8009690:	4629      	mov	r1, r5
 8009692:	4630      	mov	r0, r6
 8009694:	f000 f9b6 	bl	8009a04 <__swsetup_r>
 8009698:	b1c0      	cbz	r0, 80096cc <_vfiprintf_r+0x78>
 800969a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800969c:	07dc      	lsls	r4, r3, #31
 800969e:	d50e      	bpl.n	80096be <_vfiprintf_r+0x6a>
 80096a0:	f04f 30ff 	mov.w	r0, #4294967295
 80096a4:	b01d      	add	sp, #116	; 0x74
 80096a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096aa:	4b7b      	ldr	r3, [pc, #492]	; (8009898 <_vfiprintf_r+0x244>)
 80096ac:	429d      	cmp	r5, r3
 80096ae:	d101      	bne.n	80096b4 <_vfiprintf_r+0x60>
 80096b0:	68b5      	ldr	r5, [r6, #8]
 80096b2:	e7df      	b.n	8009674 <_vfiprintf_r+0x20>
 80096b4:	4b79      	ldr	r3, [pc, #484]	; (800989c <_vfiprintf_r+0x248>)
 80096b6:	429d      	cmp	r5, r3
 80096b8:	bf08      	it	eq
 80096ba:	68f5      	ldreq	r5, [r6, #12]
 80096bc:	e7da      	b.n	8009674 <_vfiprintf_r+0x20>
 80096be:	89ab      	ldrh	r3, [r5, #12]
 80096c0:	0598      	lsls	r0, r3, #22
 80096c2:	d4ed      	bmi.n	80096a0 <_vfiprintf_r+0x4c>
 80096c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096c6:	f7f9 fb50 	bl	8002d6a <__retarget_lock_release_recursive>
 80096ca:	e7e9      	b.n	80096a0 <_vfiprintf_r+0x4c>
 80096cc:	2300      	movs	r3, #0
 80096ce:	9309      	str	r3, [sp, #36]	; 0x24
 80096d0:	2320      	movs	r3, #32
 80096d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80096da:	2330      	movs	r3, #48	; 0x30
 80096dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80098a0 <_vfiprintf_r+0x24c>
 80096e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096e4:	f04f 0901 	mov.w	r9, #1
 80096e8:	4623      	mov	r3, r4
 80096ea:	469a      	mov	sl, r3
 80096ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096f0:	b10a      	cbz	r2, 80096f6 <_vfiprintf_r+0xa2>
 80096f2:	2a25      	cmp	r2, #37	; 0x25
 80096f4:	d1f9      	bne.n	80096ea <_vfiprintf_r+0x96>
 80096f6:	ebba 0b04 	subs.w	fp, sl, r4
 80096fa:	d00b      	beq.n	8009714 <_vfiprintf_r+0xc0>
 80096fc:	465b      	mov	r3, fp
 80096fe:	4622      	mov	r2, r4
 8009700:	4629      	mov	r1, r5
 8009702:	4630      	mov	r0, r6
 8009704:	f7ff ff94 	bl	8009630 <__sfputs_r>
 8009708:	3001      	adds	r0, #1
 800970a:	f000 80aa 	beq.w	8009862 <_vfiprintf_r+0x20e>
 800970e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009710:	445a      	add	r2, fp
 8009712:	9209      	str	r2, [sp, #36]	; 0x24
 8009714:	f89a 3000 	ldrb.w	r3, [sl]
 8009718:	2b00      	cmp	r3, #0
 800971a:	f000 80a2 	beq.w	8009862 <_vfiprintf_r+0x20e>
 800971e:	2300      	movs	r3, #0
 8009720:	f04f 32ff 	mov.w	r2, #4294967295
 8009724:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009728:	f10a 0a01 	add.w	sl, sl, #1
 800972c:	9304      	str	r3, [sp, #16]
 800972e:	9307      	str	r3, [sp, #28]
 8009730:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009734:	931a      	str	r3, [sp, #104]	; 0x68
 8009736:	4654      	mov	r4, sl
 8009738:	2205      	movs	r2, #5
 800973a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800973e:	4858      	ldr	r0, [pc, #352]	; (80098a0 <_vfiprintf_r+0x24c>)
 8009740:	f7f6 fd6e 	bl	8000220 <memchr>
 8009744:	9a04      	ldr	r2, [sp, #16]
 8009746:	b9d8      	cbnz	r0, 8009780 <_vfiprintf_r+0x12c>
 8009748:	06d1      	lsls	r1, r2, #27
 800974a:	bf44      	itt	mi
 800974c:	2320      	movmi	r3, #32
 800974e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009752:	0713      	lsls	r3, r2, #28
 8009754:	bf44      	itt	mi
 8009756:	232b      	movmi	r3, #43	; 0x2b
 8009758:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800975c:	f89a 3000 	ldrb.w	r3, [sl]
 8009760:	2b2a      	cmp	r3, #42	; 0x2a
 8009762:	d015      	beq.n	8009790 <_vfiprintf_r+0x13c>
 8009764:	9a07      	ldr	r2, [sp, #28]
 8009766:	4654      	mov	r4, sl
 8009768:	2000      	movs	r0, #0
 800976a:	f04f 0c0a 	mov.w	ip, #10
 800976e:	4621      	mov	r1, r4
 8009770:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009774:	3b30      	subs	r3, #48	; 0x30
 8009776:	2b09      	cmp	r3, #9
 8009778:	d94e      	bls.n	8009818 <_vfiprintf_r+0x1c4>
 800977a:	b1b0      	cbz	r0, 80097aa <_vfiprintf_r+0x156>
 800977c:	9207      	str	r2, [sp, #28]
 800977e:	e014      	b.n	80097aa <_vfiprintf_r+0x156>
 8009780:	eba0 0308 	sub.w	r3, r0, r8
 8009784:	fa09 f303 	lsl.w	r3, r9, r3
 8009788:	4313      	orrs	r3, r2
 800978a:	9304      	str	r3, [sp, #16]
 800978c:	46a2      	mov	sl, r4
 800978e:	e7d2      	b.n	8009736 <_vfiprintf_r+0xe2>
 8009790:	9b03      	ldr	r3, [sp, #12]
 8009792:	1d19      	adds	r1, r3, #4
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	9103      	str	r1, [sp, #12]
 8009798:	2b00      	cmp	r3, #0
 800979a:	bfbb      	ittet	lt
 800979c:	425b      	neglt	r3, r3
 800979e:	f042 0202 	orrlt.w	r2, r2, #2
 80097a2:	9307      	strge	r3, [sp, #28]
 80097a4:	9307      	strlt	r3, [sp, #28]
 80097a6:	bfb8      	it	lt
 80097a8:	9204      	strlt	r2, [sp, #16]
 80097aa:	7823      	ldrb	r3, [r4, #0]
 80097ac:	2b2e      	cmp	r3, #46	; 0x2e
 80097ae:	d10c      	bne.n	80097ca <_vfiprintf_r+0x176>
 80097b0:	7863      	ldrb	r3, [r4, #1]
 80097b2:	2b2a      	cmp	r3, #42	; 0x2a
 80097b4:	d135      	bne.n	8009822 <_vfiprintf_r+0x1ce>
 80097b6:	9b03      	ldr	r3, [sp, #12]
 80097b8:	1d1a      	adds	r2, r3, #4
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	9203      	str	r2, [sp, #12]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	bfb8      	it	lt
 80097c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80097c6:	3402      	adds	r4, #2
 80097c8:	9305      	str	r3, [sp, #20]
 80097ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80098b0 <_vfiprintf_r+0x25c>
 80097ce:	7821      	ldrb	r1, [r4, #0]
 80097d0:	2203      	movs	r2, #3
 80097d2:	4650      	mov	r0, sl
 80097d4:	f7f6 fd24 	bl	8000220 <memchr>
 80097d8:	b140      	cbz	r0, 80097ec <_vfiprintf_r+0x198>
 80097da:	2340      	movs	r3, #64	; 0x40
 80097dc:	eba0 000a 	sub.w	r0, r0, sl
 80097e0:	fa03 f000 	lsl.w	r0, r3, r0
 80097e4:	9b04      	ldr	r3, [sp, #16]
 80097e6:	4303      	orrs	r3, r0
 80097e8:	3401      	adds	r4, #1
 80097ea:	9304      	str	r3, [sp, #16]
 80097ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097f0:	482c      	ldr	r0, [pc, #176]	; (80098a4 <_vfiprintf_r+0x250>)
 80097f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097f6:	2206      	movs	r2, #6
 80097f8:	f7f6 fd12 	bl	8000220 <memchr>
 80097fc:	2800      	cmp	r0, #0
 80097fe:	d03f      	beq.n	8009880 <_vfiprintf_r+0x22c>
 8009800:	4b29      	ldr	r3, [pc, #164]	; (80098a8 <_vfiprintf_r+0x254>)
 8009802:	bb1b      	cbnz	r3, 800984c <_vfiprintf_r+0x1f8>
 8009804:	9b03      	ldr	r3, [sp, #12]
 8009806:	3307      	adds	r3, #7
 8009808:	f023 0307 	bic.w	r3, r3, #7
 800980c:	3308      	adds	r3, #8
 800980e:	9303      	str	r3, [sp, #12]
 8009810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009812:	443b      	add	r3, r7
 8009814:	9309      	str	r3, [sp, #36]	; 0x24
 8009816:	e767      	b.n	80096e8 <_vfiprintf_r+0x94>
 8009818:	fb0c 3202 	mla	r2, ip, r2, r3
 800981c:	460c      	mov	r4, r1
 800981e:	2001      	movs	r0, #1
 8009820:	e7a5      	b.n	800976e <_vfiprintf_r+0x11a>
 8009822:	2300      	movs	r3, #0
 8009824:	3401      	adds	r4, #1
 8009826:	9305      	str	r3, [sp, #20]
 8009828:	4619      	mov	r1, r3
 800982a:	f04f 0c0a 	mov.w	ip, #10
 800982e:	4620      	mov	r0, r4
 8009830:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009834:	3a30      	subs	r2, #48	; 0x30
 8009836:	2a09      	cmp	r2, #9
 8009838:	d903      	bls.n	8009842 <_vfiprintf_r+0x1ee>
 800983a:	2b00      	cmp	r3, #0
 800983c:	d0c5      	beq.n	80097ca <_vfiprintf_r+0x176>
 800983e:	9105      	str	r1, [sp, #20]
 8009840:	e7c3      	b.n	80097ca <_vfiprintf_r+0x176>
 8009842:	fb0c 2101 	mla	r1, ip, r1, r2
 8009846:	4604      	mov	r4, r0
 8009848:	2301      	movs	r3, #1
 800984a:	e7f0      	b.n	800982e <_vfiprintf_r+0x1da>
 800984c:	ab03      	add	r3, sp, #12
 800984e:	9300      	str	r3, [sp, #0]
 8009850:	462a      	mov	r2, r5
 8009852:	4b16      	ldr	r3, [pc, #88]	; (80098ac <_vfiprintf_r+0x258>)
 8009854:	a904      	add	r1, sp, #16
 8009856:	4630      	mov	r0, r6
 8009858:	f7fd ffc8 	bl	80077ec <_printf_float>
 800985c:	4607      	mov	r7, r0
 800985e:	1c78      	adds	r0, r7, #1
 8009860:	d1d6      	bne.n	8009810 <_vfiprintf_r+0x1bc>
 8009862:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009864:	07d9      	lsls	r1, r3, #31
 8009866:	d405      	bmi.n	8009874 <_vfiprintf_r+0x220>
 8009868:	89ab      	ldrh	r3, [r5, #12]
 800986a:	059a      	lsls	r2, r3, #22
 800986c:	d402      	bmi.n	8009874 <_vfiprintf_r+0x220>
 800986e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009870:	f7f9 fa7b 	bl	8002d6a <__retarget_lock_release_recursive>
 8009874:	89ab      	ldrh	r3, [r5, #12]
 8009876:	065b      	lsls	r3, r3, #25
 8009878:	f53f af12 	bmi.w	80096a0 <_vfiprintf_r+0x4c>
 800987c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800987e:	e711      	b.n	80096a4 <_vfiprintf_r+0x50>
 8009880:	ab03      	add	r3, sp, #12
 8009882:	9300      	str	r3, [sp, #0]
 8009884:	462a      	mov	r2, r5
 8009886:	4b09      	ldr	r3, [pc, #36]	; (80098ac <_vfiprintf_r+0x258>)
 8009888:	a904      	add	r1, sp, #16
 800988a:	4630      	mov	r0, r6
 800988c:	f7fe fa52 	bl	8007d34 <_printf_i>
 8009890:	e7e4      	b.n	800985c <_vfiprintf_r+0x208>
 8009892:	bf00      	nop
 8009894:	0800a05c 	.word	0x0800a05c
 8009898:	0800a07c 	.word	0x0800a07c
 800989c:	0800a03c 	.word	0x0800a03c
 80098a0:	0800a1fc 	.word	0x0800a1fc
 80098a4:	0800a206 	.word	0x0800a206
 80098a8:	080077ed 	.word	0x080077ed
 80098ac:	08009631 	.word	0x08009631
 80098b0:	0800a202 	.word	0x0800a202

080098b4 <__sread>:
 80098b4:	b510      	push	{r4, lr}
 80098b6:	460c      	mov	r4, r1
 80098b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098bc:	f000 fa9a 	bl	8009df4 <_read_r>
 80098c0:	2800      	cmp	r0, #0
 80098c2:	bfab      	itete	ge
 80098c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098c6:	89a3      	ldrhlt	r3, [r4, #12]
 80098c8:	181b      	addge	r3, r3, r0
 80098ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098ce:	bfac      	ite	ge
 80098d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80098d2:	81a3      	strhlt	r3, [r4, #12]
 80098d4:	bd10      	pop	{r4, pc}

080098d6 <__swrite>:
 80098d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098da:	461f      	mov	r7, r3
 80098dc:	898b      	ldrh	r3, [r1, #12]
 80098de:	05db      	lsls	r3, r3, #23
 80098e0:	4605      	mov	r5, r0
 80098e2:	460c      	mov	r4, r1
 80098e4:	4616      	mov	r6, r2
 80098e6:	d505      	bpl.n	80098f4 <__swrite+0x1e>
 80098e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098ec:	2302      	movs	r3, #2
 80098ee:	2200      	movs	r2, #0
 80098f0:	f000 f9f8 	bl	8009ce4 <_lseek_r>
 80098f4:	89a3      	ldrh	r3, [r4, #12]
 80098f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098fe:	81a3      	strh	r3, [r4, #12]
 8009900:	4632      	mov	r2, r6
 8009902:	463b      	mov	r3, r7
 8009904:	4628      	mov	r0, r5
 8009906:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800990a:	f000 b869 	b.w	80099e0 <_write_r>

0800990e <__sseek>:
 800990e:	b510      	push	{r4, lr}
 8009910:	460c      	mov	r4, r1
 8009912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009916:	f000 f9e5 	bl	8009ce4 <_lseek_r>
 800991a:	1c43      	adds	r3, r0, #1
 800991c:	89a3      	ldrh	r3, [r4, #12]
 800991e:	bf15      	itete	ne
 8009920:	6560      	strne	r0, [r4, #84]	; 0x54
 8009922:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009926:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800992a:	81a3      	strheq	r3, [r4, #12]
 800992c:	bf18      	it	ne
 800992e:	81a3      	strhne	r3, [r4, #12]
 8009930:	bd10      	pop	{r4, pc}

08009932 <__sclose>:
 8009932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009936:	f000 b8f1 	b.w	8009b1c <_close_r>
	...

0800993c <__swbuf_r>:
 800993c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993e:	460e      	mov	r6, r1
 8009940:	4614      	mov	r4, r2
 8009942:	4605      	mov	r5, r0
 8009944:	b118      	cbz	r0, 800994e <__swbuf_r+0x12>
 8009946:	6983      	ldr	r3, [r0, #24]
 8009948:	b90b      	cbnz	r3, 800994e <__swbuf_r+0x12>
 800994a:	f7ff fa11 	bl	8008d70 <__sinit>
 800994e:	4b21      	ldr	r3, [pc, #132]	; (80099d4 <__swbuf_r+0x98>)
 8009950:	429c      	cmp	r4, r3
 8009952:	d12b      	bne.n	80099ac <__swbuf_r+0x70>
 8009954:	686c      	ldr	r4, [r5, #4]
 8009956:	69a3      	ldr	r3, [r4, #24]
 8009958:	60a3      	str	r3, [r4, #8]
 800995a:	89a3      	ldrh	r3, [r4, #12]
 800995c:	071a      	lsls	r2, r3, #28
 800995e:	d52f      	bpl.n	80099c0 <__swbuf_r+0x84>
 8009960:	6923      	ldr	r3, [r4, #16]
 8009962:	b36b      	cbz	r3, 80099c0 <__swbuf_r+0x84>
 8009964:	6923      	ldr	r3, [r4, #16]
 8009966:	6820      	ldr	r0, [r4, #0]
 8009968:	1ac0      	subs	r0, r0, r3
 800996a:	6963      	ldr	r3, [r4, #20]
 800996c:	b2f6      	uxtb	r6, r6
 800996e:	4283      	cmp	r3, r0
 8009970:	4637      	mov	r7, r6
 8009972:	dc04      	bgt.n	800997e <__swbuf_r+0x42>
 8009974:	4621      	mov	r1, r4
 8009976:	4628      	mov	r0, r5
 8009978:	f000 f966 	bl	8009c48 <_fflush_r>
 800997c:	bb30      	cbnz	r0, 80099cc <__swbuf_r+0x90>
 800997e:	68a3      	ldr	r3, [r4, #8]
 8009980:	3b01      	subs	r3, #1
 8009982:	60a3      	str	r3, [r4, #8]
 8009984:	6823      	ldr	r3, [r4, #0]
 8009986:	1c5a      	adds	r2, r3, #1
 8009988:	6022      	str	r2, [r4, #0]
 800998a:	701e      	strb	r6, [r3, #0]
 800998c:	6963      	ldr	r3, [r4, #20]
 800998e:	3001      	adds	r0, #1
 8009990:	4283      	cmp	r3, r0
 8009992:	d004      	beq.n	800999e <__swbuf_r+0x62>
 8009994:	89a3      	ldrh	r3, [r4, #12]
 8009996:	07db      	lsls	r3, r3, #31
 8009998:	d506      	bpl.n	80099a8 <__swbuf_r+0x6c>
 800999a:	2e0a      	cmp	r6, #10
 800999c:	d104      	bne.n	80099a8 <__swbuf_r+0x6c>
 800999e:	4621      	mov	r1, r4
 80099a0:	4628      	mov	r0, r5
 80099a2:	f000 f951 	bl	8009c48 <_fflush_r>
 80099a6:	b988      	cbnz	r0, 80099cc <__swbuf_r+0x90>
 80099a8:	4638      	mov	r0, r7
 80099aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099ac:	4b0a      	ldr	r3, [pc, #40]	; (80099d8 <__swbuf_r+0x9c>)
 80099ae:	429c      	cmp	r4, r3
 80099b0:	d101      	bne.n	80099b6 <__swbuf_r+0x7a>
 80099b2:	68ac      	ldr	r4, [r5, #8]
 80099b4:	e7cf      	b.n	8009956 <__swbuf_r+0x1a>
 80099b6:	4b09      	ldr	r3, [pc, #36]	; (80099dc <__swbuf_r+0xa0>)
 80099b8:	429c      	cmp	r4, r3
 80099ba:	bf08      	it	eq
 80099bc:	68ec      	ldreq	r4, [r5, #12]
 80099be:	e7ca      	b.n	8009956 <__swbuf_r+0x1a>
 80099c0:	4621      	mov	r1, r4
 80099c2:	4628      	mov	r0, r5
 80099c4:	f000 f81e 	bl	8009a04 <__swsetup_r>
 80099c8:	2800      	cmp	r0, #0
 80099ca:	d0cb      	beq.n	8009964 <__swbuf_r+0x28>
 80099cc:	f04f 37ff 	mov.w	r7, #4294967295
 80099d0:	e7ea      	b.n	80099a8 <__swbuf_r+0x6c>
 80099d2:	bf00      	nop
 80099d4:	0800a05c 	.word	0x0800a05c
 80099d8:	0800a07c 	.word	0x0800a07c
 80099dc:	0800a03c 	.word	0x0800a03c

080099e0 <_write_r>:
 80099e0:	b538      	push	{r3, r4, r5, lr}
 80099e2:	4d07      	ldr	r5, [pc, #28]	; (8009a00 <_write_r+0x20>)
 80099e4:	4604      	mov	r4, r0
 80099e6:	4608      	mov	r0, r1
 80099e8:	4611      	mov	r1, r2
 80099ea:	2200      	movs	r2, #0
 80099ec:	602a      	str	r2, [r5, #0]
 80099ee:	461a      	mov	r2, r3
 80099f0:	f7f8 fd77 	bl	80024e2 <_write>
 80099f4:	1c43      	adds	r3, r0, #1
 80099f6:	d102      	bne.n	80099fe <_write_r+0x1e>
 80099f8:	682b      	ldr	r3, [r5, #0]
 80099fa:	b103      	cbz	r3, 80099fe <_write_r+0x1e>
 80099fc:	6023      	str	r3, [r4, #0]
 80099fe:	bd38      	pop	{r3, r4, r5, pc}
 8009a00:	20008580 	.word	0x20008580

08009a04 <__swsetup_r>:
 8009a04:	4b32      	ldr	r3, [pc, #200]	; (8009ad0 <__swsetup_r+0xcc>)
 8009a06:	b570      	push	{r4, r5, r6, lr}
 8009a08:	681d      	ldr	r5, [r3, #0]
 8009a0a:	4606      	mov	r6, r0
 8009a0c:	460c      	mov	r4, r1
 8009a0e:	b125      	cbz	r5, 8009a1a <__swsetup_r+0x16>
 8009a10:	69ab      	ldr	r3, [r5, #24]
 8009a12:	b913      	cbnz	r3, 8009a1a <__swsetup_r+0x16>
 8009a14:	4628      	mov	r0, r5
 8009a16:	f7ff f9ab 	bl	8008d70 <__sinit>
 8009a1a:	4b2e      	ldr	r3, [pc, #184]	; (8009ad4 <__swsetup_r+0xd0>)
 8009a1c:	429c      	cmp	r4, r3
 8009a1e:	d10f      	bne.n	8009a40 <__swsetup_r+0x3c>
 8009a20:	686c      	ldr	r4, [r5, #4]
 8009a22:	89a3      	ldrh	r3, [r4, #12]
 8009a24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a28:	0719      	lsls	r1, r3, #28
 8009a2a:	d42c      	bmi.n	8009a86 <__swsetup_r+0x82>
 8009a2c:	06dd      	lsls	r5, r3, #27
 8009a2e:	d411      	bmi.n	8009a54 <__swsetup_r+0x50>
 8009a30:	2309      	movs	r3, #9
 8009a32:	6033      	str	r3, [r6, #0]
 8009a34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a38:	81a3      	strh	r3, [r4, #12]
 8009a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a3e:	e03e      	b.n	8009abe <__swsetup_r+0xba>
 8009a40:	4b25      	ldr	r3, [pc, #148]	; (8009ad8 <__swsetup_r+0xd4>)
 8009a42:	429c      	cmp	r4, r3
 8009a44:	d101      	bne.n	8009a4a <__swsetup_r+0x46>
 8009a46:	68ac      	ldr	r4, [r5, #8]
 8009a48:	e7eb      	b.n	8009a22 <__swsetup_r+0x1e>
 8009a4a:	4b24      	ldr	r3, [pc, #144]	; (8009adc <__swsetup_r+0xd8>)
 8009a4c:	429c      	cmp	r4, r3
 8009a4e:	bf08      	it	eq
 8009a50:	68ec      	ldreq	r4, [r5, #12]
 8009a52:	e7e6      	b.n	8009a22 <__swsetup_r+0x1e>
 8009a54:	0758      	lsls	r0, r3, #29
 8009a56:	d512      	bpl.n	8009a7e <__swsetup_r+0x7a>
 8009a58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a5a:	b141      	cbz	r1, 8009a6e <__swsetup_r+0x6a>
 8009a5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a60:	4299      	cmp	r1, r3
 8009a62:	d002      	beq.n	8009a6a <__swsetup_r+0x66>
 8009a64:	4630      	mov	r0, r6
 8009a66:	f7fd fd77 	bl	8007558 <_free_r>
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	6363      	str	r3, [r4, #52]	; 0x34
 8009a6e:	89a3      	ldrh	r3, [r4, #12]
 8009a70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a74:	81a3      	strh	r3, [r4, #12]
 8009a76:	2300      	movs	r3, #0
 8009a78:	6063      	str	r3, [r4, #4]
 8009a7a:	6923      	ldr	r3, [r4, #16]
 8009a7c:	6023      	str	r3, [r4, #0]
 8009a7e:	89a3      	ldrh	r3, [r4, #12]
 8009a80:	f043 0308 	orr.w	r3, r3, #8
 8009a84:	81a3      	strh	r3, [r4, #12]
 8009a86:	6923      	ldr	r3, [r4, #16]
 8009a88:	b94b      	cbnz	r3, 8009a9e <__swsetup_r+0x9a>
 8009a8a:	89a3      	ldrh	r3, [r4, #12]
 8009a8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009a90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a94:	d003      	beq.n	8009a9e <__swsetup_r+0x9a>
 8009a96:	4621      	mov	r1, r4
 8009a98:	4630      	mov	r0, r6
 8009a9a:	f000 f959 	bl	8009d50 <__smakebuf_r>
 8009a9e:	89a0      	ldrh	r0, [r4, #12]
 8009aa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009aa4:	f010 0301 	ands.w	r3, r0, #1
 8009aa8:	d00a      	beq.n	8009ac0 <__swsetup_r+0xbc>
 8009aaa:	2300      	movs	r3, #0
 8009aac:	60a3      	str	r3, [r4, #8]
 8009aae:	6963      	ldr	r3, [r4, #20]
 8009ab0:	425b      	negs	r3, r3
 8009ab2:	61a3      	str	r3, [r4, #24]
 8009ab4:	6923      	ldr	r3, [r4, #16]
 8009ab6:	b943      	cbnz	r3, 8009aca <__swsetup_r+0xc6>
 8009ab8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009abc:	d1ba      	bne.n	8009a34 <__swsetup_r+0x30>
 8009abe:	bd70      	pop	{r4, r5, r6, pc}
 8009ac0:	0781      	lsls	r1, r0, #30
 8009ac2:	bf58      	it	pl
 8009ac4:	6963      	ldrpl	r3, [r4, #20]
 8009ac6:	60a3      	str	r3, [r4, #8]
 8009ac8:	e7f4      	b.n	8009ab4 <__swsetup_r+0xb0>
 8009aca:	2000      	movs	r0, #0
 8009acc:	e7f7      	b.n	8009abe <__swsetup_r+0xba>
 8009ace:	bf00      	nop
 8009ad0:	20000010 	.word	0x20000010
 8009ad4:	0800a05c 	.word	0x0800a05c
 8009ad8:	0800a07c 	.word	0x0800a07c
 8009adc:	0800a03c 	.word	0x0800a03c

08009ae0 <__assert_func>:
 8009ae0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ae2:	4614      	mov	r4, r2
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	4b09      	ldr	r3, [pc, #36]	; (8009b0c <__assert_func+0x2c>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4605      	mov	r5, r0
 8009aec:	68d8      	ldr	r0, [r3, #12]
 8009aee:	b14c      	cbz	r4, 8009b04 <__assert_func+0x24>
 8009af0:	4b07      	ldr	r3, [pc, #28]	; (8009b10 <__assert_func+0x30>)
 8009af2:	9100      	str	r1, [sp, #0]
 8009af4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009af8:	4906      	ldr	r1, [pc, #24]	; (8009b14 <__assert_func+0x34>)
 8009afa:	462b      	mov	r3, r5
 8009afc:	f000 f8e0 	bl	8009cc0 <fiprintf>
 8009b00:	f000 f997 	bl	8009e32 <abort>
 8009b04:	4b04      	ldr	r3, [pc, #16]	; (8009b18 <__assert_func+0x38>)
 8009b06:	461c      	mov	r4, r3
 8009b08:	e7f3      	b.n	8009af2 <__assert_func+0x12>
 8009b0a:	bf00      	nop
 8009b0c:	20000010 	.word	0x20000010
 8009b10:	0800a20d 	.word	0x0800a20d
 8009b14:	0800a21a 	.word	0x0800a21a
 8009b18:	0800a248 	.word	0x0800a248

08009b1c <_close_r>:
 8009b1c:	b538      	push	{r3, r4, r5, lr}
 8009b1e:	4d06      	ldr	r5, [pc, #24]	; (8009b38 <_close_r+0x1c>)
 8009b20:	2300      	movs	r3, #0
 8009b22:	4604      	mov	r4, r0
 8009b24:	4608      	mov	r0, r1
 8009b26:	602b      	str	r3, [r5, #0]
 8009b28:	f7f8 fcf7 	bl	800251a <_close>
 8009b2c:	1c43      	adds	r3, r0, #1
 8009b2e:	d102      	bne.n	8009b36 <_close_r+0x1a>
 8009b30:	682b      	ldr	r3, [r5, #0]
 8009b32:	b103      	cbz	r3, 8009b36 <_close_r+0x1a>
 8009b34:	6023      	str	r3, [r4, #0]
 8009b36:	bd38      	pop	{r3, r4, r5, pc}
 8009b38:	20008580 	.word	0x20008580

08009b3c <__sflush_r>:
 8009b3c:	898a      	ldrh	r2, [r1, #12]
 8009b3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b42:	4605      	mov	r5, r0
 8009b44:	0710      	lsls	r0, r2, #28
 8009b46:	460c      	mov	r4, r1
 8009b48:	d458      	bmi.n	8009bfc <__sflush_r+0xc0>
 8009b4a:	684b      	ldr	r3, [r1, #4]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	dc05      	bgt.n	8009b5c <__sflush_r+0x20>
 8009b50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	dc02      	bgt.n	8009b5c <__sflush_r+0x20>
 8009b56:	2000      	movs	r0, #0
 8009b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b5e:	2e00      	cmp	r6, #0
 8009b60:	d0f9      	beq.n	8009b56 <__sflush_r+0x1a>
 8009b62:	2300      	movs	r3, #0
 8009b64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b68:	682f      	ldr	r7, [r5, #0]
 8009b6a:	602b      	str	r3, [r5, #0]
 8009b6c:	d032      	beq.n	8009bd4 <__sflush_r+0x98>
 8009b6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b70:	89a3      	ldrh	r3, [r4, #12]
 8009b72:	075a      	lsls	r2, r3, #29
 8009b74:	d505      	bpl.n	8009b82 <__sflush_r+0x46>
 8009b76:	6863      	ldr	r3, [r4, #4]
 8009b78:	1ac0      	subs	r0, r0, r3
 8009b7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b7c:	b10b      	cbz	r3, 8009b82 <__sflush_r+0x46>
 8009b7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b80:	1ac0      	subs	r0, r0, r3
 8009b82:	2300      	movs	r3, #0
 8009b84:	4602      	mov	r2, r0
 8009b86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b88:	6a21      	ldr	r1, [r4, #32]
 8009b8a:	4628      	mov	r0, r5
 8009b8c:	47b0      	blx	r6
 8009b8e:	1c43      	adds	r3, r0, #1
 8009b90:	89a3      	ldrh	r3, [r4, #12]
 8009b92:	d106      	bne.n	8009ba2 <__sflush_r+0x66>
 8009b94:	6829      	ldr	r1, [r5, #0]
 8009b96:	291d      	cmp	r1, #29
 8009b98:	d82c      	bhi.n	8009bf4 <__sflush_r+0xb8>
 8009b9a:	4a2a      	ldr	r2, [pc, #168]	; (8009c44 <__sflush_r+0x108>)
 8009b9c:	40ca      	lsrs	r2, r1
 8009b9e:	07d6      	lsls	r6, r2, #31
 8009ba0:	d528      	bpl.n	8009bf4 <__sflush_r+0xb8>
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	6062      	str	r2, [r4, #4]
 8009ba6:	04d9      	lsls	r1, r3, #19
 8009ba8:	6922      	ldr	r2, [r4, #16]
 8009baa:	6022      	str	r2, [r4, #0]
 8009bac:	d504      	bpl.n	8009bb8 <__sflush_r+0x7c>
 8009bae:	1c42      	adds	r2, r0, #1
 8009bb0:	d101      	bne.n	8009bb6 <__sflush_r+0x7a>
 8009bb2:	682b      	ldr	r3, [r5, #0]
 8009bb4:	b903      	cbnz	r3, 8009bb8 <__sflush_r+0x7c>
 8009bb6:	6560      	str	r0, [r4, #84]	; 0x54
 8009bb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bba:	602f      	str	r7, [r5, #0]
 8009bbc:	2900      	cmp	r1, #0
 8009bbe:	d0ca      	beq.n	8009b56 <__sflush_r+0x1a>
 8009bc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bc4:	4299      	cmp	r1, r3
 8009bc6:	d002      	beq.n	8009bce <__sflush_r+0x92>
 8009bc8:	4628      	mov	r0, r5
 8009bca:	f7fd fcc5 	bl	8007558 <_free_r>
 8009bce:	2000      	movs	r0, #0
 8009bd0:	6360      	str	r0, [r4, #52]	; 0x34
 8009bd2:	e7c1      	b.n	8009b58 <__sflush_r+0x1c>
 8009bd4:	6a21      	ldr	r1, [r4, #32]
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	4628      	mov	r0, r5
 8009bda:	47b0      	blx	r6
 8009bdc:	1c41      	adds	r1, r0, #1
 8009bde:	d1c7      	bne.n	8009b70 <__sflush_r+0x34>
 8009be0:	682b      	ldr	r3, [r5, #0]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d0c4      	beq.n	8009b70 <__sflush_r+0x34>
 8009be6:	2b1d      	cmp	r3, #29
 8009be8:	d001      	beq.n	8009bee <__sflush_r+0xb2>
 8009bea:	2b16      	cmp	r3, #22
 8009bec:	d101      	bne.n	8009bf2 <__sflush_r+0xb6>
 8009bee:	602f      	str	r7, [r5, #0]
 8009bf0:	e7b1      	b.n	8009b56 <__sflush_r+0x1a>
 8009bf2:	89a3      	ldrh	r3, [r4, #12]
 8009bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bf8:	81a3      	strh	r3, [r4, #12]
 8009bfa:	e7ad      	b.n	8009b58 <__sflush_r+0x1c>
 8009bfc:	690f      	ldr	r7, [r1, #16]
 8009bfe:	2f00      	cmp	r7, #0
 8009c00:	d0a9      	beq.n	8009b56 <__sflush_r+0x1a>
 8009c02:	0793      	lsls	r3, r2, #30
 8009c04:	680e      	ldr	r6, [r1, #0]
 8009c06:	bf08      	it	eq
 8009c08:	694b      	ldreq	r3, [r1, #20]
 8009c0a:	600f      	str	r7, [r1, #0]
 8009c0c:	bf18      	it	ne
 8009c0e:	2300      	movne	r3, #0
 8009c10:	eba6 0807 	sub.w	r8, r6, r7
 8009c14:	608b      	str	r3, [r1, #8]
 8009c16:	f1b8 0f00 	cmp.w	r8, #0
 8009c1a:	dd9c      	ble.n	8009b56 <__sflush_r+0x1a>
 8009c1c:	6a21      	ldr	r1, [r4, #32]
 8009c1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009c20:	4643      	mov	r3, r8
 8009c22:	463a      	mov	r2, r7
 8009c24:	4628      	mov	r0, r5
 8009c26:	47b0      	blx	r6
 8009c28:	2800      	cmp	r0, #0
 8009c2a:	dc06      	bgt.n	8009c3a <__sflush_r+0xfe>
 8009c2c:	89a3      	ldrh	r3, [r4, #12]
 8009c2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c32:	81a3      	strh	r3, [r4, #12]
 8009c34:	f04f 30ff 	mov.w	r0, #4294967295
 8009c38:	e78e      	b.n	8009b58 <__sflush_r+0x1c>
 8009c3a:	4407      	add	r7, r0
 8009c3c:	eba8 0800 	sub.w	r8, r8, r0
 8009c40:	e7e9      	b.n	8009c16 <__sflush_r+0xda>
 8009c42:	bf00      	nop
 8009c44:	20400001 	.word	0x20400001

08009c48 <_fflush_r>:
 8009c48:	b538      	push	{r3, r4, r5, lr}
 8009c4a:	690b      	ldr	r3, [r1, #16]
 8009c4c:	4605      	mov	r5, r0
 8009c4e:	460c      	mov	r4, r1
 8009c50:	b913      	cbnz	r3, 8009c58 <_fflush_r+0x10>
 8009c52:	2500      	movs	r5, #0
 8009c54:	4628      	mov	r0, r5
 8009c56:	bd38      	pop	{r3, r4, r5, pc}
 8009c58:	b118      	cbz	r0, 8009c62 <_fflush_r+0x1a>
 8009c5a:	6983      	ldr	r3, [r0, #24]
 8009c5c:	b90b      	cbnz	r3, 8009c62 <_fflush_r+0x1a>
 8009c5e:	f7ff f887 	bl	8008d70 <__sinit>
 8009c62:	4b14      	ldr	r3, [pc, #80]	; (8009cb4 <_fflush_r+0x6c>)
 8009c64:	429c      	cmp	r4, r3
 8009c66:	d11b      	bne.n	8009ca0 <_fflush_r+0x58>
 8009c68:	686c      	ldr	r4, [r5, #4]
 8009c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d0ef      	beq.n	8009c52 <_fflush_r+0xa>
 8009c72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c74:	07d0      	lsls	r0, r2, #31
 8009c76:	d404      	bmi.n	8009c82 <_fflush_r+0x3a>
 8009c78:	0599      	lsls	r1, r3, #22
 8009c7a:	d402      	bmi.n	8009c82 <_fflush_r+0x3a>
 8009c7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c7e:	f7f9 f860 	bl	8002d42 <__retarget_lock_acquire_recursive>
 8009c82:	4628      	mov	r0, r5
 8009c84:	4621      	mov	r1, r4
 8009c86:	f7ff ff59 	bl	8009b3c <__sflush_r>
 8009c8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c8c:	07da      	lsls	r2, r3, #31
 8009c8e:	4605      	mov	r5, r0
 8009c90:	d4e0      	bmi.n	8009c54 <_fflush_r+0xc>
 8009c92:	89a3      	ldrh	r3, [r4, #12]
 8009c94:	059b      	lsls	r3, r3, #22
 8009c96:	d4dd      	bmi.n	8009c54 <_fflush_r+0xc>
 8009c98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c9a:	f7f9 f866 	bl	8002d6a <__retarget_lock_release_recursive>
 8009c9e:	e7d9      	b.n	8009c54 <_fflush_r+0xc>
 8009ca0:	4b05      	ldr	r3, [pc, #20]	; (8009cb8 <_fflush_r+0x70>)
 8009ca2:	429c      	cmp	r4, r3
 8009ca4:	d101      	bne.n	8009caa <_fflush_r+0x62>
 8009ca6:	68ac      	ldr	r4, [r5, #8]
 8009ca8:	e7df      	b.n	8009c6a <_fflush_r+0x22>
 8009caa:	4b04      	ldr	r3, [pc, #16]	; (8009cbc <_fflush_r+0x74>)
 8009cac:	429c      	cmp	r4, r3
 8009cae:	bf08      	it	eq
 8009cb0:	68ec      	ldreq	r4, [r5, #12]
 8009cb2:	e7da      	b.n	8009c6a <_fflush_r+0x22>
 8009cb4:	0800a05c 	.word	0x0800a05c
 8009cb8:	0800a07c 	.word	0x0800a07c
 8009cbc:	0800a03c 	.word	0x0800a03c

08009cc0 <fiprintf>:
 8009cc0:	b40e      	push	{r1, r2, r3}
 8009cc2:	b503      	push	{r0, r1, lr}
 8009cc4:	4601      	mov	r1, r0
 8009cc6:	ab03      	add	r3, sp, #12
 8009cc8:	4805      	ldr	r0, [pc, #20]	; (8009ce0 <fiprintf+0x20>)
 8009cca:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cce:	6800      	ldr	r0, [r0, #0]
 8009cd0:	9301      	str	r3, [sp, #4]
 8009cd2:	f7ff fcbf 	bl	8009654 <_vfiprintf_r>
 8009cd6:	b002      	add	sp, #8
 8009cd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cdc:	b003      	add	sp, #12
 8009cde:	4770      	bx	lr
 8009ce0:	20000010 	.word	0x20000010

08009ce4 <_lseek_r>:
 8009ce4:	b538      	push	{r3, r4, r5, lr}
 8009ce6:	4d07      	ldr	r5, [pc, #28]	; (8009d04 <_lseek_r+0x20>)
 8009ce8:	4604      	mov	r4, r0
 8009cea:	4608      	mov	r0, r1
 8009cec:	4611      	mov	r1, r2
 8009cee:	2200      	movs	r2, #0
 8009cf0:	602a      	str	r2, [r5, #0]
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	f7f8 fc38 	bl	8002568 <_lseek>
 8009cf8:	1c43      	adds	r3, r0, #1
 8009cfa:	d102      	bne.n	8009d02 <_lseek_r+0x1e>
 8009cfc:	682b      	ldr	r3, [r5, #0]
 8009cfe:	b103      	cbz	r3, 8009d02 <_lseek_r+0x1e>
 8009d00:	6023      	str	r3, [r4, #0]
 8009d02:	bd38      	pop	{r3, r4, r5, pc}
 8009d04:	20008580 	.word	0x20008580

08009d08 <__swhatbuf_r>:
 8009d08:	b570      	push	{r4, r5, r6, lr}
 8009d0a:	460e      	mov	r6, r1
 8009d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d10:	2900      	cmp	r1, #0
 8009d12:	b096      	sub	sp, #88	; 0x58
 8009d14:	4614      	mov	r4, r2
 8009d16:	461d      	mov	r5, r3
 8009d18:	da07      	bge.n	8009d2a <__swhatbuf_r+0x22>
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	602b      	str	r3, [r5, #0]
 8009d1e:	89b3      	ldrh	r3, [r6, #12]
 8009d20:	061a      	lsls	r2, r3, #24
 8009d22:	d410      	bmi.n	8009d46 <__swhatbuf_r+0x3e>
 8009d24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d28:	e00e      	b.n	8009d48 <__swhatbuf_r+0x40>
 8009d2a:	466a      	mov	r2, sp
 8009d2c:	f000 f888 	bl	8009e40 <_fstat_r>
 8009d30:	2800      	cmp	r0, #0
 8009d32:	dbf2      	blt.n	8009d1a <__swhatbuf_r+0x12>
 8009d34:	9a01      	ldr	r2, [sp, #4]
 8009d36:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d3a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d3e:	425a      	negs	r2, r3
 8009d40:	415a      	adcs	r2, r3
 8009d42:	602a      	str	r2, [r5, #0]
 8009d44:	e7ee      	b.n	8009d24 <__swhatbuf_r+0x1c>
 8009d46:	2340      	movs	r3, #64	; 0x40
 8009d48:	2000      	movs	r0, #0
 8009d4a:	6023      	str	r3, [r4, #0]
 8009d4c:	b016      	add	sp, #88	; 0x58
 8009d4e:	bd70      	pop	{r4, r5, r6, pc}

08009d50 <__smakebuf_r>:
 8009d50:	898b      	ldrh	r3, [r1, #12]
 8009d52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d54:	079d      	lsls	r5, r3, #30
 8009d56:	4606      	mov	r6, r0
 8009d58:	460c      	mov	r4, r1
 8009d5a:	d507      	bpl.n	8009d6c <__smakebuf_r+0x1c>
 8009d5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d60:	6023      	str	r3, [r4, #0]
 8009d62:	6123      	str	r3, [r4, #16]
 8009d64:	2301      	movs	r3, #1
 8009d66:	6163      	str	r3, [r4, #20]
 8009d68:	b002      	add	sp, #8
 8009d6a:	bd70      	pop	{r4, r5, r6, pc}
 8009d6c:	ab01      	add	r3, sp, #4
 8009d6e:	466a      	mov	r2, sp
 8009d70:	f7ff ffca 	bl	8009d08 <__swhatbuf_r>
 8009d74:	9900      	ldr	r1, [sp, #0]
 8009d76:	4605      	mov	r5, r0
 8009d78:	4630      	mov	r0, r6
 8009d7a:	f7fd fc3d 	bl	80075f8 <_malloc_r>
 8009d7e:	b948      	cbnz	r0, 8009d94 <__smakebuf_r+0x44>
 8009d80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d84:	059a      	lsls	r2, r3, #22
 8009d86:	d4ef      	bmi.n	8009d68 <__smakebuf_r+0x18>
 8009d88:	f023 0303 	bic.w	r3, r3, #3
 8009d8c:	f043 0302 	orr.w	r3, r3, #2
 8009d90:	81a3      	strh	r3, [r4, #12]
 8009d92:	e7e3      	b.n	8009d5c <__smakebuf_r+0xc>
 8009d94:	4b0d      	ldr	r3, [pc, #52]	; (8009dcc <__smakebuf_r+0x7c>)
 8009d96:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d98:	89a3      	ldrh	r3, [r4, #12]
 8009d9a:	6020      	str	r0, [r4, #0]
 8009d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009da0:	81a3      	strh	r3, [r4, #12]
 8009da2:	9b00      	ldr	r3, [sp, #0]
 8009da4:	6163      	str	r3, [r4, #20]
 8009da6:	9b01      	ldr	r3, [sp, #4]
 8009da8:	6120      	str	r0, [r4, #16]
 8009daa:	b15b      	cbz	r3, 8009dc4 <__smakebuf_r+0x74>
 8009dac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009db0:	4630      	mov	r0, r6
 8009db2:	f000 f857 	bl	8009e64 <_isatty_r>
 8009db6:	b128      	cbz	r0, 8009dc4 <__smakebuf_r+0x74>
 8009db8:	89a3      	ldrh	r3, [r4, #12]
 8009dba:	f023 0303 	bic.w	r3, r3, #3
 8009dbe:	f043 0301 	orr.w	r3, r3, #1
 8009dc2:	81a3      	strh	r3, [r4, #12]
 8009dc4:	89a0      	ldrh	r0, [r4, #12]
 8009dc6:	4305      	orrs	r5, r0
 8009dc8:	81a5      	strh	r5, [r4, #12]
 8009dca:	e7cd      	b.n	8009d68 <__smakebuf_r+0x18>
 8009dcc:	08008d09 	.word	0x08008d09

08009dd0 <__ascii_mbtowc>:
 8009dd0:	b082      	sub	sp, #8
 8009dd2:	b901      	cbnz	r1, 8009dd6 <__ascii_mbtowc+0x6>
 8009dd4:	a901      	add	r1, sp, #4
 8009dd6:	b142      	cbz	r2, 8009dea <__ascii_mbtowc+0x1a>
 8009dd8:	b14b      	cbz	r3, 8009dee <__ascii_mbtowc+0x1e>
 8009dda:	7813      	ldrb	r3, [r2, #0]
 8009ddc:	600b      	str	r3, [r1, #0]
 8009dde:	7812      	ldrb	r2, [r2, #0]
 8009de0:	1e10      	subs	r0, r2, #0
 8009de2:	bf18      	it	ne
 8009de4:	2001      	movne	r0, #1
 8009de6:	b002      	add	sp, #8
 8009de8:	4770      	bx	lr
 8009dea:	4610      	mov	r0, r2
 8009dec:	e7fb      	b.n	8009de6 <__ascii_mbtowc+0x16>
 8009dee:	f06f 0001 	mvn.w	r0, #1
 8009df2:	e7f8      	b.n	8009de6 <__ascii_mbtowc+0x16>

08009df4 <_read_r>:
 8009df4:	b538      	push	{r3, r4, r5, lr}
 8009df6:	4d07      	ldr	r5, [pc, #28]	; (8009e14 <_read_r+0x20>)
 8009df8:	4604      	mov	r4, r0
 8009dfa:	4608      	mov	r0, r1
 8009dfc:	4611      	mov	r1, r2
 8009dfe:	2200      	movs	r2, #0
 8009e00:	602a      	str	r2, [r5, #0]
 8009e02:	461a      	mov	r2, r3
 8009e04:	f7f8 fb50 	bl	80024a8 <_read>
 8009e08:	1c43      	adds	r3, r0, #1
 8009e0a:	d102      	bne.n	8009e12 <_read_r+0x1e>
 8009e0c:	682b      	ldr	r3, [r5, #0]
 8009e0e:	b103      	cbz	r3, 8009e12 <_read_r+0x1e>
 8009e10:	6023      	str	r3, [r4, #0]
 8009e12:	bd38      	pop	{r3, r4, r5, pc}
 8009e14:	20008580 	.word	0x20008580

08009e18 <__ascii_wctomb>:
 8009e18:	b149      	cbz	r1, 8009e2e <__ascii_wctomb+0x16>
 8009e1a:	2aff      	cmp	r2, #255	; 0xff
 8009e1c:	bf85      	ittet	hi
 8009e1e:	238a      	movhi	r3, #138	; 0x8a
 8009e20:	6003      	strhi	r3, [r0, #0]
 8009e22:	700a      	strbls	r2, [r1, #0]
 8009e24:	f04f 30ff 	movhi.w	r0, #4294967295
 8009e28:	bf98      	it	ls
 8009e2a:	2001      	movls	r0, #1
 8009e2c:	4770      	bx	lr
 8009e2e:	4608      	mov	r0, r1
 8009e30:	4770      	bx	lr

08009e32 <abort>:
 8009e32:	b508      	push	{r3, lr}
 8009e34:	2006      	movs	r0, #6
 8009e36:	f000 f84d 	bl	8009ed4 <raise>
 8009e3a:	2001      	movs	r0, #1
 8009e3c:	f7f8 fb2a 	bl	8002494 <_exit>

08009e40 <_fstat_r>:
 8009e40:	b538      	push	{r3, r4, r5, lr}
 8009e42:	4d07      	ldr	r5, [pc, #28]	; (8009e60 <_fstat_r+0x20>)
 8009e44:	2300      	movs	r3, #0
 8009e46:	4604      	mov	r4, r0
 8009e48:	4608      	mov	r0, r1
 8009e4a:	4611      	mov	r1, r2
 8009e4c:	602b      	str	r3, [r5, #0]
 8009e4e:	f7f8 fb70 	bl	8002532 <_fstat>
 8009e52:	1c43      	adds	r3, r0, #1
 8009e54:	d102      	bne.n	8009e5c <_fstat_r+0x1c>
 8009e56:	682b      	ldr	r3, [r5, #0]
 8009e58:	b103      	cbz	r3, 8009e5c <_fstat_r+0x1c>
 8009e5a:	6023      	str	r3, [r4, #0]
 8009e5c:	bd38      	pop	{r3, r4, r5, pc}
 8009e5e:	bf00      	nop
 8009e60:	20008580 	.word	0x20008580

08009e64 <_isatty_r>:
 8009e64:	b538      	push	{r3, r4, r5, lr}
 8009e66:	4d06      	ldr	r5, [pc, #24]	; (8009e80 <_isatty_r+0x1c>)
 8009e68:	2300      	movs	r3, #0
 8009e6a:	4604      	mov	r4, r0
 8009e6c:	4608      	mov	r0, r1
 8009e6e:	602b      	str	r3, [r5, #0]
 8009e70:	f7f8 fb6f 	bl	8002552 <_isatty>
 8009e74:	1c43      	adds	r3, r0, #1
 8009e76:	d102      	bne.n	8009e7e <_isatty_r+0x1a>
 8009e78:	682b      	ldr	r3, [r5, #0]
 8009e7a:	b103      	cbz	r3, 8009e7e <_isatty_r+0x1a>
 8009e7c:	6023      	str	r3, [r4, #0]
 8009e7e:	bd38      	pop	{r3, r4, r5, pc}
 8009e80:	20008580 	.word	0x20008580

08009e84 <_raise_r>:
 8009e84:	291f      	cmp	r1, #31
 8009e86:	b538      	push	{r3, r4, r5, lr}
 8009e88:	4604      	mov	r4, r0
 8009e8a:	460d      	mov	r5, r1
 8009e8c:	d904      	bls.n	8009e98 <_raise_r+0x14>
 8009e8e:	2316      	movs	r3, #22
 8009e90:	6003      	str	r3, [r0, #0]
 8009e92:	f04f 30ff 	mov.w	r0, #4294967295
 8009e96:	bd38      	pop	{r3, r4, r5, pc}
 8009e98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009e9a:	b112      	cbz	r2, 8009ea2 <_raise_r+0x1e>
 8009e9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ea0:	b94b      	cbnz	r3, 8009eb6 <_raise_r+0x32>
 8009ea2:	4620      	mov	r0, r4
 8009ea4:	f000 f830 	bl	8009f08 <_getpid_r>
 8009ea8:	462a      	mov	r2, r5
 8009eaa:	4601      	mov	r1, r0
 8009eac:	4620      	mov	r0, r4
 8009eae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009eb2:	f000 b817 	b.w	8009ee4 <_kill_r>
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	d00a      	beq.n	8009ed0 <_raise_r+0x4c>
 8009eba:	1c59      	adds	r1, r3, #1
 8009ebc:	d103      	bne.n	8009ec6 <_raise_r+0x42>
 8009ebe:	2316      	movs	r3, #22
 8009ec0:	6003      	str	r3, [r0, #0]
 8009ec2:	2001      	movs	r0, #1
 8009ec4:	e7e7      	b.n	8009e96 <_raise_r+0x12>
 8009ec6:	2400      	movs	r4, #0
 8009ec8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009ecc:	4628      	mov	r0, r5
 8009ece:	4798      	blx	r3
 8009ed0:	2000      	movs	r0, #0
 8009ed2:	e7e0      	b.n	8009e96 <_raise_r+0x12>

08009ed4 <raise>:
 8009ed4:	4b02      	ldr	r3, [pc, #8]	; (8009ee0 <raise+0xc>)
 8009ed6:	4601      	mov	r1, r0
 8009ed8:	6818      	ldr	r0, [r3, #0]
 8009eda:	f7ff bfd3 	b.w	8009e84 <_raise_r>
 8009ede:	bf00      	nop
 8009ee0:	20000010 	.word	0x20000010

08009ee4 <_kill_r>:
 8009ee4:	b538      	push	{r3, r4, r5, lr}
 8009ee6:	4d07      	ldr	r5, [pc, #28]	; (8009f04 <_kill_r+0x20>)
 8009ee8:	2300      	movs	r3, #0
 8009eea:	4604      	mov	r4, r0
 8009eec:	4608      	mov	r0, r1
 8009eee:	4611      	mov	r1, r2
 8009ef0:	602b      	str	r3, [r5, #0]
 8009ef2:	f7f8 fabf 	bl	8002474 <_kill>
 8009ef6:	1c43      	adds	r3, r0, #1
 8009ef8:	d102      	bne.n	8009f00 <_kill_r+0x1c>
 8009efa:	682b      	ldr	r3, [r5, #0]
 8009efc:	b103      	cbz	r3, 8009f00 <_kill_r+0x1c>
 8009efe:	6023      	str	r3, [r4, #0]
 8009f00:	bd38      	pop	{r3, r4, r5, pc}
 8009f02:	bf00      	nop
 8009f04:	20008580 	.word	0x20008580

08009f08 <_getpid_r>:
 8009f08:	f7f8 baac 	b.w	8002464 <_getpid>

08009f0c <_init>:
 8009f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f0e:	bf00      	nop
 8009f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f12:	bc08      	pop	{r3}
 8009f14:	469e      	mov	lr, r3
 8009f16:	4770      	bx	lr

08009f18 <_fini>:
 8009f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1a:	bf00      	nop
 8009f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f1e:	bc08      	pop	{r3}
 8009f20:	469e      	mov	lr, r3
 8009f22:	4770      	bx	lr
